/*
** ###################################################################
**     Processors:          MIMX8MQ6CVAHZ
**                          MIMX8MQ6CZKHZ
**                          MIMX8MQ6DVAJZ
**                          MIMX8MQ6DZKJZ
**
**     Compilers:           Keil ARM C/C++ Compiler
**                          GNU C Compiler
**                          IAR ANSI C/C++ Compiler for ARM
**
**     Reference manual:    IMX8MQRM, Rev. C, Jul. 2017
**     Version:             rev. 3.0, 2017-07-19
**     Build:               b171020
**
**     Abstract:
**         CMSIS Peripheral Access Layer for MIMX8MQ6_cm4
**
**     The Clear BSD License
**     Copyright 2016 Freescale Semiconductor, Inc.
**     Copyright 2016-2017 NXP
**     All rights reserved.
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted (subject to the limitations in the disclaimer below) provided that
**     the following conditions are met:
**
**     1. Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**
**     2. Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**
**     3. Neither the name of the copyright holder nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**
**     NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
**     Revisions:
**     - rev. 1.0 (2017-01-10)
**         Initial version.
**     - rev. 2.0 (2017-04-27)
**         Rev.B Header EAR1
**     - rev. 3.0 (2017-07-19)
**         Rev.C Header EAR2
**
** ###################################################################
*/

/*!
 * @file MIMX8MQ6_cm4.h
 * @version 3.0
 * @date 2017-07-19
 * @brief CMSIS Peripheral Access Layer for MIMX8MQ6_cm4
 *
 * CMSIS Peripheral Access Layer for MIMX8MQ6_cm4
 */

#ifndef _MIMX8MQ6_CM4_H_
#define _MIMX8MQ6_CM4_H_                         /**< Symbol preventing repeated inclusion */

/** Memory map major version (memory maps with equal major version number are
 * compatible) */
#define MCU_MEM_MAP_VERSION 0x0300U
/** Memory map minor version */
#define MCU_MEM_MAP_VERSION_MINOR 0x0000U


/* ----------------------------------------------------------------------------
   -- Interrupt vector numbers
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Interrupt_vector_numbers Interrupt vector numbers
 * @{
 */

/** Interrupt Number Definitions */
#define NUMBER_OF_INT_VECTORS 144                /**< Number of interrupts in the Vector table */

typedef enum IRQn {
  /* Auxiliary constants */
  NotAvail_IRQn                = -128,             /**< Not available device specific interrupt */

  /* Core interrupts */
  NonMaskableInt_IRQn          = -14,              /**< Non Maskable Interrupt */
  HardFault_IRQn               = -13,              /**< Cortex-M4 SV Hard Fault Interrupt */
  MemoryManagement_IRQn        = -12,              /**< Cortex-M4 Memory Management Interrupt */
  BusFault_IRQn                = -11,              /**< Cortex-M4 Bus Fault Interrupt */
  UsageFault_IRQn              = -10,              /**< Cortex-M4 Usage Fault Interrupt */
  SVCall_IRQn                  = -5,               /**< Cortex-M4 SV Call Interrupt */
  DebugMonitor_IRQn            = -4,               /**< Cortex-M4 Debug Monitor Interrupt */
  PendSV_IRQn                  = -2,               /**< Cortex-M4 Pend SV Interrupt */
  SysTick_IRQn                 = -1,               /**< Cortex-M4 System Tick Interrupt */

  /* Device specific interrupts */
  GPR_IRQ_IRQn                 = 0,                /**< GPR Interrupt. Used to notify cores on exception condition while boot. */
  DAP_IRQn                     = 1,                /**< DAP Interrupt */
  SDMA1_IRQn                   = 2,                /**< AND of all 48 SDMA interrupts (events) from all the channels */
  GPU_IRQn                     = 3,                /**< GPU Interrupt */
  SNVS_IRQn                    = 4,                /**< ON-OFF button press shorter than 5 seconds (pulse event) */
  LCDIF_IRQn                   = 5,                /**< LCDIF Sync Interrupt */
  SPDIF1_IRQn                  = 6,                /**< SPDIF1 Interrupt */
  H264_IRQn                    = 7,                /**< h264 Decoder Interrupt */
  VPU_IRQn                     = 8,                /**< VPU DMA Interrupt */
  QOS_IRQn                     = 9,                /**< QOS interrupt */
  WDOG3_IRQn                   = 10,               /**< Watchdog Timer reset */
  HS0_IRQn                     = 11,               /**< HS Interrupt Request 0 */
  APBHDMA_IRQn                 = 12,               /**< GPMI operation channel 0 description complete interrupt */
  SPDIF2_IRQn                  = 13,               /**< SPDIF2 Interrupt */
  BCH_IRQn                     = 14,               /**< BCH operation complete interrupt */
  GPMI_IRQn                    = 15,               /**< GPMI operation TIMEOUT ERROR interrupt */
  Reserved32_IRQn              = 16,               /**< reserved interrupt */
  Reserved33_IRQn              = 17,               /**< reserved interrupt */
  Reserved34_IRQn              = 18,               /**< reserved interrupt */
  SNVS_Consolidated_IRQn       = 19,               /**< SRTC Consolidated Interrupt. Non TZ. */
  SNVS_Security_IRQn           = 20,               /**< SRTC Security Interrupt. TZ. */
  CSU_IRQn                     = 21,               /**< CSU Interrupt Request. Indicates to the processor that one or more alarm inputs were asserted. */
  USDHC1_IRQn                  = 22,               /**< uSDHC1 Enhanced SDHC Interrupt Request */
  USDHC2_IRQn                  = 23,               /**< uSDHC2 Enhanced SDHC Interrupt Request */
  DDC_IRQn                     = 24,               /**< Dollby Display Interrupt Request */
  HDMI_IRQn                    = 25,               /**< HDMI2.0 TX interrupt */
  UART1_IRQn                   = 26,               /**< UART-1 ORed interrupt */
  UART2_IRQn                   = 27,               /**< UART-2 ORed interrupt */
  UART3_IRQn                   = 28,               /**< UART-3 ORed interrupt */
  UART4_IRQn                   = 29,               /**< UART-4 ORed interrupt */
  VP9_IRQn                     = 30,               /**< VP9 Decoder interrupt */
  ECSPI1_IRQn                  = 31,               /**< ECSPI1 interrupt request line to the core. */
  ECSPI2_IRQn                  = 32,               /**< ECSPI2 interrupt request line to the core. */
  ECSPI3_IRQn                  = 33,               /**< ECSPI3 interrupt request line to the core. */
  MIPI_DSI_IRQn                = 34,               /**< DSI Interrupt */
  I2C1_IRQn                    = 35,               /**< I2C-1 Interrupt */
  I2C2_IRQn                    = 36,               /**< I2C-2 Interrupt */
  I2C3_IRQn                    = 37,               /**< I2C-3 Interrupt */
  I2C4_IRQn                    = 38,               /**< I2C-4 Interrupt */
  RDC_IRQn                     = 39,               /**< RDC interrupt */
  USB1_IRQn                    = 40,               /**< USB1 Interrupt */
  USB2_IRQn                    = 41,               /**< USB1 Interrupt */
  CSI1_IRQn                    = 42,               /**< CSI1 interrupt */
  CSI2_IRQn                    = 43,               /**< CSI2 interrupt */
  MIPI_CSI1_IRQn               = 44,               /**< MIPI-CSI-1 Interrupt */
  MIPI_CSI2_IRQn               = 45,               /**< MIPI-CSI-2 Interrupt */
  GPT6_IRQn                    = 46,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  SCTR_IRQ0_IRQn               = 47,               /**< ISO7816IP Interrupt 0 */
  SCTR_IRQ1_IRQn               = 48,               /**< ISO7816IP Interrupt 1 */
  TEMPMON_LOW_IRQn             = 49,               /**< TempSensor (Temperature low alarm). */
  I2S3_IRQn                    = 50,               /**< SAI3 Receive / Transmit Interrupt */
  GPT5_IRQn                    = 51,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  GPT4_IRQn                    = 52,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  GPT3_IRQn                    = 53,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  GPT2_IRQn                    = 54,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  GPT1_IRQn                    = 55,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  GPIO1_INT7_IRQn              = 56,               /**< Active HIGH Interrupt from INT7 from GPIO */
  GPIO1_INT6_IRQn              = 57,               /**< Active HIGH Interrupt from INT6 from GPIO */
  GPIO1_INT5_IRQn              = 58,               /**< Active HIGH Interrupt from INT5 from GPIO */
  GPIO1_INT4_IRQn              = 59,               /**< Active HIGH Interrupt from INT4 from GPIO */
  GPIO1_INT3_IRQn              = 60,               /**< Active HIGH Interrupt from INT3 from GPIO */
  GPIO1_INT2_IRQn              = 61,               /**< Active HIGH Interrupt from INT2 from GPIO */
  GPIO1_INT1_IRQn              = 62,               /**< Active HIGH Interrupt from INT1 from GPIO */
  GPIO1_INT0_IRQn              = 63,               /**< Active HIGH Interrupt from INT0 from GPIO */
  GPIO1_Combined_0_15_IRQn     = 64,               /**< Combined interrupt indication for GPIO1 signal 0 throughout 15 */
  GPIO1_Combined_16_31_IRQn    = 65,               /**< Combined interrupt indication for GPIO1 signal 16 throughout 31 */
  GPIO2_Combined_0_15_IRQn     = 66,               /**< Combined interrupt indication for GPIO2 signal 0 throughout 15 */
  GPIO2_Combined_16_31_IRQn    = 67,               /**< Combined interrupt indication for GPIO2 signal 16 throughout 31 */
  GPIO3_Combined_0_15_IRQn     = 68,               /**< Combined interrupt indication for GPIO3 signal 0 throughout 15 */
  GPIO3_Combined_16_31_IRQn    = 69,               /**< Combined interrupt indication for GPIO3 signal 16 throughout 31 */
  GPIO4_Combined_0_15_IRQn     = 70,               /**< Combined interrupt indication for GPIO4 signal 0 throughout 15 */
  GPIO4_Combined_16_31_IRQn    = 71,               /**< Combined interrupt indication for GPIO4 signal 16 throughout 31 */
  GPIO5_Combined_0_15_IRQn     = 72,               /**< Combined interrupt indication for GPIO5 signal 0 throughout 15 */
  GPIO5_Combined_16_31_IRQn    = 73,               /**< Combined interrupt indication for GPIO5 signal 16 throughout 31 */
  PCIE_CTRL2_IRQ0_IRQn         = 74,               /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  PCIE_CTRL2_IRQ1_IRQn         = 75,               /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  PCIE_CTRL2_IRQ2_IRQn         = 76,               /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  PCIE_CTRL2_IRQ3_IRQn         = 77,               /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  WDOG1_IRQn                   = 78,               /**< Watchdog Timer reset */
  WDOG2_IRQn                   = 79,               /**< Watchdog Timer reset */
  PCIE_CTRL2_IRQn              = 80,               /**< Channels [63:32] interrupts requests */
  PWM1_IRQn                    = 81,               /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  PWM2_IRQn                    = 82,               /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  PWM3_IRQn                    = 83,               /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  PWM4_IRQn                    = 84,               /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  CCM1_IRQn                    = 85,               /**< CCM, Interrupt Request 1 */
  CCM2_IRQn                    = 86,               /**< CCM, Interrupt Request 2 */
  GPC_IRQn                     = 87,               /**< GPC Interrupt Request 1 */
  MU_A53_IRQn                  = 88,               /**< Interrupt to A53 */
  SRC_IRQn                     = 89,               /**< SRC interrupt request */
  I2S5_IRQn                    = 90,               /**< SAI5 Receive / Transmit Interrupt */
  RTIC_IRQn                    = 91,               /**< RTIC Interrupt */
  CPU_PerformanceUnit_IRQn     = 92,               /**< Performance Unit Interrupts from Cheetah (interrnally: PMUIRQ[n] */
  CPU_CTI_Trigger_IRQn         = 93,               /**< CTI trigger outputs (internal: nCTIIRQ[n] */
  SRC_Combined_IRQn            = 94,               /**< Combined CPU wdog interrupts (4x) out of SRC. */
  I2S1_IRQn                    = 95,               /**< SAI1 Receive / Transmit Interrupt */
  I2S2_IRQn                    = 96,               /**< SAI2 Receive / Transmit Interrupt */
  MU_M4_IRQn                   = 97,               /**< Interrupt to M4 */
  Reserved114_IRQn             = 98,               /**< Reserved */
  Reserved115_IRQn             = 99,               /**< Reserved */
  I2S4_IRQn                    = 100,              /**< SAI4 Receive / Transmit Interrupt */
  Reserved117_IRQn             = 101,              /**< Reserved */
  Reserved118_IRQn             = 102,              /**< Reserved */
  SDMA2_IRQn                   = 103,              /**< AND of all 48 SDMA interrupts (events) from all the channels */
  Reserved120_IRQn             = 104,              /**< Reserved */
  CAAM_Job_Ring0_IRQn          = 105,              /**< CAAM interrupt queue for JQ */
  CAAM_Job_Ring1_IRQn          = 106,              /**< CAAM interrupt queue for JQ */
  QSPI_IRQn                    = 107,              /**< QSPI Interrupt */
  TZASC1_IRQn                  = 108,              /**< TZASC (PL380) interrupt */
  Reserved125_IRQn             = 109,              /**< Reserved */
  Reserved126_IRQn             = 110,              /**< Reserved */
  Reserved127_IRQn             = 111,              /**< Reserved */
  PERFMON1_IRQn                = 112,              /**< General Interrupt */
  PERFMON2_IRQn                = 113,              /**< General Interrupt */
  CAAM_Job_Ring2_IRQn          = 114,              /**< CAAM interrupt queue for JQ */
  CAAM_ERROR_IRQn              = 115,              /**< Recoverable error interrupt */
  HS1_IRQn                     = 116,              /**< HS Interrupt Request 1 */
  HEVC_IRQn                    = 117,              /**< HEVC interrupt */
  ENET_MAC0_Rx_Tx_Done1_IRQn   = 118,              /**< MAC 0 Receive / Trasmit Frame / Buffer Done */
  ENET_MAC0_Rx_Tx_Done2_IRQn   = 119,              /**< MAC 0 Receive / Trasmit Frame / Buffer Done */
  ENET_IRQn                    = 120,              /**< MAC 0 IRQ */
  ENET_1588_IRQn               = 121,              /**< MAC 0 1588 Timer Interrupt – synchronous */
  PCIE_CTRL1_IRQ0_IRQn         = 122,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  PCIE_CTRL1_IRQ1_IRQn         = 123,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  PCIE_CTRL1_IRQ2_IRQn         = 124,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  PCIE_CTRL1_IRQ3_IRQn         = 125,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  Reserved142_IRQn             = 126,              /**< Reserved */
  PCIE_CTRL1_IRQn              = 127               /**< Channels [63:32] interrupts requests */
} IRQn_Type;

/*!
 * @}
 */ /* end of group Interrupt_vector_numbers */


/* ----------------------------------------------------------------------------
   -- Cortex M4 Core Configuration
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Cortex_Core_Configuration Cortex M4 Core Configuration
 * @{
 */

#define __MPU_PRESENT                  1         /**< Defines if an MPU is present or not */
#define __NVIC_PRIO_BITS               4         /**< Number of priority bits implemented in the NVIC */
#define __Vendor_SysTickConfig         0         /**< Vendor specific implementation of SysTickConfig is defined */
#define __FPU_PRESENT                  1         /**< Defines if an FPU is present or not */

#include "core_cm4.h"                  /* Core Peripheral Access Layer */
#include "system_MIMX8MQ6_cm4.h"       /* Device specific configuration file */

/*!
 * @}
 */ /* end of group Cortex_Core_Configuration */


/* ----------------------------------------------------------------------------
   -- Mapping Information
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Mapping_Information Mapping Information
 * @{
 */

/** Mapping Information */
/*!
 * @addtogroup iomuxc_pads
 * @{ */

/*******************************************************************************
 * Definitions
*******************************************************************************/

/*!
 * @brief Enumeration for the IOMUXC SW_MUX_CTL_PAD
 *
 * Defines the enumeration for the IOMUXC SW_MUX_CTL_PAD collections.
 */
typedef enum _iomuxc_sw_mux_ctl_pad
{
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00 = 0U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01 = 1U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02 = 2U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 = 3U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04 = 4U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05 = 5U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06 = 6U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07 = 7U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08 = 8U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09 = 9U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10 = 10U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11 = 11U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12 = 12U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13 = 13U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO14 = 14U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO15 = 15U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_MDC = 16U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_MDIO = 17U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD3 = 18U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD2 = 19U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD1 = 20U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD0 = 21U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TX_CTL = 22U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TXC = 23U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RX_CTL = 24U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RXC = 25U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD0 = 26U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD1 = 27U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD2 = 28U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD3 = 29U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_CLK  = 30U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_CMD  = 31U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA0 = 32U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA1 = 33U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA2 = 34U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA3 = 35U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA4 = 36U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA5 = 37U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA6 = 38U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA7 = 39U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_RESET_B = 40U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_STROBE = 41U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_CD_B = 42U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_CLK  = 43U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_CMD  = 44U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA0 = 45U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA1 = 46U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA2 = 47U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA3 = 48U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_RESET_B = 49U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_WP   = 50U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_ALE = 51U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B = 52U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B = 53U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE2_B = 54U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE3_B = 55U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CLE = 56U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA00 = 57U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA01 = 58U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA02 = 59U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA03 = 60U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA04 = 61U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA05 = 62U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA06 = 63U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA07 = 64U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DQS = 65U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_RE_B = 66U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_READY_B = 67U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_WE_B = 68U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_WP_B = 69U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXFS = 70U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXC = 71U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD0 = 72U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD1 = 73U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD2 = 74U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD3 = 75U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_MCLK = 76U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXFS = 77U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXC = 78U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD0 = 79U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD1 = 80U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD2 = 81U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD3 = 82U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD4 = 83U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD5 = 84U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD6 = 85U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD7 = 86U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXFS = 87U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXC = 88U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD0 = 89U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD1 = 90U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD2 = 91U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD3 = 92U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD4 = 93U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD5 = 94U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD6 = 95U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD7 = 96U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_MCLK = 97U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_RXFS = 98U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_RXC = 99U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_RXD0 = 100U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_TXFS = 101U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_TXC = 102U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_TXD0 = 103U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_MCLK = 104U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_RXFS = 105U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_RXC = 106U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_RXD = 107U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_TXFS = 108U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_TXC = 109U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_TXD = 110U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_MCLK = 111U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SPDIF_TX = 112U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SPDIF_RX = 113U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SPDIF_EXT_CLK = 114U,   /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_SCLK = 115U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_MOSI = 116U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_MISO = 117U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_SS0 = 118U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_SCLK = 119U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_MOSI = 120U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_MISO = 121U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_SS0 = 122U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C1_SCL = 123U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C1_SDA = 124U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C2_SCL = 125U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C2_SDA = 126U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C3_SCL = 127U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C3_SDA = 128U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C4_SCL = 129U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C4_SDA = 130U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART1_RXD = 131U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART1_TXD = 132U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART2_RXD = 133U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART2_TXD = 134U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART3_RXD = 135U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART3_TXD = 136U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART4_RXD = 137U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART4_TXD = 138U,       /**< IOMUXC SW_MUX_CTL_PAD index */
} iomuxc_sw_mux_ctl_pad_t;

/*!
 * @addtogroup iomuxc_pads
 * @{ */

/*******************************************************************************
 * Definitions
*******************************************************************************/

/*!
 * @brief Enumeration for the IOMUXC SW_PAD_CTL_PAD
 *
 * Defines the enumeration for the IOMUXC SW_PAD_CTL_PAD collections.
 */
typedef enum _iomuxc_sw_pad_ctl_pad
{
    kIOMUXC_SW_PAD_CTL_PAD_TEST_MODE = 0U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_BOOT_MODE0 = 1U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_BOOT_MODE1 = 2U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_MOD = 3U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B = 4U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TDI = 5U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TMS = 6U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TCK = 7U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TDO = 8U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_RTC      = 9U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_PMIC_STBY_REQ = 10U,    /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_PMIC_ON_REQ = 11U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ONOFF    = 12U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_POR_B    = 13U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_RTC_RESET_B = 14U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00 = 15U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01 = 16U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02 = 17U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 = 18U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04 = 19U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05 = 20U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06 = 21U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07 = 22U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08 = 23U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09 = 24U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10 = 25U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11 = 26U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12 = 27U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13 = 28U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO14 = 29U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO15 = 30U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_MDC = 31U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_MDIO = 32U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD3 = 33U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD2 = 34U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD1 = 35U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD0 = 36U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TX_CTL = 37U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TXC = 38U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RX_CTL = 39U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RXC = 40U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD0 = 41U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD1 = 42U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD2 = 43U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD3 = 44U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_CLK  = 45U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_CMD  = 46U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA0 = 47U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA1 = 48U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA2 = 49U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA3 = 50U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA4 = 51U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA5 = 52U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA6 = 53U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA7 = 54U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_RESET_B = 55U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_STROBE = 56U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_CD_B = 57U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_CLK  = 58U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_CMD  = 59U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA0 = 60U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA1 = 61U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA2 = 62U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA3 = 63U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_RESET_B = 64U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_WP   = 65U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_ALE = 66U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B = 67U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B = 68U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE2_B = 69U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE3_B = 70U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CLE = 71U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA00 = 72U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA01 = 73U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA02 = 74U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA03 = 75U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA04 = 76U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA05 = 77U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA06 = 78U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA07 = 79U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DQS = 80U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_RE_B = 81U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_READY_B = 82U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_WE_B = 83U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_WP_B = 84U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXFS = 85U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXC = 86U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD0 = 87U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD1 = 88U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD2 = 89U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD3 = 90U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_MCLK = 91U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXFS = 92U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXC = 93U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD0 = 94U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD1 = 95U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD2 = 96U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD3 = 97U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD4 = 98U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD5 = 99U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD6 = 100U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD7 = 101U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXFS = 102U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXC = 103U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD0 = 104U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD1 = 105U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD2 = 106U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD3 = 107U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD4 = 108U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD5 = 109U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD6 = 110U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD7 = 111U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_MCLK = 112U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_RXFS = 113U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_RXC = 114U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_RXD0 = 115U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_TXFS = 116U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_TXC = 117U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_TXD0 = 118U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_MCLK = 119U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_RXFS = 120U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_RXC = 121U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_RXD = 122U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_TXFS = 123U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_TXC = 124U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_TXD = 125U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_MCLK = 126U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SPDIF_TX = 127U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SPDIF_RX = 128U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SPDIF_EXT_CLK = 129U,   /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_SCLK = 130U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_MOSI = 131U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_MISO = 132U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_SS0 = 133U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_SCLK = 134U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_MOSI = 135U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_MISO = 136U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_SS0 = 137U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C1_SCL = 138U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C1_SDA = 139U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C2_SCL = 140U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C2_SDA = 141U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C3_SCL = 142U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C3_SDA = 143U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C4_SCL = 144U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C4_SDA = 145U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART1_RXD = 146U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART1_TXD = 147U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART2_RXD = 148U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART2_TXD = 149U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART3_RXD = 150U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART3_TXD = 151U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART4_RXD = 152U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART4_TXD = 153U,       /**< IOMUXC SW_PAD_CTL_PAD index */
} iomuxc_sw_pad_ctl_pad_t;

/*!
 * @brief Enumeration for the IOMUXC select input
 *
 * Defines the enumeration for the IOMUXC select input collections.
 */
typedef enum _iomuxc_select_input
{
    kIOMUXC_CCM_PMIC_READY_SELECT_INPUT = 0U,      /**< IOMUXC select input index */
    kIOMUXC_ENET1_MDIO_SELECT_INPUT = 1U,          /**< IOMUXC select input index */
    kIOMUXC_SAI1_RX_SYNC_SELECT_INPUT = 2U,        /**< IOMUXC select input index */
    kIOMUXC_SAI1_TX_BCLK_SELECT_INPUT = 3U,        /**< IOMUXC select input index */
    kIOMUXC_SAI1_TX_SYNC_SELECT_INPUT = 4U,        /**< IOMUXC select input index */
    kIOMUXC_SAI5_RX_BCLK_SELECT_INPUT = 5U,        /**< IOMUXC select input index */
    kIOMUXC_SAI5_RXD0_SELECT_INPUT  = 6U,          /**< IOMUXC select input index */
    kIOMUXC_SAI5_RXD1_SELECT_INPUT  = 7U,          /**< IOMUXC select input index */
    kIOMUXC_SAI5_RXD2_SELECT_INPUT  = 8U,          /**< IOMUXC select input index */
    kIOMUXC_SAI5_RXD3_SELECT_INPUT  = 9U,          /**< IOMUXC select input index */
    kIOMUXC_SAI5_RX_SYNC_SELECT_INPUT = 10U,       /**< IOMUXC select input index */
    kIOMUXC_SAI5_TX_BCLK_SELECT_INPUT = 11U,       /**< IOMUXC select input index */
    kIOMUXC_SAI5_TX_SYNC_SELECT_INPUT = 12U,       /**< IOMUXC select input index */
    kIOMUXC_UART1_RTS_B_SELECT_INPUT = 13U,        /**< IOMUXC select input index */
    kIOMUXC_UART1_RXD_SELECT_INPUT  = 14U,         /**< IOMUXC select input index */
    kIOMUXC_UART2_RTS_B_SELECT_INPUT = 15U,        /**< IOMUXC select input index */
    kIOMUXC_UART2_RXD_SELECT_INPUT  = 16U,         /**< IOMUXC select input index */
    kIOMUXC_UART3_RTS_B_SELECT_INPUT = 17U,        /**< IOMUXC select input index */
    kIOMUXC_UART3_RXD_SELECT_INPUT  = 18U,         /**< IOMUXC select input index */
    kIOMUXC_UART4_RTS_B_SELECT_INPUT = 19U,        /**< IOMUXC select input index */
    kIOMUXC_UART4_RXD_SELECT_INPUT  = 20U,         /**< IOMUXC select input index */
    kIOMUXC_SAI6_RX_BCLK_SELECT_INPUT = 21U,       /**< IOMUXC select input index */
    kIOMUXC_SAI6_RXD0_SELECT_INPUT  = 22U,         /**< IOMUXC select input index */
    kIOMUXC_SAI6_RX_SYNC_SELECT_INPUT = 23U,       /**< IOMUXC select input index */
    kIOMUXC_SAI6_TX_BCLK_SELECT_INPUT = 24U,       /**< IOMUXC select input index */
    kIOMUXC_SAI6_TX_SYNC_SELECT_INPUT = 25U,       /**< IOMUXC select input index */
    kIOMUXC_PCIE1_CLKREQ_B_SELECT_INPUT = 26U,     /**< IOMUXC select input index */
    kIOMUXC_PCIE2_CLKREQ_B_SELECT_INPUT = 27U,     /**< IOMUXC select input index */
    kIOMUXC_SAI5_MCLK_SELECT_INPUT  = 28U,         /**< IOMUXC select input index */
    kIOMUXC_SAI6_MCLK_SELECT_INPUT  = 29U,         /**< IOMUXC select input index */
} iomuxc_select_input_t;

/* @} */

/*!
 * @addtogroup rdc_mapping
 * @{
 */

/*******************************************************************************
 * Definitions
 ******************************************************************************/

/*!
 * @brief Structure for the RDC mapping
 *
 * Defines the structure for the RDC resource collections.
 */

typedef enum _rdc_master
{
    kRDC_Master_A53                 = 0U,          /**< ARM Cortex-A53 RDC Master */
    kRDC_Master_M4                  = 1U,          /**< ARM Cortex-M4 RDC Master */
    kRDC_Master_PCIE1               = 2U,          /**< PCIE1 RDC Master */
    kRDC_Master_PCIE2               = 3U,          /**< PCIE2 RDC Master */
    kRDC_Master_VPU                 = 4U,          /**< VPU RDC Master */
    kRDC_Master_LCDIF               = 5U,          /**< LCDIF RDC Master */
    kRDC_Master_CSI1                = 6U,          /**< CSI1 PORT RDC Master */
    kRDC_Master_CSI2                = 7U,          /**< CSI2 RDC Master */
    kRDC_Master_Coresight           = 8U,          /**< CORESIGHT RDC Master */
    kRDC_Master_DAP                 = 9U,          /**< DAP RDC Master */
    kRDC_Master_CAAM                = 10U,         /**< CAAM RDC Master */
    kRDC_Master_SDMA1_PERIPH        = 11U,         /**< SDMA1 PERIPHERAL RDC Master */
    kRDC_Master_SDMA1_BURST         = 12U,         /**< SDMA1 BURST RDC Master */
    kRDC_Master_APBHDMA             = 13U,         /**< APBH DMA RDC Master */
    kRDC_Master_RAWNAND             = 14U,         /**< RAW NAND RDC Master */
    kRDC_Master_USDHC1              = 15U,         /**< USDHC1 RDC Master */
    kRDC_Master_USDHC2              = 16U,         /**< USDHC2 RDC Master */
    kRDC_Master_DP                  = 17U,         /**< DP RDC Master */
    kRDC_Master_GPU                 = 18U,         /**< GPU RDC Master */
    kRDC_Master_USB1                = 19U,         /**< USB1 RDC Master */
    kRDC_Master_USB2                = 20U,         /**< USB2 RDC Master */
    kRDC_Master_ENET1TX             = 21U,         /**< ENET1 TX RDC Master */
    kRDC_Master_ENET1RX             = 22U,         /**< ENET1 RX RDC Master */
    kRDC_Master_SDMA2_PERIPH        = 23U,         /**< SDMA2 PERIPH RDC Master */
    kRDC_Master_SDMA2_BURST         = 24U,         /**< SDMA2 BURST RDC Master */
    kRDC_Master_SDMA2_PORT          = 25U,         /**< SDMA2 PORT RDC Master */
    kRDC_Master_SDMA1_PORT          = 26U,         /**< SDMA1 PORT RDC Masterr */
} rdc_master_t;

typedef enum _rdc_mem
{
    kRDC_Mem_MRC0_0                 = 0U,          /**< MMDC/DRAM. Region resolution 4KB. */
    kRDC_Mem_MRC0_1                 = 1U,
    kRDC_Mem_MRC0_2                 = 2U,
    kRDC_Mem_MRC0_3                 = 3U,
    kRDC_Mem_MRC0_4                 = 4U,
    kRDC_Mem_MRC0_5                 = 5U,
    kRDC_Mem_MRC0_6                 = 6U,
    kRDC_Mem_MRC0_7                 = 7U,
    kRDC_Mem_MRC1_0                 = 8U,          /**< PCIE2. Region resolution 4KB. */
    kRDC_Mem_MRC1_1                 = 9U,
    kRDC_Mem_MRC1_2                 = 10U,
    kRDC_Mem_MRC1_3                 = 11U,
    kRDC_Mem_MRC2_0                 = 12U,         /**< QSPI. Region resolution 4KB. */
    kRDC_Mem_MRC2_1                 = 13U,
    kRDC_Mem_MRC2_2                 = 14U,
    kRDC_Mem_MRC2_3                 = 15U,
    kRDC_Mem_MRC2_4                 = 16U,
    kRDC_Mem_MRC2_5                 = 17U,
    kRDC_Mem_MRC2_6                 = 18U,
    kRDC_Mem_MRC2_7                 = 19U,
    kRDC_Mem_MRC3_0                 = 20U,         /**< PCIE1. Region resolution 4KB. */
    kRDC_Mem_MRC3_1                 = 21U,
    kRDC_Mem_MRC3_2                 = 22U,
    kRDC_Mem_MRC3_3                 = 23U,
    kRDC_Mem_MRC4_0                 = 24U,         /**< OCRAM. Region resolution 128B. */
    kRDC_Mem_MRC4_1                 = 25U,
    kRDC_Mem_MRC4_2                 = 26U,
    kRDC_Mem_MRC4_3                 = 27U,
    kRDC_Mem_MRC4_4                 = 28U,
    kRDC_Mem_MRC5_0                 = 29U,         /**< OCRAM_S. Region resolution 128B. */
    kRDC_Mem_MRC5_1                 = 30U,
    kRDC_Mem_MRC5_2                 = 31U,
    kRDC_Mem_MRC5_3                 = 32U,
    kRDC_Mem_MRC5_4                 = 33U,
    kRDC_Mem_MRC6_0                 = 34U,         /**< TCM. Region resolution 128B. */
    kRDC_Mem_MRC6_1                 = 35U,
    kRDC_Mem_MRC6_2                 = 36U,
    kRDC_Mem_MRC6_3                 = 37U,
    kRDC_Mem_MRC6_4                 = 38U,
    kRDC_Mem_MRC7_0                 = 39U,         /**< GIC. Region resolution 4KB. */
    kRDC_Mem_MRC7_1                 = 40U,
    kRDC_Mem_MRC7_2                 = 41U,
    kRDC_Mem_MRC7_3                 = 42U,
    kRDC_Mem_MRC8_0                 = 43U,         /**< USBMIX. Region resolution 4KB. */
    kRDC_Mem_MRC8_1                 = 44U,
    kRDC_Mem_MRC8_2                 = 45U,
    kRDC_Mem_MRC8_3                 = 46U,
    kRDC_Mem_MRC9_0                 = 47U,         /**< GPU. Region resolution 4KB. */
    kRDC_Mem_MRC9_1                 = 48U,
    kRDC_Mem_MRC9_2                 = 49U,
    kRDC_Mem_MRC9_3                 = 50U,
    kRDC_Mem_MRC10_0                = 51U,         /**< VPU(Decoder). Region resolution 4KB. */
    kRDC_Mem_MRC10_1                = 52U,
    kRDC_Mem_MRC10_2                = 53U,
    kRDC_Mem_MRC10_3                = 54U,
    kRDC_Mem_MRC11_0                = 55U,         /**< DEBUG(DAP). Region resolution 4KB. */
    kRDC_Mem_MRC11_1                = 56U,
    kRDC_Mem_MRC11_2                = 57U,
    kRDC_Mem_MRC11_3                = 58U,
    kRDC_Mem_MRC12_0                = 59U,         /**< DDRC(REG). Region resolution 4KB. */
    kRDC_Mem_MRC12_1                = 60U,
    kRDC_Mem_MRC12_2                = 61U,
    kRDC_Mem_MRC12_3                = 62U,
    kRDC_Mem_MRC12_4                = 63U,
} rdc_mem_t;

typedef enum _rdc_periph
{
    kRDC_Periph_GPIO1               = 0U,          /**< GPIO1 RDC Peripheral */
    kRDC_Periph_GPIO2               = 1U,          /**< GPIO2 RDC Peripheral */
    kRDC_Periph_GPIO3               = 2U,          /**< GPIO3 RDC Peripheral */
    kRDC_Periph_GPIO4               = 3U,          /**< GPIO4 RDC Peripheral */
    kRDC_Periph_GPIO5               = 4U,          /**< GPIO5 RDC Peripheral */
    kRDC_Periph_ANA_TSENSOR         = 6U,          /**< ANA_TSENSOR RDC Peripheral */
    kRDC_Periph_ANA_OSC             = 7U,          /**< ANA_OSC RDC Peripheral */
    kRDC_Periph_WDOG1               = 8U,          /**< WDOG1 RDC Peripheral */
    kRDC_Periph_WDOG2               = 9U,          /**< WDOG2 RDC Peripheral */
    kRDC_Periph_WDOG3               = 10U,         /**< WDOG3 RDC Peripheral */
    kRDC_Periph_SDMA2               = 12U,         /**< SDMA2 RDC Peripheral */
    kRDC_Periph_GPT1                = 13U,         /**< GPT1 RDC Peripheral */
    kRDC_Periph_GPT2                = 14U,         /**< GPT2 RDC Peripheral */
    kRDC_Periph_GPT3                = 15U,         /**< GPT3 RDC Peripheral */
    kRDC_Periph_ROMCP               = 17U,         /**< ROMCP RDC Peripheral */
    kRDC_Periph_LCDIF               = 18U,         /**< LCDIF RDC Peripheral */
    kRDC_Periph_IOMUXC              = 19U,         /**< IOMUXC RDC Peripheral */
    kRDC_Periph_IOMUXC_GPR          = 20U,         /**< IOMUXC_GPR RDC Peripheral */
    kRDC_Periph_OCOTP_CTRL          = 21U,         /**< OCOTP_CTRL RDC Peripheral */
    kRDC_Periph_ANA_PLL             = 22U,         /**< ANA_PLL RDC Peripheral */
    kRDC_Periph_SNVS_HP             = 23U,         /**< SNVS_HP GPR RDC Peripheral */
    kRDC_Periph_CCM                 = 24U,         /**< CCM RDC Peripheral */
    kRDC_Periph_SRC                 = 25U,         /**< SRC RDC Peripheral */
    kRDC_Periph_GPC                 = 26U,         /**< GPC RDC Peripheral */
    kRDC_Periph_SEMA42_0            = 27U,         /**< SEMA42_0 RDC Peripheral */
    kRDC_Periph_SEMA42_1            = 28U,         /**< SEMA42_1 RDC Peripheral */
    kRDC_Periph_RDC                 = 29U,         /**< RDC RDC Peripheral */
    kRDC_Periph_CSU                 = 30U,         /**< CSU RDC Peripheral */
    kRDC_Periph_DC_MST0             = 32U,         /**< DC_MST0 RDC Peripheral */
    kRDC_Periph_DC_MST1             = 33U,         /**< DC_MST1 RDC Peripheral */
    kRDC_Periph_DC_MST2             = 34U,         /**< DC_MST2 RDC Peripheral */
    kRDC_Periph_DC_MST3             = 35U,         /**< DC_MST3 RDC Peripheral */
    kRDC_Periph_HDMI_SEC            = 36U,         /**< HDMI_SEC RDC Peripheral */
    kRDC_Periph_PWM1                = 38U,         /**< PWM1 RDC Peripheral */
    kRDC_Periph_PWM2                = 39U,         /**< PWM2 RDC Peripheral */
    kRDC_Periph_PWM3                = 40U,         /**< PWM3 RDC Peripheral */
    kRDC_Periph_PWM4                = 41U,         /**< PWM4 RDC Peripheral */
    kRDC_Periph_SYS_COUNTER_RD      = 42U,         /**< System counter read RDC Peripheral */
    kRDC_Periph_SYS_COUNTER_CMP     = 43U,         /**< System counter compare RDC Peripheral */
    kRDC_Periph_SYS_COUNTER_CTRL    = 44U,         /**< System counter control RDC Peripheral */
    kRDC_Periph_HDMI_CTRL           = 45U,         /**< HDMI_CTRL RDC Peripheral */
    kRDC_Periph_GPT6                = 46U,         /**< GPT6 RDC Peripheral */
    kRDC_Periph_GPT5                = 47U,         /**< GPT5 RDC Peripheral */
    kRDC_Periph_GPT4                = 48U,         /**< GPT4 RDC Peripheral */
    kRDC_Periph_TZASC               = 56U,         /**< TZASC RDC Peripheral */
    kRDC_Periph_MTR                 = 59U,         /**< MTR RDC Peripheral */
    kRDC_Periph_PERFMON1            = 60U,         /**< PERFMON1 RDC Peripheral */
    kRDC_Periph_PERFMON2            = 61U,         /**< PERFMON2 RDC Peripheral */
    kRDC_Periph_PLATFORM_CTRL       = 62U,         /**< PLATFORM_CTRL RDC Peripheral */
    kRDC_Periph_QOSC                = 63U,         /**< QOSC RDC Peripheral */
    kRDC_Periph_MIPI_PHY            = 64U,         /**< MIPI_PHY RDC Peripheral */
    kRDC_Periph_MIPI_DSI            = 65U,         /**< MIPI_DSI RDC Peripheral */
    kRDC_Periph_I2C1                = 66U,         /**< I2C1 RDC Peripheral */
    kRDC_Periph_I2C2                = 67U,         /**< I2C2 RDC Peripheral */
    kRDC_Periph_I2C3                = 68U,         /**< I2C3 RDC Peripheral */
    kRDC_Periph_I2C4                = 69U,         /**< I2C4 RDC Peripheral */
    kRDC_Periph_UART4               = 70U,         /**< UART4 RDC Peripheral */
    kRDC_Periph_MIPI_CSI1           = 71U,         /**< MIPI_CSI1 RDC Peripheral */
    kRDC_Periph_MIPI_CSI_PHY1       = 72U,         /**< MIPI_CSI_PHY1 RDC Peripheral */
    kRDC_Periph_CSI1                = 73U,         /**< CSI1 RDC Peripheral */
    kRDC_Periph_MU_A                = 74U,         /**< MU_A RDC Peripheral */
    kRDC_Periph_MU_B                = 75U,         /**< MU_B RDC Peripheral */
    kRDC_Periph_SEMA4               = 76U,         /**< SEMA4 RDC Peripheral */
    kRDC_Periph_SAI1                = 78U,         /**< SAI1 RDC Peripheral */
    kRDC_Periph_SAI6                = 80U,         /**< SAI6 RDC Peripheral */
    kRDC_Periph_SAI5                = 81U,         /**< SAI5 RDC Peripheral */
    kRDC_Periph_SAI4                = 82U,         /**< SAI4 RDC Peripheral */
    kRDC_Periph_USDHC1              = 84U,         /**< USDHC1 RDC Peripheral */
    kRDC_Periph_USDHC2              = 85U,         /**< USDHC2 RDC Peripheral */
    kRDC_Periph_MIPI_CSI2           = 86U,         /**< MIPI_CSI2 RDC Peripheral */
    kRDC_Periph_MIPI_CSI_PHY2       = 87U,         /**< MIPI_CSI_PHY2 RDC Peripheral */
    kRDC_Periph_CSI2                = 88U,         /**< CSI2 RDC Peripheral */
    kRDC_Periph_SPBA2               = 90U,         /**< SPBA2 RDC Peripheral */
    kRDC_Periph_QSPI                = 91U,         /**< QSPI RDC Peripheral */
    kRDC_Periph_SDMA1               = 93U,         /**< SDMA1 RDC Peripheral */
    kRDC_Periph_ENET1               = 94U,         /**< ENET1 RDC Peripheral */
    kRDC_Periph_SPDIF1              = 97U,         /**< SPDIF1 RDC Peripheral */
    kRDC_Periph_ECSPI1              = 98U,         /**< ECSPI1 RDC Peripheral */
    kRDC_Periph_ECSPI2              = 99U,         /**< ECSPI2 RDC Peripheral */
    kRDC_Periph_ECSPI3              = 100U,        /**< ECSPI3 RDC Peripheral */
    kRDC_Periph_UART1               = 102U,        /**< UART1 RDC Peripheral */
    kRDC_Periph_UART3               = 104U,        /**< UART3 RDC Peripheral */
    kRDC_Periph_UART2               = 105U,        /**< UART2 RDC Peripheral */
    kRDC_Periph_SPDIF2              = 106U,        /**< SPDIF2 RDC Peripheral */
    kRDC_Periph_SAI2                = 107U,        /**< SAI2 RDC Peripheral */
    kRDC_Periph_SAI3                = 108U,        /**< SAI3 RDC Peripheral */
    kRDC_Periph_SPBA1               = 111U,        /**< SPBA1 RDC Peripheral */
    kRDC_Periph_CAAM                = 114U,        /**< CAAM RDC Peripheral */
} rdc_periph_t;

/* @} */


/*!
 * @}
 */ /* end of group Mapping_Information */


/* ----------------------------------------------------------------------------
   -- Device Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Peripheral_access_layer Device Peripheral Access Layer
 * @{
 */


/*
** Start of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #pragma push
  #pragma anon_unions
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=extended
#else
  #error Not supported compiler type
#endif

/* ----------------------------------------------------------------------------
   -- APBH Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup APBH_Peripheral_Access_Layer APBH Peripheral Access Layer
 * @{
 */

/** APBH - Register Layout Typedef */
typedef struct {
  __IO uint32_t CTRL0;                             /**< AHB to APBH Bridge Control and Status Register 0, offset: 0x0 */
  __IO uint32_t CTRL0_SET;                         /**< AHB to APBH Bridge Control and Status Register 0, offset: 0x4 */
  __IO uint32_t CTRL0_CLR;                         /**< AHB to APBH Bridge Control and Status Register 0, offset: 0x8 */
  __IO uint32_t CTRL0_TOG;                         /**< AHB to APBH Bridge Control and Status Register 0, offset: 0xC */
  __IO uint32_t CTRL1;                             /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x10 */
  __IO uint32_t CTRL1_SET;                         /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x14 */
  __IO uint32_t CTRL1_CLR;                         /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x18 */
  __IO uint32_t CTRL1_TOG;                         /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x1C */
  __IO uint32_t CTRL2;                             /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x20 */
  __IO uint32_t CTRL2_SET;                         /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x24 */
  __IO uint32_t CTRL2_CLR;                         /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x28 */
  __IO uint32_t CTRL2_TOG;                         /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x2C */
  __IO uint32_t CHANNEL_CTRL;                      /**< AHB to APBH Bridge Channel Register, offset: 0x30 */
  __IO uint32_t CHANNEL_CTRL_SET;                  /**< AHB to APBH Bridge Channel Register, offset: 0x34 */
  __IO uint32_t CHANNEL_CTRL_CLR;                  /**< AHB to APBH Bridge Channel Register, offset: 0x38 */
  __IO uint32_t CHANNEL_CTRL_TOG;                  /**< AHB to APBH Bridge Channel Register, offset: 0x3C */
  __I  uint32_t DEVSEL;                            /**< AHB to APBH DMA Device Assignment Register, offset: 0x40 */
       uint8_t RESERVED_0[12];
  __IO uint32_t DMA_BURST_SIZE;                    /**< AHB to APBH DMA burst size, offset: 0x50 */
       uint8_t RESERVED_1[12];
  __IO uint32_t DEBUGr;                            /**< AHB to APBH DMA Debug Register, offset: 0x60 */
       uint8_t RESERVED_2[156];
  __I  uint32_t CH0_CURCMDAR;                      /**< APBH DMA Channel n Current Command Address Register, offset: 0x100 */
       uint8_t RESERVED_3[12];
  __IO uint32_t CH0_NXTCMDAR;                      /**< APBH DMA Channel n Next Command Address Register, offset: 0x110 */
       uint8_t RESERVED_4[12];
  __I  uint32_t CH0_CMD;                           /**< APBH DMA Channel n Command Register, offset: 0x120 */
       uint8_t RESERVED_5[12];
  __I  uint32_t CH0_BAR;                           /**< APBH DMA Channel n Buffer Address Register, offset: 0x130 */
       uint8_t RESERVED_6[12];
  __IO uint32_t CH0_SEMA;                          /**< APBH DMA Channel n Semaphore Register, offset: 0x140 */
       uint8_t RESERVED_7[12];
  __I  uint32_t CH0_DEBUG1;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x150 */
       uint8_t RESERVED_8[12];
  __I  uint32_t CH0_DEBUG2;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x160 */
       uint8_t RESERVED_9[12];
  __I  uint32_t CH1_CURCMDAR;                      /**< APBH DMA Channel n Current Command Address Register, offset: 0x170 */
       uint8_t RESERVED_10[12];
  __IO uint32_t CH1_NXTCMDAR;                      /**< APBH DMA Channel n Next Command Address Register, offset: 0x180 */
       uint8_t RESERVED_11[12];
  __I  uint32_t CH1_CMD;                           /**< APBH DMA Channel n Command Register, offset: 0x190 */
       uint8_t RESERVED_12[12];
  __I  uint32_t CH1_BAR;                           /**< APBH DMA Channel n Buffer Address Register, offset: 0x1A0 */
       uint8_t RESERVED_13[12];
  __IO uint32_t CH1_SEMA;                          /**< APBH DMA Channel n Semaphore Register, offset: 0x1B0 */
       uint8_t RESERVED_14[12];
  __I  uint32_t CH1_DEBUG1;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x1C0 */
       uint8_t RESERVED_15[12];
  __I  uint32_t CH1_DEBUG2;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x1D0 */
       uint8_t RESERVED_16[12];
  __I  uint32_t CH2_CURCMDAR;                      /**< APBH DMA Channel n Current Command Address Register, offset: 0x1E0 */
       uint8_t RESERVED_17[12];
  __IO uint32_t CH2_NXTCMDAR;                      /**< APBH DMA Channel n Next Command Address Register, offset: 0x1F0 */
       uint8_t RESERVED_18[12];
  __I  uint32_t CH2_CMD;                           /**< APBH DMA Channel n Command Register, offset: 0x200 */
       uint8_t RESERVED_19[12];
  __I  uint32_t CH2_BAR;                           /**< APBH DMA Channel n Buffer Address Register, offset: 0x210 */
       uint8_t RESERVED_20[12];
  __IO uint32_t CH2_SEMA;                          /**< APBH DMA Channel n Semaphore Register, offset: 0x220 */
       uint8_t RESERVED_21[12];
  __I  uint32_t CH2_DEBUG1;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x230 */
       uint8_t RESERVED_22[12];
  __I  uint32_t CH2_DEBUG2;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x240 */
       uint8_t RESERVED_23[12];
  __I  uint32_t CH3_CURCMDAR;                      /**< APBH DMA Channel n Current Command Address Register, offset: 0x250 */
       uint8_t RESERVED_24[12];
  __IO uint32_t CH3_NXTCMDAR;                      /**< APBH DMA Channel n Next Command Address Register, offset: 0x260 */
       uint8_t RESERVED_25[12];
  __I  uint32_t CH3_CMD;                           /**< APBH DMA Channel n Command Register, offset: 0x270 */
       uint8_t RESERVED_26[12];
  __I  uint32_t CH3_BAR;                           /**< APBH DMA Channel n Buffer Address Register, offset: 0x280 */
       uint8_t RESERVED_27[12];
  __IO uint32_t CH3_SEMA;                          /**< APBH DMA Channel n Semaphore Register, offset: 0x290 */
       uint8_t RESERVED_28[12];
  __I  uint32_t CH3_DEBUG1;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x2A0 */
       uint8_t RESERVED_29[12];
  __I  uint32_t CH3_DEBUG2;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x2B0 */
       uint8_t RESERVED_30[12];
  __I  uint32_t CH4_CURCMDAR;                      /**< APBH DMA Channel n Current Command Address Register, offset: 0x2C0 */
       uint8_t RESERVED_31[12];
  __IO uint32_t CH4_NXTCMDAR;                      /**< APBH DMA Channel n Next Command Address Register, offset: 0x2D0 */
       uint8_t RESERVED_32[12];
  __I  uint32_t CH4_CMD;                           /**< APBH DMA Channel n Command Register, offset: 0x2E0 */
       uint8_t RESERVED_33[12];
  __I  uint32_t CH4_BAR;                           /**< APBH DMA Channel n Buffer Address Register, offset: 0x2F0 */
       uint8_t RESERVED_34[12];
  __IO uint32_t CH4_SEMA;                          /**< APBH DMA Channel n Semaphore Register, offset: 0x300 */
       uint8_t RESERVED_35[12];
  __I  uint32_t CH4_DEBUG1;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x310 */
       uint8_t RESERVED_36[12];
  __I  uint32_t CH4_DEBUG2;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x320 */
       uint8_t RESERVED_37[12];
  __I  uint32_t CH5_CURCMDAR;                      /**< APBH DMA Channel n Current Command Address Register, offset: 0x330 */
       uint8_t RESERVED_38[12];
  __IO uint32_t CH5_NXTCMDAR;                      /**< APBH DMA Channel n Next Command Address Register, offset: 0x340 */
       uint8_t RESERVED_39[12];
  __I  uint32_t CH5_CMD;                           /**< APBH DMA Channel n Command Register, offset: 0x350 */
       uint8_t RESERVED_40[12];
  __I  uint32_t CH5_BAR;                           /**< APBH DMA Channel n Buffer Address Register, offset: 0x360 */
       uint8_t RESERVED_41[12];
  __IO uint32_t CH5_SEMA;                          /**< APBH DMA Channel n Semaphore Register, offset: 0x370 */
       uint8_t RESERVED_42[12];
  __I  uint32_t CH5_DEBUG1;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x380 */
       uint8_t RESERVED_43[12];
  __I  uint32_t CH5_DEBUG2;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x390 */
       uint8_t RESERVED_44[12];
  __I  uint32_t CH6_CURCMDAR;                      /**< APBH DMA Channel n Current Command Address Register, offset: 0x3A0 */
       uint8_t RESERVED_45[12];
  __IO uint32_t CH6_NXTCMDAR;                      /**< APBH DMA Channel n Next Command Address Register, offset: 0x3B0 */
       uint8_t RESERVED_46[12];
  __I  uint32_t CH6_CMD;                           /**< APBH DMA Channel n Command Register, offset: 0x3C0 */
       uint8_t RESERVED_47[12];
  __I  uint32_t CH6_BAR;                           /**< APBH DMA Channel n Buffer Address Register, offset: 0x3D0 */
       uint8_t RESERVED_48[12];
  __IO uint32_t CH6_SEMA;                          /**< APBH DMA Channel n Semaphore Register, offset: 0x3E0 */
       uint8_t RESERVED_49[12];
  __I  uint32_t CH6_DEBUG1;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x3F0 */
       uint8_t RESERVED_50[12];
  __I  uint32_t CH6_DEBUG2;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x400 */
       uint8_t RESERVED_51[12];
  __I  uint32_t CH7_CURCMDAR;                      /**< APBH DMA Channel n Current Command Address Register, offset: 0x410 */
       uint8_t RESERVED_52[12];
  __IO uint32_t CH7_NXTCMDAR;                      /**< APBH DMA Channel n Next Command Address Register, offset: 0x420 */
       uint8_t RESERVED_53[12];
  __I  uint32_t CH7_CMD;                           /**< APBH DMA Channel n Command Register, offset: 0x430 */
       uint8_t RESERVED_54[12];
  __I  uint32_t CH7_BAR;                           /**< APBH DMA Channel n Buffer Address Register, offset: 0x440 */
       uint8_t RESERVED_55[12];
  __IO uint32_t CH7_SEMA;                          /**< APBH DMA Channel n Semaphore Register, offset: 0x450 */
       uint8_t RESERVED_56[12];
  __I  uint32_t CH7_DEBUG1;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x460 */
       uint8_t RESERVED_57[12];
  __I  uint32_t CH7_DEBUG2;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x470 */
       uint8_t RESERVED_58[12];
  __I  uint32_t CH8_CURCMDAR;                      /**< APBH DMA Channel n Current Command Address Register, offset: 0x480 */
       uint8_t RESERVED_59[12];
  __IO uint32_t CH8_NXTCMDAR;                      /**< APBH DMA Channel n Next Command Address Register, offset: 0x490 */
       uint8_t RESERVED_60[12];
  __I  uint32_t CH8_CMD;                           /**< APBH DMA Channel n Command Register, offset: 0x4A0 */
       uint8_t RESERVED_61[12];
  __I  uint32_t CH8_BAR;                           /**< APBH DMA Channel n Buffer Address Register, offset: 0x4B0 */
       uint8_t RESERVED_62[12];
  __IO uint32_t CH8_SEMA;                          /**< APBH DMA Channel n Semaphore Register, offset: 0x4C0 */
       uint8_t RESERVED_63[12];
  __I  uint32_t CH8_DEBUG1;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x4D0 */
       uint8_t RESERVED_64[12];
  __I  uint32_t CH8_DEBUG2;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x4E0 */
       uint8_t RESERVED_65[12];
  __I  uint32_t CH9_CURCMDAR;                      /**< APBH DMA Channel n Current Command Address Register, offset: 0x4F0 */
       uint8_t RESERVED_66[12];
  __IO uint32_t CH9_NXTCMDAR;                      /**< APBH DMA Channel n Next Command Address Register, offset: 0x500 */
       uint8_t RESERVED_67[12];
  __I  uint32_t CH9_CMD;                           /**< APBH DMA Channel n Command Register, offset: 0x510 */
       uint8_t RESERVED_68[12];
  __I  uint32_t CH9_BAR;                           /**< APBH DMA Channel n Buffer Address Register, offset: 0x520 */
       uint8_t RESERVED_69[12];
  __IO uint32_t CH9_SEMA;                          /**< APBH DMA Channel n Semaphore Register, offset: 0x530 */
       uint8_t RESERVED_70[12];
  __I  uint32_t CH9_DEBUG1;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x540 */
       uint8_t RESERVED_71[12];
  __I  uint32_t CH9_DEBUG2;                        /**< AHB to APBH DMA Channel n Debug Information, offset: 0x550 */
       uint8_t RESERVED_72[12];
  __I  uint32_t CH10_CURCMDAR;                     /**< APBH DMA Channel n Current Command Address Register, offset: 0x560 */
       uint8_t RESERVED_73[12];
  __IO uint32_t CH10_NXTCMDAR;                     /**< APBH DMA Channel n Next Command Address Register, offset: 0x570 */
       uint8_t RESERVED_74[12];
  __I  uint32_t CH10_CMD;                          /**< APBH DMA Channel n Command Register, offset: 0x580 */
       uint8_t RESERVED_75[12];
  __I  uint32_t CH10_BAR;                          /**< APBH DMA Channel n Buffer Address Register, offset: 0x590 */
       uint8_t RESERVED_76[12];
  __IO uint32_t CH10_SEMA;                         /**< APBH DMA Channel n Semaphore Register, offset: 0x5A0 */
       uint8_t RESERVED_77[12];
  __I  uint32_t CH10_DEBUG1;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x5B0 */
       uint8_t RESERVED_78[12];
  __I  uint32_t CH10_DEBUG2;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x5C0 */
       uint8_t RESERVED_79[12];
  __I  uint32_t CH11_CURCMDAR;                     /**< APBH DMA Channel n Current Command Address Register, offset: 0x5D0 */
       uint8_t RESERVED_80[12];
  __IO uint32_t CH11_NXTCMDAR;                     /**< APBH DMA Channel n Next Command Address Register, offset: 0x5E0 */
       uint8_t RESERVED_81[12];
  __I  uint32_t CH11_CMD;                          /**< APBH DMA Channel n Command Register, offset: 0x5F0 */
       uint8_t RESERVED_82[12];
  __I  uint32_t CH11_BAR;                          /**< APBH DMA Channel n Buffer Address Register, offset: 0x600 */
       uint8_t RESERVED_83[12];
  __IO uint32_t CH11_SEMA;                         /**< APBH DMA Channel n Semaphore Register, offset: 0x610 */
       uint8_t RESERVED_84[12];
  __I  uint32_t CH11_DEBUG1;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x620 */
       uint8_t RESERVED_85[12];
  __I  uint32_t CH11_DEBUG2;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x630 */
       uint8_t RESERVED_86[12];
  __I  uint32_t CH12_CURCMDAR;                     /**< APBH DMA Channel n Current Command Address Register, offset: 0x640 */
       uint8_t RESERVED_87[12];
  __IO uint32_t CH12_NXTCMDAR;                     /**< APBH DMA Channel n Next Command Address Register, offset: 0x650 */
       uint8_t RESERVED_88[12];
  __I  uint32_t CH12_CMD;                          /**< APBH DMA Channel n Command Register, offset: 0x660 */
       uint8_t RESERVED_89[12];
  __I  uint32_t CH12_BAR;                          /**< APBH DMA Channel n Buffer Address Register, offset: 0x670 */
       uint8_t RESERVED_90[12];
  __IO uint32_t CH12_SEMA;                         /**< APBH DMA Channel n Semaphore Register, offset: 0x680 */
       uint8_t RESERVED_91[12];
  __I  uint32_t CH12_DEBUG1;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x690 */
       uint8_t RESERVED_92[12];
  __I  uint32_t CH12_DEBUG2;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x6A0 */
       uint8_t RESERVED_93[12];
  __I  uint32_t CH13_CURCMDAR;                     /**< APBH DMA Channel n Current Command Address Register, offset: 0x6B0 */
       uint8_t RESERVED_94[12];
  __IO uint32_t CH13_NXTCMDAR;                     /**< APBH DMA Channel n Next Command Address Register, offset: 0x6C0 */
       uint8_t RESERVED_95[12];
  __I  uint32_t CH13_CMD;                          /**< APBH DMA Channel n Command Register, offset: 0x6D0 */
       uint8_t RESERVED_96[12];
  __I  uint32_t CH13_BAR;                          /**< APBH DMA Channel n Buffer Address Register, offset: 0x6E0 */
       uint8_t RESERVED_97[12];
  __IO uint32_t CH13_SEMA;                         /**< APBH DMA Channel n Semaphore Register, offset: 0x6F0 */
       uint8_t RESERVED_98[12];
  __I  uint32_t CH13_DEBUG1;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x700 */
       uint8_t RESERVED_99[12];
  __I  uint32_t CH13_DEBUG2;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x710 */
       uint8_t RESERVED_100[12];
  __I  uint32_t CH14_CURCMDAR;                     /**< APBH DMA Channel n Current Command Address Register, offset: 0x720 */
       uint8_t RESERVED_101[12];
  __IO uint32_t CH14_NXTCMDAR;                     /**< APBH DMA Channel n Next Command Address Register, offset: 0x730 */
       uint8_t RESERVED_102[12];
  __I  uint32_t CH14_CMD;                          /**< APBH DMA Channel n Command Register, offset: 0x740 */
       uint8_t RESERVED_103[12];
  __I  uint32_t CH14_BAR;                          /**< APBH DMA Channel n Buffer Address Register, offset: 0x750 */
       uint8_t RESERVED_104[12];
  __IO uint32_t CH14_SEMA;                         /**< APBH DMA Channel n Semaphore Register, offset: 0x760 */
       uint8_t RESERVED_105[12];
  __I  uint32_t CH14_DEBUG1;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x770 */
       uint8_t RESERVED_106[12];
  __I  uint32_t CH14_DEBUG2;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x780 */
       uint8_t RESERVED_107[12];
  __I  uint32_t CH15_CURCMDAR;                     /**< APBH DMA Channel n Current Command Address Register, offset: 0x790 */
       uint8_t RESERVED_108[12];
  __IO uint32_t CH15_NXTCMDAR;                     /**< APBH DMA Channel n Next Command Address Register, offset: 0x7A0 */
       uint8_t RESERVED_109[12];
  __I  uint32_t CH15_CMD;                          /**< APBH DMA Channel n Command Register, offset: 0x7B0 */
       uint8_t RESERVED_110[12];
  __I  uint32_t CH15_BAR;                          /**< APBH DMA Channel n Buffer Address Register, offset: 0x7C0 */
       uint8_t RESERVED_111[12];
  __IO uint32_t CH15_SEMA;                         /**< APBH DMA Channel n Semaphore Register, offset: 0x7D0 */
       uint8_t RESERVED_112[12];
  __I  uint32_t CH15_DEBUG1;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x7E0 */
       uint8_t RESERVED_113[12];
  __I  uint32_t CH15_DEBUG2;                       /**< AHB to APBH DMA Channel n Debug Information, offset: 0x7F0 */
       uint8_t RESERVED_114[12];
  __I  uint32_t VERSION;                           /**< APBH Bridge Version Register, offset: 0x800 */
} APBH_Type;

/* ----------------------------------------------------------------------------
   -- APBH Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup APBH_Register_Masks APBH Register Masks
 * @{
 */

/*! @name CTRL0 - AHB to APBH Bridge Control and Status Register 0 */
#define APBH_CTRL0_CLKGATE_CHANNEL_MASK          (0xFFFFU)
#define APBH_CTRL0_CLKGATE_CHANNEL_SHIFT         (0U)
#define APBH_CTRL0_CLKGATE_CHANNEL(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_RSVD0_MASK                    (0xFFF0000U)
#define APBH_CTRL0_RSVD0_SHIFT                   (16U)
#define APBH_CTRL0_RSVD0(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_RSVD0_SHIFT)) & APBH_CTRL0_RSVD0_MASK)
#define APBH_CTRL0_APB_BURST_EN_MASK             (0x10000000U)
#define APBH_CTRL0_APB_BURST_EN_SHIFT            (28U)
#define APBH_CTRL0_APB_BURST_EN(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_APB_BURST_EN_SHIFT)) & APBH_CTRL0_APB_BURST_EN_MASK)
#define APBH_CTRL0_AHB_BURST8_EN_MASK            (0x20000000U)
#define APBH_CTRL0_AHB_BURST8_EN_SHIFT           (29U)
#define APBH_CTRL0_AHB_BURST8_EN(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_AHB_BURST8_EN_SHIFT)) & APBH_CTRL0_AHB_BURST8_EN_MASK)
#define APBH_CTRL0_CLKGATE_MASK                  (0x40000000U)
#define APBH_CTRL0_CLKGATE_SHIFT                 (30U)
#define APBH_CTRL0_CLKGATE(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLKGATE_SHIFT)) & APBH_CTRL0_CLKGATE_MASK)
#define APBH_CTRL0_SFTRST_MASK                   (0x80000000U)
#define APBH_CTRL0_SFTRST_SHIFT                  (31U)
#define APBH_CTRL0_SFTRST(x)                     (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SFTRST_SHIFT)) & APBH_CTRL0_SFTRST_MASK)

/*! @name CTRL0_SET - AHB to APBH Bridge Control and Status Register 0 */
#define APBH_CTRL0_SET_CLKGATE_CHANNEL_MASK      (0xFFFFU)
#define APBH_CTRL0_SET_CLKGATE_CHANNEL_SHIFT     (0U)
#define APBH_CTRL0_SET_CLKGATE_CHANNEL(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SET_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_SET_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_SET_RSVD0_MASK                (0xFFF0000U)
#define APBH_CTRL0_SET_RSVD0_SHIFT               (16U)
#define APBH_CTRL0_SET_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SET_RSVD0_SHIFT)) & APBH_CTRL0_SET_RSVD0_MASK)
#define APBH_CTRL0_SET_APB_BURST_EN_MASK         (0x10000000U)
#define APBH_CTRL0_SET_APB_BURST_EN_SHIFT        (28U)
#define APBH_CTRL0_SET_APB_BURST_EN(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SET_APB_BURST_EN_SHIFT)) & APBH_CTRL0_SET_APB_BURST_EN_MASK)
#define APBH_CTRL0_SET_AHB_BURST8_EN_MASK        (0x20000000U)
#define APBH_CTRL0_SET_AHB_BURST8_EN_SHIFT       (29U)
#define APBH_CTRL0_SET_AHB_BURST8_EN(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SET_AHB_BURST8_EN_SHIFT)) & APBH_CTRL0_SET_AHB_BURST8_EN_MASK)
#define APBH_CTRL0_SET_CLKGATE_MASK              (0x40000000U)
#define APBH_CTRL0_SET_CLKGATE_SHIFT             (30U)
#define APBH_CTRL0_SET_CLKGATE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SET_CLKGATE_SHIFT)) & APBH_CTRL0_SET_CLKGATE_MASK)
#define APBH_CTRL0_SET_SFTRST_MASK               (0x80000000U)
#define APBH_CTRL0_SET_SFTRST_SHIFT              (31U)
#define APBH_CTRL0_SET_SFTRST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SET_SFTRST_SHIFT)) & APBH_CTRL0_SET_SFTRST_MASK)

/*! @name CTRL0_CLR - AHB to APBH Bridge Control and Status Register 0 */
#define APBH_CTRL0_CLR_CLKGATE_CHANNEL_MASK      (0xFFFFU)
#define APBH_CTRL0_CLR_CLKGATE_CHANNEL_SHIFT     (0U)
#define APBH_CTRL0_CLR_CLKGATE_CHANNEL(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLR_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_CLR_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_CLR_RSVD0_MASK                (0xFFF0000U)
#define APBH_CTRL0_CLR_RSVD0_SHIFT               (16U)
#define APBH_CTRL0_CLR_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLR_RSVD0_SHIFT)) & APBH_CTRL0_CLR_RSVD0_MASK)
#define APBH_CTRL0_CLR_APB_BURST_EN_MASK         (0x10000000U)
#define APBH_CTRL0_CLR_APB_BURST_EN_SHIFT        (28U)
#define APBH_CTRL0_CLR_APB_BURST_EN(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLR_APB_BURST_EN_SHIFT)) & APBH_CTRL0_CLR_APB_BURST_EN_MASK)
#define APBH_CTRL0_CLR_AHB_BURST8_EN_MASK        (0x20000000U)
#define APBH_CTRL0_CLR_AHB_BURST8_EN_SHIFT       (29U)
#define APBH_CTRL0_CLR_AHB_BURST8_EN(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLR_AHB_BURST8_EN_SHIFT)) & APBH_CTRL0_CLR_AHB_BURST8_EN_MASK)
#define APBH_CTRL0_CLR_CLKGATE_MASK              (0x40000000U)
#define APBH_CTRL0_CLR_CLKGATE_SHIFT             (30U)
#define APBH_CTRL0_CLR_CLKGATE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLR_CLKGATE_SHIFT)) & APBH_CTRL0_CLR_CLKGATE_MASK)
#define APBH_CTRL0_CLR_SFTRST_MASK               (0x80000000U)
#define APBH_CTRL0_CLR_SFTRST_SHIFT              (31U)
#define APBH_CTRL0_CLR_SFTRST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLR_SFTRST_SHIFT)) & APBH_CTRL0_CLR_SFTRST_MASK)

/*! @name CTRL0_TOG - AHB to APBH Bridge Control and Status Register 0 */
#define APBH_CTRL0_TOG_CLKGATE_CHANNEL_MASK      (0xFFFFU)
#define APBH_CTRL0_TOG_CLKGATE_CHANNEL_SHIFT     (0U)
#define APBH_CTRL0_TOG_CLKGATE_CHANNEL(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_TOG_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_TOG_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_TOG_RSVD0_MASK                (0xFFF0000U)
#define APBH_CTRL0_TOG_RSVD0_SHIFT               (16U)
#define APBH_CTRL0_TOG_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_TOG_RSVD0_SHIFT)) & APBH_CTRL0_TOG_RSVD0_MASK)
#define APBH_CTRL0_TOG_APB_BURST_EN_MASK         (0x10000000U)
#define APBH_CTRL0_TOG_APB_BURST_EN_SHIFT        (28U)
#define APBH_CTRL0_TOG_APB_BURST_EN(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_TOG_APB_BURST_EN_SHIFT)) & APBH_CTRL0_TOG_APB_BURST_EN_MASK)
#define APBH_CTRL0_TOG_AHB_BURST8_EN_MASK        (0x20000000U)
#define APBH_CTRL0_TOG_AHB_BURST8_EN_SHIFT       (29U)
#define APBH_CTRL0_TOG_AHB_BURST8_EN(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_TOG_AHB_BURST8_EN_SHIFT)) & APBH_CTRL0_TOG_AHB_BURST8_EN_MASK)
#define APBH_CTRL0_TOG_CLKGATE_MASK              (0x40000000U)
#define APBH_CTRL0_TOG_CLKGATE_SHIFT             (30U)
#define APBH_CTRL0_TOG_CLKGATE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_TOG_CLKGATE_SHIFT)) & APBH_CTRL0_TOG_CLKGATE_MASK)
#define APBH_CTRL0_TOG_SFTRST_MASK               (0x80000000U)
#define APBH_CTRL0_TOG_SFTRST_SHIFT              (31U)
#define APBH_CTRL0_TOG_SFTRST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_TOG_SFTRST_SHIFT)) & APBH_CTRL0_TOG_SFTRST_MASK)

/*! @name CTRL1 - AHB to APBH Bridge Control and Status Register 1 */
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_MASK         (0x1U)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_SHIFT        (0U)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH0_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH0_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_MASK         (0x2U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_SHIFT        (1U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH1_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH1_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_MASK         (0x4U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_SHIFT        (2U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH2_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH2_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_MASK         (0x8U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_SHIFT        (3U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH3_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH3_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_MASK         (0x10U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_SHIFT        (4U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH4_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH4_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_MASK         (0x20U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_SHIFT        (5U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH5_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH5_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_MASK         (0x40U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_SHIFT        (6U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH6_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH6_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_MASK         (0x80U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_SHIFT        (7U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH7_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH7_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_MASK         (0x100U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_SHIFT        (8U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH8_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH8_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_MASK         (0x200U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_SHIFT        (9U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH9_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH9_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_MASK        (0x400U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_SHIFT       (10U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH10_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH10_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_MASK        (0x800U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_SHIFT       (11U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH11_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH11_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_MASK        (0x1000U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_SHIFT       (12U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH12_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH12_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_MASK        (0x2000U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_SHIFT       (13U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH13_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH13_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_MASK        (0x4000U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_SHIFT       (14U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH14_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH14_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_MASK        (0x8000U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_SHIFT       (15U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH15_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CH15_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_EN_MASK      (0x10000U)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_EN_SHIFT     (16U)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_EN(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH0_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH0_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_EN_MASK      (0x20000U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_EN_SHIFT     (17U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_EN(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH1_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH1_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_EN_MASK      (0x40000U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_EN_SHIFT     (18U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_EN(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH2_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH2_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_EN_MASK      (0x80000U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_EN_SHIFT     (19U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_EN(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH3_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH3_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_EN_MASK      (0x100000U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_EN_SHIFT     (20U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_EN(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH4_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH4_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_EN_MASK      (0x200000U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_EN_SHIFT     (21U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_EN(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH5_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH5_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_EN_MASK      (0x400000U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_EN_SHIFT     (22U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_EN(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH6_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH6_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_EN_MASK      (0x800000U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_EN_SHIFT     (23U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_EN(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH7_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH7_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_EN_MASK      (0x1000000U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_EN_SHIFT     (24U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_EN(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH8_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH8_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_EN_MASK      (0x2000000U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_EN_SHIFT     (25U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_EN(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH9_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH9_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_EN_MASK     (0x4000000U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_EN_SHIFT    (26U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH10_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH10_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_EN_MASK     (0x8000000U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_EN_SHIFT    (27U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH11_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH11_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_EN_MASK     (0x10000000U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_EN_SHIFT    (28U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH12_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH12_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_EN_MASK     (0x20000000U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_EN_SHIFT    (29U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH13_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH13_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_EN_MASK     (0x40000000U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_EN_SHIFT    (30U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH14_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH14_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_EN_MASK     (0x80000000U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_EN_SHIFT    (31U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CH15_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CH15_CMDCMPLT_IRQ_EN_MASK)

/*! @name CTRL1_SET - AHB to APBH Bridge Control and Status Register 1 */
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_MASK     (0x1U)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_SHIFT    (0U)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_MASK     (0x2U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_SHIFT    (1U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_MASK     (0x4U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_SHIFT    (2U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_MASK     (0x8U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_SHIFT    (3U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_MASK     (0x10U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_SHIFT    (4U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_MASK     (0x20U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_SHIFT    (5U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_MASK     (0x40U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_SHIFT    (6U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_MASK     (0x80U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_SHIFT    (7U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_MASK     (0x100U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_SHIFT    (8U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_MASK     (0x200U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_SHIFT    (9U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_MASK    (0x400U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_SHIFT   (10U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_MASK    (0x800U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_SHIFT   (11U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_MASK    (0x1000U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_SHIFT   (12U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_MASK    (0x2000U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_SHIFT   (13U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_MASK    (0x4000U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_SHIFT   (14U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_MASK    (0x8000U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_SHIFT   (15U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_EN_MASK  (0x10000U)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_EN_SHIFT (16U)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_EN_MASK  (0x20000U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_EN_SHIFT (17U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_EN_MASK  (0x40000U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_EN_SHIFT (18U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_EN_MASK  (0x80000U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_EN_SHIFT (19U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_EN_MASK  (0x100000U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_EN_SHIFT (20U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_EN_MASK  (0x200000U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_EN_SHIFT (21U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_EN_MASK  (0x400000U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_EN_SHIFT (22U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_EN_MASK  (0x800000U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_EN_SHIFT (23U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_EN_MASK  (0x1000000U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_EN_SHIFT (24U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_EN_MASK  (0x2000000U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_EN_SHIFT (25U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_EN_MASK (0x4000000U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_EN_SHIFT (26U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_EN_MASK (0x8000000U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_EN_SHIFT (27U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_EN_MASK (0x10000000U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_EN_SHIFT (28U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_EN_MASK (0x20000000U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_EN_SHIFT (29U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_EN_MASK (0x40000000U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_EN_SHIFT (30U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_EN_MASK (0x80000000U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_EN_SHIFT (31U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_EN_MASK)

/*! @name CTRL1_CLR - AHB to APBH Bridge Control and Status Register 1 */
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_MASK     (0x1U)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_SHIFT    (0U)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_MASK     (0x2U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_SHIFT    (1U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_MASK     (0x4U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_SHIFT    (2U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_MASK     (0x8U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_SHIFT    (3U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_MASK     (0x10U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_SHIFT    (4U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_MASK     (0x20U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_SHIFT    (5U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_MASK     (0x40U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_SHIFT    (6U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_MASK     (0x80U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_SHIFT    (7U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_MASK     (0x100U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_SHIFT    (8U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_MASK     (0x200U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_SHIFT    (9U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_MASK    (0x400U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_SHIFT   (10U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_MASK    (0x800U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_SHIFT   (11U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_MASK    (0x1000U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_SHIFT   (12U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_MASK    (0x2000U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_SHIFT   (13U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_MASK    (0x4000U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_SHIFT   (14U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_MASK    (0x8000U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_SHIFT   (15U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_EN_MASK  (0x10000U)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_EN_SHIFT (16U)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_EN_MASK  (0x20000U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_EN_SHIFT (17U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_EN_MASK  (0x40000U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_EN_SHIFT (18U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_EN_MASK  (0x80000U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_EN_SHIFT (19U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_EN_MASK  (0x100000U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_EN_SHIFT (20U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_EN_MASK  (0x200000U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_EN_SHIFT (21U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_EN_MASK  (0x400000U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_EN_SHIFT (22U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_EN_MASK  (0x800000U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_EN_SHIFT (23U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_EN_MASK  (0x1000000U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_EN_SHIFT (24U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_EN_MASK  (0x2000000U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_EN_SHIFT (25U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_EN_MASK (0x4000000U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_EN_SHIFT (26U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_EN_MASK (0x8000000U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_EN_SHIFT (27U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_EN_MASK (0x10000000U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_EN_SHIFT (28U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_EN_MASK (0x20000000U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_EN_SHIFT (29U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_EN_MASK (0x40000000U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_EN_SHIFT (30U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_EN_MASK (0x80000000U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_EN_SHIFT (31U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_EN_MASK)

/*! @name CTRL1_TOG - AHB to APBH Bridge Control and Status Register 1 */
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_MASK     (0x1U)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_SHIFT    (0U)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_MASK     (0x2U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_SHIFT    (1U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_MASK     (0x4U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_SHIFT    (2U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_MASK     (0x8U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_SHIFT    (3U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_MASK     (0x10U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_SHIFT    (4U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_MASK     (0x20U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_SHIFT    (5U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_MASK     (0x40U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_SHIFT    (6U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_MASK     (0x80U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_SHIFT    (7U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_MASK     (0x100U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_SHIFT    (8U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_MASK     (0x200U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_SHIFT    (9U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_MASK    (0x400U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_SHIFT   (10U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_MASK    (0x800U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_SHIFT   (11U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_MASK    (0x1000U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_SHIFT   (12U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_MASK    (0x2000U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_SHIFT   (13U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_MASK    (0x4000U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_SHIFT   (14U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_MASK    (0x8000U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_SHIFT   (15U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_SHIFT)) & APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_MASK)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_EN_MASK  (0x10000U)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_EN_SHIFT (16U)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_EN_MASK  (0x20000U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_EN_SHIFT (17U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_EN_MASK  (0x40000U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_EN_SHIFT (18U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_EN_MASK  (0x80000U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_EN_SHIFT (19U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_EN_MASK  (0x100000U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_EN_SHIFT (20U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_EN_MASK  (0x200000U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_EN_SHIFT (21U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_EN_MASK  (0x400000U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_EN_SHIFT (22U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_EN_MASK  (0x800000U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_EN_SHIFT (23U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_EN_MASK  (0x1000000U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_EN_SHIFT (24U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_EN_MASK  (0x2000000U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_EN_SHIFT (25U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_EN(x)    (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_EN_MASK (0x4000000U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_EN_SHIFT (26U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_EN_MASK (0x8000000U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_EN_SHIFT (27U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_EN_MASK (0x10000000U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_EN_SHIFT (28U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_EN_MASK (0x20000000U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_EN_SHIFT (29U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_EN_MASK (0x40000000U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_EN_SHIFT (30U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_EN_MASK)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_EN_MASK (0x80000000U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_EN_SHIFT (31U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_EN(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_EN_SHIFT)) & APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_EN_MASK)

/*! @name CTRL2 - AHB to APBH Bridge Control and Status Register 2 */
#define APBH_CTRL2_CH0_ERROR_IRQ_MASK            (0x1U)
#define APBH_CTRL2_CH0_ERROR_IRQ_SHIFT           (0U)
#define APBH_CTRL2_CH0_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH0_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH0_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH1_ERROR_IRQ_MASK            (0x2U)
#define APBH_CTRL2_CH1_ERROR_IRQ_SHIFT           (1U)
#define APBH_CTRL2_CH1_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH1_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH1_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH2_ERROR_IRQ_MASK            (0x4U)
#define APBH_CTRL2_CH2_ERROR_IRQ_SHIFT           (2U)
#define APBH_CTRL2_CH2_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH2_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH2_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH3_ERROR_IRQ_MASK            (0x8U)
#define APBH_CTRL2_CH3_ERROR_IRQ_SHIFT           (3U)
#define APBH_CTRL2_CH3_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH3_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH3_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH4_ERROR_IRQ_MASK            (0x10U)
#define APBH_CTRL2_CH4_ERROR_IRQ_SHIFT           (4U)
#define APBH_CTRL2_CH4_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH4_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH4_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH5_ERROR_IRQ_MASK            (0x20U)
#define APBH_CTRL2_CH5_ERROR_IRQ_SHIFT           (5U)
#define APBH_CTRL2_CH5_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH5_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH5_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH6_ERROR_IRQ_MASK            (0x40U)
#define APBH_CTRL2_CH6_ERROR_IRQ_SHIFT           (6U)
#define APBH_CTRL2_CH6_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH6_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH6_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH7_ERROR_IRQ_MASK            (0x80U)
#define APBH_CTRL2_CH7_ERROR_IRQ_SHIFT           (7U)
#define APBH_CTRL2_CH7_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH7_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH7_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH8_ERROR_IRQ_MASK            (0x100U)
#define APBH_CTRL2_CH8_ERROR_IRQ_SHIFT           (8U)
#define APBH_CTRL2_CH8_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH8_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH8_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH9_ERROR_IRQ_MASK            (0x200U)
#define APBH_CTRL2_CH9_ERROR_IRQ_SHIFT           (9U)
#define APBH_CTRL2_CH9_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH9_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH9_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH10_ERROR_IRQ_MASK           (0x400U)
#define APBH_CTRL2_CH10_ERROR_IRQ_SHIFT          (10U)
#define APBH_CTRL2_CH10_ERROR_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH10_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH10_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH11_ERROR_IRQ_MASK           (0x800U)
#define APBH_CTRL2_CH11_ERROR_IRQ_SHIFT          (11U)
#define APBH_CTRL2_CH11_ERROR_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH11_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH11_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH12_ERROR_IRQ_MASK           (0x1000U)
#define APBH_CTRL2_CH12_ERROR_IRQ_SHIFT          (12U)
#define APBH_CTRL2_CH12_ERROR_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH12_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH12_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH13_ERROR_IRQ_MASK           (0x2000U)
#define APBH_CTRL2_CH13_ERROR_IRQ_SHIFT          (13U)
#define APBH_CTRL2_CH13_ERROR_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH13_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH13_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH14_ERROR_IRQ_MASK           (0x4000U)
#define APBH_CTRL2_CH14_ERROR_IRQ_SHIFT          (14U)
#define APBH_CTRL2_CH14_ERROR_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH14_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH14_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH15_ERROR_IRQ_MASK           (0x8000U)
#define APBH_CTRL2_CH15_ERROR_IRQ_SHIFT          (15U)
#define APBH_CTRL2_CH15_ERROR_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH15_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CH15_ERROR_IRQ_MASK)
#define APBH_CTRL2_CH0_ERROR_STATUS_MASK         (0x10000U)
#define APBH_CTRL2_CH0_ERROR_STATUS_SHIFT        (16U)
#define APBH_CTRL2_CH0_ERROR_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH0_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH0_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH1_ERROR_STATUS_MASK         (0x20000U)
#define APBH_CTRL2_CH1_ERROR_STATUS_SHIFT        (17U)
#define APBH_CTRL2_CH1_ERROR_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH1_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH1_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH2_ERROR_STATUS_MASK         (0x40000U)
#define APBH_CTRL2_CH2_ERROR_STATUS_SHIFT        (18U)
#define APBH_CTRL2_CH2_ERROR_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH2_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH2_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH3_ERROR_STATUS_MASK         (0x80000U)
#define APBH_CTRL2_CH3_ERROR_STATUS_SHIFT        (19U)
#define APBH_CTRL2_CH3_ERROR_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH3_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH3_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH4_ERROR_STATUS_MASK         (0x100000U)
#define APBH_CTRL2_CH4_ERROR_STATUS_SHIFT        (20U)
#define APBH_CTRL2_CH4_ERROR_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH4_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH4_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH5_ERROR_STATUS_MASK         (0x200000U)
#define APBH_CTRL2_CH5_ERROR_STATUS_SHIFT        (21U)
#define APBH_CTRL2_CH5_ERROR_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH5_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH5_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH6_ERROR_STATUS_MASK         (0x400000U)
#define APBH_CTRL2_CH6_ERROR_STATUS_SHIFT        (22U)
#define APBH_CTRL2_CH6_ERROR_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH6_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH6_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH7_ERROR_STATUS_MASK         (0x800000U)
#define APBH_CTRL2_CH7_ERROR_STATUS_SHIFT        (23U)
#define APBH_CTRL2_CH7_ERROR_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH7_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH7_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH8_ERROR_STATUS_MASK         (0x1000000U)
#define APBH_CTRL2_CH8_ERROR_STATUS_SHIFT        (24U)
#define APBH_CTRL2_CH8_ERROR_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH8_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH8_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH9_ERROR_STATUS_MASK         (0x2000000U)
#define APBH_CTRL2_CH9_ERROR_STATUS_SHIFT        (25U)
#define APBH_CTRL2_CH9_ERROR_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH9_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH9_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH10_ERROR_STATUS_MASK        (0x4000000U)
#define APBH_CTRL2_CH10_ERROR_STATUS_SHIFT       (26U)
#define APBH_CTRL2_CH10_ERROR_STATUS(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH10_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH10_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH11_ERROR_STATUS_MASK        (0x8000000U)
#define APBH_CTRL2_CH11_ERROR_STATUS_SHIFT       (27U)
#define APBH_CTRL2_CH11_ERROR_STATUS(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH11_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH11_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH12_ERROR_STATUS_MASK        (0x10000000U)
#define APBH_CTRL2_CH12_ERROR_STATUS_SHIFT       (28U)
#define APBH_CTRL2_CH12_ERROR_STATUS(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH12_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH12_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH13_ERROR_STATUS_MASK        (0x20000000U)
#define APBH_CTRL2_CH13_ERROR_STATUS_SHIFT       (29U)
#define APBH_CTRL2_CH13_ERROR_STATUS(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH13_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH13_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH14_ERROR_STATUS_MASK        (0x40000000U)
#define APBH_CTRL2_CH14_ERROR_STATUS_SHIFT       (30U)
#define APBH_CTRL2_CH14_ERROR_STATUS(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH14_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH14_ERROR_STATUS_MASK)
#define APBH_CTRL2_CH15_ERROR_STATUS_MASK        (0x80000000U)
#define APBH_CTRL2_CH15_ERROR_STATUS_SHIFT       (31U)
#define APBH_CTRL2_CH15_ERROR_STATUS(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CH15_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CH15_ERROR_STATUS_MASK)

/*! @name CTRL2_SET - AHB to APBH Bridge Control and Status Register 2 */
#define APBH_CTRL2_SET_CH0_ERROR_IRQ_MASK        (0x1U)
#define APBH_CTRL2_SET_CH0_ERROR_IRQ_SHIFT       (0U)
#define APBH_CTRL2_SET_CH0_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH0_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH0_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH1_ERROR_IRQ_MASK        (0x2U)
#define APBH_CTRL2_SET_CH1_ERROR_IRQ_SHIFT       (1U)
#define APBH_CTRL2_SET_CH1_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH1_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH1_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH2_ERROR_IRQ_MASK        (0x4U)
#define APBH_CTRL2_SET_CH2_ERROR_IRQ_SHIFT       (2U)
#define APBH_CTRL2_SET_CH2_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH2_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH2_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH3_ERROR_IRQ_MASK        (0x8U)
#define APBH_CTRL2_SET_CH3_ERROR_IRQ_SHIFT       (3U)
#define APBH_CTRL2_SET_CH3_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH3_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH3_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH4_ERROR_IRQ_MASK        (0x10U)
#define APBH_CTRL2_SET_CH4_ERROR_IRQ_SHIFT       (4U)
#define APBH_CTRL2_SET_CH4_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH4_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH4_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH5_ERROR_IRQ_MASK        (0x20U)
#define APBH_CTRL2_SET_CH5_ERROR_IRQ_SHIFT       (5U)
#define APBH_CTRL2_SET_CH5_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH5_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH5_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH6_ERROR_IRQ_MASK        (0x40U)
#define APBH_CTRL2_SET_CH6_ERROR_IRQ_SHIFT       (6U)
#define APBH_CTRL2_SET_CH6_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH6_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH6_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH7_ERROR_IRQ_MASK        (0x80U)
#define APBH_CTRL2_SET_CH7_ERROR_IRQ_SHIFT       (7U)
#define APBH_CTRL2_SET_CH7_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH7_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH7_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH8_ERROR_IRQ_MASK        (0x100U)
#define APBH_CTRL2_SET_CH8_ERROR_IRQ_SHIFT       (8U)
#define APBH_CTRL2_SET_CH8_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH8_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH8_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH9_ERROR_IRQ_MASK        (0x200U)
#define APBH_CTRL2_SET_CH9_ERROR_IRQ_SHIFT       (9U)
#define APBH_CTRL2_SET_CH9_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH9_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH9_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH10_ERROR_IRQ_MASK       (0x400U)
#define APBH_CTRL2_SET_CH10_ERROR_IRQ_SHIFT      (10U)
#define APBH_CTRL2_SET_CH10_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH10_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH10_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH11_ERROR_IRQ_MASK       (0x800U)
#define APBH_CTRL2_SET_CH11_ERROR_IRQ_SHIFT      (11U)
#define APBH_CTRL2_SET_CH11_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH11_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH11_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH12_ERROR_IRQ_MASK       (0x1000U)
#define APBH_CTRL2_SET_CH12_ERROR_IRQ_SHIFT      (12U)
#define APBH_CTRL2_SET_CH12_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH12_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH12_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH13_ERROR_IRQ_MASK       (0x2000U)
#define APBH_CTRL2_SET_CH13_ERROR_IRQ_SHIFT      (13U)
#define APBH_CTRL2_SET_CH13_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH13_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH13_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH14_ERROR_IRQ_MASK       (0x4000U)
#define APBH_CTRL2_SET_CH14_ERROR_IRQ_SHIFT      (14U)
#define APBH_CTRL2_SET_CH14_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH14_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH14_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH15_ERROR_IRQ_MASK       (0x8000U)
#define APBH_CTRL2_SET_CH15_ERROR_IRQ_SHIFT      (15U)
#define APBH_CTRL2_SET_CH15_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH15_ERROR_IRQ_SHIFT)) & APBH_CTRL2_SET_CH15_ERROR_IRQ_MASK)
#define APBH_CTRL2_SET_CH0_ERROR_STATUS_MASK     (0x10000U)
#define APBH_CTRL2_SET_CH0_ERROR_STATUS_SHIFT    (16U)
#define APBH_CTRL2_SET_CH0_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH0_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH0_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH1_ERROR_STATUS_MASK     (0x20000U)
#define APBH_CTRL2_SET_CH1_ERROR_STATUS_SHIFT    (17U)
#define APBH_CTRL2_SET_CH1_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH1_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH1_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH2_ERROR_STATUS_MASK     (0x40000U)
#define APBH_CTRL2_SET_CH2_ERROR_STATUS_SHIFT    (18U)
#define APBH_CTRL2_SET_CH2_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH2_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH2_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH3_ERROR_STATUS_MASK     (0x80000U)
#define APBH_CTRL2_SET_CH3_ERROR_STATUS_SHIFT    (19U)
#define APBH_CTRL2_SET_CH3_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH3_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH3_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH4_ERROR_STATUS_MASK     (0x100000U)
#define APBH_CTRL2_SET_CH4_ERROR_STATUS_SHIFT    (20U)
#define APBH_CTRL2_SET_CH4_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH4_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH4_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH5_ERROR_STATUS_MASK     (0x200000U)
#define APBH_CTRL2_SET_CH5_ERROR_STATUS_SHIFT    (21U)
#define APBH_CTRL2_SET_CH5_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH5_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH5_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH6_ERROR_STATUS_MASK     (0x400000U)
#define APBH_CTRL2_SET_CH6_ERROR_STATUS_SHIFT    (22U)
#define APBH_CTRL2_SET_CH6_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH6_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH6_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH7_ERROR_STATUS_MASK     (0x800000U)
#define APBH_CTRL2_SET_CH7_ERROR_STATUS_SHIFT    (23U)
#define APBH_CTRL2_SET_CH7_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH7_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH7_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH8_ERROR_STATUS_MASK     (0x1000000U)
#define APBH_CTRL2_SET_CH8_ERROR_STATUS_SHIFT    (24U)
#define APBH_CTRL2_SET_CH8_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH8_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH8_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH9_ERROR_STATUS_MASK     (0x2000000U)
#define APBH_CTRL2_SET_CH9_ERROR_STATUS_SHIFT    (25U)
#define APBH_CTRL2_SET_CH9_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH9_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH9_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH10_ERROR_STATUS_MASK    (0x4000000U)
#define APBH_CTRL2_SET_CH10_ERROR_STATUS_SHIFT   (26U)
#define APBH_CTRL2_SET_CH10_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH10_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH10_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH11_ERROR_STATUS_MASK    (0x8000000U)
#define APBH_CTRL2_SET_CH11_ERROR_STATUS_SHIFT   (27U)
#define APBH_CTRL2_SET_CH11_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH11_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH11_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH12_ERROR_STATUS_MASK    (0x10000000U)
#define APBH_CTRL2_SET_CH12_ERROR_STATUS_SHIFT   (28U)
#define APBH_CTRL2_SET_CH12_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH12_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH12_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH13_ERROR_STATUS_MASK    (0x20000000U)
#define APBH_CTRL2_SET_CH13_ERROR_STATUS_SHIFT   (29U)
#define APBH_CTRL2_SET_CH13_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH13_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH13_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH14_ERROR_STATUS_MASK    (0x40000000U)
#define APBH_CTRL2_SET_CH14_ERROR_STATUS_SHIFT   (30U)
#define APBH_CTRL2_SET_CH14_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH14_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH14_ERROR_STATUS_MASK)
#define APBH_CTRL2_SET_CH15_ERROR_STATUS_MASK    (0x80000000U)
#define APBH_CTRL2_SET_CH15_ERROR_STATUS_SHIFT   (31U)
#define APBH_CTRL2_SET_CH15_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_SET_CH15_ERROR_STATUS_SHIFT)) & APBH_CTRL2_SET_CH15_ERROR_STATUS_MASK)

/*! @name CTRL2_CLR - AHB to APBH Bridge Control and Status Register 2 */
#define APBH_CTRL2_CLR_CH0_ERROR_IRQ_MASK        (0x1U)
#define APBH_CTRL2_CLR_CH0_ERROR_IRQ_SHIFT       (0U)
#define APBH_CTRL2_CLR_CH0_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH0_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH0_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH1_ERROR_IRQ_MASK        (0x2U)
#define APBH_CTRL2_CLR_CH1_ERROR_IRQ_SHIFT       (1U)
#define APBH_CTRL2_CLR_CH1_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH1_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH1_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH2_ERROR_IRQ_MASK        (0x4U)
#define APBH_CTRL2_CLR_CH2_ERROR_IRQ_SHIFT       (2U)
#define APBH_CTRL2_CLR_CH2_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH2_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH2_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH3_ERROR_IRQ_MASK        (0x8U)
#define APBH_CTRL2_CLR_CH3_ERROR_IRQ_SHIFT       (3U)
#define APBH_CTRL2_CLR_CH3_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH3_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH3_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH4_ERROR_IRQ_MASK        (0x10U)
#define APBH_CTRL2_CLR_CH4_ERROR_IRQ_SHIFT       (4U)
#define APBH_CTRL2_CLR_CH4_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH4_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH4_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH5_ERROR_IRQ_MASK        (0x20U)
#define APBH_CTRL2_CLR_CH5_ERROR_IRQ_SHIFT       (5U)
#define APBH_CTRL2_CLR_CH5_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH5_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH5_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH6_ERROR_IRQ_MASK        (0x40U)
#define APBH_CTRL2_CLR_CH6_ERROR_IRQ_SHIFT       (6U)
#define APBH_CTRL2_CLR_CH6_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH6_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH6_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH7_ERROR_IRQ_MASK        (0x80U)
#define APBH_CTRL2_CLR_CH7_ERROR_IRQ_SHIFT       (7U)
#define APBH_CTRL2_CLR_CH7_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH7_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH7_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH8_ERROR_IRQ_MASK        (0x100U)
#define APBH_CTRL2_CLR_CH8_ERROR_IRQ_SHIFT       (8U)
#define APBH_CTRL2_CLR_CH8_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH8_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH8_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH9_ERROR_IRQ_MASK        (0x200U)
#define APBH_CTRL2_CLR_CH9_ERROR_IRQ_SHIFT       (9U)
#define APBH_CTRL2_CLR_CH9_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH9_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH9_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH10_ERROR_IRQ_MASK       (0x400U)
#define APBH_CTRL2_CLR_CH10_ERROR_IRQ_SHIFT      (10U)
#define APBH_CTRL2_CLR_CH10_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH10_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH10_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH11_ERROR_IRQ_MASK       (0x800U)
#define APBH_CTRL2_CLR_CH11_ERROR_IRQ_SHIFT      (11U)
#define APBH_CTRL2_CLR_CH11_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH11_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH11_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH12_ERROR_IRQ_MASK       (0x1000U)
#define APBH_CTRL2_CLR_CH12_ERROR_IRQ_SHIFT      (12U)
#define APBH_CTRL2_CLR_CH12_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH12_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH12_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH13_ERROR_IRQ_MASK       (0x2000U)
#define APBH_CTRL2_CLR_CH13_ERROR_IRQ_SHIFT      (13U)
#define APBH_CTRL2_CLR_CH13_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH13_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH13_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH14_ERROR_IRQ_MASK       (0x4000U)
#define APBH_CTRL2_CLR_CH14_ERROR_IRQ_SHIFT      (14U)
#define APBH_CTRL2_CLR_CH14_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH14_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH14_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH15_ERROR_IRQ_MASK       (0x8000U)
#define APBH_CTRL2_CLR_CH15_ERROR_IRQ_SHIFT      (15U)
#define APBH_CTRL2_CLR_CH15_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH15_ERROR_IRQ_SHIFT)) & APBH_CTRL2_CLR_CH15_ERROR_IRQ_MASK)
#define APBH_CTRL2_CLR_CH0_ERROR_STATUS_MASK     (0x10000U)
#define APBH_CTRL2_CLR_CH0_ERROR_STATUS_SHIFT    (16U)
#define APBH_CTRL2_CLR_CH0_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH0_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH0_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH1_ERROR_STATUS_MASK     (0x20000U)
#define APBH_CTRL2_CLR_CH1_ERROR_STATUS_SHIFT    (17U)
#define APBH_CTRL2_CLR_CH1_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH1_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH1_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH2_ERROR_STATUS_MASK     (0x40000U)
#define APBH_CTRL2_CLR_CH2_ERROR_STATUS_SHIFT    (18U)
#define APBH_CTRL2_CLR_CH2_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH2_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH2_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH3_ERROR_STATUS_MASK     (0x80000U)
#define APBH_CTRL2_CLR_CH3_ERROR_STATUS_SHIFT    (19U)
#define APBH_CTRL2_CLR_CH3_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH3_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH3_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH4_ERROR_STATUS_MASK     (0x100000U)
#define APBH_CTRL2_CLR_CH4_ERROR_STATUS_SHIFT    (20U)
#define APBH_CTRL2_CLR_CH4_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH4_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH4_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH5_ERROR_STATUS_MASK     (0x200000U)
#define APBH_CTRL2_CLR_CH5_ERROR_STATUS_SHIFT    (21U)
#define APBH_CTRL2_CLR_CH5_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH5_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH5_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH6_ERROR_STATUS_MASK     (0x400000U)
#define APBH_CTRL2_CLR_CH6_ERROR_STATUS_SHIFT    (22U)
#define APBH_CTRL2_CLR_CH6_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH6_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH6_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH7_ERROR_STATUS_MASK     (0x800000U)
#define APBH_CTRL2_CLR_CH7_ERROR_STATUS_SHIFT    (23U)
#define APBH_CTRL2_CLR_CH7_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH7_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH7_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH8_ERROR_STATUS_MASK     (0x1000000U)
#define APBH_CTRL2_CLR_CH8_ERROR_STATUS_SHIFT    (24U)
#define APBH_CTRL2_CLR_CH8_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH8_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH8_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH9_ERROR_STATUS_MASK     (0x2000000U)
#define APBH_CTRL2_CLR_CH9_ERROR_STATUS_SHIFT    (25U)
#define APBH_CTRL2_CLR_CH9_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH9_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH9_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH10_ERROR_STATUS_MASK    (0x4000000U)
#define APBH_CTRL2_CLR_CH10_ERROR_STATUS_SHIFT   (26U)
#define APBH_CTRL2_CLR_CH10_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH10_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH10_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH11_ERROR_STATUS_MASK    (0x8000000U)
#define APBH_CTRL2_CLR_CH11_ERROR_STATUS_SHIFT   (27U)
#define APBH_CTRL2_CLR_CH11_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH11_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH11_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH12_ERROR_STATUS_MASK    (0x10000000U)
#define APBH_CTRL2_CLR_CH12_ERROR_STATUS_SHIFT   (28U)
#define APBH_CTRL2_CLR_CH12_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH12_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH12_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH13_ERROR_STATUS_MASK    (0x20000000U)
#define APBH_CTRL2_CLR_CH13_ERROR_STATUS_SHIFT   (29U)
#define APBH_CTRL2_CLR_CH13_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH13_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH13_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH14_ERROR_STATUS_MASK    (0x40000000U)
#define APBH_CTRL2_CLR_CH14_ERROR_STATUS_SHIFT   (30U)
#define APBH_CTRL2_CLR_CH14_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH14_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH14_ERROR_STATUS_MASK)
#define APBH_CTRL2_CLR_CH15_ERROR_STATUS_MASK    (0x80000000U)
#define APBH_CTRL2_CLR_CH15_ERROR_STATUS_SHIFT   (31U)
#define APBH_CTRL2_CLR_CH15_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_CLR_CH15_ERROR_STATUS_SHIFT)) & APBH_CTRL2_CLR_CH15_ERROR_STATUS_MASK)

/*! @name CTRL2_TOG - AHB to APBH Bridge Control and Status Register 2 */
#define APBH_CTRL2_TOG_CH0_ERROR_IRQ_MASK        (0x1U)
#define APBH_CTRL2_TOG_CH0_ERROR_IRQ_SHIFT       (0U)
#define APBH_CTRL2_TOG_CH0_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH0_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH0_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH1_ERROR_IRQ_MASK        (0x2U)
#define APBH_CTRL2_TOG_CH1_ERROR_IRQ_SHIFT       (1U)
#define APBH_CTRL2_TOG_CH1_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH1_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH1_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH2_ERROR_IRQ_MASK        (0x4U)
#define APBH_CTRL2_TOG_CH2_ERROR_IRQ_SHIFT       (2U)
#define APBH_CTRL2_TOG_CH2_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH2_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH2_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH3_ERROR_IRQ_MASK        (0x8U)
#define APBH_CTRL2_TOG_CH3_ERROR_IRQ_SHIFT       (3U)
#define APBH_CTRL2_TOG_CH3_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH3_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH3_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH4_ERROR_IRQ_MASK        (0x10U)
#define APBH_CTRL2_TOG_CH4_ERROR_IRQ_SHIFT       (4U)
#define APBH_CTRL2_TOG_CH4_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH4_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH4_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH5_ERROR_IRQ_MASK        (0x20U)
#define APBH_CTRL2_TOG_CH5_ERROR_IRQ_SHIFT       (5U)
#define APBH_CTRL2_TOG_CH5_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH5_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH5_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH6_ERROR_IRQ_MASK        (0x40U)
#define APBH_CTRL2_TOG_CH6_ERROR_IRQ_SHIFT       (6U)
#define APBH_CTRL2_TOG_CH6_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH6_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH6_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH7_ERROR_IRQ_MASK        (0x80U)
#define APBH_CTRL2_TOG_CH7_ERROR_IRQ_SHIFT       (7U)
#define APBH_CTRL2_TOG_CH7_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH7_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH7_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH8_ERROR_IRQ_MASK        (0x100U)
#define APBH_CTRL2_TOG_CH8_ERROR_IRQ_SHIFT       (8U)
#define APBH_CTRL2_TOG_CH8_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH8_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH8_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH9_ERROR_IRQ_MASK        (0x200U)
#define APBH_CTRL2_TOG_CH9_ERROR_IRQ_SHIFT       (9U)
#define APBH_CTRL2_TOG_CH9_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH9_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH9_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH10_ERROR_IRQ_MASK       (0x400U)
#define APBH_CTRL2_TOG_CH10_ERROR_IRQ_SHIFT      (10U)
#define APBH_CTRL2_TOG_CH10_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH10_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH10_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH11_ERROR_IRQ_MASK       (0x800U)
#define APBH_CTRL2_TOG_CH11_ERROR_IRQ_SHIFT      (11U)
#define APBH_CTRL2_TOG_CH11_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH11_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH11_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH12_ERROR_IRQ_MASK       (0x1000U)
#define APBH_CTRL2_TOG_CH12_ERROR_IRQ_SHIFT      (12U)
#define APBH_CTRL2_TOG_CH12_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH12_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH12_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH13_ERROR_IRQ_MASK       (0x2000U)
#define APBH_CTRL2_TOG_CH13_ERROR_IRQ_SHIFT      (13U)
#define APBH_CTRL2_TOG_CH13_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH13_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH13_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH14_ERROR_IRQ_MASK       (0x4000U)
#define APBH_CTRL2_TOG_CH14_ERROR_IRQ_SHIFT      (14U)
#define APBH_CTRL2_TOG_CH14_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH14_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH14_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH15_ERROR_IRQ_MASK       (0x8000U)
#define APBH_CTRL2_TOG_CH15_ERROR_IRQ_SHIFT      (15U)
#define APBH_CTRL2_TOG_CH15_ERROR_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH15_ERROR_IRQ_SHIFT)) & APBH_CTRL2_TOG_CH15_ERROR_IRQ_MASK)
#define APBH_CTRL2_TOG_CH0_ERROR_STATUS_MASK     (0x10000U)
#define APBH_CTRL2_TOG_CH0_ERROR_STATUS_SHIFT    (16U)
#define APBH_CTRL2_TOG_CH0_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH0_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH0_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH1_ERROR_STATUS_MASK     (0x20000U)
#define APBH_CTRL2_TOG_CH1_ERROR_STATUS_SHIFT    (17U)
#define APBH_CTRL2_TOG_CH1_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH1_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH1_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH2_ERROR_STATUS_MASK     (0x40000U)
#define APBH_CTRL2_TOG_CH2_ERROR_STATUS_SHIFT    (18U)
#define APBH_CTRL2_TOG_CH2_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH2_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH2_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH3_ERROR_STATUS_MASK     (0x80000U)
#define APBH_CTRL2_TOG_CH3_ERROR_STATUS_SHIFT    (19U)
#define APBH_CTRL2_TOG_CH3_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH3_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH3_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH4_ERROR_STATUS_MASK     (0x100000U)
#define APBH_CTRL2_TOG_CH4_ERROR_STATUS_SHIFT    (20U)
#define APBH_CTRL2_TOG_CH4_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH4_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH4_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH5_ERROR_STATUS_MASK     (0x200000U)
#define APBH_CTRL2_TOG_CH5_ERROR_STATUS_SHIFT    (21U)
#define APBH_CTRL2_TOG_CH5_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH5_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH5_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH6_ERROR_STATUS_MASK     (0x400000U)
#define APBH_CTRL2_TOG_CH6_ERROR_STATUS_SHIFT    (22U)
#define APBH_CTRL2_TOG_CH6_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH6_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH6_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH7_ERROR_STATUS_MASK     (0x800000U)
#define APBH_CTRL2_TOG_CH7_ERROR_STATUS_SHIFT    (23U)
#define APBH_CTRL2_TOG_CH7_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH7_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH7_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH8_ERROR_STATUS_MASK     (0x1000000U)
#define APBH_CTRL2_TOG_CH8_ERROR_STATUS_SHIFT    (24U)
#define APBH_CTRL2_TOG_CH8_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH8_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH8_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH9_ERROR_STATUS_MASK     (0x2000000U)
#define APBH_CTRL2_TOG_CH9_ERROR_STATUS_SHIFT    (25U)
#define APBH_CTRL2_TOG_CH9_ERROR_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH9_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH9_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH10_ERROR_STATUS_MASK    (0x4000000U)
#define APBH_CTRL2_TOG_CH10_ERROR_STATUS_SHIFT   (26U)
#define APBH_CTRL2_TOG_CH10_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH10_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH10_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH11_ERROR_STATUS_MASK    (0x8000000U)
#define APBH_CTRL2_TOG_CH11_ERROR_STATUS_SHIFT   (27U)
#define APBH_CTRL2_TOG_CH11_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH11_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH11_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH12_ERROR_STATUS_MASK    (0x10000000U)
#define APBH_CTRL2_TOG_CH12_ERROR_STATUS_SHIFT   (28U)
#define APBH_CTRL2_TOG_CH12_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH12_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH12_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH13_ERROR_STATUS_MASK    (0x20000000U)
#define APBH_CTRL2_TOG_CH13_ERROR_STATUS_SHIFT   (29U)
#define APBH_CTRL2_TOG_CH13_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH13_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH13_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH14_ERROR_STATUS_MASK    (0x40000000U)
#define APBH_CTRL2_TOG_CH14_ERROR_STATUS_SHIFT   (30U)
#define APBH_CTRL2_TOG_CH14_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH14_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH14_ERROR_STATUS_MASK)
#define APBH_CTRL2_TOG_CH15_ERROR_STATUS_MASK    (0x80000000U)
#define APBH_CTRL2_TOG_CH15_ERROR_STATUS_SHIFT   (31U)
#define APBH_CTRL2_TOG_CH15_ERROR_STATUS(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL2_TOG_CH15_ERROR_STATUS_SHIFT)) & APBH_CTRL2_TOG_CH15_ERROR_STATUS_MASK)

/*! @name CHANNEL_CTRL - AHB to APBH Bridge Channel Register */
#define APBH_CHANNEL_CTRL_FREEZE_CHANNEL_MASK    (0xFFFFU)
#define APBH_CHANNEL_CTRL_FREEZE_CHANNEL_SHIFT   (0U)
#define APBH_CHANNEL_CTRL_FREEZE_CHANNEL(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_RESET_CHANNEL_MASK     (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_RESET_CHANNEL_SHIFT    (16U)
#define APBH_CHANNEL_CTRL_RESET_CHANNEL(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_RESET_CHANNEL_MASK)

/*! @name CHANNEL_CTRL_SET - AHB to APBH Bridge Channel Register */
#define APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_MASK (0xFFFFU)
#define APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_SHIFT (0U)
#define APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL(x)  (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_MASK (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_SHIFT (16U)
#define APBH_CHANNEL_CTRL_SET_RESET_CHANNEL(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_MASK)

/*! @name CHANNEL_CTRL_CLR - AHB to APBH Bridge Channel Register */
#define APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_MASK (0xFFFFU)
#define APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_SHIFT (0U)
#define APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL(x)  (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_MASK (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_SHIFT (16U)
#define APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_MASK)

/*! @name CHANNEL_CTRL_TOG - AHB to APBH Bridge Channel Register */
#define APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_MASK (0xFFFFU)
#define APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_SHIFT (0U)
#define APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL(x)  (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_MASK (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_SHIFT (16U)
#define APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_MASK)

/*! @name DEVSEL - AHB to APBH DMA Device Assignment Register */
#define APBH_DEVSEL_CH0_MASK                     (0x3U)
#define APBH_DEVSEL_CH0_SHIFT                    (0U)
#define APBH_DEVSEL_CH0(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH0_SHIFT)) & APBH_DEVSEL_CH0_MASK)
#define APBH_DEVSEL_CH1_MASK                     (0xCU)
#define APBH_DEVSEL_CH1_SHIFT                    (2U)
#define APBH_DEVSEL_CH1(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH1_SHIFT)) & APBH_DEVSEL_CH1_MASK)
#define APBH_DEVSEL_CH2_MASK                     (0x30U)
#define APBH_DEVSEL_CH2_SHIFT                    (4U)
#define APBH_DEVSEL_CH2(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH2_SHIFT)) & APBH_DEVSEL_CH2_MASK)
#define APBH_DEVSEL_CH3_MASK                     (0xC0U)
#define APBH_DEVSEL_CH3_SHIFT                    (6U)
#define APBH_DEVSEL_CH3(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH3_SHIFT)) & APBH_DEVSEL_CH3_MASK)
#define APBH_DEVSEL_CH4_MASK                     (0x300U)
#define APBH_DEVSEL_CH4_SHIFT                    (8U)
#define APBH_DEVSEL_CH4(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH4_SHIFT)) & APBH_DEVSEL_CH4_MASK)
#define APBH_DEVSEL_CH5_MASK                     (0xC00U)
#define APBH_DEVSEL_CH5_SHIFT                    (10U)
#define APBH_DEVSEL_CH5(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH5_SHIFT)) & APBH_DEVSEL_CH5_MASK)
#define APBH_DEVSEL_CH6_MASK                     (0x3000U)
#define APBH_DEVSEL_CH6_SHIFT                    (12U)
#define APBH_DEVSEL_CH6(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH6_SHIFT)) & APBH_DEVSEL_CH6_MASK)
#define APBH_DEVSEL_CH7_MASK                     (0xC000U)
#define APBH_DEVSEL_CH7_SHIFT                    (14U)
#define APBH_DEVSEL_CH7(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH7_SHIFT)) & APBH_DEVSEL_CH7_MASK)
#define APBH_DEVSEL_CH8_MASK                     (0x30000U)
#define APBH_DEVSEL_CH8_SHIFT                    (16U)
#define APBH_DEVSEL_CH8(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH8_SHIFT)) & APBH_DEVSEL_CH8_MASK)
#define APBH_DEVSEL_CH9_MASK                     (0xC0000U)
#define APBH_DEVSEL_CH9_SHIFT                    (18U)
#define APBH_DEVSEL_CH9(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH9_SHIFT)) & APBH_DEVSEL_CH9_MASK)
#define APBH_DEVSEL_CH10_MASK                    (0x300000U)
#define APBH_DEVSEL_CH10_SHIFT                   (20U)
#define APBH_DEVSEL_CH10(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH10_SHIFT)) & APBH_DEVSEL_CH10_MASK)
#define APBH_DEVSEL_CH11_MASK                    (0xC00000U)
#define APBH_DEVSEL_CH11_SHIFT                   (22U)
#define APBH_DEVSEL_CH11(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH11_SHIFT)) & APBH_DEVSEL_CH11_MASK)
#define APBH_DEVSEL_CH12_MASK                    (0x3000000U)
#define APBH_DEVSEL_CH12_SHIFT                   (24U)
#define APBH_DEVSEL_CH12(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH12_SHIFT)) & APBH_DEVSEL_CH12_MASK)
#define APBH_DEVSEL_CH13_MASK                    (0xC000000U)
#define APBH_DEVSEL_CH13_SHIFT                   (26U)
#define APBH_DEVSEL_CH13(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH13_SHIFT)) & APBH_DEVSEL_CH13_MASK)
#define APBH_DEVSEL_CH14_MASK                    (0x30000000U)
#define APBH_DEVSEL_CH14_SHIFT                   (28U)
#define APBH_DEVSEL_CH14(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH14_SHIFT)) & APBH_DEVSEL_CH14_MASK)
#define APBH_DEVSEL_CH15_MASK                    (0xC0000000U)
#define APBH_DEVSEL_CH15_SHIFT                   (30U)
#define APBH_DEVSEL_CH15(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH15_SHIFT)) & APBH_DEVSEL_CH15_MASK)

/*! @name DMA_BURST_SIZE - AHB to APBH DMA burst size */
#define APBH_DMA_BURST_SIZE_CH0_MASK             (0x3U)
#define APBH_DMA_BURST_SIZE_CH0_SHIFT            (0U)
#define APBH_DMA_BURST_SIZE_CH0(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH0_SHIFT)) & APBH_DMA_BURST_SIZE_CH0_MASK)
#define APBH_DMA_BURST_SIZE_CH1_MASK             (0xCU)
#define APBH_DMA_BURST_SIZE_CH1_SHIFT            (2U)
#define APBH_DMA_BURST_SIZE_CH1(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH1_SHIFT)) & APBH_DMA_BURST_SIZE_CH1_MASK)
#define APBH_DMA_BURST_SIZE_CH2_MASK             (0x30U)
#define APBH_DMA_BURST_SIZE_CH2_SHIFT            (4U)
#define APBH_DMA_BURST_SIZE_CH2(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH2_SHIFT)) & APBH_DMA_BURST_SIZE_CH2_MASK)
#define APBH_DMA_BURST_SIZE_CH3_MASK             (0xC0U)
#define APBH_DMA_BURST_SIZE_CH3_SHIFT            (6U)
#define APBH_DMA_BURST_SIZE_CH3(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH3_SHIFT)) & APBH_DMA_BURST_SIZE_CH3_MASK)
#define APBH_DMA_BURST_SIZE_CH4_MASK             (0x300U)
#define APBH_DMA_BURST_SIZE_CH4_SHIFT            (8U)
#define APBH_DMA_BURST_SIZE_CH4(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH4_SHIFT)) & APBH_DMA_BURST_SIZE_CH4_MASK)
#define APBH_DMA_BURST_SIZE_CH5_MASK             (0xC00U)
#define APBH_DMA_BURST_SIZE_CH5_SHIFT            (10U)
#define APBH_DMA_BURST_SIZE_CH5(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH5_SHIFT)) & APBH_DMA_BURST_SIZE_CH5_MASK)
#define APBH_DMA_BURST_SIZE_CH6_MASK             (0x3000U)
#define APBH_DMA_BURST_SIZE_CH6_SHIFT            (12U)
#define APBH_DMA_BURST_SIZE_CH6(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH6_SHIFT)) & APBH_DMA_BURST_SIZE_CH6_MASK)
#define APBH_DMA_BURST_SIZE_CH7_MASK             (0xC000U)
#define APBH_DMA_BURST_SIZE_CH7_SHIFT            (14U)
#define APBH_DMA_BURST_SIZE_CH7(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH7_SHIFT)) & APBH_DMA_BURST_SIZE_CH7_MASK)
#define APBH_DMA_BURST_SIZE_CH8_MASK             (0x30000U)
#define APBH_DMA_BURST_SIZE_CH8_SHIFT            (16U)
#define APBH_DMA_BURST_SIZE_CH8(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH8_SHIFT)) & APBH_DMA_BURST_SIZE_CH8_MASK)
#define APBH_DMA_BURST_SIZE_CH9_MASK             (0xC0000U)
#define APBH_DMA_BURST_SIZE_CH9_SHIFT            (18U)
#define APBH_DMA_BURST_SIZE_CH9(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH9_SHIFT)) & APBH_DMA_BURST_SIZE_CH9_MASK)
#define APBH_DMA_BURST_SIZE_CH10_MASK            (0x300000U)
#define APBH_DMA_BURST_SIZE_CH10_SHIFT           (20U)
#define APBH_DMA_BURST_SIZE_CH10(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH10_SHIFT)) & APBH_DMA_BURST_SIZE_CH10_MASK)
#define APBH_DMA_BURST_SIZE_CH11_MASK            (0xC00000U)
#define APBH_DMA_BURST_SIZE_CH11_SHIFT           (22U)
#define APBH_DMA_BURST_SIZE_CH11(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH11_SHIFT)) & APBH_DMA_BURST_SIZE_CH11_MASK)
#define APBH_DMA_BURST_SIZE_CH12_MASK            (0x3000000U)
#define APBH_DMA_BURST_SIZE_CH12_SHIFT           (24U)
#define APBH_DMA_BURST_SIZE_CH12(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH12_SHIFT)) & APBH_DMA_BURST_SIZE_CH12_MASK)
#define APBH_DMA_BURST_SIZE_CH13_MASK            (0xC000000U)
#define APBH_DMA_BURST_SIZE_CH13_SHIFT           (26U)
#define APBH_DMA_BURST_SIZE_CH13(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH13_SHIFT)) & APBH_DMA_BURST_SIZE_CH13_MASK)
#define APBH_DMA_BURST_SIZE_CH14_MASK            (0x30000000U)
#define APBH_DMA_BURST_SIZE_CH14_SHIFT           (28U)
#define APBH_DMA_BURST_SIZE_CH14(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH14_SHIFT)) & APBH_DMA_BURST_SIZE_CH14_MASK)
#define APBH_DMA_BURST_SIZE_CH15_MASK            (0xC0000000U)
#define APBH_DMA_BURST_SIZE_CH15_SHIFT           (30U)
#define APBH_DMA_BURST_SIZE_CH15(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH15_SHIFT)) & APBH_DMA_BURST_SIZE_CH15_MASK)

/*! @name DEBUG - AHB to APBH DMA Debug Register */
#define APBH_DEBUG_GPMI_ONE_FIFO_MASK            (0x1U)
#define APBH_DEBUG_GPMI_ONE_FIFO_SHIFT           (0U)
#define APBH_DEBUG_GPMI_ONE_FIFO(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DEBUG_GPMI_ONE_FIFO_SHIFT)) & APBH_DEBUG_GPMI_ONE_FIFO_MASK)

/*! @name CH0_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH0_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH0_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH0_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH0_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH0_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH0_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH0_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH0_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH0_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH0_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH0_CMD - APBH DMA Channel n Command Register */
#define APBH_CH0_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH0_CMD_COMMAND_SHIFT               (0U)
#define APBH_CH0_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_COMMAND_SHIFT)) & APBH_CH0_CMD_COMMAND_MASK)
#define APBH_CH0_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH0_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH0_CMD_CHAIN(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_CHAIN_SHIFT)) & APBH_CH0_CMD_CHAIN_MASK)
#define APBH_CH0_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH0_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH0_CMD_IRQONCMPLT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_IRQONCMPLT_SHIFT)) & APBH_CH0_CMD_IRQONCMPLT_MASK)
#define APBH_CH0_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH0_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH0_CMD_NANDLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_NANDLOCK_SHIFT)) & APBH_CH0_CMD_NANDLOCK_MASK)
#define APBH_CH0_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH0_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH0_CMD_NANDWAIT4READY(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH0_CMD_NANDWAIT4READY_MASK)
#define APBH_CH0_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH0_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH0_CMD_SEMAPHORE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_SEMAPHORE_SHIFT)) & APBH_CH0_CMD_SEMAPHORE_MASK)
#define APBH_CH0_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH0_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH0_CMD_WAIT4ENDCMD(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH0_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH0_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH0_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH0_CMD_HALTONTERMINATE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH0_CMD_HALTONTERMINATE_MASK)
#define APBH_CH0_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH0_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH0_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_CMDWORDS_SHIFT)) & APBH_CH0_CMD_CMDWORDS_MASK)
#define APBH_CH0_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH0_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH0_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_XFER_COUNT_SHIFT)) & APBH_CH0_CMD_XFER_COUNT_MASK)

/*! @name CH0_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH0_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH0_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH0_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH0_BAR_ADDRESS_SHIFT)) & APBH_CH0_BAR_ADDRESS_MASK)

/*! @name CH0_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH0_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH0_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH0_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH0_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH0_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH0_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH0_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH0_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH0_SEMA_PHORE_SHIFT)) & APBH_CH0_SEMA_PHORE_MASK)

/*! @name CH0_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH0_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH0_DEBUG1_STATEMACHINE_SHIFT       (0U)
#define APBH_CH0_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH0_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH0_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH0_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH0_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_RSVD1_SHIFT)) & APBH_CH0_DEBUG1_RSVD1_MASK)
#define APBH_CH0_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH0_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH0_DEBUG1_WR_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH0_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH0_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH0_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH0_DEBUG1_WR_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH0_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH0_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH0_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH0_DEBUG1_RD_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH0_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH0_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH0_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH0_DEBUG1_RD_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH0_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH0_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH0_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH0_DEBUG1_NEXTCMDADDRVALID(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH0_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH0_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH0_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH0_DEBUG1_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_LOCK_SHIFT)) & APBH_CH0_DEBUG1_LOCK_MASK)
#define APBH_CH0_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH0_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH0_DEBUG1_READY(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_READY_SHIFT)) & APBH_CH0_DEBUG1_READY_MASK)
#define APBH_CH0_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH0_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH0_DEBUG1_SENSE(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_SENSE_SHIFT)) & APBH_CH0_DEBUG1_SENSE_MASK)
#define APBH_CH0_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH0_DEBUG1_END_SHIFT                (28U)
#define APBH_CH0_DEBUG1_END(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_END_SHIFT)) & APBH_CH0_DEBUG1_END_MASK)
#define APBH_CH0_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH0_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH0_DEBUG1_KICK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_KICK_SHIFT)) & APBH_CH0_DEBUG1_KICK_MASK)
#define APBH_CH0_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH0_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH0_DEBUG1_BURST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_BURST_SHIFT)) & APBH_CH0_DEBUG1_BURST_MASK)
#define APBH_CH0_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH0_DEBUG1_REQ_SHIFT                (31U)
#define APBH_CH0_DEBUG1_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_REQ_SHIFT)) & APBH_CH0_DEBUG1_REQ_MASK)

/*! @name CH0_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH0_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH0_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH0_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH0_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH0_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH0_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH0_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH0_DEBUG2_APB_BYTES_MASK)

/*! @name CH1_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH1_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH1_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH1_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH1_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH1_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH1_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH1_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH1_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH1_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH1_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH1_CMD - APBH DMA Channel n Command Register */
#define APBH_CH1_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH1_CMD_COMMAND_SHIFT               (0U)
#define APBH_CH1_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_COMMAND_SHIFT)) & APBH_CH1_CMD_COMMAND_MASK)
#define APBH_CH1_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH1_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH1_CMD_CHAIN(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_CHAIN_SHIFT)) & APBH_CH1_CMD_CHAIN_MASK)
#define APBH_CH1_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH1_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH1_CMD_IRQONCMPLT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_IRQONCMPLT_SHIFT)) & APBH_CH1_CMD_IRQONCMPLT_MASK)
#define APBH_CH1_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH1_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH1_CMD_NANDLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_NANDLOCK_SHIFT)) & APBH_CH1_CMD_NANDLOCK_MASK)
#define APBH_CH1_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH1_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH1_CMD_NANDWAIT4READY(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH1_CMD_NANDWAIT4READY_MASK)
#define APBH_CH1_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH1_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH1_CMD_SEMAPHORE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_SEMAPHORE_SHIFT)) & APBH_CH1_CMD_SEMAPHORE_MASK)
#define APBH_CH1_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH1_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH1_CMD_WAIT4ENDCMD(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH1_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH1_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH1_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH1_CMD_HALTONTERMINATE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH1_CMD_HALTONTERMINATE_MASK)
#define APBH_CH1_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH1_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH1_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_CMDWORDS_SHIFT)) & APBH_CH1_CMD_CMDWORDS_MASK)
#define APBH_CH1_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH1_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH1_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_XFER_COUNT_SHIFT)) & APBH_CH1_CMD_XFER_COUNT_MASK)

/*! @name CH1_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH1_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH1_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH1_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH1_BAR_ADDRESS_SHIFT)) & APBH_CH1_BAR_ADDRESS_MASK)

/*! @name CH1_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH1_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH1_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH1_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH1_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH1_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH1_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH1_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH1_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH1_SEMA_PHORE_SHIFT)) & APBH_CH1_SEMA_PHORE_MASK)

/*! @name CH1_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH1_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH1_DEBUG1_STATEMACHINE_SHIFT       (0U)
#define APBH_CH1_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH1_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH1_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH1_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH1_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_RSVD1_SHIFT)) & APBH_CH1_DEBUG1_RSVD1_MASK)
#define APBH_CH1_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH1_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH1_DEBUG1_WR_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH1_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH1_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH1_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH1_DEBUG1_WR_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH1_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH1_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH1_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH1_DEBUG1_RD_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH1_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH1_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH1_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH1_DEBUG1_RD_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH1_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH1_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH1_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH1_DEBUG1_NEXTCMDADDRVALID(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH1_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH1_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH1_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH1_DEBUG1_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_LOCK_SHIFT)) & APBH_CH1_DEBUG1_LOCK_MASK)
#define APBH_CH1_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH1_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH1_DEBUG1_READY(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_READY_SHIFT)) & APBH_CH1_DEBUG1_READY_MASK)
#define APBH_CH1_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH1_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH1_DEBUG1_SENSE(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_SENSE_SHIFT)) & APBH_CH1_DEBUG1_SENSE_MASK)
#define APBH_CH1_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH1_DEBUG1_END_SHIFT                (28U)
#define APBH_CH1_DEBUG1_END(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_END_SHIFT)) & APBH_CH1_DEBUG1_END_MASK)
#define APBH_CH1_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH1_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH1_DEBUG1_KICK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_KICK_SHIFT)) & APBH_CH1_DEBUG1_KICK_MASK)
#define APBH_CH1_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH1_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH1_DEBUG1_BURST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_BURST_SHIFT)) & APBH_CH1_DEBUG1_BURST_MASK)
#define APBH_CH1_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH1_DEBUG1_REQ_SHIFT                (31U)
#define APBH_CH1_DEBUG1_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_REQ_SHIFT)) & APBH_CH1_DEBUG1_REQ_MASK)

/*! @name CH1_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH1_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH1_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH1_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH1_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH1_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH1_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH1_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH1_DEBUG2_APB_BYTES_MASK)

/*! @name CH2_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH2_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH2_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH2_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH2_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH2_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH2_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH2_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH2_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH2_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH2_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH2_CMD - APBH DMA Channel n Command Register */
#define APBH_CH2_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH2_CMD_COMMAND_SHIFT               (0U)
#define APBH_CH2_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_COMMAND_SHIFT)) & APBH_CH2_CMD_COMMAND_MASK)
#define APBH_CH2_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH2_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH2_CMD_CHAIN(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_CHAIN_SHIFT)) & APBH_CH2_CMD_CHAIN_MASK)
#define APBH_CH2_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH2_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH2_CMD_IRQONCMPLT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_IRQONCMPLT_SHIFT)) & APBH_CH2_CMD_IRQONCMPLT_MASK)
#define APBH_CH2_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH2_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH2_CMD_NANDLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_NANDLOCK_SHIFT)) & APBH_CH2_CMD_NANDLOCK_MASK)
#define APBH_CH2_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH2_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH2_CMD_NANDWAIT4READY(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH2_CMD_NANDWAIT4READY_MASK)
#define APBH_CH2_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH2_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH2_CMD_SEMAPHORE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_SEMAPHORE_SHIFT)) & APBH_CH2_CMD_SEMAPHORE_MASK)
#define APBH_CH2_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH2_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH2_CMD_WAIT4ENDCMD(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH2_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH2_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH2_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH2_CMD_HALTONTERMINATE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH2_CMD_HALTONTERMINATE_MASK)
#define APBH_CH2_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH2_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH2_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_CMDWORDS_SHIFT)) & APBH_CH2_CMD_CMDWORDS_MASK)
#define APBH_CH2_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH2_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH2_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_XFER_COUNT_SHIFT)) & APBH_CH2_CMD_XFER_COUNT_MASK)

/*! @name CH2_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH2_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH2_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH2_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH2_BAR_ADDRESS_SHIFT)) & APBH_CH2_BAR_ADDRESS_MASK)

/*! @name CH2_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH2_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH2_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH2_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH2_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH2_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH2_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH2_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH2_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH2_SEMA_PHORE_SHIFT)) & APBH_CH2_SEMA_PHORE_MASK)

/*! @name CH2_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH2_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH2_DEBUG1_STATEMACHINE_SHIFT       (0U)
#define APBH_CH2_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH2_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH2_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH2_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH2_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_RSVD1_SHIFT)) & APBH_CH2_DEBUG1_RSVD1_MASK)
#define APBH_CH2_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH2_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH2_DEBUG1_WR_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH2_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH2_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH2_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH2_DEBUG1_WR_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH2_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH2_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH2_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH2_DEBUG1_RD_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH2_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH2_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH2_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH2_DEBUG1_RD_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH2_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH2_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH2_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH2_DEBUG1_NEXTCMDADDRVALID(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH2_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH2_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH2_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH2_DEBUG1_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_LOCK_SHIFT)) & APBH_CH2_DEBUG1_LOCK_MASK)
#define APBH_CH2_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH2_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH2_DEBUG1_READY(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_READY_SHIFT)) & APBH_CH2_DEBUG1_READY_MASK)
#define APBH_CH2_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH2_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH2_DEBUG1_SENSE(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_SENSE_SHIFT)) & APBH_CH2_DEBUG1_SENSE_MASK)
#define APBH_CH2_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH2_DEBUG1_END_SHIFT                (28U)
#define APBH_CH2_DEBUG1_END(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_END_SHIFT)) & APBH_CH2_DEBUG1_END_MASK)
#define APBH_CH2_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH2_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH2_DEBUG1_KICK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_KICK_SHIFT)) & APBH_CH2_DEBUG1_KICK_MASK)
#define APBH_CH2_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH2_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH2_DEBUG1_BURST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_BURST_SHIFT)) & APBH_CH2_DEBUG1_BURST_MASK)
#define APBH_CH2_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH2_DEBUG1_REQ_SHIFT                (31U)
#define APBH_CH2_DEBUG1_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_REQ_SHIFT)) & APBH_CH2_DEBUG1_REQ_MASK)

/*! @name CH2_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH2_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH2_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH2_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH2_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH2_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH2_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH2_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH2_DEBUG2_APB_BYTES_MASK)

/*! @name CH3_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH3_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH3_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH3_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH3_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH3_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH3_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH3_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH3_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH3_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH3_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH3_CMD - APBH DMA Channel n Command Register */
#define APBH_CH3_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH3_CMD_COMMAND_SHIFT               (0U)
#define APBH_CH3_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_COMMAND_SHIFT)) & APBH_CH3_CMD_COMMAND_MASK)
#define APBH_CH3_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH3_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH3_CMD_CHAIN(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_CHAIN_SHIFT)) & APBH_CH3_CMD_CHAIN_MASK)
#define APBH_CH3_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH3_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH3_CMD_IRQONCMPLT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_IRQONCMPLT_SHIFT)) & APBH_CH3_CMD_IRQONCMPLT_MASK)
#define APBH_CH3_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH3_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH3_CMD_NANDLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_NANDLOCK_SHIFT)) & APBH_CH3_CMD_NANDLOCK_MASK)
#define APBH_CH3_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH3_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH3_CMD_NANDWAIT4READY(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH3_CMD_NANDWAIT4READY_MASK)
#define APBH_CH3_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH3_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH3_CMD_SEMAPHORE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_SEMAPHORE_SHIFT)) & APBH_CH3_CMD_SEMAPHORE_MASK)
#define APBH_CH3_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH3_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH3_CMD_WAIT4ENDCMD(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH3_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH3_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH3_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH3_CMD_HALTONTERMINATE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH3_CMD_HALTONTERMINATE_MASK)
#define APBH_CH3_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH3_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH3_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_CMDWORDS_SHIFT)) & APBH_CH3_CMD_CMDWORDS_MASK)
#define APBH_CH3_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH3_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH3_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_XFER_COUNT_SHIFT)) & APBH_CH3_CMD_XFER_COUNT_MASK)

/*! @name CH3_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH3_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH3_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH3_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH3_BAR_ADDRESS_SHIFT)) & APBH_CH3_BAR_ADDRESS_MASK)

/*! @name CH3_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH3_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH3_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH3_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH3_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH3_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH3_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH3_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH3_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH3_SEMA_PHORE_SHIFT)) & APBH_CH3_SEMA_PHORE_MASK)

/*! @name CH3_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH3_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH3_DEBUG1_STATEMACHINE_SHIFT       (0U)
#define APBH_CH3_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH3_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH3_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH3_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH3_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_RSVD1_SHIFT)) & APBH_CH3_DEBUG1_RSVD1_MASK)
#define APBH_CH3_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH3_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH3_DEBUG1_WR_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH3_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH3_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH3_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH3_DEBUG1_WR_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH3_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH3_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH3_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH3_DEBUG1_RD_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH3_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH3_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH3_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH3_DEBUG1_RD_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH3_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH3_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH3_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH3_DEBUG1_NEXTCMDADDRVALID(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH3_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH3_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH3_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH3_DEBUG1_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_LOCK_SHIFT)) & APBH_CH3_DEBUG1_LOCK_MASK)
#define APBH_CH3_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH3_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH3_DEBUG1_READY(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_READY_SHIFT)) & APBH_CH3_DEBUG1_READY_MASK)
#define APBH_CH3_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH3_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH3_DEBUG1_SENSE(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_SENSE_SHIFT)) & APBH_CH3_DEBUG1_SENSE_MASK)
#define APBH_CH3_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH3_DEBUG1_END_SHIFT                (28U)
#define APBH_CH3_DEBUG1_END(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_END_SHIFT)) & APBH_CH3_DEBUG1_END_MASK)
#define APBH_CH3_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH3_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH3_DEBUG1_KICK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_KICK_SHIFT)) & APBH_CH3_DEBUG1_KICK_MASK)
#define APBH_CH3_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH3_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH3_DEBUG1_BURST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_BURST_SHIFT)) & APBH_CH3_DEBUG1_BURST_MASK)
#define APBH_CH3_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH3_DEBUG1_REQ_SHIFT                (31U)
#define APBH_CH3_DEBUG1_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_REQ_SHIFT)) & APBH_CH3_DEBUG1_REQ_MASK)

/*! @name CH3_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH3_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH3_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH3_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH3_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH3_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH3_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH3_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH3_DEBUG2_APB_BYTES_MASK)

/*! @name CH4_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH4_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH4_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH4_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH4_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH4_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH4_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH4_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH4_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH4_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH4_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH4_CMD - APBH DMA Channel n Command Register */
#define APBH_CH4_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH4_CMD_COMMAND_SHIFT               (0U)
#define APBH_CH4_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_COMMAND_SHIFT)) & APBH_CH4_CMD_COMMAND_MASK)
#define APBH_CH4_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH4_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH4_CMD_CHAIN(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_CHAIN_SHIFT)) & APBH_CH4_CMD_CHAIN_MASK)
#define APBH_CH4_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH4_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH4_CMD_IRQONCMPLT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_IRQONCMPLT_SHIFT)) & APBH_CH4_CMD_IRQONCMPLT_MASK)
#define APBH_CH4_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH4_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH4_CMD_NANDLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_NANDLOCK_SHIFT)) & APBH_CH4_CMD_NANDLOCK_MASK)
#define APBH_CH4_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH4_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH4_CMD_NANDWAIT4READY(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH4_CMD_NANDWAIT4READY_MASK)
#define APBH_CH4_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH4_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH4_CMD_SEMAPHORE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_SEMAPHORE_SHIFT)) & APBH_CH4_CMD_SEMAPHORE_MASK)
#define APBH_CH4_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH4_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH4_CMD_WAIT4ENDCMD(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH4_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH4_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH4_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH4_CMD_HALTONTERMINATE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH4_CMD_HALTONTERMINATE_MASK)
#define APBH_CH4_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH4_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH4_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_CMDWORDS_SHIFT)) & APBH_CH4_CMD_CMDWORDS_MASK)
#define APBH_CH4_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH4_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH4_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_XFER_COUNT_SHIFT)) & APBH_CH4_CMD_XFER_COUNT_MASK)

/*! @name CH4_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH4_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH4_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH4_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH4_BAR_ADDRESS_SHIFT)) & APBH_CH4_BAR_ADDRESS_MASK)

/*! @name CH4_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH4_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH4_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH4_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH4_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH4_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH4_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH4_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH4_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH4_SEMA_PHORE_SHIFT)) & APBH_CH4_SEMA_PHORE_MASK)

/*! @name CH4_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH4_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH4_DEBUG1_STATEMACHINE_SHIFT       (0U)
#define APBH_CH4_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH4_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH4_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH4_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH4_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_RSVD1_SHIFT)) & APBH_CH4_DEBUG1_RSVD1_MASK)
#define APBH_CH4_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH4_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH4_DEBUG1_WR_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH4_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH4_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH4_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH4_DEBUG1_WR_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH4_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH4_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH4_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH4_DEBUG1_RD_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH4_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH4_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH4_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH4_DEBUG1_RD_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH4_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH4_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH4_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH4_DEBUG1_NEXTCMDADDRVALID(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH4_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH4_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH4_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH4_DEBUG1_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_LOCK_SHIFT)) & APBH_CH4_DEBUG1_LOCK_MASK)
#define APBH_CH4_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH4_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH4_DEBUG1_READY(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_READY_SHIFT)) & APBH_CH4_DEBUG1_READY_MASK)
#define APBH_CH4_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH4_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH4_DEBUG1_SENSE(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_SENSE_SHIFT)) & APBH_CH4_DEBUG1_SENSE_MASK)
#define APBH_CH4_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH4_DEBUG1_END_SHIFT                (28U)
#define APBH_CH4_DEBUG1_END(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_END_SHIFT)) & APBH_CH4_DEBUG1_END_MASK)
#define APBH_CH4_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH4_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH4_DEBUG1_KICK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_KICK_SHIFT)) & APBH_CH4_DEBUG1_KICK_MASK)
#define APBH_CH4_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH4_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH4_DEBUG1_BURST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_BURST_SHIFT)) & APBH_CH4_DEBUG1_BURST_MASK)
#define APBH_CH4_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH4_DEBUG1_REQ_SHIFT                (31U)
#define APBH_CH4_DEBUG1_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_REQ_SHIFT)) & APBH_CH4_DEBUG1_REQ_MASK)

/*! @name CH4_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH4_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH4_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH4_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH4_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH4_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH4_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH4_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH4_DEBUG2_APB_BYTES_MASK)

/*! @name CH5_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH5_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH5_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH5_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH5_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH5_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH5_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH5_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH5_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH5_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH5_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH5_CMD - APBH DMA Channel n Command Register */
#define APBH_CH5_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH5_CMD_COMMAND_SHIFT               (0U)
#define APBH_CH5_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_COMMAND_SHIFT)) & APBH_CH5_CMD_COMMAND_MASK)
#define APBH_CH5_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH5_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH5_CMD_CHAIN(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_CHAIN_SHIFT)) & APBH_CH5_CMD_CHAIN_MASK)
#define APBH_CH5_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH5_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH5_CMD_IRQONCMPLT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_IRQONCMPLT_SHIFT)) & APBH_CH5_CMD_IRQONCMPLT_MASK)
#define APBH_CH5_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH5_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH5_CMD_NANDLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_NANDLOCK_SHIFT)) & APBH_CH5_CMD_NANDLOCK_MASK)
#define APBH_CH5_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH5_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH5_CMD_NANDWAIT4READY(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH5_CMD_NANDWAIT4READY_MASK)
#define APBH_CH5_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH5_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH5_CMD_SEMAPHORE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_SEMAPHORE_SHIFT)) & APBH_CH5_CMD_SEMAPHORE_MASK)
#define APBH_CH5_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH5_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH5_CMD_WAIT4ENDCMD(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH5_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH5_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH5_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH5_CMD_HALTONTERMINATE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH5_CMD_HALTONTERMINATE_MASK)
#define APBH_CH5_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH5_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH5_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_CMDWORDS_SHIFT)) & APBH_CH5_CMD_CMDWORDS_MASK)
#define APBH_CH5_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH5_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH5_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_XFER_COUNT_SHIFT)) & APBH_CH5_CMD_XFER_COUNT_MASK)

/*! @name CH5_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH5_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH5_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH5_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH5_BAR_ADDRESS_SHIFT)) & APBH_CH5_BAR_ADDRESS_MASK)

/*! @name CH5_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH5_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH5_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH5_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH5_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH5_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH5_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH5_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH5_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH5_SEMA_PHORE_SHIFT)) & APBH_CH5_SEMA_PHORE_MASK)

/*! @name CH5_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH5_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH5_DEBUG1_STATEMACHINE_SHIFT       (0U)
#define APBH_CH5_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH5_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH5_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH5_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH5_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_RSVD1_SHIFT)) & APBH_CH5_DEBUG1_RSVD1_MASK)
#define APBH_CH5_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH5_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH5_DEBUG1_WR_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH5_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH5_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH5_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH5_DEBUG1_WR_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH5_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH5_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH5_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH5_DEBUG1_RD_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH5_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH5_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH5_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH5_DEBUG1_RD_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH5_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH5_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH5_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH5_DEBUG1_NEXTCMDADDRVALID(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH5_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH5_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH5_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH5_DEBUG1_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_LOCK_SHIFT)) & APBH_CH5_DEBUG1_LOCK_MASK)
#define APBH_CH5_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH5_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH5_DEBUG1_READY(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_READY_SHIFT)) & APBH_CH5_DEBUG1_READY_MASK)
#define APBH_CH5_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH5_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH5_DEBUG1_SENSE(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_SENSE_SHIFT)) & APBH_CH5_DEBUG1_SENSE_MASK)
#define APBH_CH5_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH5_DEBUG1_END_SHIFT                (28U)
#define APBH_CH5_DEBUG1_END(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_END_SHIFT)) & APBH_CH5_DEBUG1_END_MASK)
#define APBH_CH5_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH5_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH5_DEBUG1_KICK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_KICK_SHIFT)) & APBH_CH5_DEBUG1_KICK_MASK)
#define APBH_CH5_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH5_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH5_DEBUG1_BURST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_BURST_SHIFT)) & APBH_CH5_DEBUG1_BURST_MASK)
#define APBH_CH5_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH5_DEBUG1_REQ_SHIFT                (31U)
#define APBH_CH5_DEBUG1_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_REQ_SHIFT)) & APBH_CH5_DEBUG1_REQ_MASK)

/*! @name CH5_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH5_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH5_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH5_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH5_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH5_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH5_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH5_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH5_DEBUG2_APB_BYTES_MASK)

/*! @name CH6_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH6_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH6_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH6_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH6_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH6_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH6_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH6_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH6_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH6_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH6_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH6_CMD - APBH DMA Channel n Command Register */
#define APBH_CH6_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH6_CMD_COMMAND_SHIFT               (0U)
#define APBH_CH6_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_COMMAND_SHIFT)) & APBH_CH6_CMD_COMMAND_MASK)
#define APBH_CH6_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH6_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH6_CMD_CHAIN(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_CHAIN_SHIFT)) & APBH_CH6_CMD_CHAIN_MASK)
#define APBH_CH6_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH6_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH6_CMD_IRQONCMPLT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_IRQONCMPLT_SHIFT)) & APBH_CH6_CMD_IRQONCMPLT_MASK)
#define APBH_CH6_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH6_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH6_CMD_NANDLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_NANDLOCK_SHIFT)) & APBH_CH6_CMD_NANDLOCK_MASK)
#define APBH_CH6_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH6_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH6_CMD_NANDWAIT4READY(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH6_CMD_NANDWAIT4READY_MASK)
#define APBH_CH6_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH6_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH6_CMD_SEMAPHORE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_SEMAPHORE_SHIFT)) & APBH_CH6_CMD_SEMAPHORE_MASK)
#define APBH_CH6_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH6_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH6_CMD_WAIT4ENDCMD(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH6_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH6_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH6_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH6_CMD_HALTONTERMINATE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH6_CMD_HALTONTERMINATE_MASK)
#define APBH_CH6_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH6_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH6_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_CMDWORDS_SHIFT)) & APBH_CH6_CMD_CMDWORDS_MASK)
#define APBH_CH6_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH6_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH6_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_XFER_COUNT_SHIFT)) & APBH_CH6_CMD_XFER_COUNT_MASK)

/*! @name CH6_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH6_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH6_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH6_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH6_BAR_ADDRESS_SHIFT)) & APBH_CH6_BAR_ADDRESS_MASK)

/*! @name CH6_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH6_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH6_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH6_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH6_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH6_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH6_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH6_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH6_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH6_SEMA_PHORE_SHIFT)) & APBH_CH6_SEMA_PHORE_MASK)

/*! @name CH6_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH6_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH6_DEBUG1_STATEMACHINE_SHIFT       (0U)
#define APBH_CH6_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH6_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH6_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH6_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH6_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_RSVD1_SHIFT)) & APBH_CH6_DEBUG1_RSVD1_MASK)
#define APBH_CH6_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH6_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH6_DEBUG1_WR_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH6_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH6_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH6_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH6_DEBUG1_WR_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH6_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH6_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH6_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH6_DEBUG1_RD_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH6_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH6_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH6_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH6_DEBUG1_RD_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH6_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH6_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH6_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH6_DEBUG1_NEXTCMDADDRVALID(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH6_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH6_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH6_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH6_DEBUG1_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_LOCK_SHIFT)) & APBH_CH6_DEBUG1_LOCK_MASK)
#define APBH_CH6_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH6_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH6_DEBUG1_READY(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_READY_SHIFT)) & APBH_CH6_DEBUG1_READY_MASK)
#define APBH_CH6_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH6_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH6_DEBUG1_SENSE(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_SENSE_SHIFT)) & APBH_CH6_DEBUG1_SENSE_MASK)
#define APBH_CH6_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH6_DEBUG1_END_SHIFT                (28U)
#define APBH_CH6_DEBUG1_END(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_END_SHIFT)) & APBH_CH6_DEBUG1_END_MASK)
#define APBH_CH6_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH6_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH6_DEBUG1_KICK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_KICK_SHIFT)) & APBH_CH6_DEBUG1_KICK_MASK)
#define APBH_CH6_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH6_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH6_DEBUG1_BURST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_BURST_SHIFT)) & APBH_CH6_DEBUG1_BURST_MASK)
#define APBH_CH6_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH6_DEBUG1_REQ_SHIFT                (31U)
#define APBH_CH6_DEBUG1_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_REQ_SHIFT)) & APBH_CH6_DEBUG1_REQ_MASK)

/*! @name CH6_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH6_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH6_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH6_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH6_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH6_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH6_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH6_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH6_DEBUG2_APB_BYTES_MASK)

/*! @name CH7_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH7_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH7_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH7_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH7_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH7_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH7_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH7_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH7_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH7_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH7_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH7_CMD - APBH DMA Channel n Command Register */
#define APBH_CH7_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH7_CMD_COMMAND_SHIFT               (0U)
#define APBH_CH7_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_COMMAND_SHIFT)) & APBH_CH7_CMD_COMMAND_MASK)
#define APBH_CH7_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH7_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH7_CMD_CHAIN(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_CHAIN_SHIFT)) & APBH_CH7_CMD_CHAIN_MASK)
#define APBH_CH7_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH7_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH7_CMD_IRQONCMPLT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_IRQONCMPLT_SHIFT)) & APBH_CH7_CMD_IRQONCMPLT_MASK)
#define APBH_CH7_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH7_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH7_CMD_NANDLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_NANDLOCK_SHIFT)) & APBH_CH7_CMD_NANDLOCK_MASK)
#define APBH_CH7_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH7_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH7_CMD_NANDWAIT4READY(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH7_CMD_NANDWAIT4READY_MASK)
#define APBH_CH7_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH7_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH7_CMD_SEMAPHORE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_SEMAPHORE_SHIFT)) & APBH_CH7_CMD_SEMAPHORE_MASK)
#define APBH_CH7_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH7_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH7_CMD_WAIT4ENDCMD(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH7_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH7_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH7_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH7_CMD_HALTONTERMINATE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH7_CMD_HALTONTERMINATE_MASK)
#define APBH_CH7_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH7_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH7_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_CMDWORDS_SHIFT)) & APBH_CH7_CMD_CMDWORDS_MASK)
#define APBH_CH7_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH7_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH7_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_XFER_COUNT_SHIFT)) & APBH_CH7_CMD_XFER_COUNT_MASK)

/*! @name CH7_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH7_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH7_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH7_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH7_BAR_ADDRESS_SHIFT)) & APBH_CH7_BAR_ADDRESS_MASK)

/*! @name CH7_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH7_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH7_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH7_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH7_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH7_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH7_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH7_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH7_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH7_SEMA_PHORE_SHIFT)) & APBH_CH7_SEMA_PHORE_MASK)

/*! @name CH7_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH7_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH7_DEBUG1_STATEMACHINE_SHIFT       (0U)
#define APBH_CH7_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH7_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH7_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH7_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH7_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_RSVD1_SHIFT)) & APBH_CH7_DEBUG1_RSVD1_MASK)
#define APBH_CH7_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH7_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH7_DEBUG1_WR_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH7_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH7_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH7_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH7_DEBUG1_WR_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH7_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH7_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH7_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH7_DEBUG1_RD_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH7_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH7_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH7_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH7_DEBUG1_RD_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH7_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH7_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH7_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH7_DEBUG1_NEXTCMDADDRVALID(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH7_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH7_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH7_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH7_DEBUG1_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_LOCK_SHIFT)) & APBH_CH7_DEBUG1_LOCK_MASK)
#define APBH_CH7_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH7_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH7_DEBUG1_READY(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_READY_SHIFT)) & APBH_CH7_DEBUG1_READY_MASK)
#define APBH_CH7_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH7_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH7_DEBUG1_SENSE(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_SENSE_SHIFT)) & APBH_CH7_DEBUG1_SENSE_MASK)
#define APBH_CH7_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH7_DEBUG1_END_SHIFT                (28U)
#define APBH_CH7_DEBUG1_END(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_END_SHIFT)) & APBH_CH7_DEBUG1_END_MASK)
#define APBH_CH7_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH7_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH7_DEBUG1_KICK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_KICK_SHIFT)) & APBH_CH7_DEBUG1_KICK_MASK)
#define APBH_CH7_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH7_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH7_DEBUG1_BURST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_BURST_SHIFT)) & APBH_CH7_DEBUG1_BURST_MASK)
#define APBH_CH7_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH7_DEBUG1_REQ_SHIFT                (31U)
#define APBH_CH7_DEBUG1_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_REQ_SHIFT)) & APBH_CH7_DEBUG1_REQ_MASK)

/*! @name CH7_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH7_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH7_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH7_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH7_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH7_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH7_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH7_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH7_DEBUG2_APB_BYTES_MASK)

/*! @name CH8_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH8_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH8_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH8_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH8_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH8_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH8_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH8_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH8_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH8_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH8_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH8_CMD - APBH DMA Channel n Command Register */
#define APBH_CH8_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH8_CMD_COMMAND_SHIFT               (0U)
#define APBH_CH8_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_COMMAND_SHIFT)) & APBH_CH8_CMD_COMMAND_MASK)
#define APBH_CH8_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH8_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH8_CMD_CHAIN(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_CHAIN_SHIFT)) & APBH_CH8_CMD_CHAIN_MASK)
#define APBH_CH8_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH8_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH8_CMD_IRQONCMPLT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_IRQONCMPLT_SHIFT)) & APBH_CH8_CMD_IRQONCMPLT_MASK)
#define APBH_CH8_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH8_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH8_CMD_NANDLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_NANDLOCK_SHIFT)) & APBH_CH8_CMD_NANDLOCK_MASK)
#define APBH_CH8_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH8_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH8_CMD_NANDWAIT4READY(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH8_CMD_NANDWAIT4READY_MASK)
#define APBH_CH8_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH8_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH8_CMD_SEMAPHORE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_SEMAPHORE_SHIFT)) & APBH_CH8_CMD_SEMAPHORE_MASK)
#define APBH_CH8_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH8_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH8_CMD_WAIT4ENDCMD(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH8_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH8_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH8_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH8_CMD_HALTONTERMINATE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH8_CMD_HALTONTERMINATE_MASK)
#define APBH_CH8_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH8_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH8_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_CMDWORDS_SHIFT)) & APBH_CH8_CMD_CMDWORDS_MASK)
#define APBH_CH8_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH8_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH8_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_XFER_COUNT_SHIFT)) & APBH_CH8_CMD_XFER_COUNT_MASK)

/*! @name CH8_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH8_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH8_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH8_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH8_BAR_ADDRESS_SHIFT)) & APBH_CH8_BAR_ADDRESS_MASK)

/*! @name CH8_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH8_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH8_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH8_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH8_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH8_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH8_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH8_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH8_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH8_SEMA_PHORE_SHIFT)) & APBH_CH8_SEMA_PHORE_MASK)

/*! @name CH8_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH8_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH8_DEBUG1_STATEMACHINE_SHIFT       (0U)
#define APBH_CH8_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH8_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH8_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH8_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH8_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_RSVD1_SHIFT)) & APBH_CH8_DEBUG1_RSVD1_MASK)
#define APBH_CH8_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH8_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH8_DEBUG1_WR_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH8_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH8_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH8_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH8_DEBUG1_WR_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH8_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH8_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH8_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH8_DEBUG1_RD_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH8_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH8_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH8_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH8_DEBUG1_RD_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH8_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH8_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH8_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH8_DEBUG1_NEXTCMDADDRVALID(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH8_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH8_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH8_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH8_DEBUG1_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_LOCK_SHIFT)) & APBH_CH8_DEBUG1_LOCK_MASK)
#define APBH_CH8_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH8_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH8_DEBUG1_READY(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_READY_SHIFT)) & APBH_CH8_DEBUG1_READY_MASK)
#define APBH_CH8_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH8_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH8_DEBUG1_SENSE(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_SENSE_SHIFT)) & APBH_CH8_DEBUG1_SENSE_MASK)
#define APBH_CH8_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH8_DEBUG1_END_SHIFT                (28U)
#define APBH_CH8_DEBUG1_END(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_END_SHIFT)) & APBH_CH8_DEBUG1_END_MASK)
#define APBH_CH8_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH8_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH8_DEBUG1_KICK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_KICK_SHIFT)) & APBH_CH8_DEBUG1_KICK_MASK)
#define APBH_CH8_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH8_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH8_DEBUG1_BURST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_BURST_SHIFT)) & APBH_CH8_DEBUG1_BURST_MASK)
#define APBH_CH8_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH8_DEBUG1_REQ_SHIFT                (31U)
#define APBH_CH8_DEBUG1_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_REQ_SHIFT)) & APBH_CH8_DEBUG1_REQ_MASK)

/*! @name CH8_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH8_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH8_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH8_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH8_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH8_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH8_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH8_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH8_DEBUG2_APB_BYTES_MASK)

/*! @name CH9_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH9_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH9_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH9_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH9_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH9_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH9_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH9_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH9_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH9_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH9_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH9_CMD - APBH DMA Channel n Command Register */
#define APBH_CH9_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH9_CMD_COMMAND_SHIFT               (0U)
#define APBH_CH9_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_COMMAND_SHIFT)) & APBH_CH9_CMD_COMMAND_MASK)
#define APBH_CH9_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH9_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH9_CMD_CHAIN(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_CHAIN_SHIFT)) & APBH_CH9_CMD_CHAIN_MASK)
#define APBH_CH9_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH9_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH9_CMD_IRQONCMPLT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_IRQONCMPLT_SHIFT)) & APBH_CH9_CMD_IRQONCMPLT_MASK)
#define APBH_CH9_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH9_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH9_CMD_NANDLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_NANDLOCK_SHIFT)) & APBH_CH9_CMD_NANDLOCK_MASK)
#define APBH_CH9_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH9_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH9_CMD_NANDWAIT4READY(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH9_CMD_NANDWAIT4READY_MASK)
#define APBH_CH9_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH9_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH9_CMD_SEMAPHORE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_SEMAPHORE_SHIFT)) & APBH_CH9_CMD_SEMAPHORE_MASK)
#define APBH_CH9_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH9_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH9_CMD_WAIT4ENDCMD(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH9_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH9_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH9_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH9_CMD_HALTONTERMINATE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH9_CMD_HALTONTERMINATE_MASK)
#define APBH_CH9_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH9_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH9_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_CMDWORDS_SHIFT)) & APBH_CH9_CMD_CMDWORDS_MASK)
#define APBH_CH9_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH9_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH9_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_XFER_COUNT_SHIFT)) & APBH_CH9_CMD_XFER_COUNT_MASK)

/*! @name CH9_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH9_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH9_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH9_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH9_BAR_ADDRESS_SHIFT)) & APBH_CH9_BAR_ADDRESS_MASK)

/*! @name CH9_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH9_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH9_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH9_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH9_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH9_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH9_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH9_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH9_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH9_SEMA_PHORE_SHIFT)) & APBH_CH9_SEMA_PHORE_MASK)

/*! @name CH9_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH9_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH9_DEBUG1_STATEMACHINE_SHIFT       (0U)
#define APBH_CH9_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH9_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH9_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH9_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH9_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_RSVD1_SHIFT)) & APBH_CH9_DEBUG1_RSVD1_MASK)
#define APBH_CH9_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH9_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH9_DEBUG1_WR_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH9_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH9_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH9_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH9_DEBUG1_WR_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH9_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH9_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH9_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH9_DEBUG1_RD_FIFO_FULL(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH9_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH9_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH9_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH9_DEBUG1_RD_FIFO_EMPTY(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH9_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH9_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH9_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH9_DEBUG1_NEXTCMDADDRVALID(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH9_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH9_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH9_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH9_DEBUG1_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_LOCK_SHIFT)) & APBH_CH9_DEBUG1_LOCK_MASK)
#define APBH_CH9_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH9_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH9_DEBUG1_READY(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_READY_SHIFT)) & APBH_CH9_DEBUG1_READY_MASK)
#define APBH_CH9_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH9_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH9_DEBUG1_SENSE(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_SENSE_SHIFT)) & APBH_CH9_DEBUG1_SENSE_MASK)
#define APBH_CH9_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH9_DEBUG1_END_SHIFT                (28U)
#define APBH_CH9_DEBUG1_END(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_END_SHIFT)) & APBH_CH9_DEBUG1_END_MASK)
#define APBH_CH9_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH9_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH9_DEBUG1_KICK(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_KICK_SHIFT)) & APBH_CH9_DEBUG1_KICK_MASK)
#define APBH_CH9_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH9_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH9_DEBUG1_BURST(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_BURST_SHIFT)) & APBH_CH9_DEBUG1_BURST_MASK)
#define APBH_CH9_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH9_DEBUG1_REQ_SHIFT                (31U)
#define APBH_CH9_DEBUG1_REQ(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_REQ_SHIFT)) & APBH_CH9_DEBUG1_REQ_MASK)

/*! @name CH9_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH9_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH9_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH9_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH9_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH9_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH9_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH9_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH9_DEBUG2_APB_BYTES_MASK)

/*! @name CH10_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH10_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH10_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH10_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH10_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH10_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH10_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH10_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH10_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH10_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH10_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH10_CMD - APBH DMA Channel n Command Register */
#define APBH_CH10_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH10_CMD_COMMAND_SHIFT              (0U)
#define APBH_CH10_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_COMMAND_SHIFT)) & APBH_CH10_CMD_COMMAND_MASK)
#define APBH_CH10_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH10_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH10_CMD_CHAIN(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_CHAIN_SHIFT)) & APBH_CH10_CMD_CHAIN_MASK)
#define APBH_CH10_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH10_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH10_CMD_IRQONCMPLT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_IRQONCMPLT_SHIFT)) & APBH_CH10_CMD_IRQONCMPLT_MASK)
#define APBH_CH10_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH10_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH10_CMD_NANDLOCK(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_NANDLOCK_SHIFT)) & APBH_CH10_CMD_NANDLOCK_MASK)
#define APBH_CH10_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH10_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH10_CMD_NANDWAIT4READY(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH10_CMD_NANDWAIT4READY_MASK)
#define APBH_CH10_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH10_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH10_CMD_SEMAPHORE(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_SEMAPHORE_SHIFT)) & APBH_CH10_CMD_SEMAPHORE_MASK)
#define APBH_CH10_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH10_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH10_CMD_WAIT4ENDCMD(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH10_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH10_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH10_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH10_CMD_HALTONTERMINATE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH10_CMD_HALTONTERMINATE_MASK)
#define APBH_CH10_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH10_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH10_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_CMDWORDS_SHIFT)) & APBH_CH10_CMD_CMDWORDS_MASK)
#define APBH_CH10_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH10_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH10_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_XFER_COUNT_SHIFT)) & APBH_CH10_CMD_XFER_COUNT_MASK)

/*! @name CH10_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH10_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH10_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH10_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH10_BAR_ADDRESS_SHIFT)) & APBH_CH10_BAR_ADDRESS_MASK)

/*! @name CH10_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH10_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH10_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH10_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH10_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH10_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH10_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH10_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH10_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH10_SEMA_PHORE_SHIFT)) & APBH_CH10_SEMA_PHORE_MASK)

/*! @name CH10_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH10_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH10_DEBUG1_STATEMACHINE_SHIFT      (0U)
#define APBH_CH10_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH10_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH10_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH10_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH10_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_RSVD1_SHIFT)) & APBH_CH10_DEBUG1_RSVD1_MASK)
#define APBH_CH10_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH10_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH10_DEBUG1_WR_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH10_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH10_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH10_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH10_DEBUG1_WR_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH10_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH10_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH10_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH10_DEBUG1_RD_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH10_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH10_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH10_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH10_DEBUG1_RD_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH10_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH10_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH10_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH10_DEBUG1_NEXTCMDADDRVALID(x)     (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH10_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH10_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH10_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH10_DEBUG1_LOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_LOCK_SHIFT)) & APBH_CH10_DEBUG1_LOCK_MASK)
#define APBH_CH10_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH10_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH10_DEBUG1_READY(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_READY_SHIFT)) & APBH_CH10_DEBUG1_READY_MASK)
#define APBH_CH10_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH10_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH10_DEBUG1_SENSE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_SENSE_SHIFT)) & APBH_CH10_DEBUG1_SENSE_MASK)
#define APBH_CH10_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH10_DEBUG1_END_SHIFT               (28U)
#define APBH_CH10_DEBUG1_END(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_END_SHIFT)) & APBH_CH10_DEBUG1_END_MASK)
#define APBH_CH10_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH10_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH10_DEBUG1_KICK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_KICK_SHIFT)) & APBH_CH10_DEBUG1_KICK_MASK)
#define APBH_CH10_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH10_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH10_DEBUG1_BURST(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_BURST_SHIFT)) & APBH_CH10_DEBUG1_BURST_MASK)
#define APBH_CH10_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH10_DEBUG1_REQ_SHIFT               (31U)
#define APBH_CH10_DEBUG1_REQ(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_REQ_SHIFT)) & APBH_CH10_DEBUG1_REQ_MASK)

/*! @name CH10_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH10_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH10_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH10_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH10_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH10_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH10_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH10_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH10_DEBUG2_APB_BYTES_MASK)

/*! @name CH11_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH11_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH11_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH11_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH11_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH11_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH11_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH11_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH11_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH11_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH11_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH11_CMD - APBH DMA Channel n Command Register */
#define APBH_CH11_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH11_CMD_COMMAND_SHIFT              (0U)
#define APBH_CH11_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_COMMAND_SHIFT)) & APBH_CH11_CMD_COMMAND_MASK)
#define APBH_CH11_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH11_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH11_CMD_CHAIN(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_CHAIN_SHIFT)) & APBH_CH11_CMD_CHAIN_MASK)
#define APBH_CH11_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH11_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH11_CMD_IRQONCMPLT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_IRQONCMPLT_SHIFT)) & APBH_CH11_CMD_IRQONCMPLT_MASK)
#define APBH_CH11_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH11_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH11_CMD_NANDLOCK(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_NANDLOCK_SHIFT)) & APBH_CH11_CMD_NANDLOCK_MASK)
#define APBH_CH11_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH11_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH11_CMD_NANDWAIT4READY(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH11_CMD_NANDWAIT4READY_MASK)
#define APBH_CH11_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH11_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH11_CMD_SEMAPHORE(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_SEMAPHORE_SHIFT)) & APBH_CH11_CMD_SEMAPHORE_MASK)
#define APBH_CH11_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH11_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH11_CMD_WAIT4ENDCMD(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH11_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH11_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH11_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH11_CMD_HALTONTERMINATE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH11_CMD_HALTONTERMINATE_MASK)
#define APBH_CH11_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH11_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH11_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_CMDWORDS_SHIFT)) & APBH_CH11_CMD_CMDWORDS_MASK)
#define APBH_CH11_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH11_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH11_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_XFER_COUNT_SHIFT)) & APBH_CH11_CMD_XFER_COUNT_MASK)

/*! @name CH11_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH11_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH11_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH11_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH11_BAR_ADDRESS_SHIFT)) & APBH_CH11_BAR_ADDRESS_MASK)

/*! @name CH11_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH11_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH11_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH11_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH11_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH11_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH11_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH11_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH11_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH11_SEMA_PHORE_SHIFT)) & APBH_CH11_SEMA_PHORE_MASK)

/*! @name CH11_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH11_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH11_DEBUG1_STATEMACHINE_SHIFT      (0U)
#define APBH_CH11_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH11_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH11_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH11_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH11_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_RSVD1_SHIFT)) & APBH_CH11_DEBUG1_RSVD1_MASK)
#define APBH_CH11_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH11_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH11_DEBUG1_WR_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH11_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH11_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH11_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH11_DEBUG1_WR_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH11_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH11_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH11_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH11_DEBUG1_RD_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH11_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH11_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH11_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH11_DEBUG1_RD_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH11_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH11_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH11_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH11_DEBUG1_NEXTCMDADDRVALID(x)     (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH11_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH11_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH11_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH11_DEBUG1_LOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_LOCK_SHIFT)) & APBH_CH11_DEBUG1_LOCK_MASK)
#define APBH_CH11_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH11_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH11_DEBUG1_READY(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_READY_SHIFT)) & APBH_CH11_DEBUG1_READY_MASK)
#define APBH_CH11_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH11_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH11_DEBUG1_SENSE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_SENSE_SHIFT)) & APBH_CH11_DEBUG1_SENSE_MASK)
#define APBH_CH11_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH11_DEBUG1_END_SHIFT               (28U)
#define APBH_CH11_DEBUG1_END(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_END_SHIFT)) & APBH_CH11_DEBUG1_END_MASK)
#define APBH_CH11_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH11_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH11_DEBUG1_KICK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_KICK_SHIFT)) & APBH_CH11_DEBUG1_KICK_MASK)
#define APBH_CH11_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH11_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH11_DEBUG1_BURST(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_BURST_SHIFT)) & APBH_CH11_DEBUG1_BURST_MASK)
#define APBH_CH11_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH11_DEBUG1_REQ_SHIFT               (31U)
#define APBH_CH11_DEBUG1_REQ(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_REQ_SHIFT)) & APBH_CH11_DEBUG1_REQ_MASK)

/*! @name CH11_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH11_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH11_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH11_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH11_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH11_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH11_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH11_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH11_DEBUG2_APB_BYTES_MASK)

/*! @name CH12_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH12_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH12_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH12_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH12_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH12_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH12_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH12_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH12_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH12_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH12_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH12_CMD - APBH DMA Channel n Command Register */
#define APBH_CH12_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH12_CMD_COMMAND_SHIFT              (0U)
#define APBH_CH12_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_COMMAND_SHIFT)) & APBH_CH12_CMD_COMMAND_MASK)
#define APBH_CH12_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH12_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH12_CMD_CHAIN(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_CHAIN_SHIFT)) & APBH_CH12_CMD_CHAIN_MASK)
#define APBH_CH12_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH12_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH12_CMD_IRQONCMPLT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_IRQONCMPLT_SHIFT)) & APBH_CH12_CMD_IRQONCMPLT_MASK)
#define APBH_CH12_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH12_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH12_CMD_NANDLOCK(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_NANDLOCK_SHIFT)) & APBH_CH12_CMD_NANDLOCK_MASK)
#define APBH_CH12_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH12_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH12_CMD_NANDWAIT4READY(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH12_CMD_NANDWAIT4READY_MASK)
#define APBH_CH12_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH12_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH12_CMD_SEMAPHORE(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_SEMAPHORE_SHIFT)) & APBH_CH12_CMD_SEMAPHORE_MASK)
#define APBH_CH12_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH12_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH12_CMD_WAIT4ENDCMD(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH12_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH12_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH12_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH12_CMD_HALTONTERMINATE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH12_CMD_HALTONTERMINATE_MASK)
#define APBH_CH12_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH12_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH12_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_CMDWORDS_SHIFT)) & APBH_CH12_CMD_CMDWORDS_MASK)
#define APBH_CH12_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH12_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH12_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_XFER_COUNT_SHIFT)) & APBH_CH12_CMD_XFER_COUNT_MASK)

/*! @name CH12_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH12_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH12_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH12_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH12_BAR_ADDRESS_SHIFT)) & APBH_CH12_BAR_ADDRESS_MASK)

/*! @name CH12_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH12_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH12_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH12_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH12_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH12_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH12_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH12_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH12_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH12_SEMA_PHORE_SHIFT)) & APBH_CH12_SEMA_PHORE_MASK)

/*! @name CH12_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH12_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH12_DEBUG1_STATEMACHINE_SHIFT      (0U)
#define APBH_CH12_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH12_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH12_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH12_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH12_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_RSVD1_SHIFT)) & APBH_CH12_DEBUG1_RSVD1_MASK)
#define APBH_CH12_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH12_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH12_DEBUG1_WR_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH12_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH12_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH12_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH12_DEBUG1_WR_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH12_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH12_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH12_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH12_DEBUG1_RD_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH12_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH12_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH12_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH12_DEBUG1_RD_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH12_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH12_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH12_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH12_DEBUG1_NEXTCMDADDRVALID(x)     (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH12_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH12_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH12_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH12_DEBUG1_LOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_LOCK_SHIFT)) & APBH_CH12_DEBUG1_LOCK_MASK)
#define APBH_CH12_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH12_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH12_DEBUG1_READY(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_READY_SHIFT)) & APBH_CH12_DEBUG1_READY_MASK)
#define APBH_CH12_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH12_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH12_DEBUG1_SENSE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_SENSE_SHIFT)) & APBH_CH12_DEBUG1_SENSE_MASK)
#define APBH_CH12_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH12_DEBUG1_END_SHIFT               (28U)
#define APBH_CH12_DEBUG1_END(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_END_SHIFT)) & APBH_CH12_DEBUG1_END_MASK)
#define APBH_CH12_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH12_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH12_DEBUG1_KICK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_KICK_SHIFT)) & APBH_CH12_DEBUG1_KICK_MASK)
#define APBH_CH12_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH12_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH12_DEBUG1_BURST(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_BURST_SHIFT)) & APBH_CH12_DEBUG1_BURST_MASK)
#define APBH_CH12_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH12_DEBUG1_REQ_SHIFT               (31U)
#define APBH_CH12_DEBUG1_REQ(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_REQ_SHIFT)) & APBH_CH12_DEBUG1_REQ_MASK)

/*! @name CH12_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH12_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH12_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH12_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH12_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH12_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH12_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH12_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH12_DEBUG2_APB_BYTES_MASK)

/*! @name CH13_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH13_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH13_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH13_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH13_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH13_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH13_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH13_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH13_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH13_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH13_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH13_CMD - APBH DMA Channel n Command Register */
#define APBH_CH13_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH13_CMD_COMMAND_SHIFT              (0U)
#define APBH_CH13_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_COMMAND_SHIFT)) & APBH_CH13_CMD_COMMAND_MASK)
#define APBH_CH13_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH13_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH13_CMD_CHAIN(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_CHAIN_SHIFT)) & APBH_CH13_CMD_CHAIN_MASK)
#define APBH_CH13_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH13_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH13_CMD_IRQONCMPLT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_IRQONCMPLT_SHIFT)) & APBH_CH13_CMD_IRQONCMPLT_MASK)
#define APBH_CH13_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH13_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH13_CMD_NANDLOCK(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_NANDLOCK_SHIFT)) & APBH_CH13_CMD_NANDLOCK_MASK)
#define APBH_CH13_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH13_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH13_CMD_NANDWAIT4READY(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH13_CMD_NANDWAIT4READY_MASK)
#define APBH_CH13_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH13_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH13_CMD_SEMAPHORE(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_SEMAPHORE_SHIFT)) & APBH_CH13_CMD_SEMAPHORE_MASK)
#define APBH_CH13_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH13_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH13_CMD_WAIT4ENDCMD(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH13_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH13_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH13_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH13_CMD_HALTONTERMINATE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH13_CMD_HALTONTERMINATE_MASK)
#define APBH_CH13_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH13_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH13_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_CMDWORDS_SHIFT)) & APBH_CH13_CMD_CMDWORDS_MASK)
#define APBH_CH13_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH13_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH13_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_XFER_COUNT_SHIFT)) & APBH_CH13_CMD_XFER_COUNT_MASK)

/*! @name CH13_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH13_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH13_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH13_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH13_BAR_ADDRESS_SHIFT)) & APBH_CH13_BAR_ADDRESS_MASK)

/*! @name CH13_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH13_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH13_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH13_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH13_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH13_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH13_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH13_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH13_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH13_SEMA_PHORE_SHIFT)) & APBH_CH13_SEMA_PHORE_MASK)

/*! @name CH13_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH13_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH13_DEBUG1_STATEMACHINE_SHIFT      (0U)
#define APBH_CH13_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH13_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH13_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH13_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH13_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_RSVD1_SHIFT)) & APBH_CH13_DEBUG1_RSVD1_MASK)
#define APBH_CH13_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH13_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH13_DEBUG1_WR_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH13_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH13_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH13_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH13_DEBUG1_WR_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH13_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH13_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH13_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH13_DEBUG1_RD_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH13_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH13_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH13_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH13_DEBUG1_RD_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH13_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH13_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH13_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH13_DEBUG1_NEXTCMDADDRVALID(x)     (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH13_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH13_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH13_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH13_DEBUG1_LOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_LOCK_SHIFT)) & APBH_CH13_DEBUG1_LOCK_MASK)
#define APBH_CH13_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH13_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH13_DEBUG1_READY(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_READY_SHIFT)) & APBH_CH13_DEBUG1_READY_MASK)
#define APBH_CH13_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH13_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH13_DEBUG1_SENSE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_SENSE_SHIFT)) & APBH_CH13_DEBUG1_SENSE_MASK)
#define APBH_CH13_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH13_DEBUG1_END_SHIFT               (28U)
#define APBH_CH13_DEBUG1_END(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_END_SHIFT)) & APBH_CH13_DEBUG1_END_MASK)
#define APBH_CH13_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH13_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH13_DEBUG1_KICK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_KICK_SHIFT)) & APBH_CH13_DEBUG1_KICK_MASK)
#define APBH_CH13_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH13_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH13_DEBUG1_BURST(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_BURST_SHIFT)) & APBH_CH13_DEBUG1_BURST_MASK)
#define APBH_CH13_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH13_DEBUG1_REQ_SHIFT               (31U)
#define APBH_CH13_DEBUG1_REQ(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_REQ_SHIFT)) & APBH_CH13_DEBUG1_REQ_MASK)

/*! @name CH13_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH13_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH13_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH13_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH13_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH13_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH13_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH13_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH13_DEBUG2_APB_BYTES_MASK)

/*! @name CH14_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH14_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH14_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH14_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH14_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH14_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH14_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH14_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH14_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH14_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH14_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH14_CMD - APBH DMA Channel n Command Register */
#define APBH_CH14_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH14_CMD_COMMAND_SHIFT              (0U)
#define APBH_CH14_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_COMMAND_SHIFT)) & APBH_CH14_CMD_COMMAND_MASK)
#define APBH_CH14_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH14_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH14_CMD_CHAIN(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_CHAIN_SHIFT)) & APBH_CH14_CMD_CHAIN_MASK)
#define APBH_CH14_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH14_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH14_CMD_IRQONCMPLT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_IRQONCMPLT_SHIFT)) & APBH_CH14_CMD_IRQONCMPLT_MASK)
#define APBH_CH14_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH14_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH14_CMD_NANDLOCK(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_NANDLOCK_SHIFT)) & APBH_CH14_CMD_NANDLOCK_MASK)
#define APBH_CH14_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH14_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH14_CMD_NANDWAIT4READY(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH14_CMD_NANDWAIT4READY_MASK)
#define APBH_CH14_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH14_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH14_CMD_SEMAPHORE(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_SEMAPHORE_SHIFT)) & APBH_CH14_CMD_SEMAPHORE_MASK)
#define APBH_CH14_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH14_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH14_CMD_WAIT4ENDCMD(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH14_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH14_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH14_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH14_CMD_HALTONTERMINATE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH14_CMD_HALTONTERMINATE_MASK)
#define APBH_CH14_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH14_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH14_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_CMDWORDS_SHIFT)) & APBH_CH14_CMD_CMDWORDS_MASK)
#define APBH_CH14_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH14_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH14_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_XFER_COUNT_SHIFT)) & APBH_CH14_CMD_XFER_COUNT_MASK)

/*! @name CH14_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH14_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH14_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH14_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH14_BAR_ADDRESS_SHIFT)) & APBH_CH14_BAR_ADDRESS_MASK)

/*! @name CH14_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH14_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH14_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH14_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH14_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH14_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH14_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH14_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH14_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH14_SEMA_PHORE_SHIFT)) & APBH_CH14_SEMA_PHORE_MASK)

/*! @name CH14_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH14_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH14_DEBUG1_STATEMACHINE_SHIFT      (0U)
#define APBH_CH14_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH14_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH14_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH14_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH14_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_RSVD1_SHIFT)) & APBH_CH14_DEBUG1_RSVD1_MASK)
#define APBH_CH14_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH14_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH14_DEBUG1_WR_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH14_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH14_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH14_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH14_DEBUG1_WR_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH14_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH14_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH14_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH14_DEBUG1_RD_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH14_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH14_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH14_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH14_DEBUG1_RD_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH14_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH14_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH14_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH14_DEBUG1_NEXTCMDADDRVALID(x)     (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH14_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH14_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH14_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH14_DEBUG1_LOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_LOCK_SHIFT)) & APBH_CH14_DEBUG1_LOCK_MASK)
#define APBH_CH14_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH14_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH14_DEBUG1_READY(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_READY_SHIFT)) & APBH_CH14_DEBUG1_READY_MASK)
#define APBH_CH14_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH14_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH14_DEBUG1_SENSE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_SENSE_SHIFT)) & APBH_CH14_DEBUG1_SENSE_MASK)
#define APBH_CH14_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH14_DEBUG1_END_SHIFT               (28U)
#define APBH_CH14_DEBUG1_END(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_END_SHIFT)) & APBH_CH14_DEBUG1_END_MASK)
#define APBH_CH14_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH14_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH14_DEBUG1_KICK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_KICK_SHIFT)) & APBH_CH14_DEBUG1_KICK_MASK)
#define APBH_CH14_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH14_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH14_DEBUG1_BURST(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_BURST_SHIFT)) & APBH_CH14_DEBUG1_BURST_MASK)
#define APBH_CH14_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH14_DEBUG1_REQ_SHIFT               (31U)
#define APBH_CH14_DEBUG1_REQ(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_REQ_SHIFT)) & APBH_CH14_DEBUG1_REQ_MASK)

/*! @name CH14_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH14_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH14_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH14_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH14_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH14_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH14_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH14_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH14_DEBUG2_APB_BYTES_MASK)

/*! @name CH15_CURCMDAR - APBH DMA Channel n Current Command Address Register */
#define APBH_CH15_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH15_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH15_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH15_CURCMDAR_CMD_ADDR_MASK)

/*! @name CH15_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
#define APBH_CH15_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH15_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH15_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH15_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH15_NXTCMDAR_CMD_ADDR_MASK)

/*! @name CH15_CMD - APBH DMA Channel n Command Register */
#define APBH_CH15_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH15_CMD_COMMAND_SHIFT              (0U)
#define APBH_CH15_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_COMMAND_SHIFT)) & APBH_CH15_CMD_COMMAND_MASK)
#define APBH_CH15_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH15_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH15_CMD_CHAIN(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_CHAIN_SHIFT)) & APBH_CH15_CMD_CHAIN_MASK)
#define APBH_CH15_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH15_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH15_CMD_IRQONCMPLT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_IRQONCMPLT_SHIFT)) & APBH_CH15_CMD_IRQONCMPLT_MASK)
#define APBH_CH15_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH15_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH15_CMD_NANDLOCK(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_NANDLOCK_SHIFT)) & APBH_CH15_CMD_NANDLOCK_MASK)
#define APBH_CH15_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH15_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH15_CMD_NANDWAIT4READY(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_NANDWAIT4READY_SHIFT)) & APBH_CH15_CMD_NANDWAIT4READY_MASK)
#define APBH_CH15_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH15_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH15_CMD_SEMAPHORE(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_SEMAPHORE_SHIFT)) & APBH_CH15_CMD_SEMAPHORE_MASK)
#define APBH_CH15_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH15_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH15_CMD_WAIT4ENDCMD(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_WAIT4ENDCMD_SHIFT)) & APBH_CH15_CMD_WAIT4ENDCMD_MASK)
#define APBH_CH15_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH15_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH15_CMD_HALTONTERMINATE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_HALTONTERMINATE_SHIFT)) & APBH_CH15_CMD_HALTONTERMINATE_MASK)
#define APBH_CH15_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH15_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH15_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_CMDWORDS_SHIFT)) & APBH_CH15_CMD_CMDWORDS_MASK)
#define APBH_CH15_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH15_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH15_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_XFER_COUNT_SHIFT)) & APBH_CH15_CMD_XFER_COUNT_MASK)

/*! @name CH15_BAR - APBH DMA Channel n Buffer Address Register */
#define APBH_CH15_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH15_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH15_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH15_BAR_ADDRESS_SHIFT)) & APBH_CH15_BAR_ADDRESS_MASK)

/*! @name CH15_SEMA - APBH DMA Channel n Semaphore Register */
#define APBH_CH15_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH15_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH15_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH15_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH15_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH15_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH15_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH15_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH15_SEMA_PHORE_SHIFT)) & APBH_CH15_SEMA_PHORE_MASK)

/*! @name CH15_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH15_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH15_DEBUG1_STATEMACHINE_SHIFT      (0U)
#define APBH_CH15_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH15_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH15_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH15_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH15_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_RSVD1_SHIFT)) & APBH_CH15_DEBUG1_RSVD1_MASK)
#define APBH_CH15_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH15_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH15_DEBUG1_WR_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_WR_FIFO_FULL_SHIFT)) & APBH_CH15_DEBUG1_WR_FIFO_FULL_MASK)
#define APBH_CH15_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH15_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH15_DEBUG1_WR_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_WR_FIFO_EMPTY_SHIFT)) & APBH_CH15_DEBUG1_WR_FIFO_EMPTY_MASK)
#define APBH_CH15_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH15_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH15_DEBUG1_RD_FIFO_FULL(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_RD_FIFO_FULL_SHIFT)) & APBH_CH15_DEBUG1_RD_FIFO_FULL_MASK)
#define APBH_CH15_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH15_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH15_DEBUG1_RD_FIFO_EMPTY(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_RD_FIFO_EMPTY_SHIFT)) & APBH_CH15_DEBUG1_RD_FIFO_EMPTY_MASK)
#define APBH_CH15_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH15_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH15_DEBUG1_NEXTCMDADDRVALID(x)     (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_NEXTCMDADDRVALID_SHIFT)) & APBH_CH15_DEBUG1_NEXTCMDADDRVALID_MASK)
#define APBH_CH15_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH15_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH15_DEBUG1_LOCK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_LOCK_SHIFT)) & APBH_CH15_DEBUG1_LOCK_MASK)
#define APBH_CH15_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH15_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH15_DEBUG1_READY(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_READY_SHIFT)) & APBH_CH15_DEBUG1_READY_MASK)
#define APBH_CH15_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH15_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH15_DEBUG1_SENSE(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_SENSE_SHIFT)) & APBH_CH15_DEBUG1_SENSE_MASK)
#define APBH_CH15_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH15_DEBUG1_END_SHIFT               (28U)
#define APBH_CH15_DEBUG1_END(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_END_SHIFT)) & APBH_CH15_DEBUG1_END_MASK)
#define APBH_CH15_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH15_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH15_DEBUG1_KICK(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_KICK_SHIFT)) & APBH_CH15_DEBUG1_KICK_MASK)
#define APBH_CH15_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH15_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH15_DEBUG1_BURST(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_BURST_SHIFT)) & APBH_CH15_DEBUG1_BURST_MASK)
#define APBH_CH15_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH15_DEBUG1_REQ_SHIFT               (31U)
#define APBH_CH15_DEBUG1_REQ(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_REQ_SHIFT)) & APBH_CH15_DEBUG1_REQ_MASK)

/*! @name CH15_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
#define APBH_CH15_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH15_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH15_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH15_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH15_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH15_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH15_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH15_DEBUG2_APB_BYTES_MASK)

/*! @name VERSION - APBH Bridge Version Register */
#define APBH_VERSION_STEP_MASK                   (0xFFFFU)
#define APBH_VERSION_STEP_SHIFT                  (0U)
#define APBH_VERSION_STEP(x)                     (((uint32_t)(((uint32_t)(x)) << APBH_VERSION_STEP_SHIFT)) & APBH_VERSION_STEP_MASK)
#define APBH_VERSION_MINOR_MASK                  (0xFF0000U)
#define APBH_VERSION_MINOR_SHIFT                 (16U)
#define APBH_VERSION_MINOR(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_VERSION_MINOR_SHIFT)) & APBH_VERSION_MINOR_MASK)
#define APBH_VERSION_MAJOR_MASK                  (0xFF000000U)
#define APBH_VERSION_MAJOR_SHIFT                 (24U)
#define APBH_VERSION_MAJOR(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_VERSION_MAJOR_SHIFT)) & APBH_VERSION_MAJOR_MASK)


/*!
 * @}
 */ /* end of group APBH_Register_Masks */


/* APBH - Peripheral instance base addresses */
/** Peripheral APBH base address */
#define APBH_BASE                                (0x33000000u)
/** Peripheral APBH base pointer */
#define APBH                                     ((APBH_Type *)APBH_BASE)
/** Array initializer of APBH peripheral base addresses */
#define APBH_BASE_ADDRS                          { APBH_BASE }
/** Array initializer of APBH peripheral base pointers */
#define APBH_BASE_PTRS                           { APBH }
/** Interrupt vectors for the APBH peripheral type */
#define APBH_IRQS                                { APBHDMA_IRQn }

/*!
 * @}
 */ /* end of group APBH_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- BCH Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BCH_Peripheral_Access_Layer BCH Peripheral Access Layer
 * @{
 */

/** BCH - Register Layout Typedef */
typedef struct {
  __IO uint32_t CTRL;                              /**< Hardware BCH ECC Accelerator Control Register, offset: 0x0 */
  __IO uint32_t CTRL_SET;                          /**< Hardware BCH ECC Accelerator Control Register, offset: 0x4 */
  __IO uint32_t CTRL_CLR;                          /**< Hardware BCH ECC Accelerator Control Register, offset: 0x8 */
  __IO uint32_t CTRL_TOG;                          /**< Hardware BCH ECC Accelerator Control Register, offset: 0xC */
  __I  uint32_t STATUS0;                           /**< Hardware ECC Accelerator Status Register 0, offset: 0x10 */
  __I  uint32_t STATUS0_SET;                       /**< Hardware ECC Accelerator Status Register 0, offset: 0x14 */
  __I  uint32_t STATUS0_CLR;                       /**< Hardware ECC Accelerator Status Register 0, offset: 0x18 */
  __I  uint32_t STATUS0_TOG;                       /**< Hardware ECC Accelerator Status Register 0, offset: 0x1C */
  __IO uint32_t MODE;                              /**< Hardware ECC Accelerator Mode Register, offset: 0x20 */
  __IO uint32_t MODE_SET;                          /**< Hardware ECC Accelerator Mode Register, offset: 0x24 */
  __IO uint32_t MODE_CLR;                          /**< Hardware ECC Accelerator Mode Register, offset: 0x28 */
  __IO uint32_t MODE_TOG;                          /**< Hardware ECC Accelerator Mode Register, offset: 0x2C */
  __IO uint32_t ENCODEPTR;                         /**< Hardware BCH ECC Loopback Encode Buffer Register, offset: 0x30 */
  __IO uint32_t ENCODEPTR_SET;                     /**< Hardware BCH ECC Loopback Encode Buffer Register, offset: 0x34 */
  __IO uint32_t ENCODEPTR_CLR;                     /**< Hardware BCH ECC Loopback Encode Buffer Register, offset: 0x38 */
  __IO uint32_t ENCODEPTR_TOG;                     /**< Hardware BCH ECC Loopback Encode Buffer Register, offset: 0x3C */
  __IO uint32_t DATAPTR;                           /**< Hardware BCH ECC Loopback Data Buffer Register, offset: 0x40 */
  __IO uint32_t DATAPTR_SET;                       /**< Hardware BCH ECC Loopback Data Buffer Register, offset: 0x44 */
  __IO uint32_t DATAPTR_CLR;                       /**< Hardware BCH ECC Loopback Data Buffer Register, offset: 0x48 */
  __IO uint32_t DATAPTR_TOG;                       /**< Hardware BCH ECC Loopback Data Buffer Register, offset: 0x4C */
  __IO uint32_t METAPTR;                           /**< Hardware BCH ECC Loopback Metadata Buffer Register, offset: 0x50 */
  __IO uint32_t METAPTR_SET;                       /**< Hardware BCH ECC Loopback Metadata Buffer Register, offset: 0x54 */
  __IO uint32_t METAPTR_CLR;                       /**< Hardware BCH ECC Loopback Metadata Buffer Register, offset: 0x58 */
  __IO uint32_t METAPTR_TOG;                       /**< Hardware BCH ECC Loopback Metadata Buffer Register, offset: 0x5C */
       uint8_t RESERVED_0[16];
  __IO uint32_t LAYOUTSELECT;                      /**< Hardware ECC Accelerator Layout Select Register, offset: 0x70 */
  __IO uint32_t LAYOUTSELECT_SET;                  /**< Hardware ECC Accelerator Layout Select Register, offset: 0x74 */
  __IO uint32_t LAYOUTSELECT_CLR;                  /**< Hardware ECC Accelerator Layout Select Register, offset: 0x78 */
  __IO uint32_t LAYOUTSELECT_TOG;                  /**< Hardware ECC Accelerator Layout Select Register, offset: 0x7C */
  __IO uint32_t FLASH0LAYOUT0;                     /**< Hardware BCH ECC Flash 0 Layout 0 Register, offset: 0x80 */
  __IO uint32_t FLASH0LAYOUT0_SET;                 /**< Hardware BCH ECC Flash 0 Layout 0 Register, offset: 0x84 */
  __IO uint32_t FLASH0LAYOUT0_CLR;                 /**< Hardware BCH ECC Flash 0 Layout 0 Register, offset: 0x88 */
  __IO uint32_t FLASH0LAYOUT0_TOG;                 /**< Hardware BCH ECC Flash 0 Layout 0 Register, offset: 0x8C */
  __IO uint32_t FLASH0LAYOUT1;                     /**< Hardware BCH ECC Flash 0 Layout 1 Register, offset: 0x90 */
  __IO uint32_t FLASH0LAYOUT1_SET;                 /**< Hardware BCH ECC Flash 0 Layout 1 Register, offset: 0x94 */
  __IO uint32_t FLASH0LAYOUT1_CLR;                 /**< Hardware BCH ECC Flash 0 Layout 1 Register, offset: 0x98 */
  __IO uint32_t FLASH0LAYOUT1_TOG;                 /**< Hardware BCH ECC Flash 0 Layout 1 Register, offset: 0x9C */
  __IO uint32_t FLASH1LAYOUT0;                     /**< Hardware BCH ECC Flash 1 Layout 0 Register, offset: 0xA0 */
  __IO uint32_t FLASH1LAYOUT0_SET;                 /**< Hardware BCH ECC Flash 1 Layout 0 Register, offset: 0xA4 */
  __IO uint32_t FLASH1LAYOUT0_CLR;                 /**< Hardware BCH ECC Flash 1 Layout 0 Register, offset: 0xA8 */
  __IO uint32_t FLASH1LAYOUT0_TOG;                 /**< Hardware BCH ECC Flash 1 Layout 0 Register, offset: 0xAC */
  __IO uint32_t FLASH1LAYOUT1;                     /**< Hardware BCH ECC Flash 1 Layout 1 Register, offset: 0xB0 */
  __IO uint32_t FLASH1LAYOUT1_SET;                 /**< Hardware BCH ECC Flash 1 Layout 1 Register, offset: 0xB4 */
  __IO uint32_t FLASH1LAYOUT1_CLR;                 /**< Hardware BCH ECC Flash 1 Layout 1 Register, offset: 0xB8 */
  __IO uint32_t FLASH1LAYOUT1_TOG;                 /**< Hardware BCH ECC Flash 1 Layout 1 Register, offset: 0xBC */
  __IO uint32_t FLASH2LAYOUT0;                     /**< Hardware BCH ECC Flash 2 Layout 0 Register, offset: 0xC0 */
  __IO uint32_t FLASH2LAYOUT0_SET;                 /**< Hardware BCH ECC Flash 2 Layout 0 Register, offset: 0xC4 */
  __IO uint32_t FLASH2LAYOUT0_CLR;                 /**< Hardware BCH ECC Flash 2 Layout 0 Register, offset: 0xC8 */
  __IO uint32_t FLASH2LAYOUT0_TOG;                 /**< Hardware BCH ECC Flash 2 Layout 0 Register, offset: 0xCC */
  __IO uint32_t FLASH2LAYOUT1;                     /**< Hardware BCH ECC Flash 2 Layout 1 Register, offset: 0xD0 */
  __IO uint32_t FLASH2LAYOUT1_SET;                 /**< Hardware BCH ECC Flash 2 Layout 1 Register, offset: 0xD4 */
  __IO uint32_t FLASH2LAYOUT1_CLR;                 /**< Hardware BCH ECC Flash 2 Layout 1 Register, offset: 0xD8 */
  __IO uint32_t FLASH2LAYOUT1_TOG;                 /**< Hardware BCH ECC Flash 2 Layout 1 Register, offset: 0xDC */
  __IO uint32_t FLASH3LAYOUT0;                     /**< Hardware BCH ECC Flash 3 Layout 0 Register, offset: 0xE0 */
  __IO uint32_t FLASH3LAYOUT0_SET;                 /**< Hardware BCH ECC Flash 3 Layout 0 Register, offset: 0xE4 */
  __IO uint32_t FLASH3LAYOUT0_CLR;                 /**< Hardware BCH ECC Flash 3 Layout 0 Register, offset: 0xE8 */
  __IO uint32_t FLASH3LAYOUT0_TOG;                 /**< Hardware BCH ECC Flash 3 Layout 0 Register, offset: 0xEC */
  __IO uint32_t FLASH3LAYOUT1;                     /**< Hardware BCH ECC Flash 3 Layout 1 Register, offset: 0xF0 */
  __IO uint32_t FLASH3LAYOUT1_SET;                 /**< Hardware BCH ECC Flash 3 Layout 1 Register, offset: 0xF4 */
  __IO uint32_t FLASH3LAYOUT1_CLR;                 /**< Hardware BCH ECC Flash 3 Layout 1 Register, offset: 0xF8 */
  __IO uint32_t FLASH3LAYOUT1_TOG;                 /**< Hardware BCH ECC Flash 3 Layout 1 Register, offset: 0xFC */
  __IO uint32_t DEBUG0;                            /**< Hardware BCH ECC Debug Register0, offset: 0x100 */
  __IO uint32_t DEBUG0_SET;                        /**< Hardware BCH ECC Debug Register0, offset: 0x104 */
  __IO uint32_t DEBUG0_CLR;                        /**< Hardware BCH ECC Debug Register0, offset: 0x108 */
  __IO uint32_t DEBUG0_TOG;                        /**< Hardware BCH ECC Debug Register0, offset: 0x10C */
  __I  uint32_t DBGKESREAD;                        /**< KES Debug Read Register, offset: 0x110 */
  __I  uint32_t DBGKESREAD_SET;                    /**< KES Debug Read Register, offset: 0x114 */
  __I  uint32_t DBGKESREAD_CLR;                    /**< KES Debug Read Register, offset: 0x118 */
  __I  uint32_t DBGKESREAD_TOG;                    /**< KES Debug Read Register, offset: 0x11C */
  __I  uint32_t DBGCSFEREAD;                       /**< Chien Search Debug Read Register, offset: 0x120 */
  __I  uint32_t DBGCSFEREAD_SET;                   /**< Chien Search Debug Read Register, offset: 0x124 */
  __I  uint32_t DBGCSFEREAD_CLR;                   /**< Chien Search Debug Read Register, offset: 0x128 */
  __I  uint32_t DBGCSFEREAD_TOG;                   /**< Chien Search Debug Read Register, offset: 0x12C */
  __I  uint32_t DBGSYNDGENREAD;                    /**< Syndrome Generator Debug Read Register, offset: 0x130 */
  __I  uint32_t DBGSYNDGENREAD_SET;                /**< Syndrome Generator Debug Read Register, offset: 0x134 */
  __I  uint32_t DBGSYNDGENREAD_CLR;                /**< Syndrome Generator Debug Read Register, offset: 0x138 */
  __I  uint32_t DBGSYNDGENREAD_TOG;                /**< Syndrome Generator Debug Read Register, offset: 0x13C */
  __I  uint32_t DBGAHBMREAD;                       /**< Bus Master and ECC Controller Debug Read Register, offset: 0x140 */
  __I  uint32_t DBGAHBMREAD_SET;                   /**< Bus Master and ECC Controller Debug Read Register, offset: 0x144 */
  __I  uint32_t DBGAHBMREAD_CLR;                   /**< Bus Master and ECC Controller Debug Read Register, offset: 0x148 */
  __I  uint32_t DBGAHBMREAD_TOG;                   /**< Bus Master and ECC Controller Debug Read Register, offset: 0x14C */
  __I  uint32_t BLOCKNAME;                         /**< Block Name Register, offset: 0x150 */
  __I  uint32_t BLOCKNAME_SET;                     /**< Block Name Register, offset: 0x154 */
  __I  uint32_t BLOCKNAME_CLR;                     /**< Block Name Register, offset: 0x158 */
  __I  uint32_t BLOCKNAME_TOG;                     /**< Block Name Register, offset: 0x15C */
  __I  uint32_t VERSION;                           /**< BCH Version Register, offset: 0x160 */
  __I  uint32_t VERSION_SET;                       /**< BCH Version Register, offset: 0x164 */
  __I  uint32_t VERSION_CLR;                       /**< BCH Version Register, offset: 0x168 */
  __I  uint32_t VERSION_TOG;                       /**< BCH Version Register, offset: 0x16C */
  __IO uint32_t DEBUG1;                            /**< Hardware BCH ECC Debug Register 1, offset: 0x170 */
  __IO uint32_t DEBUG1_SET;                        /**< Hardware BCH ECC Debug Register 1, offset: 0x174 */
  __IO uint32_t DEBUG1_CLR;                        /**< Hardware BCH ECC Debug Register 1, offset: 0x178 */
  __IO uint32_t DEBUG1_TOG;                        /**< Hardware BCH ECC Debug Register 1, offset: 0x17C */
} BCH_Type;

/* ----------------------------------------------------------------------------
   -- BCH Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BCH_Register_Masks BCH Register Masks
 * @{
 */

/*! @name CTRL - Hardware BCH ECC Accelerator Control Register */
#define BCH_CTRL_COMPLETE_IRQ_MASK               (0x1U)
#define BCH_CTRL_COMPLETE_IRQ_SHIFT              (0U)
#define BCH_CTRL_COMPLETE_IRQ(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_COMPLETE_IRQ_SHIFT)) & BCH_CTRL_COMPLETE_IRQ_MASK)
#define BCH_CTRL_RSVD0_MASK                      (0x2U)
#define BCH_CTRL_RSVD0_SHIFT                     (1U)
#define BCH_CTRL_RSVD0(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD0_SHIFT)) & BCH_CTRL_RSVD0_MASK)
#define BCH_CTRL_DEBUG_STALL_IRQ_MASK            (0x4U)
#define BCH_CTRL_DEBUG_STALL_IRQ_SHIFT           (2U)
#define BCH_CTRL_DEBUG_STALL_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_DEBUG_STALL_IRQ_SHIFT)) & BCH_CTRL_DEBUG_STALL_IRQ_MASK)
#define BCH_CTRL_BM_ERROR_IRQ_MASK               (0x8U)
#define BCH_CTRL_BM_ERROR_IRQ_SHIFT              (3U)
#define BCH_CTRL_BM_ERROR_IRQ(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_BM_ERROR_IRQ_SHIFT)) & BCH_CTRL_BM_ERROR_IRQ_MASK)
#define BCH_CTRL_RSVD1_MASK                      (0xF0U)
#define BCH_CTRL_RSVD1_SHIFT                     (4U)
#define BCH_CTRL_RSVD1(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD1_SHIFT)) & BCH_CTRL_RSVD1_MASK)
#define BCH_CTRL_COMPLETE_IRQ_EN_MASK            (0x100U)
#define BCH_CTRL_COMPLETE_IRQ_EN_SHIFT           (8U)
#define BCH_CTRL_COMPLETE_IRQ_EN(x)              (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_COMPLETE_IRQ_EN_SHIFT)) & BCH_CTRL_COMPLETE_IRQ_EN_MASK)
#define BCH_CTRL_RSVD2_MASK                      (0x200U)
#define BCH_CTRL_RSVD2_SHIFT                     (9U)
#define BCH_CTRL_RSVD2(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD2_SHIFT)) & BCH_CTRL_RSVD2_MASK)
#define BCH_CTRL_DEBUG_STALL_IRQ_EN_MASK         (0x400U)
#define BCH_CTRL_DEBUG_STALL_IRQ_EN_SHIFT        (10U)
#define BCH_CTRL_DEBUG_STALL_IRQ_EN(x)           (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_DEBUG_STALL_IRQ_EN_SHIFT)) & BCH_CTRL_DEBUG_STALL_IRQ_EN_MASK)
#define BCH_CTRL_RSVD3_MASK                      (0xF800U)
#define BCH_CTRL_RSVD3_SHIFT                     (11U)
#define BCH_CTRL_RSVD3(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD3_SHIFT)) & BCH_CTRL_RSVD3_MASK)
#define BCH_CTRL_M2M_ENABLE_MASK                 (0x10000U)
#define BCH_CTRL_M2M_ENABLE_SHIFT                (16U)
#define BCH_CTRL_M2M_ENABLE(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_M2M_ENABLE_SHIFT)) & BCH_CTRL_M2M_ENABLE_MASK)
#define BCH_CTRL_M2M_ENCODE_MASK                 (0x20000U)
#define BCH_CTRL_M2M_ENCODE_SHIFT                (17U)
#define BCH_CTRL_M2M_ENCODE(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_M2M_ENCODE_SHIFT)) & BCH_CTRL_M2M_ENCODE_MASK)
#define BCH_CTRL_M2M_LAYOUT_MASK                 (0xC0000U)
#define BCH_CTRL_M2M_LAYOUT_SHIFT                (18U)
#define BCH_CTRL_M2M_LAYOUT(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_M2M_LAYOUT_SHIFT)) & BCH_CTRL_M2M_LAYOUT_MASK)
#define BCH_CTRL_RSVD4_MASK                      (0x300000U)
#define BCH_CTRL_RSVD4_SHIFT                     (20U)
#define BCH_CTRL_RSVD4(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD4_SHIFT)) & BCH_CTRL_RSVD4_MASK)
#define BCH_CTRL_DEBUGSYNDROME_MASK              (0x400000U)
#define BCH_CTRL_DEBUGSYNDROME_SHIFT             (22U)
#define BCH_CTRL_DEBUGSYNDROME(x)                (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_DEBUGSYNDROME_SHIFT)) & BCH_CTRL_DEBUGSYNDROME_MASK)
#define BCH_CTRL_RSVD5_MASK                      (0x3F800000U)
#define BCH_CTRL_RSVD5_SHIFT                     (23U)
#define BCH_CTRL_RSVD5(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD5_SHIFT)) & BCH_CTRL_RSVD5_MASK)
#define BCH_CTRL_CLKGATE_MASK                    (0x40000000U)
#define BCH_CTRL_CLKGATE_SHIFT                   (30U)
#define BCH_CTRL_CLKGATE(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLKGATE_SHIFT)) & BCH_CTRL_CLKGATE_MASK)
#define BCH_CTRL_SFTRST_MASK                     (0x80000000U)
#define BCH_CTRL_SFTRST_SHIFT                    (31U)
#define BCH_CTRL_SFTRST(x)                       (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SFTRST_SHIFT)) & BCH_CTRL_SFTRST_MASK)

/*! @name CTRL_SET - Hardware BCH ECC Accelerator Control Register */
#define BCH_CTRL_SET_COMPLETE_IRQ_MASK           (0x1U)
#define BCH_CTRL_SET_COMPLETE_IRQ_SHIFT          (0U)
#define BCH_CTRL_SET_COMPLETE_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_COMPLETE_IRQ_SHIFT)) & BCH_CTRL_SET_COMPLETE_IRQ_MASK)
#define BCH_CTRL_SET_RSVD0_MASK                  (0x2U)
#define BCH_CTRL_SET_RSVD0_SHIFT                 (1U)
#define BCH_CTRL_SET_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD0_SHIFT)) & BCH_CTRL_SET_RSVD0_MASK)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_MASK        (0x4U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_SHIFT       (2U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_DEBUG_STALL_IRQ_SHIFT)) & BCH_CTRL_SET_DEBUG_STALL_IRQ_MASK)
#define BCH_CTRL_SET_BM_ERROR_IRQ_MASK           (0x8U)
#define BCH_CTRL_SET_BM_ERROR_IRQ_SHIFT          (3U)
#define BCH_CTRL_SET_BM_ERROR_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_BM_ERROR_IRQ_SHIFT)) & BCH_CTRL_SET_BM_ERROR_IRQ_MASK)
#define BCH_CTRL_SET_RSVD1_MASK                  (0xF0U)
#define BCH_CTRL_SET_RSVD1_SHIFT                 (4U)
#define BCH_CTRL_SET_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD1_SHIFT)) & BCH_CTRL_SET_RSVD1_MASK)
#define BCH_CTRL_SET_COMPLETE_IRQ_EN_MASK        (0x100U)
#define BCH_CTRL_SET_COMPLETE_IRQ_EN_SHIFT       (8U)
#define BCH_CTRL_SET_COMPLETE_IRQ_EN(x)          (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_COMPLETE_IRQ_EN_SHIFT)) & BCH_CTRL_SET_COMPLETE_IRQ_EN_MASK)
#define BCH_CTRL_SET_RSVD2_MASK                  (0x200U)
#define BCH_CTRL_SET_RSVD2_SHIFT                 (9U)
#define BCH_CTRL_SET_RSVD2(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD2_SHIFT)) & BCH_CTRL_SET_RSVD2_MASK)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_EN_MASK     (0x400U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_EN_SHIFT    (10U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_DEBUG_STALL_IRQ_EN_SHIFT)) & BCH_CTRL_SET_DEBUG_STALL_IRQ_EN_MASK)
#define BCH_CTRL_SET_RSVD3_MASK                  (0xF800U)
#define BCH_CTRL_SET_RSVD3_SHIFT                 (11U)
#define BCH_CTRL_SET_RSVD3(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD3_SHIFT)) & BCH_CTRL_SET_RSVD3_MASK)
#define BCH_CTRL_SET_M2M_ENABLE_MASK             (0x10000U)
#define BCH_CTRL_SET_M2M_ENABLE_SHIFT            (16U)
#define BCH_CTRL_SET_M2M_ENABLE(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_M2M_ENABLE_SHIFT)) & BCH_CTRL_SET_M2M_ENABLE_MASK)
#define BCH_CTRL_SET_M2M_ENCODE_MASK             (0x20000U)
#define BCH_CTRL_SET_M2M_ENCODE_SHIFT            (17U)
#define BCH_CTRL_SET_M2M_ENCODE(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_M2M_ENCODE_SHIFT)) & BCH_CTRL_SET_M2M_ENCODE_MASK)
#define BCH_CTRL_SET_M2M_LAYOUT_MASK             (0xC0000U)
#define BCH_CTRL_SET_M2M_LAYOUT_SHIFT            (18U)
#define BCH_CTRL_SET_M2M_LAYOUT(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_M2M_LAYOUT_SHIFT)) & BCH_CTRL_SET_M2M_LAYOUT_MASK)
#define BCH_CTRL_SET_RSVD4_MASK                  (0x300000U)
#define BCH_CTRL_SET_RSVD4_SHIFT                 (20U)
#define BCH_CTRL_SET_RSVD4(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD4_SHIFT)) & BCH_CTRL_SET_RSVD4_MASK)
#define BCH_CTRL_SET_DEBUGSYNDROME_MASK          (0x400000U)
#define BCH_CTRL_SET_DEBUGSYNDROME_SHIFT         (22U)
#define BCH_CTRL_SET_DEBUGSYNDROME(x)            (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_DEBUGSYNDROME_SHIFT)) & BCH_CTRL_SET_DEBUGSYNDROME_MASK)
#define BCH_CTRL_SET_RSVD5_MASK                  (0x3F800000U)
#define BCH_CTRL_SET_RSVD5_SHIFT                 (23U)
#define BCH_CTRL_SET_RSVD5(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD5_SHIFT)) & BCH_CTRL_SET_RSVD5_MASK)
#define BCH_CTRL_SET_CLKGATE_MASK                (0x40000000U)
#define BCH_CTRL_SET_CLKGATE_SHIFT               (30U)
#define BCH_CTRL_SET_CLKGATE(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_CLKGATE_SHIFT)) & BCH_CTRL_SET_CLKGATE_MASK)
#define BCH_CTRL_SET_SFTRST_MASK                 (0x80000000U)
#define BCH_CTRL_SET_SFTRST_SHIFT                (31U)
#define BCH_CTRL_SET_SFTRST(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_SFTRST_SHIFT)) & BCH_CTRL_SET_SFTRST_MASK)

/*! @name CTRL_CLR - Hardware BCH ECC Accelerator Control Register */
#define BCH_CTRL_CLR_COMPLETE_IRQ_MASK           (0x1U)
#define BCH_CTRL_CLR_COMPLETE_IRQ_SHIFT          (0U)
#define BCH_CTRL_CLR_COMPLETE_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_COMPLETE_IRQ_SHIFT)) & BCH_CTRL_CLR_COMPLETE_IRQ_MASK)
#define BCH_CTRL_CLR_RSVD0_MASK                  (0x2U)
#define BCH_CTRL_CLR_RSVD0_SHIFT                 (1U)
#define BCH_CTRL_CLR_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD0_SHIFT)) & BCH_CTRL_CLR_RSVD0_MASK)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_MASK        (0x4U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_SHIFT       (2U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_DEBUG_STALL_IRQ_SHIFT)) & BCH_CTRL_CLR_DEBUG_STALL_IRQ_MASK)
#define BCH_CTRL_CLR_BM_ERROR_IRQ_MASK           (0x8U)
#define BCH_CTRL_CLR_BM_ERROR_IRQ_SHIFT          (3U)
#define BCH_CTRL_CLR_BM_ERROR_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_BM_ERROR_IRQ_SHIFT)) & BCH_CTRL_CLR_BM_ERROR_IRQ_MASK)
#define BCH_CTRL_CLR_RSVD1_MASK                  (0xF0U)
#define BCH_CTRL_CLR_RSVD1_SHIFT                 (4U)
#define BCH_CTRL_CLR_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD1_SHIFT)) & BCH_CTRL_CLR_RSVD1_MASK)
#define BCH_CTRL_CLR_COMPLETE_IRQ_EN_MASK        (0x100U)
#define BCH_CTRL_CLR_COMPLETE_IRQ_EN_SHIFT       (8U)
#define BCH_CTRL_CLR_COMPLETE_IRQ_EN(x)          (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_COMPLETE_IRQ_EN_SHIFT)) & BCH_CTRL_CLR_COMPLETE_IRQ_EN_MASK)
#define BCH_CTRL_CLR_RSVD2_MASK                  (0x200U)
#define BCH_CTRL_CLR_RSVD2_SHIFT                 (9U)
#define BCH_CTRL_CLR_RSVD2(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD2_SHIFT)) & BCH_CTRL_CLR_RSVD2_MASK)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN_MASK     (0x400U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN_SHIFT    (10U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN_SHIFT)) & BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN_MASK)
#define BCH_CTRL_CLR_RSVD3_MASK                  (0xF800U)
#define BCH_CTRL_CLR_RSVD3_SHIFT                 (11U)
#define BCH_CTRL_CLR_RSVD3(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD3_SHIFT)) & BCH_CTRL_CLR_RSVD3_MASK)
#define BCH_CTRL_CLR_M2M_ENABLE_MASK             (0x10000U)
#define BCH_CTRL_CLR_M2M_ENABLE_SHIFT            (16U)
#define BCH_CTRL_CLR_M2M_ENABLE(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_M2M_ENABLE_SHIFT)) & BCH_CTRL_CLR_M2M_ENABLE_MASK)
#define BCH_CTRL_CLR_M2M_ENCODE_MASK             (0x20000U)
#define BCH_CTRL_CLR_M2M_ENCODE_SHIFT            (17U)
#define BCH_CTRL_CLR_M2M_ENCODE(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_M2M_ENCODE_SHIFT)) & BCH_CTRL_CLR_M2M_ENCODE_MASK)
#define BCH_CTRL_CLR_M2M_LAYOUT_MASK             (0xC0000U)
#define BCH_CTRL_CLR_M2M_LAYOUT_SHIFT            (18U)
#define BCH_CTRL_CLR_M2M_LAYOUT(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_M2M_LAYOUT_SHIFT)) & BCH_CTRL_CLR_M2M_LAYOUT_MASK)
#define BCH_CTRL_CLR_RSVD4_MASK                  (0x300000U)
#define BCH_CTRL_CLR_RSVD4_SHIFT                 (20U)
#define BCH_CTRL_CLR_RSVD4(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD4_SHIFT)) & BCH_CTRL_CLR_RSVD4_MASK)
#define BCH_CTRL_CLR_DEBUGSYNDROME_MASK          (0x400000U)
#define BCH_CTRL_CLR_DEBUGSYNDROME_SHIFT         (22U)
#define BCH_CTRL_CLR_DEBUGSYNDROME(x)            (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_DEBUGSYNDROME_SHIFT)) & BCH_CTRL_CLR_DEBUGSYNDROME_MASK)
#define BCH_CTRL_CLR_RSVD5_MASK                  (0x3F800000U)
#define BCH_CTRL_CLR_RSVD5_SHIFT                 (23U)
#define BCH_CTRL_CLR_RSVD5(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD5_SHIFT)) & BCH_CTRL_CLR_RSVD5_MASK)
#define BCH_CTRL_CLR_CLKGATE_MASK                (0x40000000U)
#define BCH_CTRL_CLR_CLKGATE_SHIFT               (30U)
#define BCH_CTRL_CLR_CLKGATE(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_CLKGATE_SHIFT)) & BCH_CTRL_CLR_CLKGATE_MASK)
#define BCH_CTRL_CLR_SFTRST_MASK                 (0x80000000U)
#define BCH_CTRL_CLR_SFTRST_SHIFT                (31U)
#define BCH_CTRL_CLR_SFTRST(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_SFTRST_SHIFT)) & BCH_CTRL_CLR_SFTRST_MASK)

/*! @name CTRL_TOG - Hardware BCH ECC Accelerator Control Register */
#define BCH_CTRL_TOG_COMPLETE_IRQ_MASK           (0x1U)
#define BCH_CTRL_TOG_COMPLETE_IRQ_SHIFT          (0U)
#define BCH_CTRL_TOG_COMPLETE_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_COMPLETE_IRQ_SHIFT)) & BCH_CTRL_TOG_COMPLETE_IRQ_MASK)
#define BCH_CTRL_TOG_RSVD0_MASK                  (0x2U)
#define BCH_CTRL_TOG_RSVD0_SHIFT                 (1U)
#define BCH_CTRL_TOG_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD0_SHIFT)) & BCH_CTRL_TOG_RSVD0_MASK)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_MASK        (0x4U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_SHIFT       (2U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_DEBUG_STALL_IRQ_SHIFT)) & BCH_CTRL_TOG_DEBUG_STALL_IRQ_MASK)
#define BCH_CTRL_TOG_BM_ERROR_IRQ_MASK           (0x8U)
#define BCH_CTRL_TOG_BM_ERROR_IRQ_SHIFT          (3U)
#define BCH_CTRL_TOG_BM_ERROR_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_BM_ERROR_IRQ_SHIFT)) & BCH_CTRL_TOG_BM_ERROR_IRQ_MASK)
#define BCH_CTRL_TOG_RSVD1_MASK                  (0xF0U)
#define BCH_CTRL_TOG_RSVD1_SHIFT                 (4U)
#define BCH_CTRL_TOG_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD1_SHIFT)) & BCH_CTRL_TOG_RSVD1_MASK)
#define BCH_CTRL_TOG_COMPLETE_IRQ_EN_MASK        (0x100U)
#define BCH_CTRL_TOG_COMPLETE_IRQ_EN_SHIFT       (8U)
#define BCH_CTRL_TOG_COMPLETE_IRQ_EN(x)          (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_COMPLETE_IRQ_EN_SHIFT)) & BCH_CTRL_TOG_COMPLETE_IRQ_EN_MASK)
#define BCH_CTRL_TOG_RSVD2_MASK                  (0x200U)
#define BCH_CTRL_TOG_RSVD2_SHIFT                 (9U)
#define BCH_CTRL_TOG_RSVD2(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD2_SHIFT)) & BCH_CTRL_TOG_RSVD2_MASK)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN_MASK     (0x400U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN_SHIFT    (10U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN_SHIFT)) & BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN_MASK)
#define BCH_CTRL_TOG_RSVD3_MASK                  (0xF800U)
#define BCH_CTRL_TOG_RSVD3_SHIFT                 (11U)
#define BCH_CTRL_TOG_RSVD3(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD3_SHIFT)) & BCH_CTRL_TOG_RSVD3_MASK)
#define BCH_CTRL_TOG_M2M_ENABLE_MASK             (0x10000U)
#define BCH_CTRL_TOG_M2M_ENABLE_SHIFT            (16U)
#define BCH_CTRL_TOG_M2M_ENABLE(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_M2M_ENABLE_SHIFT)) & BCH_CTRL_TOG_M2M_ENABLE_MASK)
#define BCH_CTRL_TOG_M2M_ENCODE_MASK             (0x20000U)
#define BCH_CTRL_TOG_M2M_ENCODE_SHIFT            (17U)
#define BCH_CTRL_TOG_M2M_ENCODE(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_M2M_ENCODE_SHIFT)) & BCH_CTRL_TOG_M2M_ENCODE_MASK)
#define BCH_CTRL_TOG_M2M_LAYOUT_MASK             (0xC0000U)
#define BCH_CTRL_TOG_M2M_LAYOUT_SHIFT            (18U)
#define BCH_CTRL_TOG_M2M_LAYOUT(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_M2M_LAYOUT_SHIFT)) & BCH_CTRL_TOG_M2M_LAYOUT_MASK)
#define BCH_CTRL_TOG_RSVD4_MASK                  (0x300000U)
#define BCH_CTRL_TOG_RSVD4_SHIFT                 (20U)
#define BCH_CTRL_TOG_RSVD4(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD4_SHIFT)) & BCH_CTRL_TOG_RSVD4_MASK)
#define BCH_CTRL_TOG_DEBUGSYNDROME_MASK          (0x400000U)
#define BCH_CTRL_TOG_DEBUGSYNDROME_SHIFT         (22U)
#define BCH_CTRL_TOG_DEBUGSYNDROME(x)            (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_DEBUGSYNDROME_SHIFT)) & BCH_CTRL_TOG_DEBUGSYNDROME_MASK)
#define BCH_CTRL_TOG_RSVD5_MASK                  (0x3F800000U)
#define BCH_CTRL_TOG_RSVD5_SHIFT                 (23U)
#define BCH_CTRL_TOG_RSVD5(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD5_SHIFT)) & BCH_CTRL_TOG_RSVD5_MASK)
#define BCH_CTRL_TOG_CLKGATE_MASK                (0x40000000U)
#define BCH_CTRL_TOG_CLKGATE_SHIFT               (30U)
#define BCH_CTRL_TOG_CLKGATE(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_CLKGATE_SHIFT)) & BCH_CTRL_TOG_CLKGATE_MASK)
#define BCH_CTRL_TOG_SFTRST_MASK                 (0x80000000U)
#define BCH_CTRL_TOG_SFTRST_SHIFT                (31U)
#define BCH_CTRL_TOG_SFTRST(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_SFTRST_SHIFT)) & BCH_CTRL_TOG_SFTRST_MASK)

/*! @name STATUS0 - Hardware ECC Accelerator Status Register 0 */
#define BCH_STATUS0_RSVD0_MASK                   (0x3U)
#define BCH_STATUS0_RSVD0_SHIFT                  (0U)
#define BCH_STATUS0_RSVD0(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_RSVD0_SHIFT)) & BCH_STATUS0_RSVD0_MASK)
#define BCH_STATUS0_UNCORRECTABLE_MASK           (0x4U)
#define BCH_STATUS0_UNCORRECTABLE_SHIFT          (2U)
#define BCH_STATUS0_UNCORRECTABLE(x)             (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_UNCORRECTABLE_SHIFT)) & BCH_STATUS0_UNCORRECTABLE_MASK)
#define BCH_STATUS0_CORRECTED_MASK               (0x8U)
#define BCH_STATUS0_CORRECTED_SHIFT              (3U)
#define BCH_STATUS0_CORRECTED(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CORRECTED_SHIFT)) & BCH_STATUS0_CORRECTED_MASK)
#define BCH_STATUS0_ALLONES_MASK                 (0x10U)
#define BCH_STATUS0_ALLONES_SHIFT                (4U)
#define BCH_STATUS0_ALLONES(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_ALLONES_SHIFT)) & BCH_STATUS0_ALLONES_MASK)
#define BCH_STATUS0_RSVD1_MASK                   (0xE0U)
#define BCH_STATUS0_RSVD1_SHIFT                  (5U)
#define BCH_STATUS0_RSVD1(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_RSVD1_SHIFT)) & BCH_STATUS0_RSVD1_MASK)
#define BCH_STATUS0_STATUS_BLK0_MASK             (0xFF00U)
#define BCH_STATUS0_STATUS_BLK0_SHIFT            (8U)
#define BCH_STATUS0_STATUS_BLK0(x)               (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_STATUS_BLK0_SHIFT)) & BCH_STATUS0_STATUS_BLK0_MASK)
#define BCH_STATUS0_COMPLETED_CE_MASK            (0xF0000U)
#define BCH_STATUS0_COMPLETED_CE_SHIFT           (16U)
#define BCH_STATUS0_COMPLETED_CE(x)              (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_COMPLETED_CE_SHIFT)) & BCH_STATUS0_COMPLETED_CE_MASK)
#define BCH_STATUS0_HANDLE_MASK                  (0xFFF00000U)
#define BCH_STATUS0_HANDLE_SHIFT                 (20U)
#define BCH_STATUS0_HANDLE(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_HANDLE_SHIFT)) & BCH_STATUS0_HANDLE_MASK)

/*! @name STATUS0_SET - Hardware ECC Accelerator Status Register 0 */
#define BCH_STATUS0_SET_RSVD0_MASK               (0x3U)
#define BCH_STATUS0_SET_RSVD0_SHIFT              (0U)
#define BCH_STATUS0_SET_RSVD0(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_RSVD0_SHIFT)) & BCH_STATUS0_SET_RSVD0_MASK)
#define BCH_STATUS0_SET_UNCORRECTABLE_MASK       (0x4U)
#define BCH_STATUS0_SET_UNCORRECTABLE_SHIFT      (2U)
#define BCH_STATUS0_SET_UNCORRECTABLE(x)         (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_UNCORRECTABLE_SHIFT)) & BCH_STATUS0_SET_UNCORRECTABLE_MASK)
#define BCH_STATUS0_SET_CORRECTED_MASK           (0x8U)
#define BCH_STATUS0_SET_CORRECTED_SHIFT          (3U)
#define BCH_STATUS0_SET_CORRECTED(x)             (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_CORRECTED_SHIFT)) & BCH_STATUS0_SET_CORRECTED_MASK)
#define BCH_STATUS0_SET_ALLONES_MASK             (0x10U)
#define BCH_STATUS0_SET_ALLONES_SHIFT            (4U)
#define BCH_STATUS0_SET_ALLONES(x)               (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_ALLONES_SHIFT)) & BCH_STATUS0_SET_ALLONES_MASK)
#define BCH_STATUS0_SET_RSVD1_MASK               (0xE0U)
#define BCH_STATUS0_SET_RSVD1_SHIFT              (5U)
#define BCH_STATUS0_SET_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_RSVD1_SHIFT)) & BCH_STATUS0_SET_RSVD1_MASK)
#define BCH_STATUS0_SET_STATUS_BLK0_MASK         (0xFF00U)
#define BCH_STATUS0_SET_STATUS_BLK0_SHIFT        (8U)
#define BCH_STATUS0_SET_STATUS_BLK0(x)           (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_STATUS_BLK0_SHIFT)) & BCH_STATUS0_SET_STATUS_BLK0_MASK)
#define BCH_STATUS0_SET_COMPLETED_CE_MASK        (0xF0000U)
#define BCH_STATUS0_SET_COMPLETED_CE_SHIFT       (16U)
#define BCH_STATUS0_SET_COMPLETED_CE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_COMPLETED_CE_SHIFT)) & BCH_STATUS0_SET_COMPLETED_CE_MASK)
#define BCH_STATUS0_SET_HANDLE_MASK              (0xFFF00000U)
#define BCH_STATUS0_SET_HANDLE_SHIFT             (20U)
#define BCH_STATUS0_SET_HANDLE(x)                (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_HANDLE_SHIFT)) & BCH_STATUS0_SET_HANDLE_MASK)

/*! @name STATUS0_CLR - Hardware ECC Accelerator Status Register 0 */
#define BCH_STATUS0_CLR_RSVD0_MASK               (0x3U)
#define BCH_STATUS0_CLR_RSVD0_SHIFT              (0U)
#define BCH_STATUS0_CLR_RSVD0(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_RSVD0_SHIFT)) & BCH_STATUS0_CLR_RSVD0_MASK)
#define BCH_STATUS0_CLR_UNCORRECTABLE_MASK       (0x4U)
#define BCH_STATUS0_CLR_UNCORRECTABLE_SHIFT      (2U)
#define BCH_STATUS0_CLR_UNCORRECTABLE(x)         (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_UNCORRECTABLE_SHIFT)) & BCH_STATUS0_CLR_UNCORRECTABLE_MASK)
#define BCH_STATUS0_CLR_CORRECTED_MASK           (0x8U)
#define BCH_STATUS0_CLR_CORRECTED_SHIFT          (3U)
#define BCH_STATUS0_CLR_CORRECTED(x)             (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_CORRECTED_SHIFT)) & BCH_STATUS0_CLR_CORRECTED_MASK)
#define BCH_STATUS0_CLR_ALLONES_MASK             (0x10U)
#define BCH_STATUS0_CLR_ALLONES_SHIFT            (4U)
#define BCH_STATUS0_CLR_ALLONES(x)               (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_ALLONES_SHIFT)) & BCH_STATUS0_CLR_ALLONES_MASK)
#define BCH_STATUS0_CLR_RSVD1_MASK               (0xE0U)
#define BCH_STATUS0_CLR_RSVD1_SHIFT              (5U)
#define BCH_STATUS0_CLR_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_RSVD1_SHIFT)) & BCH_STATUS0_CLR_RSVD1_MASK)
#define BCH_STATUS0_CLR_STATUS_BLK0_MASK         (0xFF00U)
#define BCH_STATUS0_CLR_STATUS_BLK0_SHIFT        (8U)
#define BCH_STATUS0_CLR_STATUS_BLK0(x)           (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_STATUS_BLK0_SHIFT)) & BCH_STATUS0_CLR_STATUS_BLK0_MASK)
#define BCH_STATUS0_CLR_COMPLETED_CE_MASK        (0xF0000U)
#define BCH_STATUS0_CLR_COMPLETED_CE_SHIFT       (16U)
#define BCH_STATUS0_CLR_COMPLETED_CE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_COMPLETED_CE_SHIFT)) & BCH_STATUS0_CLR_COMPLETED_CE_MASK)
#define BCH_STATUS0_CLR_HANDLE_MASK              (0xFFF00000U)
#define BCH_STATUS0_CLR_HANDLE_SHIFT             (20U)
#define BCH_STATUS0_CLR_HANDLE(x)                (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_HANDLE_SHIFT)) & BCH_STATUS0_CLR_HANDLE_MASK)

/*! @name STATUS0_TOG - Hardware ECC Accelerator Status Register 0 */
#define BCH_STATUS0_TOG_RSVD0_MASK               (0x3U)
#define BCH_STATUS0_TOG_RSVD0_SHIFT              (0U)
#define BCH_STATUS0_TOG_RSVD0(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_RSVD0_SHIFT)) & BCH_STATUS0_TOG_RSVD0_MASK)
#define BCH_STATUS0_TOG_UNCORRECTABLE_MASK       (0x4U)
#define BCH_STATUS0_TOG_UNCORRECTABLE_SHIFT      (2U)
#define BCH_STATUS0_TOG_UNCORRECTABLE(x)         (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_UNCORRECTABLE_SHIFT)) & BCH_STATUS0_TOG_UNCORRECTABLE_MASK)
#define BCH_STATUS0_TOG_CORRECTED_MASK           (0x8U)
#define BCH_STATUS0_TOG_CORRECTED_SHIFT          (3U)
#define BCH_STATUS0_TOG_CORRECTED(x)             (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_CORRECTED_SHIFT)) & BCH_STATUS0_TOG_CORRECTED_MASK)
#define BCH_STATUS0_TOG_ALLONES_MASK             (0x10U)
#define BCH_STATUS0_TOG_ALLONES_SHIFT            (4U)
#define BCH_STATUS0_TOG_ALLONES(x)               (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_ALLONES_SHIFT)) & BCH_STATUS0_TOG_ALLONES_MASK)
#define BCH_STATUS0_TOG_RSVD1_MASK               (0xE0U)
#define BCH_STATUS0_TOG_RSVD1_SHIFT              (5U)
#define BCH_STATUS0_TOG_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_RSVD1_SHIFT)) & BCH_STATUS0_TOG_RSVD1_MASK)
#define BCH_STATUS0_TOG_STATUS_BLK0_MASK         (0xFF00U)
#define BCH_STATUS0_TOG_STATUS_BLK0_SHIFT        (8U)
#define BCH_STATUS0_TOG_STATUS_BLK0(x)           (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_STATUS_BLK0_SHIFT)) & BCH_STATUS0_TOG_STATUS_BLK0_MASK)
#define BCH_STATUS0_TOG_COMPLETED_CE_MASK        (0xF0000U)
#define BCH_STATUS0_TOG_COMPLETED_CE_SHIFT       (16U)
#define BCH_STATUS0_TOG_COMPLETED_CE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_COMPLETED_CE_SHIFT)) & BCH_STATUS0_TOG_COMPLETED_CE_MASK)
#define BCH_STATUS0_TOG_HANDLE_MASK              (0xFFF00000U)
#define BCH_STATUS0_TOG_HANDLE_SHIFT             (20U)
#define BCH_STATUS0_TOG_HANDLE(x)                (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_HANDLE_SHIFT)) & BCH_STATUS0_TOG_HANDLE_MASK)

/*! @name MODE - Hardware ECC Accelerator Mode Register */
#define BCH_MODE_ERASE_THRESHOLD_MASK            (0xFFU)
#define BCH_MODE_ERASE_THRESHOLD_SHIFT           (0U)
#define BCH_MODE_ERASE_THRESHOLD(x)              (((uint32_t)(((uint32_t)(x)) << BCH_MODE_ERASE_THRESHOLD_SHIFT)) & BCH_MODE_ERASE_THRESHOLD_MASK)
#define BCH_MODE_RSVD_MASK                       (0xFFFFFF00U)
#define BCH_MODE_RSVD_SHIFT                      (8U)
#define BCH_MODE_RSVD(x)                         (((uint32_t)(((uint32_t)(x)) << BCH_MODE_RSVD_SHIFT)) & BCH_MODE_RSVD_MASK)

/*! @name MODE_SET - Hardware ECC Accelerator Mode Register */
#define BCH_MODE_SET_ERASE_THRESHOLD_MASK        (0xFFU)
#define BCH_MODE_SET_ERASE_THRESHOLD_SHIFT       (0U)
#define BCH_MODE_SET_ERASE_THRESHOLD(x)          (((uint32_t)(((uint32_t)(x)) << BCH_MODE_SET_ERASE_THRESHOLD_SHIFT)) & BCH_MODE_SET_ERASE_THRESHOLD_MASK)
#define BCH_MODE_SET_RSVD_MASK                   (0xFFFFFF00U)
#define BCH_MODE_SET_RSVD_SHIFT                  (8U)
#define BCH_MODE_SET_RSVD(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_MODE_SET_RSVD_SHIFT)) & BCH_MODE_SET_RSVD_MASK)

/*! @name MODE_CLR - Hardware ECC Accelerator Mode Register */
#define BCH_MODE_CLR_ERASE_THRESHOLD_MASK        (0xFFU)
#define BCH_MODE_CLR_ERASE_THRESHOLD_SHIFT       (0U)
#define BCH_MODE_CLR_ERASE_THRESHOLD(x)          (((uint32_t)(((uint32_t)(x)) << BCH_MODE_CLR_ERASE_THRESHOLD_SHIFT)) & BCH_MODE_CLR_ERASE_THRESHOLD_MASK)
#define BCH_MODE_CLR_RSVD_MASK                   (0xFFFFFF00U)
#define BCH_MODE_CLR_RSVD_SHIFT                  (8U)
#define BCH_MODE_CLR_RSVD(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_MODE_CLR_RSVD_SHIFT)) & BCH_MODE_CLR_RSVD_MASK)

/*! @name MODE_TOG - Hardware ECC Accelerator Mode Register */
#define BCH_MODE_TOG_ERASE_THRESHOLD_MASK        (0xFFU)
#define BCH_MODE_TOG_ERASE_THRESHOLD_SHIFT       (0U)
#define BCH_MODE_TOG_ERASE_THRESHOLD(x)          (((uint32_t)(((uint32_t)(x)) << BCH_MODE_TOG_ERASE_THRESHOLD_SHIFT)) & BCH_MODE_TOG_ERASE_THRESHOLD_MASK)
#define BCH_MODE_TOG_RSVD_MASK                   (0xFFFFFF00U)
#define BCH_MODE_TOG_RSVD_SHIFT                  (8U)
#define BCH_MODE_TOG_RSVD(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_MODE_TOG_RSVD_SHIFT)) & BCH_MODE_TOG_RSVD_MASK)

/*! @name ENCODEPTR - Hardware BCH ECC Loopback Encode Buffer Register */
#define BCH_ENCODEPTR_ADDR_MASK                  (0xFFFFFFFFU)
#define BCH_ENCODEPTR_ADDR_SHIFT                 (0U)
#define BCH_ENCODEPTR_ADDR(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_ENCODEPTR_ADDR_SHIFT)) & BCH_ENCODEPTR_ADDR_MASK)

/*! @name ENCODEPTR_SET - Hardware BCH ECC Loopback Encode Buffer Register */
#define BCH_ENCODEPTR_SET_ADDR_MASK              (0xFFFFFFFFU)
#define BCH_ENCODEPTR_SET_ADDR_SHIFT             (0U)
#define BCH_ENCODEPTR_SET_ADDR(x)                (((uint32_t)(((uint32_t)(x)) << BCH_ENCODEPTR_SET_ADDR_SHIFT)) & BCH_ENCODEPTR_SET_ADDR_MASK)

/*! @name ENCODEPTR_CLR - Hardware BCH ECC Loopback Encode Buffer Register */
#define BCH_ENCODEPTR_CLR_ADDR_MASK              (0xFFFFFFFFU)
#define BCH_ENCODEPTR_CLR_ADDR_SHIFT             (0U)
#define BCH_ENCODEPTR_CLR_ADDR(x)                (((uint32_t)(((uint32_t)(x)) << BCH_ENCODEPTR_CLR_ADDR_SHIFT)) & BCH_ENCODEPTR_CLR_ADDR_MASK)

/*! @name ENCODEPTR_TOG - Hardware BCH ECC Loopback Encode Buffer Register */
#define BCH_ENCODEPTR_TOG_ADDR_MASK              (0xFFFFFFFFU)
#define BCH_ENCODEPTR_TOG_ADDR_SHIFT             (0U)
#define BCH_ENCODEPTR_TOG_ADDR(x)                (((uint32_t)(((uint32_t)(x)) << BCH_ENCODEPTR_TOG_ADDR_SHIFT)) & BCH_ENCODEPTR_TOG_ADDR_MASK)

/*! @name DATAPTR - Hardware BCH ECC Loopback Data Buffer Register */
#define BCH_DATAPTR_ADDR_MASK                    (0xFFFFFFFFU)
#define BCH_DATAPTR_ADDR_SHIFT                   (0U)
#define BCH_DATAPTR_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_DATAPTR_ADDR_SHIFT)) & BCH_DATAPTR_ADDR_MASK)

/*! @name DATAPTR_SET - Hardware BCH ECC Loopback Data Buffer Register */
#define BCH_DATAPTR_SET_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_DATAPTR_SET_ADDR_SHIFT               (0U)
#define BCH_DATAPTR_SET_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DATAPTR_SET_ADDR_SHIFT)) & BCH_DATAPTR_SET_ADDR_MASK)

/*! @name DATAPTR_CLR - Hardware BCH ECC Loopback Data Buffer Register */
#define BCH_DATAPTR_CLR_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_DATAPTR_CLR_ADDR_SHIFT               (0U)
#define BCH_DATAPTR_CLR_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DATAPTR_CLR_ADDR_SHIFT)) & BCH_DATAPTR_CLR_ADDR_MASK)

/*! @name DATAPTR_TOG - Hardware BCH ECC Loopback Data Buffer Register */
#define BCH_DATAPTR_TOG_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_DATAPTR_TOG_ADDR_SHIFT               (0U)
#define BCH_DATAPTR_TOG_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DATAPTR_TOG_ADDR_SHIFT)) & BCH_DATAPTR_TOG_ADDR_MASK)

/*! @name METAPTR - Hardware BCH ECC Loopback Metadata Buffer Register */
#define BCH_METAPTR_ADDR_MASK                    (0xFFFFFFFFU)
#define BCH_METAPTR_ADDR_SHIFT                   (0U)
#define BCH_METAPTR_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_METAPTR_ADDR_SHIFT)) & BCH_METAPTR_ADDR_MASK)

/*! @name METAPTR_SET - Hardware BCH ECC Loopback Metadata Buffer Register */
#define BCH_METAPTR_SET_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_METAPTR_SET_ADDR_SHIFT               (0U)
#define BCH_METAPTR_SET_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_METAPTR_SET_ADDR_SHIFT)) & BCH_METAPTR_SET_ADDR_MASK)

/*! @name METAPTR_CLR - Hardware BCH ECC Loopback Metadata Buffer Register */
#define BCH_METAPTR_CLR_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_METAPTR_CLR_ADDR_SHIFT               (0U)
#define BCH_METAPTR_CLR_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_METAPTR_CLR_ADDR_SHIFT)) & BCH_METAPTR_CLR_ADDR_MASK)

/*! @name METAPTR_TOG - Hardware BCH ECC Loopback Metadata Buffer Register */
#define BCH_METAPTR_TOG_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_METAPTR_TOG_ADDR_SHIFT               (0U)
#define BCH_METAPTR_TOG_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_METAPTR_TOG_ADDR_SHIFT)) & BCH_METAPTR_TOG_ADDR_MASK)

/*! @name LAYOUTSELECT - Hardware ECC Accelerator Layout Select Register */
#define BCH_LAYOUTSELECT_CS0_SELECT_MASK         (0x3U)
#define BCH_LAYOUTSELECT_CS0_SELECT_SHIFT        (0U)
#define BCH_LAYOUTSELECT_CS0_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS0_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS0_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS1_SELECT_MASK         (0xCU)
#define BCH_LAYOUTSELECT_CS1_SELECT_SHIFT        (2U)
#define BCH_LAYOUTSELECT_CS1_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS1_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS1_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS2_SELECT_MASK         (0x30U)
#define BCH_LAYOUTSELECT_CS2_SELECT_SHIFT        (4U)
#define BCH_LAYOUTSELECT_CS2_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS2_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS2_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS3_SELECT_MASK         (0xC0U)
#define BCH_LAYOUTSELECT_CS3_SELECT_SHIFT        (6U)
#define BCH_LAYOUTSELECT_CS3_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS3_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS3_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS4_SELECT_MASK         (0x300U)
#define BCH_LAYOUTSELECT_CS4_SELECT_SHIFT        (8U)
#define BCH_LAYOUTSELECT_CS4_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS4_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS4_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS5_SELECT_MASK         (0xC00U)
#define BCH_LAYOUTSELECT_CS5_SELECT_SHIFT        (10U)
#define BCH_LAYOUTSELECT_CS5_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS5_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS5_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS6_SELECT_MASK         (0x3000U)
#define BCH_LAYOUTSELECT_CS6_SELECT_SHIFT        (12U)
#define BCH_LAYOUTSELECT_CS6_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS6_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS6_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS7_SELECT_MASK         (0xC000U)
#define BCH_LAYOUTSELECT_CS7_SELECT_SHIFT        (14U)
#define BCH_LAYOUTSELECT_CS7_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS7_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS7_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS8_SELECT_MASK         (0x30000U)
#define BCH_LAYOUTSELECT_CS8_SELECT_SHIFT        (16U)
#define BCH_LAYOUTSELECT_CS8_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS8_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS8_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS9_SELECT_MASK         (0xC0000U)
#define BCH_LAYOUTSELECT_CS9_SELECT_SHIFT        (18U)
#define BCH_LAYOUTSELECT_CS9_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS9_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS9_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS10_SELECT_MASK        (0x300000U)
#define BCH_LAYOUTSELECT_CS10_SELECT_SHIFT       (20U)
#define BCH_LAYOUTSELECT_CS10_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS10_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS10_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS11_SELECT_MASK        (0xC00000U)
#define BCH_LAYOUTSELECT_CS11_SELECT_SHIFT       (22U)
#define BCH_LAYOUTSELECT_CS11_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS11_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS11_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS12_SELECT_MASK        (0x3000000U)
#define BCH_LAYOUTSELECT_CS12_SELECT_SHIFT       (24U)
#define BCH_LAYOUTSELECT_CS12_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS12_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS12_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS13_SELECT_MASK        (0xC000000U)
#define BCH_LAYOUTSELECT_CS13_SELECT_SHIFT       (26U)
#define BCH_LAYOUTSELECT_CS13_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS13_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS13_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS14_SELECT_MASK        (0x30000000U)
#define BCH_LAYOUTSELECT_CS14_SELECT_SHIFT       (28U)
#define BCH_LAYOUTSELECT_CS14_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS14_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS14_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS15_SELECT_MASK        (0xC0000000U)
#define BCH_LAYOUTSELECT_CS15_SELECT_SHIFT       (30U)
#define BCH_LAYOUTSELECT_CS15_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS15_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS15_SELECT_MASK)

/*! @name LAYOUTSELECT_SET - Hardware ECC Accelerator Layout Select Register */
#define BCH_LAYOUTSELECT_SET_CS0_SELECT_MASK     (0x3U)
#define BCH_LAYOUTSELECT_SET_CS0_SELECT_SHIFT    (0U)
#define BCH_LAYOUTSELECT_SET_CS0_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS0_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS0_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS1_SELECT_MASK     (0xCU)
#define BCH_LAYOUTSELECT_SET_CS1_SELECT_SHIFT    (2U)
#define BCH_LAYOUTSELECT_SET_CS1_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS1_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS1_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS2_SELECT_MASK     (0x30U)
#define BCH_LAYOUTSELECT_SET_CS2_SELECT_SHIFT    (4U)
#define BCH_LAYOUTSELECT_SET_CS2_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS2_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS2_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS3_SELECT_MASK     (0xC0U)
#define BCH_LAYOUTSELECT_SET_CS3_SELECT_SHIFT    (6U)
#define BCH_LAYOUTSELECT_SET_CS3_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS3_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS3_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS4_SELECT_MASK     (0x300U)
#define BCH_LAYOUTSELECT_SET_CS4_SELECT_SHIFT    (8U)
#define BCH_LAYOUTSELECT_SET_CS4_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS4_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS4_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS5_SELECT_MASK     (0xC00U)
#define BCH_LAYOUTSELECT_SET_CS5_SELECT_SHIFT    (10U)
#define BCH_LAYOUTSELECT_SET_CS5_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS5_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS5_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS6_SELECT_MASK     (0x3000U)
#define BCH_LAYOUTSELECT_SET_CS6_SELECT_SHIFT    (12U)
#define BCH_LAYOUTSELECT_SET_CS6_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS6_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS6_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS7_SELECT_MASK     (0xC000U)
#define BCH_LAYOUTSELECT_SET_CS7_SELECT_SHIFT    (14U)
#define BCH_LAYOUTSELECT_SET_CS7_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS7_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS7_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS8_SELECT_MASK     (0x30000U)
#define BCH_LAYOUTSELECT_SET_CS8_SELECT_SHIFT    (16U)
#define BCH_LAYOUTSELECT_SET_CS8_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS8_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS8_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS9_SELECT_MASK     (0xC0000U)
#define BCH_LAYOUTSELECT_SET_CS9_SELECT_SHIFT    (18U)
#define BCH_LAYOUTSELECT_SET_CS9_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS9_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS9_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS10_SELECT_MASK    (0x300000U)
#define BCH_LAYOUTSELECT_SET_CS10_SELECT_SHIFT   (20U)
#define BCH_LAYOUTSELECT_SET_CS10_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS10_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS10_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS11_SELECT_MASK    (0xC00000U)
#define BCH_LAYOUTSELECT_SET_CS11_SELECT_SHIFT   (22U)
#define BCH_LAYOUTSELECT_SET_CS11_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS11_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS11_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS12_SELECT_MASK    (0x3000000U)
#define BCH_LAYOUTSELECT_SET_CS12_SELECT_SHIFT   (24U)
#define BCH_LAYOUTSELECT_SET_CS12_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS12_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS12_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS13_SELECT_MASK    (0xC000000U)
#define BCH_LAYOUTSELECT_SET_CS13_SELECT_SHIFT   (26U)
#define BCH_LAYOUTSELECT_SET_CS13_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS13_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS13_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS14_SELECT_MASK    (0x30000000U)
#define BCH_LAYOUTSELECT_SET_CS14_SELECT_SHIFT   (28U)
#define BCH_LAYOUTSELECT_SET_CS14_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS14_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS14_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS15_SELECT_MASK    (0xC0000000U)
#define BCH_LAYOUTSELECT_SET_CS15_SELECT_SHIFT   (30U)
#define BCH_LAYOUTSELECT_SET_CS15_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS15_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS15_SELECT_MASK)

/*! @name LAYOUTSELECT_CLR - Hardware ECC Accelerator Layout Select Register */
#define BCH_LAYOUTSELECT_CLR_CS0_SELECT_MASK     (0x3U)
#define BCH_LAYOUTSELECT_CLR_CS0_SELECT_SHIFT    (0U)
#define BCH_LAYOUTSELECT_CLR_CS0_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS0_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS0_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS1_SELECT_MASK     (0xCU)
#define BCH_LAYOUTSELECT_CLR_CS1_SELECT_SHIFT    (2U)
#define BCH_LAYOUTSELECT_CLR_CS1_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS1_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS1_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS2_SELECT_MASK     (0x30U)
#define BCH_LAYOUTSELECT_CLR_CS2_SELECT_SHIFT    (4U)
#define BCH_LAYOUTSELECT_CLR_CS2_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS2_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS2_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS3_SELECT_MASK     (0xC0U)
#define BCH_LAYOUTSELECT_CLR_CS3_SELECT_SHIFT    (6U)
#define BCH_LAYOUTSELECT_CLR_CS3_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS3_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS3_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS4_SELECT_MASK     (0x300U)
#define BCH_LAYOUTSELECT_CLR_CS4_SELECT_SHIFT    (8U)
#define BCH_LAYOUTSELECT_CLR_CS4_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS4_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS4_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS5_SELECT_MASK     (0xC00U)
#define BCH_LAYOUTSELECT_CLR_CS5_SELECT_SHIFT    (10U)
#define BCH_LAYOUTSELECT_CLR_CS5_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS5_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS5_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS6_SELECT_MASK     (0x3000U)
#define BCH_LAYOUTSELECT_CLR_CS6_SELECT_SHIFT    (12U)
#define BCH_LAYOUTSELECT_CLR_CS6_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS6_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS6_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS7_SELECT_MASK     (0xC000U)
#define BCH_LAYOUTSELECT_CLR_CS7_SELECT_SHIFT    (14U)
#define BCH_LAYOUTSELECT_CLR_CS7_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS7_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS7_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS8_SELECT_MASK     (0x30000U)
#define BCH_LAYOUTSELECT_CLR_CS8_SELECT_SHIFT    (16U)
#define BCH_LAYOUTSELECT_CLR_CS8_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS8_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS8_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS9_SELECT_MASK     (0xC0000U)
#define BCH_LAYOUTSELECT_CLR_CS9_SELECT_SHIFT    (18U)
#define BCH_LAYOUTSELECT_CLR_CS9_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS9_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS9_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS10_SELECT_MASK    (0x300000U)
#define BCH_LAYOUTSELECT_CLR_CS10_SELECT_SHIFT   (20U)
#define BCH_LAYOUTSELECT_CLR_CS10_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS10_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS10_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS11_SELECT_MASK    (0xC00000U)
#define BCH_LAYOUTSELECT_CLR_CS11_SELECT_SHIFT   (22U)
#define BCH_LAYOUTSELECT_CLR_CS11_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS11_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS11_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS12_SELECT_MASK    (0x3000000U)
#define BCH_LAYOUTSELECT_CLR_CS12_SELECT_SHIFT   (24U)
#define BCH_LAYOUTSELECT_CLR_CS12_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS12_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS12_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS13_SELECT_MASK    (0xC000000U)
#define BCH_LAYOUTSELECT_CLR_CS13_SELECT_SHIFT   (26U)
#define BCH_LAYOUTSELECT_CLR_CS13_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS13_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS13_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS14_SELECT_MASK    (0x30000000U)
#define BCH_LAYOUTSELECT_CLR_CS14_SELECT_SHIFT   (28U)
#define BCH_LAYOUTSELECT_CLR_CS14_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS14_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS14_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS15_SELECT_MASK    (0xC0000000U)
#define BCH_LAYOUTSELECT_CLR_CS15_SELECT_SHIFT   (30U)
#define BCH_LAYOUTSELECT_CLR_CS15_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS15_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS15_SELECT_MASK)

/*! @name LAYOUTSELECT_TOG - Hardware ECC Accelerator Layout Select Register */
#define BCH_LAYOUTSELECT_TOG_CS0_SELECT_MASK     (0x3U)
#define BCH_LAYOUTSELECT_TOG_CS0_SELECT_SHIFT    (0U)
#define BCH_LAYOUTSELECT_TOG_CS0_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS0_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS0_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS1_SELECT_MASK     (0xCU)
#define BCH_LAYOUTSELECT_TOG_CS1_SELECT_SHIFT    (2U)
#define BCH_LAYOUTSELECT_TOG_CS1_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS1_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS1_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS2_SELECT_MASK     (0x30U)
#define BCH_LAYOUTSELECT_TOG_CS2_SELECT_SHIFT    (4U)
#define BCH_LAYOUTSELECT_TOG_CS2_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS2_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS2_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS3_SELECT_MASK     (0xC0U)
#define BCH_LAYOUTSELECT_TOG_CS3_SELECT_SHIFT    (6U)
#define BCH_LAYOUTSELECT_TOG_CS3_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS3_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS3_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS4_SELECT_MASK     (0x300U)
#define BCH_LAYOUTSELECT_TOG_CS4_SELECT_SHIFT    (8U)
#define BCH_LAYOUTSELECT_TOG_CS4_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS4_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS4_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS5_SELECT_MASK     (0xC00U)
#define BCH_LAYOUTSELECT_TOG_CS5_SELECT_SHIFT    (10U)
#define BCH_LAYOUTSELECT_TOG_CS5_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS5_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS5_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS6_SELECT_MASK     (0x3000U)
#define BCH_LAYOUTSELECT_TOG_CS6_SELECT_SHIFT    (12U)
#define BCH_LAYOUTSELECT_TOG_CS6_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS6_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS6_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS7_SELECT_MASK     (0xC000U)
#define BCH_LAYOUTSELECT_TOG_CS7_SELECT_SHIFT    (14U)
#define BCH_LAYOUTSELECT_TOG_CS7_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS7_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS7_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS8_SELECT_MASK     (0x30000U)
#define BCH_LAYOUTSELECT_TOG_CS8_SELECT_SHIFT    (16U)
#define BCH_LAYOUTSELECT_TOG_CS8_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS8_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS8_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS9_SELECT_MASK     (0xC0000U)
#define BCH_LAYOUTSELECT_TOG_CS9_SELECT_SHIFT    (18U)
#define BCH_LAYOUTSELECT_TOG_CS9_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS9_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS9_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS10_SELECT_MASK    (0x300000U)
#define BCH_LAYOUTSELECT_TOG_CS10_SELECT_SHIFT   (20U)
#define BCH_LAYOUTSELECT_TOG_CS10_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS10_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS10_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS11_SELECT_MASK    (0xC00000U)
#define BCH_LAYOUTSELECT_TOG_CS11_SELECT_SHIFT   (22U)
#define BCH_LAYOUTSELECT_TOG_CS11_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS11_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS11_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS12_SELECT_MASK    (0x3000000U)
#define BCH_LAYOUTSELECT_TOG_CS12_SELECT_SHIFT   (24U)
#define BCH_LAYOUTSELECT_TOG_CS12_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS12_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS12_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS13_SELECT_MASK    (0xC000000U)
#define BCH_LAYOUTSELECT_TOG_CS13_SELECT_SHIFT   (26U)
#define BCH_LAYOUTSELECT_TOG_CS13_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS13_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS13_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS14_SELECT_MASK    (0x30000000U)
#define BCH_LAYOUTSELECT_TOG_CS14_SELECT_SHIFT   (28U)
#define BCH_LAYOUTSELECT_TOG_CS14_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS14_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS14_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS15_SELECT_MASK    (0xC0000000U)
#define BCH_LAYOUTSELECT_TOG_CS15_SELECT_SHIFT   (30U)
#define BCH_LAYOUTSELECT_TOG_CS15_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS15_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS15_SELECT_MASK)

/*! @name FLASH0LAYOUT0 - Hardware BCH ECC Flash 0 Layout 0 Register */
#define BCH_FLASH0LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH0LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH0LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH0LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH0LAYOUT0_GF13_0_GF14_1(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_GF13_0_GF14_1_SHIFT)) & BCH_FLASH0LAYOUT0_GF13_0_GF14_1_MASK)
#define BCH_FLASH0LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH0LAYOUT0_ECC0_SHIFT             (11U)
#define BCH_FLASH0LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_ECC0_SHIFT)) & BCH_FLASH0LAYOUT0_ECC0_MASK)
#define BCH_FLASH0LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH0LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH0LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH0LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH0LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH0LAYOUT0_NBLOCKS_MASK)

/*! @name FLASH0LAYOUT0_SET - Hardware BCH ECC Flash 0 Layout 0 Register */
#define BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT0_SET_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT0_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT0_SET_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_SET_GF13_0_GF14_1_SHIFT)) & BCH_FLASH0LAYOUT0_SET_GF13_0_GF14_1_MASK)
#define BCH_FLASH0LAYOUT0_SET_ECC0_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT0_SET_ECC0_SHIFT         (11U)
#define BCH_FLASH0LAYOUT0_SET_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_SET_ECC0_SHIFT)) & BCH_FLASH0LAYOUT0_SET_ECC0_MASK)
#define BCH_FLASH0LAYOUT0_SET_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH0LAYOUT0_SET_META_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT0_SET_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_SET_META_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_SET_META_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_SET_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH0LAYOUT0_SET_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH0LAYOUT0_SET_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_SET_NBLOCKS_SHIFT)) & BCH_FLASH0LAYOUT0_SET_NBLOCKS_MASK)

/*! @name FLASH0LAYOUT0_CLR - Hardware BCH ECC Flash 0 Layout 0 Register */
#define BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT0_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT0_CLR_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_CLR_GF13_0_GF14_1_SHIFT)) & BCH_FLASH0LAYOUT0_CLR_GF13_0_GF14_1_MASK)
#define BCH_FLASH0LAYOUT0_CLR_ECC0_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT0_CLR_ECC0_SHIFT         (11U)
#define BCH_FLASH0LAYOUT0_CLR_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_CLR_ECC0_SHIFT)) & BCH_FLASH0LAYOUT0_CLR_ECC0_MASK)
#define BCH_FLASH0LAYOUT0_CLR_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH0LAYOUT0_CLR_META_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT0_CLR_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_CLR_META_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_CLR_META_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_CLR_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH0LAYOUT0_CLR_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH0LAYOUT0_CLR_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_CLR_NBLOCKS_SHIFT)) & BCH_FLASH0LAYOUT0_CLR_NBLOCKS_MASK)

/*! @name FLASH0LAYOUT0_TOG - Hardware BCH ECC Flash 0 Layout 0 Register */
#define BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT0_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT0_TOG_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_TOG_GF13_0_GF14_1_SHIFT)) & BCH_FLASH0LAYOUT0_TOG_GF13_0_GF14_1_MASK)
#define BCH_FLASH0LAYOUT0_TOG_ECC0_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT0_TOG_ECC0_SHIFT         (11U)
#define BCH_FLASH0LAYOUT0_TOG_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_TOG_ECC0_SHIFT)) & BCH_FLASH0LAYOUT0_TOG_ECC0_MASK)
#define BCH_FLASH0LAYOUT0_TOG_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH0LAYOUT0_TOG_META_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT0_TOG_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_TOG_META_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_TOG_META_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_TOG_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH0LAYOUT0_TOG_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH0LAYOUT0_TOG_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_TOG_NBLOCKS_SHIFT)) & BCH_FLASH0LAYOUT0_TOG_NBLOCKS_MASK)

/*! @name FLASH0LAYOUT1 - Hardware BCH ECC Flash 0 Layout 1 Register */
#define BCH_FLASH0LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH0LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH0LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH0LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH0LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH0LAYOUT1_GF13_0_GF14_1(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_GF13_0_GF14_1_SHIFT)) & BCH_FLASH0LAYOUT1_GF13_0_GF14_1_MASK)
#define BCH_FLASH0LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH0LAYOUT1_ECCN_SHIFT             (11U)
#define BCH_FLASH0LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_ECCN_SHIFT)) & BCH_FLASH0LAYOUT1_ECCN_MASK)
#define BCH_FLASH0LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH0LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH0LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_PAGE_SIZE_MASK)

/*! @name FLASH0LAYOUT1_SET - Hardware BCH ECC Flash 0 Layout 1 Register */
#define BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT1_SET_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_MASK)
#define BCH_FLASH0LAYOUT1_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT1_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT1_SET_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_SET_GF13_0_GF14_1_SHIFT)) & BCH_FLASH0LAYOUT1_SET_GF13_0_GF14_1_MASK)
#define BCH_FLASH0LAYOUT1_SET_ECCN_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT1_SET_ECCN_SHIFT         (11U)
#define BCH_FLASH0LAYOUT1_SET_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_SET_ECCN_SHIFT)) & BCH_FLASH0LAYOUT1_SET_ECCN_MASK)
#define BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT1_SET_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_MASK)

/*! @name FLASH0LAYOUT1_CLR - Hardware BCH ECC Flash 0 Layout 1 Register */
#define BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_MASK)
#define BCH_FLASH0LAYOUT1_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT1_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT1_CLR_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_CLR_GF13_0_GF14_1_SHIFT)) & BCH_FLASH0LAYOUT1_CLR_GF13_0_GF14_1_MASK)
#define BCH_FLASH0LAYOUT1_CLR_ECCN_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT1_CLR_ECCN_SHIFT         (11U)
#define BCH_FLASH0LAYOUT1_CLR_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_CLR_ECCN_SHIFT)) & BCH_FLASH0LAYOUT1_CLR_ECCN_MASK)
#define BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_MASK)

/*! @name FLASH0LAYOUT1_TOG - Hardware BCH ECC Flash 0 Layout 1 Register */
#define BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_MASK)
#define BCH_FLASH0LAYOUT1_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT1_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT1_TOG_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_TOG_GF13_0_GF14_1_SHIFT)) & BCH_FLASH0LAYOUT1_TOG_GF13_0_GF14_1_MASK)
#define BCH_FLASH0LAYOUT1_TOG_ECCN_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT1_TOG_ECCN_SHIFT         (11U)
#define BCH_FLASH0LAYOUT1_TOG_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_TOG_ECCN_SHIFT)) & BCH_FLASH0LAYOUT1_TOG_ECCN_MASK)
#define BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_MASK)

/*! @name FLASH1LAYOUT0 - Hardware BCH ECC Flash 1 Layout 0 Register */
#define BCH_FLASH1LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH1LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH1LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH1LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH1LAYOUT0_GF13_0_GF14_1(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_GF13_0_GF14_1_SHIFT)) & BCH_FLASH1LAYOUT0_GF13_0_GF14_1_MASK)
#define BCH_FLASH1LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH1LAYOUT0_ECC0_SHIFT             (11U)
#define BCH_FLASH1LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_ECC0_SHIFT)) & BCH_FLASH1LAYOUT0_ECC0_MASK)
#define BCH_FLASH1LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH1LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH1LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH1LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH1LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH1LAYOUT0_NBLOCKS_MASK)

/*! @name FLASH1LAYOUT0_SET - Hardware BCH ECC Flash 1 Layout 0 Register */
#define BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT0_SET_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT0_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT0_SET_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_SET_GF13_0_GF14_1_SHIFT)) & BCH_FLASH1LAYOUT0_SET_GF13_0_GF14_1_MASK)
#define BCH_FLASH1LAYOUT0_SET_ECC0_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT0_SET_ECC0_SHIFT         (11U)
#define BCH_FLASH1LAYOUT0_SET_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_SET_ECC0_SHIFT)) & BCH_FLASH1LAYOUT0_SET_ECC0_MASK)
#define BCH_FLASH1LAYOUT0_SET_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH1LAYOUT0_SET_META_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT0_SET_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_SET_META_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_SET_META_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_SET_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH1LAYOUT0_SET_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH1LAYOUT0_SET_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_SET_NBLOCKS_SHIFT)) & BCH_FLASH1LAYOUT0_SET_NBLOCKS_MASK)

/*! @name FLASH1LAYOUT0_CLR - Hardware BCH ECC Flash 1 Layout 0 Register */
#define BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT0_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT0_CLR_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_CLR_GF13_0_GF14_1_SHIFT)) & BCH_FLASH1LAYOUT0_CLR_GF13_0_GF14_1_MASK)
#define BCH_FLASH1LAYOUT0_CLR_ECC0_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT0_CLR_ECC0_SHIFT         (11U)
#define BCH_FLASH1LAYOUT0_CLR_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_CLR_ECC0_SHIFT)) & BCH_FLASH1LAYOUT0_CLR_ECC0_MASK)
#define BCH_FLASH1LAYOUT0_CLR_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH1LAYOUT0_CLR_META_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT0_CLR_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_CLR_META_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_CLR_META_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_CLR_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH1LAYOUT0_CLR_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH1LAYOUT0_CLR_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_CLR_NBLOCKS_SHIFT)) & BCH_FLASH1LAYOUT0_CLR_NBLOCKS_MASK)

/*! @name FLASH1LAYOUT0_TOG - Hardware BCH ECC Flash 1 Layout 0 Register */
#define BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT0_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT0_TOG_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_TOG_GF13_0_GF14_1_SHIFT)) & BCH_FLASH1LAYOUT0_TOG_GF13_0_GF14_1_MASK)
#define BCH_FLASH1LAYOUT0_TOG_ECC0_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT0_TOG_ECC0_SHIFT         (11U)
#define BCH_FLASH1LAYOUT0_TOG_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_TOG_ECC0_SHIFT)) & BCH_FLASH1LAYOUT0_TOG_ECC0_MASK)
#define BCH_FLASH1LAYOUT0_TOG_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH1LAYOUT0_TOG_META_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT0_TOG_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_TOG_META_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_TOG_META_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_TOG_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH1LAYOUT0_TOG_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH1LAYOUT0_TOG_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_TOG_NBLOCKS_SHIFT)) & BCH_FLASH1LAYOUT0_TOG_NBLOCKS_MASK)

/*! @name FLASH1LAYOUT1 - Hardware BCH ECC Flash 1 Layout 1 Register */
#define BCH_FLASH1LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH1LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH1LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH1LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH1LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH1LAYOUT1_GF13_0_GF14_1(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_GF13_0_GF14_1_SHIFT)) & BCH_FLASH1LAYOUT1_GF13_0_GF14_1_MASK)
#define BCH_FLASH1LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH1LAYOUT1_ECCN_SHIFT             (11U)
#define BCH_FLASH1LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_ECCN_SHIFT)) & BCH_FLASH1LAYOUT1_ECCN_MASK)
#define BCH_FLASH1LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH1LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH1LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_PAGE_SIZE_MASK)

/*! @name FLASH1LAYOUT1_SET - Hardware BCH ECC Flash 1 Layout 1 Register */
#define BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT1_SET_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_MASK)
#define BCH_FLASH1LAYOUT1_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT1_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT1_SET_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_SET_GF13_0_GF14_1_SHIFT)) & BCH_FLASH1LAYOUT1_SET_GF13_0_GF14_1_MASK)
#define BCH_FLASH1LAYOUT1_SET_ECCN_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT1_SET_ECCN_SHIFT         (11U)
#define BCH_FLASH1LAYOUT1_SET_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_SET_ECCN_SHIFT)) & BCH_FLASH1LAYOUT1_SET_ECCN_MASK)
#define BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT1_SET_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_MASK)

/*! @name FLASH1LAYOUT1_CLR - Hardware BCH ECC Flash 1 Layout 1 Register */
#define BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_MASK)
#define BCH_FLASH1LAYOUT1_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT1_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT1_CLR_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_CLR_GF13_0_GF14_1_SHIFT)) & BCH_FLASH1LAYOUT1_CLR_GF13_0_GF14_1_MASK)
#define BCH_FLASH1LAYOUT1_CLR_ECCN_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT1_CLR_ECCN_SHIFT         (11U)
#define BCH_FLASH1LAYOUT1_CLR_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_CLR_ECCN_SHIFT)) & BCH_FLASH1LAYOUT1_CLR_ECCN_MASK)
#define BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_MASK)

/*! @name FLASH1LAYOUT1_TOG - Hardware BCH ECC Flash 1 Layout 1 Register */
#define BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_MASK)
#define BCH_FLASH1LAYOUT1_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT1_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT1_TOG_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_TOG_GF13_0_GF14_1_SHIFT)) & BCH_FLASH1LAYOUT1_TOG_GF13_0_GF14_1_MASK)
#define BCH_FLASH1LAYOUT1_TOG_ECCN_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT1_TOG_ECCN_SHIFT         (11U)
#define BCH_FLASH1LAYOUT1_TOG_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_TOG_ECCN_SHIFT)) & BCH_FLASH1LAYOUT1_TOG_ECCN_MASK)
#define BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_MASK)

/*! @name FLASH2LAYOUT0 - Hardware BCH ECC Flash 2 Layout 0 Register */
#define BCH_FLASH2LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH2LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH2LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH2LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH2LAYOUT0_GF13_0_GF14_1(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_GF13_0_GF14_1_SHIFT)) & BCH_FLASH2LAYOUT0_GF13_0_GF14_1_MASK)
#define BCH_FLASH2LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH2LAYOUT0_ECC0_SHIFT             (11U)
#define BCH_FLASH2LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_ECC0_SHIFT)) & BCH_FLASH2LAYOUT0_ECC0_MASK)
#define BCH_FLASH2LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH2LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH2LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH2LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH2LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH2LAYOUT0_NBLOCKS_MASK)

/*! @name FLASH2LAYOUT0_SET - Hardware BCH ECC Flash 2 Layout 0 Register */
#define BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT0_SET_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT0_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT0_SET_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_SET_GF13_0_GF14_1_SHIFT)) & BCH_FLASH2LAYOUT0_SET_GF13_0_GF14_1_MASK)
#define BCH_FLASH2LAYOUT0_SET_ECC0_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT0_SET_ECC0_SHIFT         (11U)
#define BCH_FLASH2LAYOUT0_SET_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_SET_ECC0_SHIFT)) & BCH_FLASH2LAYOUT0_SET_ECC0_MASK)
#define BCH_FLASH2LAYOUT0_SET_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH2LAYOUT0_SET_META_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT0_SET_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_SET_META_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_SET_META_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_SET_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH2LAYOUT0_SET_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH2LAYOUT0_SET_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_SET_NBLOCKS_SHIFT)) & BCH_FLASH2LAYOUT0_SET_NBLOCKS_MASK)

/*! @name FLASH2LAYOUT0_CLR - Hardware BCH ECC Flash 2 Layout 0 Register */
#define BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT0_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT0_CLR_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_CLR_GF13_0_GF14_1_SHIFT)) & BCH_FLASH2LAYOUT0_CLR_GF13_0_GF14_1_MASK)
#define BCH_FLASH2LAYOUT0_CLR_ECC0_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT0_CLR_ECC0_SHIFT         (11U)
#define BCH_FLASH2LAYOUT0_CLR_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_CLR_ECC0_SHIFT)) & BCH_FLASH2LAYOUT0_CLR_ECC0_MASK)
#define BCH_FLASH2LAYOUT0_CLR_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH2LAYOUT0_CLR_META_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT0_CLR_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_CLR_META_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_CLR_META_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_CLR_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH2LAYOUT0_CLR_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH2LAYOUT0_CLR_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_CLR_NBLOCKS_SHIFT)) & BCH_FLASH2LAYOUT0_CLR_NBLOCKS_MASK)

/*! @name FLASH2LAYOUT0_TOG - Hardware BCH ECC Flash 2 Layout 0 Register */
#define BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT0_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT0_TOG_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_TOG_GF13_0_GF14_1_SHIFT)) & BCH_FLASH2LAYOUT0_TOG_GF13_0_GF14_1_MASK)
#define BCH_FLASH2LAYOUT0_TOG_ECC0_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT0_TOG_ECC0_SHIFT         (11U)
#define BCH_FLASH2LAYOUT0_TOG_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_TOG_ECC0_SHIFT)) & BCH_FLASH2LAYOUT0_TOG_ECC0_MASK)
#define BCH_FLASH2LAYOUT0_TOG_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH2LAYOUT0_TOG_META_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT0_TOG_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_TOG_META_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_TOG_META_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_TOG_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH2LAYOUT0_TOG_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH2LAYOUT0_TOG_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_TOG_NBLOCKS_SHIFT)) & BCH_FLASH2LAYOUT0_TOG_NBLOCKS_MASK)

/*! @name FLASH2LAYOUT1 - Hardware BCH ECC Flash 2 Layout 1 Register */
#define BCH_FLASH2LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH2LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH2LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH2LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH2LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH2LAYOUT1_GF13_0_GF14_1(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_GF13_0_GF14_1_SHIFT)) & BCH_FLASH2LAYOUT1_GF13_0_GF14_1_MASK)
#define BCH_FLASH2LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH2LAYOUT1_ECCN_SHIFT             (11U)
#define BCH_FLASH2LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_ECCN_SHIFT)) & BCH_FLASH2LAYOUT1_ECCN_MASK)
#define BCH_FLASH2LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH2LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH2LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_PAGE_SIZE_MASK)

/*! @name FLASH2LAYOUT1_SET - Hardware BCH ECC Flash 2 Layout 1 Register */
#define BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT1_SET_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_MASK)
#define BCH_FLASH2LAYOUT1_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT1_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT1_SET_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_SET_GF13_0_GF14_1_SHIFT)) & BCH_FLASH2LAYOUT1_SET_GF13_0_GF14_1_MASK)
#define BCH_FLASH2LAYOUT1_SET_ECCN_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT1_SET_ECCN_SHIFT         (11U)
#define BCH_FLASH2LAYOUT1_SET_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_SET_ECCN_SHIFT)) & BCH_FLASH2LAYOUT1_SET_ECCN_MASK)
#define BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT1_SET_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_MASK)

/*! @name FLASH2LAYOUT1_CLR - Hardware BCH ECC Flash 2 Layout 1 Register */
#define BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_MASK)
#define BCH_FLASH2LAYOUT1_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT1_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT1_CLR_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_CLR_GF13_0_GF14_1_SHIFT)) & BCH_FLASH2LAYOUT1_CLR_GF13_0_GF14_1_MASK)
#define BCH_FLASH2LAYOUT1_CLR_ECCN_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT1_CLR_ECCN_SHIFT         (11U)
#define BCH_FLASH2LAYOUT1_CLR_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_CLR_ECCN_SHIFT)) & BCH_FLASH2LAYOUT1_CLR_ECCN_MASK)
#define BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_MASK)

/*! @name FLASH2LAYOUT1_TOG - Hardware BCH ECC Flash 2 Layout 1 Register */
#define BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_MASK)
#define BCH_FLASH2LAYOUT1_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT1_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT1_TOG_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_TOG_GF13_0_GF14_1_SHIFT)) & BCH_FLASH2LAYOUT1_TOG_GF13_0_GF14_1_MASK)
#define BCH_FLASH2LAYOUT1_TOG_ECCN_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT1_TOG_ECCN_SHIFT         (11U)
#define BCH_FLASH2LAYOUT1_TOG_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_TOG_ECCN_SHIFT)) & BCH_FLASH2LAYOUT1_TOG_ECCN_MASK)
#define BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_MASK)

/*! @name FLASH3LAYOUT0 - Hardware BCH ECC Flash 3 Layout 0 Register */
#define BCH_FLASH3LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH3LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH3LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH3LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH3LAYOUT0_GF13_0_GF14_1(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_GF13_0_GF14_1_SHIFT)) & BCH_FLASH3LAYOUT0_GF13_0_GF14_1_MASK)
#define BCH_FLASH3LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH3LAYOUT0_ECC0_SHIFT             (11U)
#define BCH_FLASH3LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_ECC0_SHIFT)) & BCH_FLASH3LAYOUT0_ECC0_MASK)
#define BCH_FLASH3LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH3LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH3LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH3LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH3LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH3LAYOUT0_NBLOCKS_MASK)

/*! @name FLASH3LAYOUT0_SET - Hardware BCH ECC Flash 3 Layout 0 Register */
#define BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT0_SET_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT0_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT0_SET_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_SET_GF13_0_GF14_1_SHIFT)) & BCH_FLASH3LAYOUT0_SET_GF13_0_GF14_1_MASK)
#define BCH_FLASH3LAYOUT0_SET_ECC0_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT0_SET_ECC0_SHIFT         (11U)
#define BCH_FLASH3LAYOUT0_SET_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_SET_ECC0_SHIFT)) & BCH_FLASH3LAYOUT0_SET_ECC0_MASK)
#define BCH_FLASH3LAYOUT0_SET_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH3LAYOUT0_SET_META_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT0_SET_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_SET_META_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_SET_META_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_SET_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH3LAYOUT0_SET_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH3LAYOUT0_SET_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_SET_NBLOCKS_SHIFT)) & BCH_FLASH3LAYOUT0_SET_NBLOCKS_MASK)

/*! @name FLASH3LAYOUT0_CLR - Hardware BCH ECC Flash 3 Layout 0 Register */
#define BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT0_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT0_CLR_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_CLR_GF13_0_GF14_1_SHIFT)) & BCH_FLASH3LAYOUT0_CLR_GF13_0_GF14_1_MASK)
#define BCH_FLASH3LAYOUT0_CLR_ECC0_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT0_CLR_ECC0_SHIFT         (11U)
#define BCH_FLASH3LAYOUT0_CLR_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_CLR_ECC0_SHIFT)) & BCH_FLASH3LAYOUT0_CLR_ECC0_MASK)
#define BCH_FLASH3LAYOUT0_CLR_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH3LAYOUT0_CLR_META_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT0_CLR_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_CLR_META_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_CLR_META_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_CLR_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH3LAYOUT0_CLR_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH3LAYOUT0_CLR_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_CLR_NBLOCKS_SHIFT)) & BCH_FLASH3LAYOUT0_CLR_NBLOCKS_MASK)

/*! @name FLASH3LAYOUT0_TOG - Hardware BCH ECC Flash 3 Layout 0 Register */
#define BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT0_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT0_TOG_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_TOG_GF13_0_GF14_1_SHIFT)) & BCH_FLASH3LAYOUT0_TOG_GF13_0_GF14_1_MASK)
#define BCH_FLASH3LAYOUT0_TOG_ECC0_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT0_TOG_ECC0_SHIFT         (11U)
#define BCH_FLASH3LAYOUT0_TOG_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_TOG_ECC0_SHIFT)) & BCH_FLASH3LAYOUT0_TOG_ECC0_MASK)
#define BCH_FLASH3LAYOUT0_TOG_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH3LAYOUT0_TOG_META_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT0_TOG_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_TOG_META_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_TOG_META_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_TOG_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH3LAYOUT0_TOG_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH3LAYOUT0_TOG_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_TOG_NBLOCKS_SHIFT)) & BCH_FLASH3LAYOUT0_TOG_NBLOCKS_MASK)

/*! @name FLASH3LAYOUT1 - Hardware BCH ECC Flash 3 Layout 1 Register */
#define BCH_FLASH3LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH3LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH3LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH3LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH3LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH3LAYOUT1_GF13_0_GF14_1(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_GF13_0_GF14_1_SHIFT)) & BCH_FLASH3LAYOUT1_GF13_0_GF14_1_MASK)
#define BCH_FLASH3LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH3LAYOUT1_ECCN_SHIFT             (11U)
#define BCH_FLASH3LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_ECCN_SHIFT)) & BCH_FLASH3LAYOUT1_ECCN_MASK)
#define BCH_FLASH3LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH3LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH3LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_PAGE_SIZE_MASK)

/*! @name FLASH3LAYOUT1_SET - Hardware BCH ECC Flash 3 Layout 1 Register */
#define BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT1_SET_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_MASK)
#define BCH_FLASH3LAYOUT1_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT1_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT1_SET_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_SET_GF13_0_GF14_1_SHIFT)) & BCH_FLASH3LAYOUT1_SET_GF13_0_GF14_1_MASK)
#define BCH_FLASH3LAYOUT1_SET_ECCN_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT1_SET_ECCN_SHIFT         (11U)
#define BCH_FLASH3LAYOUT1_SET_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_SET_ECCN_SHIFT)) & BCH_FLASH3LAYOUT1_SET_ECCN_MASK)
#define BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT1_SET_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_MASK)

/*! @name FLASH3LAYOUT1_CLR - Hardware BCH ECC Flash 3 Layout 1 Register */
#define BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_MASK)
#define BCH_FLASH3LAYOUT1_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT1_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT1_CLR_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_CLR_GF13_0_GF14_1_SHIFT)) & BCH_FLASH3LAYOUT1_CLR_GF13_0_GF14_1_MASK)
#define BCH_FLASH3LAYOUT1_CLR_ECCN_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT1_CLR_ECCN_SHIFT         (11U)
#define BCH_FLASH3LAYOUT1_CLR_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_CLR_ECCN_SHIFT)) & BCH_FLASH3LAYOUT1_CLR_ECCN_MASK)
#define BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_MASK)

/*! @name FLASH3LAYOUT1_TOG - Hardware BCH ECC Flash 3 Layout 1 Register */
#define BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_MASK)
#define BCH_FLASH3LAYOUT1_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT1_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT1_TOG_GF13_0_GF14_1(x)   (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_TOG_GF13_0_GF14_1_SHIFT)) & BCH_FLASH3LAYOUT1_TOG_GF13_0_GF14_1_MASK)
#define BCH_FLASH3LAYOUT1_TOG_ECCN_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT1_TOG_ECCN_SHIFT         (11U)
#define BCH_FLASH3LAYOUT1_TOG_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_TOG_ECCN_SHIFT)) & BCH_FLASH3LAYOUT1_TOG_ECCN_MASK)
#define BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_MASK)

/*! @name DEBUG0 - Hardware BCH ECC Debug Register0 */
#define BCH_DEBUG0_DEBUG_REG_SELECT_MASK         (0x3FU)
#define BCH_DEBUG0_DEBUG_REG_SELECT_SHIFT        (0U)
#define BCH_DEBUG0_DEBUG_REG_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_RSVD0_MASK                    (0xC0U)
#define BCH_DEBUG0_RSVD0_SHIFT                   (6U)
#define BCH_DEBUG0_RSVD0(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_RSVD0_SHIFT)) & BCH_DEBUG0_RSVD0_MASK)
#define BCH_DEBUG0_BM_KES_TEST_BYPASS_MASK       (0x100U)
#define BCH_DEBUG0_BM_KES_TEST_BYPASS_SHIFT      (8U)
#define BCH_DEBUG0_BM_KES_TEST_BYPASS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_BM_KES_TEST_BYPASS_SHIFT)) & BCH_DEBUG0_BM_KES_TEST_BYPASS_MASK)
#define BCH_DEBUG0_KES_DEBUG_STALL_MASK          (0x200U)
#define BCH_DEBUG0_KES_DEBUG_STALL_SHIFT         (9U)
#define BCH_DEBUG0_KES_DEBUG_STALL(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_KES_DEBUG_STALL_SHIFT)) & BCH_DEBUG0_KES_DEBUG_STALL_MASK)
#define BCH_DEBUG0_KES_DEBUG_STEP_MASK           (0x400U)
#define BCH_DEBUG0_KES_DEBUG_STEP_SHIFT          (10U)
#define BCH_DEBUG0_KES_DEBUG_STEP(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_KES_DEBUG_STEP_SHIFT)) & BCH_DEBUG0_KES_DEBUG_STEP_MASK)
#define BCH_DEBUG0_KES_STANDALONE_MASK           (0x800U)
#define BCH_DEBUG0_KES_STANDALONE_SHIFT          (11U)
#define BCH_DEBUG0_KES_STANDALONE(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_KES_STANDALONE_SHIFT)) & BCH_DEBUG0_KES_STANDALONE_MASK)
#define BCH_DEBUG0_KES_DEBUG_KICK_MASK           (0x1000U)
#define BCH_DEBUG0_KES_DEBUG_KICK_SHIFT          (12U)
#define BCH_DEBUG0_KES_DEBUG_KICK(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_KES_DEBUG_KICK_SHIFT)) & BCH_DEBUG0_KES_DEBUG_KICK_MASK)
#define BCH_DEBUG0_KES_DEBUG_MODE4K_MASK         (0x2000U)
#define BCH_DEBUG0_KES_DEBUG_MODE4K_SHIFT        (13U)
#define BCH_DEBUG0_KES_DEBUG_MODE4K(x)           (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_KES_DEBUG_MODE4K_SHIFT)) & BCH_DEBUG0_KES_DEBUG_MODE4K_MASK)
#define BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG_MASK   (0x4000U)
#define BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG_SHIFT  (14U)
#define BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG(x)     (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG_SHIFT)) & BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG_MASK)
#define BCH_DEBUG0_KES_DEBUG_SHIFT_SYND_MASK     (0x8000U)
#define BCH_DEBUG0_KES_DEBUG_SHIFT_SYND_SHIFT    (15U)
#define BCH_DEBUG0_KES_DEBUG_SHIFT_SYND(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_KES_DEBUG_SHIFT_SYND_SHIFT)) & BCH_DEBUG0_KES_DEBUG_SHIFT_SYND_MASK)
#define BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
#define BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL(x)  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_RSVD1_MASK                    (0xFE000000U)
#define BCH_DEBUG0_RSVD1_SHIFT                   (25U)
#define BCH_DEBUG0_RSVD1(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_RSVD1_SHIFT)) & BCH_DEBUG0_RSVD1_MASK)

/*! @name DEBUG0_SET - Hardware BCH ECC Debug Register0 */
#define BCH_DEBUG0_SET_DEBUG_REG_SELECT_MASK     (0x3FU)
#define BCH_DEBUG0_SET_DEBUG_REG_SELECT_SHIFT    (0U)
#define BCH_DEBUG0_SET_DEBUG_REG_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_SET_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_SET_RSVD0_MASK                (0xC0U)
#define BCH_DEBUG0_SET_RSVD0_SHIFT               (6U)
#define BCH_DEBUG0_SET_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_RSVD0_SHIFT)) & BCH_DEBUG0_SET_RSVD0_MASK)
#define BCH_DEBUG0_SET_BM_KES_TEST_BYPASS_MASK   (0x100U)
#define BCH_DEBUG0_SET_BM_KES_TEST_BYPASS_SHIFT  (8U)
#define BCH_DEBUG0_SET_BM_KES_TEST_BYPASS(x)     (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_BM_KES_TEST_BYPASS_SHIFT)) & BCH_DEBUG0_SET_BM_KES_TEST_BYPASS_MASK)
#define BCH_DEBUG0_SET_KES_DEBUG_STALL_MASK      (0x200U)
#define BCH_DEBUG0_SET_KES_DEBUG_STALL_SHIFT     (9U)
#define BCH_DEBUG0_SET_KES_DEBUG_STALL(x)        (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_KES_DEBUG_STALL_SHIFT)) & BCH_DEBUG0_SET_KES_DEBUG_STALL_MASK)
#define BCH_DEBUG0_SET_KES_DEBUG_STEP_MASK       (0x400U)
#define BCH_DEBUG0_SET_KES_DEBUG_STEP_SHIFT      (10U)
#define BCH_DEBUG0_SET_KES_DEBUG_STEP(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_KES_DEBUG_STEP_SHIFT)) & BCH_DEBUG0_SET_KES_DEBUG_STEP_MASK)
#define BCH_DEBUG0_SET_KES_STANDALONE_MASK       (0x800U)
#define BCH_DEBUG0_SET_KES_STANDALONE_SHIFT      (11U)
#define BCH_DEBUG0_SET_KES_STANDALONE(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_KES_STANDALONE_SHIFT)) & BCH_DEBUG0_SET_KES_STANDALONE_MASK)
#define BCH_DEBUG0_SET_KES_DEBUG_KICK_MASK       (0x1000U)
#define BCH_DEBUG0_SET_KES_DEBUG_KICK_SHIFT      (12U)
#define BCH_DEBUG0_SET_KES_DEBUG_KICK(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_KES_DEBUG_KICK_SHIFT)) & BCH_DEBUG0_SET_KES_DEBUG_KICK_MASK)
#define BCH_DEBUG0_SET_KES_DEBUG_MODE4K_MASK     (0x2000U)
#define BCH_DEBUG0_SET_KES_DEBUG_MODE4K_SHIFT    (13U)
#define BCH_DEBUG0_SET_KES_DEBUG_MODE4K(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_KES_DEBUG_MODE4K_SHIFT)) & BCH_DEBUG0_SET_KES_DEBUG_MODE4K_MASK)
#define BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG_MASK (0x4000U)
#define BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG_SHIFT (14U)
#define BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG_SHIFT)) & BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG_MASK)
#define BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND_MASK (0x8000U)
#define BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND_SHIFT (15U)
#define BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND(x)   (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND_SHIFT)) & BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND_MASK)
#define BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
#define BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_SET_RSVD1_MASK                (0xFE000000U)
#define BCH_DEBUG0_SET_RSVD1_SHIFT               (25U)
#define BCH_DEBUG0_SET_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_RSVD1_SHIFT)) & BCH_DEBUG0_SET_RSVD1_MASK)

/*! @name DEBUG0_CLR - Hardware BCH ECC Debug Register0 */
#define BCH_DEBUG0_CLR_DEBUG_REG_SELECT_MASK     (0x3FU)
#define BCH_DEBUG0_CLR_DEBUG_REG_SELECT_SHIFT    (0U)
#define BCH_DEBUG0_CLR_DEBUG_REG_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_CLR_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_CLR_RSVD0_MASK                (0xC0U)
#define BCH_DEBUG0_CLR_RSVD0_SHIFT               (6U)
#define BCH_DEBUG0_CLR_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_RSVD0_SHIFT)) & BCH_DEBUG0_CLR_RSVD0_MASK)
#define BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS_MASK   (0x100U)
#define BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS_SHIFT  (8U)
#define BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS(x)     (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS_SHIFT)) & BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS_MASK)
#define BCH_DEBUG0_CLR_KES_DEBUG_STALL_MASK      (0x200U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STALL_SHIFT     (9U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STALL(x)        (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_KES_DEBUG_STALL_SHIFT)) & BCH_DEBUG0_CLR_KES_DEBUG_STALL_MASK)
#define BCH_DEBUG0_CLR_KES_DEBUG_STEP_MASK       (0x400U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STEP_SHIFT      (10U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STEP(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_KES_DEBUG_STEP_SHIFT)) & BCH_DEBUG0_CLR_KES_DEBUG_STEP_MASK)
#define BCH_DEBUG0_CLR_KES_STANDALONE_MASK       (0x800U)
#define BCH_DEBUG0_CLR_KES_STANDALONE_SHIFT      (11U)
#define BCH_DEBUG0_CLR_KES_STANDALONE(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_KES_STANDALONE_SHIFT)) & BCH_DEBUG0_CLR_KES_STANDALONE_MASK)
#define BCH_DEBUG0_CLR_KES_DEBUG_KICK_MASK       (0x1000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_KICK_SHIFT      (12U)
#define BCH_DEBUG0_CLR_KES_DEBUG_KICK(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_KES_DEBUG_KICK_SHIFT)) & BCH_DEBUG0_CLR_KES_DEBUG_KICK_MASK)
#define BCH_DEBUG0_CLR_KES_DEBUG_MODE4K_MASK     (0x2000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_MODE4K_SHIFT    (13U)
#define BCH_DEBUG0_CLR_KES_DEBUG_MODE4K(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_KES_DEBUG_MODE4K_SHIFT)) & BCH_DEBUG0_CLR_KES_DEBUG_MODE4K_MASK)
#define BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG_MASK (0x4000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG_SHIFT (14U)
#define BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG_SHIFT)) & BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG_MASK)
#define BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND_MASK (0x8000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND_SHIFT (15U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND(x)   (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND_SHIFT)) & BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND_MASK)
#define BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_CLR_RSVD1_MASK                (0xFE000000U)
#define BCH_DEBUG0_CLR_RSVD1_SHIFT               (25U)
#define BCH_DEBUG0_CLR_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_RSVD1_SHIFT)) & BCH_DEBUG0_CLR_RSVD1_MASK)

/*! @name DEBUG0_TOG - Hardware BCH ECC Debug Register0 */
#define BCH_DEBUG0_TOG_DEBUG_REG_SELECT_MASK     (0x3FU)
#define BCH_DEBUG0_TOG_DEBUG_REG_SELECT_SHIFT    (0U)
#define BCH_DEBUG0_TOG_DEBUG_REG_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_TOG_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_TOG_RSVD0_MASK                (0xC0U)
#define BCH_DEBUG0_TOG_RSVD0_SHIFT               (6U)
#define BCH_DEBUG0_TOG_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_RSVD0_SHIFT)) & BCH_DEBUG0_TOG_RSVD0_MASK)
#define BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS_MASK   (0x100U)
#define BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS_SHIFT  (8U)
#define BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS(x)     (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS_SHIFT)) & BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS_MASK)
#define BCH_DEBUG0_TOG_KES_DEBUG_STALL_MASK      (0x200U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STALL_SHIFT     (9U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STALL(x)        (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_KES_DEBUG_STALL_SHIFT)) & BCH_DEBUG0_TOG_KES_DEBUG_STALL_MASK)
#define BCH_DEBUG0_TOG_KES_DEBUG_STEP_MASK       (0x400U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STEP_SHIFT      (10U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STEP(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_KES_DEBUG_STEP_SHIFT)) & BCH_DEBUG0_TOG_KES_DEBUG_STEP_MASK)
#define BCH_DEBUG0_TOG_KES_STANDALONE_MASK       (0x800U)
#define BCH_DEBUG0_TOG_KES_STANDALONE_SHIFT      (11U)
#define BCH_DEBUG0_TOG_KES_STANDALONE(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_KES_STANDALONE_SHIFT)) & BCH_DEBUG0_TOG_KES_STANDALONE_MASK)
#define BCH_DEBUG0_TOG_KES_DEBUG_KICK_MASK       (0x1000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_KICK_SHIFT      (12U)
#define BCH_DEBUG0_TOG_KES_DEBUG_KICK(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_KES_DEBUG_KICK_SHIFT)) & BCH_DEBUG0_TOG_KES_DEBUG_KICK_MASK)
#define BCH_DEBUG0_TOG_KES_DEBUG_MODE4K_MASK     (0x2000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_MODE4K_SHIFT    (13U)
#define BCH_DEBUG0_TOG_KES_DEBUG_MODE4K(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_KES_DEBUG_MODE4K_SHIFT)) & BCH_DEBUG0_TOG_KES_DEBUG_MODE4K_MASK)
#define BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG_MASK (0x4000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG_SHIFT (14U)
#define BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG_SHIFT)) & BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG_MASK)
#define BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND_MASK (0x8000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND_SHIFT (15U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND(x)   (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND_SHIFT)) & BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND_MASK)
#define BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_TOG_RSVD1_MASK                (0xFE000000U)
#define BCH_DEBUG0_TOG_RSVD1_SHIFT               (25U)
#define BCH_DEBUG0_TOG_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_RSVD1_SHIFT)) & BCH_DEBUG0_TOG_RSVD1_MASK)

/*! @name DBGKESREAD - KES Debug Read Register */
#define BCH_DBGKESREAD_VALUES_MASK               (0xFFFFFFFFU)
#define BCH_DBGKESREAD_VALUES_SHIFT              (0U)
#define BCH_DBGKESREAD_VALUES(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_DBGKESREAD_VALUES_SHIFT)) & BCH_DBGKESREAD_VALUES_MASK)

/*! @name DBGKESREAD_SET - KES Debug Read Register */
#define BCH_DBGKESREAD_SET_VALUES_MASK           (0xFFFFFFFFU)
#define BCH_DBGKESREAD_SET_VALUES_SHIFT          (0U)
#define BCH_DBGKESREAD_SET_VALUES(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DBGKESREAD_SET_VALUES_SHIFT)) & BCH_DBGKESREAD_SET_VALUES_MASK)

/*! @name DBGKESREAD_CLR - KES Debug Read Register */
#define BCH_DBGKESREAD_CLR_VALUES_MASK           (0xFFFFFFFFU)
#define BCH_DBGKESREAD_CLR_VALUES_SHIFT          (0U)
#define BCH_DBGKESREAD_CLR_VALUES(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DBGKESREAD_CLR_VALUES_SHIFT)) & BCH_DBGKESREAD_CLR_VALUES_MASK)

/*! @name DBGKESREAD_TOG - KES Debug Read Register */
#define BCH_DBGKESREAD_TOG_VALUES_MASK           (0xFFFFFFFFU)
#define BCH_DBGKESREAD_TOG_VALUES_SHIFT          (0U)
#define BCH_DBGKESREAD_TOG_VALUES(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DBGKESREAD_TOG_VALUES_SHIFT)) & BCH_DBGKESREAD_TOG_VALUES_MASK)

/*! @name DBGCSFEREAD - Chien Search Debug Read Register */
#define BCH_DBGCSFEREAD_VALUES_MASK              (0xFFFFFFFFU)
#define BCH_DBGCSFEREAD_VALUES_SHIFT             (0U)
#define BCH_DBGCSFEREAD_VALUES(x)                (((uint32_t)(((uint32_t)(x)) << BCH_DBGCSFEREAD_VALUES_SHIFT)) & BCH_DBGCSFEREAD_VALUES_MASK)

/*! @name DBGCSFEREAD_SET - Chien Search Debug Read Register */
#define BCH_DBGCSFEREAD_SET_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGCSFEREAD_SET_VALUES_SHIFT         (0U)
#define BCH_DBGCSFEREAD_SET_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGCSFEREAD_SET_VALUES_SHIFT)) & BCH_DBGCSFEREAD_SET_VALUES_MASK)

/*! @name DBGCSFEREAD_CLR - Chien Search Debug Read Register */
#define BCH_DBGCSFEREAD_CLR_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGCSFEREAD_CLR_VALUES_SHIFT         (0U)
#define BCH_DBGCSFEREAD_CLR_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGCSFEREAD_CLR_VALUES_SHIFT)) & BCH_DBGCSFEREAD_CLR_VALUES_MASK)

/*! @name DBGCSFEREAD_TOG - Chien Search Debug Read Register */
#define BCH_DBGCSFEREAD_TOG_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGCSFEREAD_TOG_VALUES_SHIFT         (0U)
#define BCH_DBGCSFEREAD_TOG_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGCSFEREAD_TOG_VALUES_SHIFT)) & BCH_DBGCSFEREAD_TOG_VALUES_MASK)

/*! @name DBGSYNDGENREAD - Syndrome Generator Debug Read Register */
#define BCH_DBGSYNDGENREAD_VALUES_MASK           (0xFFFFFFFFU)
#define BCH_DBGSYNDGENREAD_VALUES_SHIFT          (0U)
#define BCH_DBGSYNDGENREAD_VALUES(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DBGSYNDGENREAD_VALUES_SHIFT)) & BCH_DBGSYNDGENREAD_VALUES_MASK)

/*! @name DBGSYNDGENREAD_SET - Syndrome Generator Debug Read Register */
#define BCH_DBGSYNDGENREAD_SET_VALUES_MASK       (0xFFFFFFFFU)
#define BCH_DBGSYNDGENREAD_SET_VALUES_SHIFT      (0U)
#define BCH_DBGSYNDGENREAD_SET_VALUES(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DBGSYNDGENREAD_SET_VALUES_SHIFT)) & BCH_DBGSYNDGENREAD_SET_VALUES_MASK)

/*! @name DBGSYNDGENREAD_CLR - Syndrome Generator Debug Read Register */
#define BCH_DBGSYNDGENREAD_CLR_VALUES_MASK       (0xFFFFFFFFU)
#define BCH_DBGSYNDGENREAD_CLR_VALUES_SHIFT      (0U)
#define BCH_DBGSYNDGENREAD_CLR_VALUES(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DBGSYNDGENREAD_CLR_VALUES_SHIFT)) & BCH_DBGSYNDGENREAD_CLR_VALUES_MASK)

/*! @name DBGSYNDGENREAD_TOG - Syndrome Generator Debug Read Register */
#define BCH_DBGSYNDGENREAD_TOG_VALUES_MASK       (0xFFFFFFFFU)
#define BCH_DBGSYNDGENREAD_TOG_VALUES_SHIFT      (0U)
#define BCH_DBGSYNDGENREAD_TOG_VALUES(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DBGSYNDGENREAD_TOG_VALUES_SHIFT)) & BCH_DBGSYNDGENREAD_TOG_VALUES_MASK)

/*! @name DBGAHBMREAD - Bus Master and ECC Controller Debug Read Register */
#define BCH_DBGAHBMREAD_VALUES_MASK              (0xFFFFFFFFU)
#define BCH_DBGAHBMREAD_VALUES_SHIFT             (0U)
#define BCH_DBGAHBMREAD_VALUES(x)                (((uint32_t)(((uint32_t)(x)) << BCH_DBGAHBMREAD_VALUES_SHIFT)) & BCH_DBGAHBMREAD_VALUES_MASK)

/*! @name DBGAHBMREAD_SET - Bus Master and ECC Controller Debug Read Register */
#define BCH_DBGAHBMREAD_SET_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGAHBMREAD_SET_VALUES_SHIFT         (0U)
#define BCH_DBGAHBMREAD_SET_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGAHBMREAD_SET_VALUES_SHIFT)) & BCH_DBGAHBMREAD_SET_VALUES_MASK)

/*! @name DBGAHBMREAD_CLR - Bus Master and ECC Controller Debug Read Register */
#define BCH_DBGAHBMREAD_CLR_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGAHBMREAD_CLR_VALUES_SHIFT         (0U)
#define BCH_DBGAHBMREAD_CLR_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGAHBMREAD_CLR_VALUES_SHIFT)) & BCH_DBGAHBMREAD_CLR_VALUES_MASK)

/*! @name DBGAHBMREAD_TOG - Bus Master and ECC Controller Debug Read Register */
#define BCH_DBGAHBMREAD_TOG_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGAHBMREAD_TOG_VALUES_SHIFT         (0U)
#define BCH_DBGAHBMREAD_TOG_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGAHBMREAD_TOG_VALUES_SHIFT)) & BCH_DBGAHBMREAD_TOG_VALUES_MASK)

/*! @name BLOCKNAME - Block Name Register */
#define BCH_BLOCKNAME_NAME_MASK                  (0xFFFFFFFFU)
#define BCH_BLOCKNAME_NAME_SHIFT                 (0U)
#define BCH_BLOCKNAME_NAME(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_BLOCKNAME_NAME_SHIFT)) & BCH_BLOCKNAME_NAME_MASK)

/*! @name BLOCKNAME_SET - Block Name Register */
#define BCH_BLOCKNAME_SET_NAME_MASK              (0xFFFFFFFFU)
#define BCH_BLOCKNAME_SET_NAME_SHIFT             (0U)
#define BCH_BLOCKNAME_SET_NAME(x)                (((uint32_t)(((uint32_t)(x)) << BCH_BLOCKNAME_SET_NAME_SHIFT)) & BCH_BLOCKNAME_SET_NAME_MASK)

/*! @name BLOCKNAME_CLR - Block Name Register */
#define BCH_BLOCKNAME_CLR_NAME_MASK              (0xFFFFFFFFU)
#define BCH_BLOCKNAME_CLR_NAME_SHIFT             (0U)
#define BCH_BLOCKNAME_CLR_NAME(x)                (((uint32_t)(((uint32_t)(x)) << BCH_BLOCKNAME_CLR_NAME_SHIFT)) & BCH_BLOCKNAME_CLR_NAME_MASK)

/*! @name BLOCKNAME_TOG - Block Name Register */
#define BCH_BLOCKNAME_TOG_NAME_MASK              (0xFFFFFFFFU)
#define BCH_BLOCKNAME_TOG_NAME_SHIFT             (0U)
#define BCH_BLOCKNAME_TOG_NAME(x)                (((uint32_t)(((uint32_t)(x)) << BCH_BLOCKNAME_TOG_NAME_SHIFT)) & BCH_BLOCKNAME_TOG_NAME_MASK)

/*! @name VERSION - BCH Version Register */
#define BCH_VERSION_STEP_MASK                    (0xFFFFU)
#define BCH_VERSION_STEP_SHIFT                   (0U)
#define BCH_VERSION_STEP(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_STEP_SHIFT)) & BCH_VERSION_STEP_MASK)
#define BCH_VERSION_MINOR_MASK                   (0xFF0000U)
#define BCH_VERSION_MINOR_SHIFT                  (16U)
#define BCH_VERSION_MINOR(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_MINOR_SHIFT)) & BCH_VERSION_MINOR_MASK)
#define BCH_VERSION_MAJOR_MASK                   (0xFF000000U)
#define BCH_VERSION_MAJOR_SHIFT                  (24U)
#define BCH_VERSION_MAJOR(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_MAJOR_SHIFT)) & BCH_VERSION_MAJOR_MASK)

/*! @name VERSION_SET - BCH Version Register */
#define BCH_VERSION_SET_STEP_MASK                (0xFFFFU)
#define BCH_VERSION_SET_STEP_SHIFT               (0U)
#define BCH_VERSION_SET_STEP(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_SET_STEP_SHIFT)) & BCH_VERSION_SET_STEP_MASK)
#define BCH_VERSION_SET_MINOR_MASK               (0xFF0000U)
#define BCH_VERSION_SET_MINOR_SHIFT              (16U)
#define BCH_VERSION_SET_MINOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_SET_MINOR_SHIFT)) & BCH_VERSION_SET_MINOR_MASK)
#define BCH_VERSION_SET_MAJOR_MASK               (0xFF000000U)
#define BCH_VERSION_SET_MAJOR_SHIFT              (24U)
#define BCH_VERSION_SET_MAJOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_SET_MAJOR_SHIFT)) & BCH_VERSION_SET_MAJOR_MASK)

/*! @name VERSION_CLR - BCH Version Register */
#define BCH_VERSION_CLR_STEP_MASK                (0xFFFFU)
#define BCH_VERSION_CLR_STEP_SHIFT               (0U)
#define BCH_VERSION_CLR_STEP(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_CLR_STEP_SHIFT)) & BCH_VERSION_CLR_STEP_MASK)
#define BCH_VERSION_CLR_MINOR_MASK               (0xFF0000U)
#define BCH_VERSION_CLR_MINOR_SHIFT              (16U)
#define BCH_VERSION_CLR_MINOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_CLR_MINOR_SHIFT)) & BCH_VERSION_CLR_MINOR_MASK)
#define BCH_VERSION_CLR_MAJOR_MASK               (0xFF000000U)
#define BCH_VERSION_CLR_MAJOR_SHIFT              (24U)
#define BCH_VERSION_CLR_MAJOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_CLR_MAJOR_SHIFT)) & BCH_VERSION_CLR_MAJOR_MASK)

/*! @name VERSION_TOG - BCH Version Register */
#define BCH_VERSION_TOG_STEP_MASK                (0xFFFFU)
#define BCH_VERSION_TOG_STEP_SHIFT               (0U)
#define BCH_VERSION_TOG_STEP(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_TOG_STEP_SHIFT)) & BCH_VERSION_TOG_STEP_MASK)
#define BCH_VERSION_TOG_MINOR_MASK               (0xFF0000U)
#define BCH_VERSION_TOG_MINOR_SHIFT              (16U)
#define BCH_VERSION_TOG_MINOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_TOG_MINOR_SHIFT)) & BCH_VERSION_TOG_MINOR_MASK)
#define BCH_VERSION_TOG_MAJOR_MASK               (0xFF000000U)
#define BCH_VERSION_TOG_MAJOR_SHIFT              (24U)
#define BCH_VERSION_TOG_MAJOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_TOG_MAJOR_SHIFT)) & BCH_VERSION_TOG_MAJOR_MASK)

/*! @name DEBUG1 - Hardware BCH ECC Debug Register 1 */
#define BCH_DEBUG1_ERASED_ZERO_COUNT_MASK        (0x1FFU)
#define BCH_DEBUG1_ERASED_ZERO_COUNT_SHIFT       (0U)
#define BCH_DEBUG1_ERASED_ZERO_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_ERASED_ZERO_COUNT_SHIFT)) & BCH_DEBUG1_ERASED_ZERO_COUNT_MASK)
#define BCH_DEBUG1_RSVD_MASK                     (0x7FFFFE00U)
#define BCH_DEBUG1_RSVD_SHIFT                    (9U)
#define BCH_DEBUG1_RSVD(x)                       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_RSVD_SHIFT)) & BCH_DEBUG1_RSVD_MASK)
#define BCH_DEBUG1_DEBUG1_PREERASECHK_MASK       (0x80000000U)
#define BCH_DEBUG1_DEBUG1_PREERASECHK_SHIFT      (31U)
#define BCH_DEBUG1_DEBUG1_PREERASECHK(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_DEBUG1_PREERASECHK_SHIFT)) & BCH_DEBUG1_DEBUG1_PREERASECHK_MASK)

/*! @name DEBUG1_SET - Hardware BCH ECC Debug Register 1 */
#define BCH_DEBUG1_SET_ERASED_ZERO_COUNT_MASK    (0x1FFU)
#define BCH_DEBUG1_SET_ERASED_ZERO_COUNT_SHIFT   (0U)
#define BCH_DEBUG1_SET_ERASED_ZERO_COUNT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_SET_ERASED_ZERO_COUNT_SHIFT)) & BCH_DEBUG1_SET_ERASED_ZERO_COUNT_MASK)
#define BCH_DEBUG1_SET_RSVD_MASK                 (0x7FFFFE00U)
#define BCH_DEBUG1_SET_RSVD_SHIFT                (9U)
#define BCH_DEBUG1_SET_RSVD(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_SET_RSVD_SHIFT)) & BCH_DEBUG1_SET_RSVD_MASK)
#define BCH_DEBUG1_SET_DEBUG1_PREERASECHK_MASK   (0x80000000U)
#define BCH_DEBUG1_SET_DEBUG1_PREERASECHK_SHIFT  (31U)
#define BCH_DEBUG1_SET_DEBUG1_PREERASECHK(x)     (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_SET_DEBUG1_PREERASECHK_SHIFT)) & BCH_DEBUG1_SET_DEBUG1_PREERASECHK_MASK)

/*! @name DEBUG1_CLR - Hardware BCH ECC Debug Register 1 */
#define BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_MASK    (0x1FFU)
#define BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_SHIFT   (0U)
#define BCH_DEBUG1_CLR_ERASED_ZERO_COUNT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_SHIFT)) & BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_MASK)
#define BCH_DEBUG1_CLR_RSVD_MASK                 (0x7FFFFE00U)
#define BCH_DEBUG1_CLR_RSVD_SHIFT                (9U)
#define BCH_DEBUG1_CLR_RSVD(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_CLR_RSVD_SHIFT)) & BCH_DEBUG1_CLR_RSVD_MASK)
#define BCH_DEBUG1_CLR_DEBUG1_PREERASECHK_MASK   (0x80000000U)
#define BCH_DEBUG1_CLR_DEBUG1_PREERASECHK_SHIFT  (31U)
#define BCH_DEBUG1_CLR_DEBUG1_PREERASECHK(x)     (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_CLR_DEBUG1_PREERASECHK_SHIFT)) & BCH_DEBUG1_CLR_DEBUG1_PREERASECHK_MASK)

/*! @name DEBUG1_TOG - Hardware BCH ECC Debug Register 1 */
#define BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_MASK    (0x1FFU)
#define BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_SHIFT   (0U)
#define BCH_DEBUG1_TOG_ERASED_ZERO_COUNT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_SHIFT)) & BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_MASK)
#define BCH_DEBUG1_TOG_RSVD_MASK                 (0x7FFFFE00U)
#define BCH_DEBUG1_TOG_RSVD_SHIFT                (9U)
#define BCH_DEBUG1_TOG_RSVD(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_TOG_RSVD_SHIFT)) & BCH_DEBUG1_TOG_RSVD_MASK)
#define BCH_DEBUG1_TOG_DEBUG1_PREERASECHK_MASK   (0x80000000U)
#define BCH_DEBUG1_TOG_DEBUG1_PREERASECHK_SHIFT  (31U)
#define BCH_DEBUG1_TOG_DEBUG1_PREERASECHK(x)     (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_TOG_DEBUG1_PREERASECHK_SHIFT)) & BCH_DEBUG1_TOG_DEBUG1_PREERASECHK_MASK)


/*!
 * @}
 */ /* end of group BCH_Register_Masks */


/* BCH - Peripheral instance base addresses */
/** Peripheral BCH base address */
#define BCH_BASE                                 (0x33004000u)
/** Peripheral BCH base pointer */
#define BCH                                      ((BCH_Type *)BCH_BASE)
/** Array initializer of BCH peripheral base addresses */
#define BCH_BASE_ADDRS                           { BCH_BASE }
/** Array initializer of BCH peripheral base pointers */
#define BCH_BASE_PTRS                            { BCH }
/** Interrupt vectors for the BCH peripheral type */
#define BCH_IRQS                                 { BCH_IRQn }

/*!
 * @}
 */ /* end of group BCH_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- CCM Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Peripheral_Access_Layer CCM Peripheral Access Layer
 * @{
 */

/** CCM - Register Layout Typedef */
typedef struct {
  __IO uint32_t GPR0;                              /**< General Purpose Register, offset: 0x0 */
  __IO uint32_t GPR0_SET;                          /**< General Purpose Register, offset: 0x4 */
  __IO uint32_t GPR0_CLR;                          /**< General Purpose Register, offset: 0x8 */
  __IO uint32_t GPR0_TOG;                          /**< General Purpose Register, offset: 0xC */
       uint8_t RESERVED_0[2032];
  struct {                                         /* offset: 0x800, array step: 0x10 */
    __IO uint32_t PLL_CTRL;                          /**< CCM PLL Control Register, array offset: 0x800, array step: 0x10 */
    __IO uint32_t PLL_CTRL_SET;                      /**< CCM PLL Control Register, array offset: 0x804, array step: 0x10 */
    __IO uint32_t PLL_CTRL_CLR;                      /**< CCM PLL Control Register, array offset: 0x808, array step: 0x10 */
    __IO uint32_t PLL_CTRL_TOG;                      /**< CCM PLL Control Register, array offset: 0x80C, array step: 0x10 */
  } PLL_CTRL[39];
       uint8_t RESERVED_1[13712];
  struct {                                         /* offset: 0x4000, array step: 0x10 */
    __IO uint32_t CCGR;                              /**< CCM Clock Gating Register, array offset: 0x4000, array step: 0x10 */
    __IO uint32_t CCGR_SET;                          /**< CCM Clock Gating Register, array offset: 0x4004, array step: 0x10 */
    __IO uint32_t CCGR_CLR;                          /**< CCM Clock Gating Register, array offset: 0x4008, array step: 0x10 */
    __IO uint32_t CCGR_TOG;                          /**< CCM Clock Gating Register, array offset: 0x400C, array step: 0x10 */
  } CCGR[191];
       uint8_t RESERVED_2[13328];
  struct {                                         /* offset: 0x8000, array step: 0x80 */
    __IO uint32_t TARGET_ROOT;                       /**< Target Register, array offset: 0x8000, array step: 0x80 */
    __IO uint32_t TARGET_ROOT_SET;                   /**< Target Register, array offset: 0x8004, array step: 0x80 */
    __IO uint32_t TARGET_ROOT_CLR;                   /**< Target Register, array offset: 0x8008, array step: 0x80 */
    __IO uint32_t TARGET_ROOT_TOG;                   /**< Target Register, array offset: 0x800C, array step: 0x80 */
    __IO uint32_t MISC;                              /**< Miscellaneous Register, array offset: 0x8010, array step: 0x80 */
    __IO uint32_t MISC_ROOT_SET;                     /**< Miscellaneous Register, array offset: 0x8014, array step: 0x80 */
    __IO uint32_t MISC_ROOT_CLR;                     /**< Miscellaneous Register, array offset: 0x8018, array step: 0x80 */
    __IO uint32_t MISC_ROOT_TOG;                     /**< Miscellaneous Register, array offset: 0x801C, array step: 0x80 */
    __IO uint32_t POST;                              /**< Post Divider Register, array offset: 0x8020, array step: 0x80 */
    __IO uint32_t POST_ROOT_SET;                     /**< Post Divider Register, array offset: 0x8024, array step: 0x80 */
    __IO uint32_t POST_ROOT_CLR;                     /**< Post Divider Register, array offset: 0x8028, array step: 0x80 */
    __IO uint32_t POST_ROOT_TOG;                     /**< Post Divider Register, array offset: 0x802C, array step: 0x80 */
    __IO uint32_t PRE;                               /**< Pre Divider Register, array offset: 0x8030, array step: 0x80 */
    __IO uint32_t PRE_ROOT_SET;                      /**< Pre Divider Register, array offset: 0x8034, array step: 0x80 */
    __IO uint32_t PRE_ROOT_CLR;                      /**< Pre Divider Register, array offset: 0x8038, array step: 0x80 */
    __IO uint32_t PRE_ROOT_TOG;                      /**< Pre Divider Register, array offset: 0x803C, array step: 0x80 */
         uint8_t RESERVED_0[48];
    __IO uint32_t ACCESS_CTRL;                       /**< Access Control Register, array offset: 0x8070, array step: 0x80 */
    __IO uint32_t ACCESS_CTRL_ROOT_SET;              /**< Access Control Register, array offset: 0x8074, array step: 0x80 */
    __IO uint32_t ACCESS_CTRL_ROOT_CLR;              /**< Access Control Register, array offset: 0x8078, array step: 0x80 */
    __IO uint32_t ACCESS_CTRL_ROOT_TOG;              /**< Access Control Register, array offset: 0x807C, array step: 0x80 */
  } ROOT[125];
} CCM_Type;

/* ----------------------------------------------------------------------------
   -- CCM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Register_Masks CCM Register Masks
 * @{
 */

/*! @name GPR0 - General Purpose Register */
#define CCM_GPR0_GP0_MASK                        (0xFFFFFFFFU)
#define CCM_GPR0_GP0_SHIFT                       (0U)
#define CCM_GPR0_GP0(x)                          (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_GP0_SHIFT)) & CCM_GPR0_GP0_MASK)

/*! @name GPR0_SET - General Purpose Register */
#define CCM_GPR0_SET_GP0_MASK                    (0xFFFFFFFFU)
#define CCM_GPR0_SET_GP0_SHIFT                   (0U)
#define CCM_GPR0_SET_GP0(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_SET_GP0_SHIFT)) & CCM_GPR0_SET_GP0_MASK)

/*! @name GPR0_CLR - General Purpose Register */
#define CCM_GPR0_CLR_GP0_MASK                    (0xFFFFFFFFU)
#define CCM_GPR0_CLR_GP0_SHIFT                   (0U)
#define CCM_GPR0_CLR_GP0(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_CLR_GP0_SHIFT)) & CCM_GPR0_CLR_GP0_MASK)

/*! @name GPR0_TOG - General Purpose Register */
#define CCM_GPR0_TOG_GP0_MASK                    (0xFFFFFFFFU)
#define CCM_GPR0_TOG_GP0_SHIFT                   (0U)
#define CCM_GPR0_TOG_GP0(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_TOG_GP0_SHIFT)) & CCM_GPR0_TOG_GP0_MASK)

/*! @name PLL_CTRL - CCM PLL Control Register */
#define CCM_PLL_CTRL_SETTING0_MASK               (0x3U)
#define CCM_PLL_CTRL_SETTING0_SHIFT              (0U)
#define CCM_PLL_CTRL_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING0_SHIFT)) & CCM_PLL_CTRL_SETTING0_MASK)
#define CCM_PLL_CTRL_SETTING1_MASK               (0x30U)
#define CCM_PLL_CTRL_SETTING1_SHIFT              (4U)
#define CCM_PLL_CTRL_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING1_SHIFT)) & CCM_PLL_CTRL_SETTING1_MASK)
#define CCM_PLL_CTRL_SETTING2_MASK               (0x300U)
#define CCM_PLL_CTRL_SETTING2_SHIFT              (8U)
#define CCM_PLL_CTRL_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING2_SHIFT)) & CCM_PLL_CTRL_SETTING2_MASK)
#define CCM_PLL_CTRL_SETTING3_MASK               (0x3000U)
#define CCM_PLL_CTRL_SETTING3_SHIFT              (12U)
#define CCM_PLL_CTRL_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING3_SHIFT)) & CCM_PLL_CTRL_SETTING3_MASK)

/* The count of CCM_PLL_CTRL */
#define CCM_PLL_CTRL_COUNT                       (39U)

/*! @name PLL_CTRL_SET - CCM PLL Control Register */
#define CCM_PLL_CTRL_SET_SETTING0_MASK           (0x3U)
#define CCM_PLL_CTRL_SET_SETTING0_SHIFT          (0U)
#define CCM_PLL_CTRL_SET_SETTING0(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING0_SHIFT)) & CCM_PLL_CTRL_SET_SETTING0_MASK)
#define CCM_PLL_CTRL_SET_SETTING1_MASK           (0x30U)
#define CCM_PLL_CTRL_SET_SETTING1_SHIFT          (4U)
#define CCM_PLL_CTRL_SET_SETTING1(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING1_SHIFT)) & CCM_PLL_CTRL_SET_SETTING1_MASK)
#define CCM_PLL_CTRL_SET_SETTING2_MASK           (0x300U)
#define CCM_PLL_CTRL_SET_SETTING2_SHIFT          (8U)
#define CCM_PLL_CTRL_SET_SETTING2(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING2_SHIFT)) & CCM_PLL_CTRL_SET_SETTING2_MASK)
#define CCM_PLL_CTRL_SET_SETTING3_MASK           (0x3000U)
#define CCM_PLL_CTRL_SET_SETTING3_SHIFT          (12U)
#define CCM_PLL_CTRL_SET_SETTING3(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING3_SHIFT)) & CCM_PLL_CTRL_SET_SETTING3_MASK)

/* The count of CCM_PLL_CTRL_SET */
#define CCM_PLL_CTRL_SET_COUNT                   (39U)

/*! @name PLL_CTRL_CLR - CCM PLL Control Register */
#define CCM_PLL_CTRL_CLR_SETTING0_MASK           (0x3U)
#define CCM_PLL_CTRL_CLR_SETTING0_SHIFT          (0U)
#define CCM_PLL_CTRL_CLR_SETTING0(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING0_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING0_MASK)
#define CCM_PLL_CTRL_CLR_SETTING1_MASK           (0x30U)
#define CCM_PLL_CTRL_CLR_SETTING1_SHIFT          (4U)
#define CCM_PLL_CTRL_CLR_SETTING1(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING1_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING1_MASK)
#define CCM_PLL_CTRL_CLR_SETTING2_MASK           (0x300U)
#define CCM_PLL_CTRL_CLR_SETTING2_SHIFT          (8U)
#define CCM_PLL_CTRL_CLR_SETTING2(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING2_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING2_MASK)
#define CCM_PLL_CTRL_CLR_SETTING3_MASK           (0x3000U)
#define CCM_PLL_CTRL_CLR_SETTING3_SHIFT          (12U)
#define CCM_PLL_CTRL_CLR_SETTING3(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING3_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING3_MASK)

/* The count of CCM_PLL_CTRL_CLR */
#define CCM_PLL_CTRL_CLR_COUNT                   (39U)

/*! @name PLL_CTRL_TOG - CCM PLL Control Register */
#define CCM_PLL_CTRL_TOG_SETTING0_MASK           (0x3U)
#define CCM_PLL_CTRL_TOG_SETTING0_SHIFT          (0U)
#define CCM_PLL_CTRL_TOG_SETTING0(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING0_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING0_MASK)
#define CCM_PLL_CTRL_TOG_SETTING1_MASK           (0x30U)
#define CCM_PLL_CTRL_TOG_SETTING1_SHIFT          (4U)
#define CCM_PLL_CTRL_TOG_SETTING1(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING1_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING1_MASK)
#define CCM_PLL_CTRL_TOG_SETTING2_MASK           (0x300U)
#define CCM_PLL_CTRL_TOG_SETTING2_SHIFT          (8U)
#define CCM_PLL_CTRL_TOG_SETTING2(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING2_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING2_MASK)
#define CCM_PLL_CTRL_TOG_SETTING3_MASK           (0x3000U)
#define CCM_PLL_CTRL_TOG_SETTING3_SHIFT          (12U)
#define CCM_PLL_CTRL_TOG_SETTING3(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING3_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING3_MASK)

/* The count of CCM_PLL_CTRL_TOG */
#define CCM_PLL_CTRL_TOG_COUNT                   (39U)

/*! @name CCGR - CCM Clock Gating Register */
#define CCM_CCGR_SETTING0_MASK                   (0x3U)
#define CCM_CCGR_SETTING0_SHIFT                  (0U)
#define CCM_CCGR_SETTING0(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING0_SHIFT)) & CCM_CCGR_SETTING0_MASK)
#define CCM_CCGR_SETTING1_MASK                   (0x30U)
#define CCM_CCGR_SETTING1_SHIFT                  (4U)
#define CCM_CCGR_SETTING1(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING1_SHIFT)) & CCM_CCGR_SETTING1_MASK)
#define CCM_CCGR_SETTING2_MASK                   (0x300U)
#define CCM_CCGR_SETTING2_SHIFT                  (8U)
#define CCM_CCGR_SETTING2(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING2_SHIFT)) & CCM_CCGR_SETTING2_MASK)
#define CCM_CCGR_SETTING3_MASK                   (0x3000U)
#define CCM_CCGR_SETTING3_SHIFT                  (12U)
#define CCM_CCGR_SETTING3(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING3_SHIFT)) & CCM_CCGR_SETTING3_MASK)

/* The count of CCM_CCGR */
#define CCM_CCGR_COUNT                           (191U)

/*! @name CCGR_SET - CCM Clock Gating Register */
#define CCM_CCGR_SET_SETTING0_MASK               (0x3U)
#define CCM_CCGR_SET_SETTING0_SHIFT              (0U)
#define CCM_CCGR_SET_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING0_SHIFT)) & CCM_CCGR_SET_SETTING0_MASK)
#define CCM_CCGR_SET_SETTING1_MASK               (0x30U)
#define CCM_CCGR_SET_SETTING1_SHIFT              (4U)
#define CCM_CCGR_SET_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING1_SHIFT)) & CCM_CCGR_SET_SETTING1_MASK)
#define CCM_CCGR_SET_SETTING2_MASK               (0x300U)
#define CCM_CCGR_SET_SETTING2_SHIFT              (8U)
#define CCM_CCGR_SET_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING2_SHIFT)) & CCM_CCGR_SET_SETTING2_MASK)
#define CCM_CCGR_SET_SETTING3_MASK               (0x3000U)
#define CCM_CCGR_SET_SETTING3_SHIFT              (12U)
#define CCM_CCGR_SET_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING3_SHIFT)) & CCM_CCGR_SET_SETTING3_MASK)

/* The count of CCM_CCGR_SET */
#define CCM_CCGR_SET_COUNT                       (191U)

/*! @name CCGR_CLR - CCM Clock Gating Register */
#define CCM_CCGR_CLR_SETTING0_MASK               (0x3U)
#define CCM_CCGR_CLR_SETTING0_SHIFT              (0U)
#define CCM_CCGR_CLR_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING0_SHIFT)) & CCM_CCGR_CLR_SETTING0_MASK)
#define CCM_CCGR_CLR_SETTING1_MASK               (0x30U)
#define CCM_CCGR_CLR_SETTING1_SHIFT              (4U)
#define CCM_CCGR_CLR_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING1_SHIFT)) & CCM_CCGR_CLR_SETTING1_MASK)
#define CCM_CCGR_CLR_SETTING2_MASK               (0x300U)
#define CCM_CCGR_CLR_SETTING2_SHIFT              (8U)
#define CCM_CCGR_CLR_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING2_SHIFT)) & CCM_CCGR_CLR_SETTING2_MASK)
#define CCM_CCGR_CLR_SETTING3_MASK               (0x3000U)
#define CCM_CCGR_CLR_SETTING3_SHIFT              (12U)
#define CCM_CCGR_CLR_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING3_SHIFT)) & CCM_CCGR_CLR_SETTING3_MASK)

/* The count of CCM_CCGR_CLR */
#define CCM_CCGR_CLR_COUNT                       (191U)

/*! @name CCGR_TOG - CCM Clock Gating Register */
#define CCM_CCGR_TOG_SETTING0_MASK               (0x3U)
#define CCM_CCGR_TOG_SETTING0_SHIFT              (0U)
#define CCM_CCGR_TOG_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING0_SHIFT)) & CCM_CCGR_TOG_SETTING0_MASK)
#define CCM_CCGR_TOG_SETTING1_MASK               (0x30U)
#define CCM_CCGR_TOG_SETTING1_SHIFT              (4U)
#define CCM_CCGR_TOG_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING1_SHIFT)) & CCM_CCGR_TOG_SETTING1_MASK)
#define CCM_CCGR_TOG_SETTING2_MASK               (0x300U)
#define CCM_CCGR_TOG_SETTING2_SHIFT              (8U)
#define CCM_CCGR_TOG_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING2_SHIFT)) & CCM_CCGR_TOG_SETTING2_MASK)
#define CCM_CCGR_TOG_SETTING3_MASK               (0x3000U)
#define CCM_CCGR_TOG_SETTING3_SHIFT              (12U)
#define CCM_CCGR_TOG_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING3_SHIFT)) & CCM_CCGR_TOG_SETTING3_MASK)

/* The count of CCM_CCGR_TOG */
#define CCM_CCGR_TOG_COUNT                       (191U)

/*! @name TARGET_ROOT - Target Register */
#define CCM_TARGET_ROOT_POST_PODF_MASK           (0x3FU)
#define CCM_TARGET_ROOT_POST_PODF_SHIFT          (0U)
#define CCM_TARGET_ROOT_POST_PODF(x)             (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_POST_PODF_MASK)
#define CCM_TARGET_ROOT_PRE_PODF_MASK            (0x70000U)
#define CCM_TARGET_ROOT_PRE_PODF_SHIFT           (16U)
#define CCM_TARGET_ROOT_PRE_PODF(x)              (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_MUX_MASK                 (0x7000000U)
#define CCM_TARGET_ROOT_MUX_SHIFT                (24U)
#define CCM_TARGET_ROOT_MUX(x)                   (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_MUX_SHIFT)) & CCM_TARGET_ROOT_MUX_MASK)
#define CCM_TARGET_ROOT_ENABLE_MASK              (0x10000000U)
#define CCM_TARGET_ROOT_ENABLE_SHIFT             (28U)
#define CCM_TARGET_ROOT_ENABLE(x)                (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_ENABLE_SHIFT)) & CCM_TARGET_ROOT_ENABLE_MASK)

/* The count of CCM_TARGET_ROOT */
#define CCM_TARGET_ROOT_COUNT                    (125U)

/*! @name TARGET_ROOT_SET - Target Register */
#define CCM_TARGET_ROOT_SET_POST_PODF_MASK       (0x3FU)
#define CCM_TARGET_ROOT_SET_POST_PODF_SHIFT      (0U)
#define CCM_TARGET_ROOT_SET_POST_PODF(x)         (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_SET_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_SET_POST_PODF_MASK)
#define CCM_TARGET_ROOT_SET_PRE_PODF_MASK        (0x70000U)
#define CCM_TARGET_ROOT_SET_PRE_PODF_SHIFT       (16U)
#define CCM_TARGET_ROOT_SET_PRE_PODF(x)          (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_SET_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_SET_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_SET_MUX_MASK             (0x7000000U)
#define CCM_TARGET_ROOT_SET_MUX_SHIFT            (24U)
#define CCM_TARGET_ROOT_SET_MUX(x)               (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_SET_MUX_SHIFT)) & CCM_TARGET_ROOT_SET_MUX_MASK)
#define CCM_TARGET_ROOT_SET_ENABLE_MASK          (0x10000000U)
#define CCM_TARGET_ROOT_SET_ENABLE_SHIFT         (28U)
#define CCM_TARGET_ROOT_SET_ENABLE(x)            (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_SET_ENABLE_SHIFT)) & CCM_TARGET_ROOT_SET_ENABLE_MASK)

/* The count of CCM_TARGET_ROOT_SET */
#define CCM_TARGET_ROOT_SET_COUNT                (125U)

/*! @name TARGET_ROOT_CLR - Target Register */
#define CCM_TARGET_ROOT_CLR_POST_PODF_MASK       (0x3FU)
#define CCM_TARGET_ROOT_CLR_POST_PODF_SHIFT      (0U)
#define CCM_TARGET_ROOT_CLR_POST_PODF(x)         (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_CLR_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_CLR_POST_PODF_MASK)
#define CCM_TARGET_ROOT_CLR_PRE_PODF_MASK        (0x70000U)
#define CCM_TARGET_ROOT_CLR_PRE_PODF_SHIFT       (16U)
#define CCM_TARGET_ROOT_CLR_PRE_PODF(x)          (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_CLR_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_CLR_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_CLR_MUX_MASK             (0x7000000U)
#define CCM_TARGET_ROOT_CLR_MUX_SHIFT            (24U)
#define CCM_TARGET_ROOT_CLR_MUX(x)               (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_CLR_MUX_SHIFT)) & CCM_TARGET_ROOT_CLR_MUX_MASK)
#define CCM_TARGET_ROOT_CLR_ENABLE_MASK          (0x10000000U)
#define CCM_TARGET_ROOT_CLR_ENABLE_SHIFT         (28U)
#define CCM_TARGET_ROOT_CLR_ENABLE(x)            (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_CLR_ENABLE_SHIFT)) & CCM_TARGET_ROOT_CLR_ENABLE_MASK)

/* The count of CCM_TARGET_ROOT_CLR */
#define CCM_TARGET_ROOT_CLR_COUNT                (125U)

/*! @name TARGET_ROOT_TOG - Target Register */
#define CCM_TARGET_ROOT_TOG_POST_PODF_MASK       (0x3FU)
#define CCM_TARGET_ROOT_TOG_POST_PODF_SHIFT      (0U)
#define CCM_TARGET_ROOT_TOG_POST_PODF(x)         (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_TOG_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_TOG_POST_PODF_MASK)
#define CCM_TARGET_ROOT_TOG_PRE_PODF_MASK        (0x70000U)
#define CCM_TARGET_ROOT_TOG_PRE_PODF_SHIFT       (16U)
#define CCM_TARGET_ROOT_TOG_PRE_PODF(x)          (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_TOG_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_TOG_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_TOG_MUX_MASK             (0x7000000U)
#define CCM_TARGET_ROOT_TOG_MUX_SHIFT            (24U)
#define CCM_TARGET_ROOT_TOG_MUX(x)               (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_TOG_MUX_SHIFT)) & CCM_TARGET_ROOT_TOG_MUX_MASK)
#define CCM_TARGET_ROOT_TOG_ENABLE_MASK          (0x10000000U)
#define CCM_TARGET_ROOT_TOG_ENABLE_SHIFT         (28U)
#define CCM_TARGET_ROOT_TOG_ENABLE(x)            (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_TOG_ENABLE_SHIFT)) & CCM_TARGET_ROOT_TOG_ENABLE_MASK)

/* The count of CCM_TARGET_ROOT_TOG */
#define CCM_TARGET_ROOT_TOG_COUNT                (125U)

/*! @name MISC - Miscellaneous Register */
#define CCM_MISC_AUTHEN_FAIL_MASK                (0x1U)
#define CCM_MISC_AUTHEN_FAIL_SHIFT               (0U)
#define CCM_MISC_AUTHEN_FAIL(x)                  (((uint32_t)(((uint32_t)(x)) << CCM_MISC_AUTHEN_FAIL_SHIFT)) & CCM_MISC_AUTHEN_FAIL_MASK)
#define CCM_MISC_TIMEOUT_MASK                    (0x10U)
#define CCM_MISC_TIMEOUT_SHIFT                   (4U)
#define CCM_MISC_TIMEOUT(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_MISC_TIMEOUT_SHIFT)) & CCM_MISC_TIMEOUT_MASK)
#define CCM_MISC_VIOLATE_MASK                    (0x100U)
#define CCM_MISC_VIOLATE_SHIFT                   (8U)
#define CCM_MISC_VIOLATE(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_MISC_VIOLATE_SHIFT)) & CCM_MISC_VIOLATE_MASK)

/* The count of CCM_MISC */
#define CCM_MISC_COUNT                           (125U)

/*! @name MISC_ROOT_SET - Miscellaneous Register */
#define CCM_MISC_ROOT_SET_AUTHEN_FAIL_MASK       (0x1U)
#define CCM_MISC_ROOT_SET_AUTHEN_FAIL_SHIFT      (0U)
#define CCM_MISC_ROOT_SET_AUTHEN_FAIL(x)         (((uint32_t)(((uint32_t)(x)) << CCM_MISC_ROOT_SET_AUTHEN_FAIL_SHIFT)) & CCM_MISC_ROOT_SET_AUTHEN_FAIL_MASK)
#define CCM_MISC_ROOT_SET_TIMEOUT_MASK           (0x10U)
#define CCM_MISC_ROOT_SET_TIMEOUT_SHIFT          (4U)
#define CCM_MISC_ROOT_SET_TIMEOUT(x)             (((uint32_t)(((uint32_t)(x)) << CCM_MISC_ROOT_SET_TIMEOUT_SHIFT)) & CCM_MISC_ROOT_SET_TIMEOUT_MASK)
#define CCM_MISC_ROOT_SET_VIOLATE_MASK           (0x100U)
#define CCM_MISC_ROOT_SET_VIOLATE_SHIFT          (8U)
#define CCM_MISC_ROOT_SET_VIOLATE(x)             (((uint32_t)(((uint32_t)(x)) << CCM_MISC_ROOT_SET_VIOLATE_SHIFT)) & CCM_MISC_ROOT_SET_VIOLATE_MASK)

/* The count of CCM_MISC_ROOT_SET */
#define CCM_MISC_ROOT_SET_COUNT                  (125U)

/*! @name MISC_ROOT_CLR - Miscellaneous Register */
#define CCM_MISC_ROOT_CLR_AUTHEN_FAIL_MASK       (0x1U)
#define CCM_MISC_ROOT_CLR_AUTHEN_FAIL_SHIFT      (0U)
#define CCM_MISC_ROOT_CLR_AUTHEN_FAIL(x)         (((uint32_t)(((uint32_t)(x)) << CCM_MISC_ROOT_CLR_AUTHEN_FAIL_SHIFT)) & CCM_MISC_ROOT_CLR_AUTHEN_FAIL_MASK)
#define CCM_MISC_ROOT_CLR_TIMEOUT_MASK           (0x10U)
#define CCM_MISC_ROOT_CLR_TIMEOUT_SHIFT          (4U)
#define CCM_MISC_ROOT_CLR_TIMEOUT(x)             (((uint32_t)(((uint32_t)(x)) << CCM_MISC_ROOT_CLR_TIMEOUT_SHIFT)) & CCM_MISC_ROOT_CLR_TIMEOUT_MASK)
#define CCM_MISC_ROOT_CLR_VIOLATE_MASK           (0x100U)
#define CCM_MISC_ROOT_CLR_VIOLATE_SHIFT          (8U)
#define CCM_MISC_ROOT_CLR_VIOLATE(x)             (((uint32_t)(((uint32_t)(x)) << CCM_MISC_ROOT_CLR_VIOLATE_SHIFT)) & CCM_MISC_ROOT_CLR_VIOLATE_MASK)

/* The count of CCM_MISC_ROOT_CLR */
#define CCM_MISC_ROOT_CLR_COUNT                  (125U)

/*! @name MISC_ROOT_TOG - Miscellaneous Register */
#define CCM_MISC_ROOT_TOG_AUTHEN_FAIL_MASK       (0x1U)
#define CCM_MISC_ROOT_TOG_AUTHEN_FAIL_SHIFT      (0U)
#define CCM_MISC_ROOT_TOG_AUTHEN_FAIL(x)         (((uint32_t)(((uint32_t)(x)) << CCM_MISC_ROOT_TOG_AUTHEN_FAIL_SHIFT)) & CCM_MISC_ROOT_TOG_AUTHEN_FAIL_MASK)
#define CCM_MISC_ROOT_TOG_TIMEOUT_MASK           (0x10U)
#define CCM_MISC_ROOT_TOG_TIMEOUT_SHIFT          (4U)
#define CCM_MISC_ROOT_TOG_TIMEOUT(x)             (((uint32_t)(((uint32_t)(x)) << CCM_MISC_ROOT_TOG_TIMEOUT_SHIFT)) & CCM_MISC_ROOT_TOG_TIMEOUT_MASK)
#define CCM_MISC_ROOT_TOG_VIOLATE_MASK           (0x100U)
#define CCM_MISC_ROOT_TOG_VIOLATE_SHIFT          (8U)
#define CCM_MISC_ROOT_TOG_VIOLATE(x)             (((uint32_t)(((uint32_t)(x)) << CCM_MISC_ROOT_TOG_VIOLATE_SHIFT)) & CCM_MISC_ROOT_TOG_VIOLATE_MASK)

/* The count of CCM_MISC_ROOT_TOG */
#define CCM_MISC_ROOT_TOG_COUNT                  (125U)

/*! @name POST - Post Divider Register */
#define CCM_POST_POST_PODF_MASK                  (0x3FU)
#define CCM_POST_POST_PODF_SHIFT                 (0U)
#define CCM_POST_POST_PODF(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_POST_POST_PODF_SHIFT)) & CCM_POST_POST_PODF_MASK)
#define CCM_POST_BUSY1_MASK                      (0x80U)
#define CCM_POST_BUSY1_SHIFT                     (7U)
#define CCM_POST_BUSY1(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_POST_BUSY1_SHIFT)) & CCM_POST_BUSY1_MASK)
#define CCM_POST_SELECT_MASK                     (0x10000000U)
#define CCM_POST_SELECT_SHIFT                    (28U)
#define CCM_POST_SELECT(x)                       (((uint32_t)(((uint32_t)(x)) << CCM_POST_SELECT_SHIFT)) & CCM_POST_SELECT_MASK)
#define CCM_POST_BUSY2_MASK                      (0x80000000U)
#define CCM_POST_BUSY2_SHIFT                     (31U)
#define CCM_POST_BUSY2(x)                        (((uint32_t)(((uint32_t)(x)) << CCM_POST_BUSY2_SHIFT)) & CCM_POST_BUSY2_MASK)

/* The count of CCM_POST */
#define CCM_POST_COUNT                           (125U)

/*! @name POST_ROOT_SET - Post Divider Register */
#define CCM_POST_ROOT_SET_POST_PODF_MASK         (0x3FU)
#define CCM_POST_ROOT_SET_POST_PODF_SHIFT        (0U)
#define CCM_POST_ROOT_SET_POST_PODF(x)           (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_SET_POST_PODF_SHIFT)) & CCM_POST_ROOT_SET_POST_PODF_MASK)
#define CCM_POST_ROOT_SET_BUSY1_MASK             (0x80U)
#define CCM_POST_ROOT_SET_BUSY1_SHIFT            (7U)
#define CCM_POST_ROOT_SET_BUSY1(x)               (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_SET_BUSY1_SHIFT)) & CCM_POST_ROOT_SET_BUSY1_MASK)
#define CCM_POST_ROOT_SET_SELECT_MASK            (0x10000000U)
#define CCM_POST_ROOT_SET_SELECT_SHIFT           (28U)
#define CCM_POST_ROOT_SET_SELECT(x)              (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_SET_SELECT_SHIFT)) & CCM_POST_ROOT_SET_SELECT_MASK)
#define CCM_POST_ROOT_SET_BUSY2_MASK             (0x80000000U)
#define CCM_POST_ROOT_SET_BUSY2_SHIFT            (31U)
#define CCM_POST_ROOT_SET_BUSY2(x)               (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_SET_BUSY2_SHIFT)) & CCM_POST_ROOT_SET_BUSY2_MASK)

/* The count of CCM_POST_ROOT_SET */
#define CCM_POST_ROOT_SET_COUNT                  (125U)

/*! @name POST_ROOT_CLR - Post Divider Register */
#define CCM_POST_ROOT_CLR_POST_PODF_MASK         (0x3FU)
#define CCM_POST_ROOT_CLR_POST_PODF_SHIFT        (0U)
#define CCM_POST_ROOT_CLR_POST_PODF(x)           (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_CLR_POST_PODF_SHIFT)) & CCM_POST_ROOT_CLR_POST_PODF_MASK)
#define CCM_POST_ROOT_CLR_BUSY1_MASK             (0x80U)
#define CCM_POST_ROOT_CLR_BUSY1_SHIFT            (7U)
#define CCM_POST_ROOT_CLR_BUSY1(x)               (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_CLR_BUSY1_SHIFT)) & CCM_POST_ROOT_CLR_BUSY1_MASK)
#define CCM_POST_ROOT_CLR_SELECT_MASK            (0x10000000U)
#define CCM_POST_ROOT_CLR_SELECT_SHIFT           (28U)
#define CCM_POST_ROOT_CLR_SELECT(x)              (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_CLR_SELECT_SHIFT)) & CCM_POST_ROOT_CLR_SELECT_MASK)
#define CCM_POST_ROOT_CLR_BUSY2_MASK             (0x80000000U)
#define CCM_POST_ROOT_CLR_BUSY2_SHIFT            (31U)
#define CCM_POST_ROOT_CLR_BUSY2(x)               (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_CLR_BUSY2_SHIFT)) & CCM_POST_ROOT_CLR_BUSY2_MASK)

/* The count of CCM_POST_ROOT_CLR */
#define CCM_POST_ROOT_CLR_COUNT                  (125U)

/*! @name POST_ROOT_TOG - Post Divider Register */
#define CCM_POST_ROOT_TOG_POST_PODF_MASK         (0x3FU)
#define CCM_POST_ROOT_TOG_POST_PODF_SHIFT        (0U)
#define CCM_POST_ROOT_TOG_POST_PODF(x)           (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_TOG_POST_PODF_SHIFT)) & CCM_POST_ROOT_TOG_POST_PODF_MASK)
#define CCM_POST_ROOT_TOG_BUSY1_MASK             (0x80U)
#define CCM_POST_ROOT_TOG_BUSY1_SHIFT            (7U)
#define CCM_POST_ROOT_TOG_BUSY1(x)               (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_TOG_BUSY1_SHIFT)) & CCM_POST_ROOT_TOG_BUSY1_MASK)
#define CCM_POST_ROOT_TOG_SELECT_MASK            (0x10000000U)
#define CCM_POST_ROOT_TOG_SELECT_SHIFT           (28U)
#define CCM_POST_ROOT_TOG_SELECT(x)              (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_TOG_SELECT_SHIFT)) & CCM_POST_ROOT_TOG_SELECT_MASK)
#define CCM_POST_ROOT_TOG_BUSY2_MASK             (0x80000000U)
#define CCM_POST_ROOT_TOG_BUSY2_SHIFT            (31U)
#define CCM_POST_ROOT_TOG_BUSY2(x)               (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_TOG_BUSY2_SHIFT)) & CCM_POST_ROOT_TOG_BUSY2_MASK)

/* The count of CCM_POST_ROOT_TOG */
#define CCM_POST_ROOT_TOG_COUNT                  (125U)

/*! @name PRE - Pre Divider Register */
#define CCM_PRE_PRE_PODF_B_MASK                  (0x7U)
#define CCM_PRE_PRE_PODF_B_SHIFT                 (0U)
#define CCM_PRE_PRE_PODF_B(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_PRE_PRE_PODF_B_SHIFT)) & CCM_PRE_PRE_PODF_B_MASK)
#define CCM_PRE_BUSY0_MASK                       (0x8U)
#define CCM_PRE_BUSY0_SHIFT                      (3U)
#define CCM_PRE_BUSY0(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_PRE_BUSY0_SHIFT)) & CCM_PRE_BUSY0_MASK)
#define CCM_PRE_MUX_B_MASK                       (0x700U)
#define CCM_PRE_MUX_B_SHIFT                      (8U)
#define CCM_PRE_MUX_B(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_PRE_MUX_B_SHIFT)) & CCM_PRE_MUX_B_MASK)
#define CCM_PRE_EN_B_MASK                        (0x1000U)
#define CCM_PRE_EN_B_SHIFT                       (12U)
#define CCM_PRE_EN_B(x)                          (((uint32_t)(((uint32_t)(x)) << CCM_PRE_EN_B_SHIFT)) & CCM_PRE_EN_B_MASK)
#define CCM_PRE_BUSY1_MASK                       (0x8000U)
#define CCM_PRE_BUSY1_SHIFT                      (15U)
#define CCM_PRE_BUSY1(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_PRE_BUSY1_SHIFT)) & CCM_PRE_BUSY1_MASK)
#define CCM_PRE_PRE_PODF_A_MASK                  (0x70000U)
#define CCM_PRE_PRE_PODF_A_SHIFT                 (16U)
#define CCM_PRE_PRE_PODF_A(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_PRE_PRE_PODF_A_SHIFT)) & CCM_PRE_PRE_PODF_A_MASK)
#define CCM_PRE_BUSY3_MASK                       (0x80000U)
#define CCM_PRE_BUSY3_SHIFT                      (19U)
#define CCM_PRE_BUSY3(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_PRE_BUSY3_SHIFT)) & CCM_PRE_BUSY3_MASK)
#define CCM_PRE_MUX_A_MASK                       (0x7000000U)
#define CCM_PRE_MUX_A_SHIFT                      (24U)
#define CCM_PRE_MUX_A(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_PRE_MUX_A_SHIFT)) & CCM_PRE_MUX_A_MASK)
#define CCM_PRE_EN_A_MASK                        (0x10000000U)
#define CCM_PRE_EN_A_SHIFT                       (28U)
#define CCM_PRE_EN_A(x)                          (((uint32_t)(((uint32_t)(x)) << CCM_PRE_EN_A_SHIFT)) & CCM_PRE_EN_A_MASK)
#define CCM_PRE_BUSY4_MASK                       (0x80000000U)
#define CCM_PRE_BUSY4_SHIFT                      (31U)
#define CCM_PRE_BUSY4(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_PRE_BUSY4_SHIFT)) & CCM_PRE_BUSY4_MASK)

/* The count of CCM_PRE */
#define CCM_PRE_COUNT                            (125U)

/*! @name PRE_ROOT_SET - Pre Divider Register */
#define CCM_PRE_ROOT_SET_PRE_PODF_B_MASK         (0x7U)
#define CCM_PRE_ROOT_SET_PRE_PODF_B_SHIFT        (0U)
#define CCM_PRE_ROOT_SET_PRE_PODF_B(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_PRE_PODF_B_SHIFT)) & CCM_PRE_ROOT_SET_PRE_PODF_B_MASK)
#define CCM_PRE_ROOT_SET_BUSY0_MASK              (0x8U)
#define CCM_PRE_ROOT_SET_BUSY0_SHIFT             (3U)
#define CCM_PRE_ROOT_SET_BUSY0(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_BUSY0_SHIFT)) & CCM_PRE_ROOT_SET_BUSY0_MASK)
#define CCM_PRE_ROOT_SET_MUX_B_MASK              (0x700U)
#define CCM_PRE_ROOT_SET_MUX_B_SHIFT             (8U)
#define CCM_PRE_ROOT_SET_MUX_B(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_MUX_B_SHIFT)) & CCM_PRE_ROOT_SET_MUX_B_MASK)
#define CCM_PRE_ROOT_SET_EN_B_MASK               (0x1000U)
#define CCM_PRE_ROOT_SET_EN_B_SHIFT              (12U)
#define CCM_PRE_ROOT_SET_EN_B(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_EN_B_SHIFT)) & CCM_PRE_ROOT_SET_EN_B_MASK)
#define CCM_PRE_ROOT_SET_BUSY1_MASK              (0x8000U)
#define CCM_PRE_ROOT_SET_BUSY1_SHIFT             (15U)
#define CCM_PRE_ROOT_SET_BUSY1(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_BUSY1_SHIFT)) & CCM_PRE_ROOT_SET_BUSY1_MASK)
#define CCM_PRE_ROOT_SET_PRE_PODF_A_MASK         (0x70000U)
#define CCM_PRE_ROOT_SET_PRE_PODF_A_SHIFT        (16U)
#define CCM_PRE_ROOT_SET_PRE_PODF_A(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_PRE_PODF_A_SHIFT)) & CCM_PRE_ROOT_SET_PRE_PODF_A_MASK)
#define CCM_PRE_ROOT_SET_BUSY3_MASK              (0x80000U)
#define CCM_PRE_ROOT_SET_BUSY3_SHIFT             (19U)
#define CCM_PRE_ROOT_SET_BUSY3(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_BUSY3_SHIFT)) & CCM_PRE_ROOT_SET_BUSY3_MASK)
#define CCM_PRE_ROOT_SET_MUX_A_MASK              (0x7000000U)
#define CCM_PRE_ROOT_SET_MUX_A_SHIFT             (24U)
#define CCM_PRE_ROOT_SET_MUX_A(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_MUX_A_SHIFT)) & CCM_PRE_ROOT_SET_MUX_A_MASK)
#define CCM_PRE_ROOT_SET_EN_A_MASK               (0x10000000U)
#define CCM_PRE_ROOT_SET_EN_A_SHIFT              (28U)
#define CCM_PRE_ROOT_SET_EN_A(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_EN_A_SHIFT)) & CCM_PRE_ROOT_SET_EN_A_MASK)
#define CCM_PRE_ROOT_SET_BUSY4_MASK              (0x80000000U)
#define CCM_PRE_ROOT_SET_BUSY4_SHIFT             (31U)
#define CCM_PRE_ROOT_SET_BUSY4(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_BUSY4_SHIFT)) & CCM_PRE_ROOT_SET_BUSY4_MASK)

/* The count of CCM_PRE_ROOT_SET */
#define CCM_PRE_ROOT_SET_COUNT                   (125U)

/*! @name PRE_ROOT_CLR - Pre Divider Register */
#define CCM_PRE_ROOT_CLR_PRE_PODF_B_MASK         (0x7U)
#define CCM_PRE_ROOT_CLR_PRE_PODF_B_SHIFT        (0U)
#define CCM_PRE_ROOT_CLR_PRE_PODF_B(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_PRE_PODF_B_SHIFT)) & CCM_PRE_ROOT_CLR_PRE_PODF_B_MASK)
#define CCM_PRE_ROOT_CLR_BUSY0_MASK              (0x8U)
#define CCM_PRE_ROOT_CLR_BUSY0_SHIFT             (3U)
#define CCM_PRE_ROOT_CLR_BUSY0(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_BUSY0_SHIFT)) & CCM_PRE_ROOT_CLR_BUSY0_MASK)
#define CCM_PRE_ROOT_CLR_MUX_B_MASK              (0x700U)
#define CCM_PRE_ROOT_CLR_MUX_B_SHIFT             (8U)
#define CCM_PRE_ROOT_CLR_MUX_B(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_MUX_B_SHIFT)) & CCM_PRE_ROOT_CLR_MUX_B_MASK)
#define CCM_PRE_ROOT_CLR_EN_B_MASK               (0x1000U)
#define CCM_PRE_ROOT_CLR_EN_B_SHIFT              (12U)
#define CCM_PRE_ROOT_CLR_EN_B(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_EN_B_SHIFT)) & CCM_PRE_ROOT_CLR_EN_B_MASK)
#define CCM_PRE_ROOT_CLR_BUSY1_MASK              (0x8000U)
#define CCM_PRE_ROOT_CLR_BUSY1_SHIFT             (15U)
#define CCM_PRE_ROOT_CLR_BUSY1(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_BUSY1_SHIFT)) & CCM_PRE_ROOT_CLR_BUSY1_MASK)
#define CCM_PRE_ROOT_CLR_PRE_PODF_A_MASK         (0x70000U)
#define CCM_PRE_ROOT_CLR_PRE_PODF_A_SHIFT        (16U)
#define CCM_PRE_ROOT_CLR_PRE_PODF_A(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_PRE_PODF_A_SHIFT)) & CCM_PRE_ROOT_CLR_PRE_PODF_A_MASK)
#define CCM_PRE_ROOT_CLR_BUSY3_MASK              (0x80000U)
#define CCM_PRE_ROOT_CLR_BUSY3_SHIFT             (19U)
#define CCM_PRE_ROOT_CLR_BUSY3(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_BUSY3_SHIFT)) & CCM_PRE_ROOT_CLR_BUSY3_MASK)
#define CCM_PRE_ROOT_CLR_MUX_A_MASK              (0x7000000U)
#define CCM_PRE_ROOT_CLR_MUX_A_SHIFT             (24U)
#define CCM_PRE_ROOT_CLR_MUX_A(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_MUX_A_SHIFT)) & CCM_PRE_ROOT_CLR_MUX_A_MASK)
#define CCM_PRE_ROOT_CLR_EN_A_MASK               (0x10000000U)
#define CCM_PRE_ROOT_CLR_EN_A_SHIFT              (28U)
#define CCM_PRE_ROOT_CLR_EN_A(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_EN_A_SHIFT)) & CCM_PRE_ROOT_CLR_EN_A_MASK)
#define CCM_PRE_ROOT_CLR_BUSY4_MASK              (0x80000000U)
#define CCM_PRE_ROOT_CLR_BUSY4_SHIFT             (31U)
#define CCM_PRE_ROOT_CLR_BUSY4(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_BUSY4_SHIFT)) & CCM_PRE_ROOT_CLR_BUSY4_MASK)

/* The count of CCM_PRE_ROOT_CLR */
#define CCM_PRE_ROOT_CLR_COUNT                   (125U)

/*! @name PRE_ROOT_TOG - Pre Divider Register */
#define CCM_PRE_ROOT_TOG_PRE_PODF_B_MASK         (0x7U)
#define CCM_PRE_ROOT_TOG_PRE_PODF_B_SHIFT        (0U)
#define CCM_PRE_ROOT_TOG_PRE_PODF_B(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_PRE_PODF_B_SHIFT)) & CCM_PRE_ROOT_TOG_PRE_PODF_B_MASK)
#define CCM_PRE_ROOT_TOG_BUSY0_MASK              (0x8U)
#define CCM_PRE_ROOT_TOG_BUSY0_SHIFT             (3U)
#define CCM_PRE_ROOT_TOG_BUSY0(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_BUSY0_SHIFT)) & CCM_PRE_ROOT_TOG_BUSY0_MASK)
#define CCM_PRE_ROOT_TOG_MUX_B_MASK              (0x700U)
#define CCM_PRE_ROOT_TOG_MUX_B_SHIFT             (8U)
#define CCM_PRE_ROOT_TOG_MUX_B(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_MUX_B_SHIFT)) & CCM_PRE_ROOT_TOG_MUX_B_MASK)
#define CCM_PRE_ROOT_TOG_EN_B_MASK               (0x1000U)
#define CCM_PRE_ROOT_TOG_EN_B_SHIFT              (12U)
#define CCM_PRE_ROOT_TOG_EN_B(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_EN_B_SHIFT)) & CCM_PRE_ROOT_TOG_EN_B_MASK)
#define CCM_PRE_ROOT_TOG_BUSY1_MASK              (0x8000U)
#define CCM_PRE_ROOT_TOG_BUSY1_SHIFT             (15U)
#define CCM_PRE_ROOT_TOG_BUSY1(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_BUSY1_SHIFT)) & CCM_PRE_ROOT_TOG_BUSY1_MASK)
#define CCM_PRE_ROOT_TOG_PRE_PODF_A_MASK         (0x70000U)
#define CCM_PRE_ROOT_TOG_PRE_PODF_A_SHIFT        (16U)
#define CCM_PRE_ROOT_TOG_PRE_PODF_A(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_PRE_PODF_A_SHIFT)) & CCM_PRE_ROOT_TOG_PRE_PODF_A_MASK)
#define CCM_PRE_ROOT_TOG_BUSY3_MASK              (0x80000U)
#define CCM_PRE_ROOT_TOG_BUSY3_SHIFT             (19U)
#define CCM_PRE_ROOT_TOG_BUSY3(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_BUSY3_SHIFT)) & CCM_PRE_ROOT_TOG_BUSY3_MASK)
#define CCM_PRE_ROOT_TOG_MUX_A_MASK              (0x7000000U)
#define CCM_PRE_ROOT_TOG_MUX_A_SHIFT             (24U)
#define CCM_PRE_ROOT_TOG_MUX_A(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_MUX_A_SHIFT)) & CCM_PRE_ROOT_TOG_MUX_A_MASK)
#define CCM_PRE_ROOT_TOG_EN_A_MASK               (0x10000000U)
#define CCM_PRE_ROOT_TOG_EN_A_SHIFT              (28U)
#define CCM_PRE_ROOT_TOG_EN_A(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_EN_A_SHIFT)) & CCM_PRE_ROOT_TOG_EN_A_MASK)
#define CCM_PRE_ROOT_TOG_BUSY4_MASK              (0x80000000U)
#define CCM_PRE_ROOT_TOG_BUSY4_SHIFT             (31U)
#define CCM_PRE_ROOT_TOG_BUSY4(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_BUSY4_SHIFT)) & CCM_PRE_ROOT_TOG_BUSY4_MASK)

/* The count of CCM_PRE_ROOT_TOG */
#define CCM_PRE_ROOT_TOG_COUNT                   (125U)

/*! @name ACCESS_CTRL - Access Control Register */
#define CCM_ACCESS_CTRL_DOMAIN0_INFO_MASK        (0xFU)
#define CCM_ACCESS_CTRL_DOMAIN0_INFO_SHIFT       (0U)
#define CCM_ACCESS_CTRL_DOMAIN0_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_DOMAIN1_INFO_MASK        (0xF0U)
#define CCM_ACCESS_CTRL_DOMAIN1_INFO_SHIFT       (4U)
#define CCM_ACCESS_CTRL_DOMAIN1_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_DOMAIN2_INFO_MASK        (0xF00U)
#define CCM_ACCESS_CTRL_DOMAIN2_INFO_SHIFT       (8U)
#define CCM_ACCESS_CTRL_DOMAIN2_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_DOMAIN3_INFO_MASK        (0xF000U)
#define CCM_ACCESS_CTRL_DOMAIN3_INFO_SHIFT       (12U)
#define CCM_ACCESS_CTRL_DOMAIN3_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_OWNER_ID_MASK            (0x30000U)
#define CCM_ACCESS_CTRL_OWNER_ID_SHIFT           (16U)
#define CCM_ACCESS_CTRL_OWNER_ID(x)              (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_MUTEX_MASK               (0x100000U)
#define CCM_ACCESS_CTRL_MUTEX_SHIFT              (20U)
#define CCM_ACCESS_CTRL_MUTEX(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_MUTEX_SHIFT)) & CCM_ACCESS_CTRL_MUTEX_MASK)
#define CCM_ACCESS_CTRL_DOMAIN0_WHITELIST_MASK   (0x1000000U)
#define CCM_ACCESS_CTRL_DOMAIN0_WHITELIST_SHIFT  (24U)
#define CCM_ACCESS_CTRL_DOMAIN0_WHITELIST(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN0_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN0_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_DOMAIN1_WHITELIST_MASK   (0x2000000U)
#define CCM_ACCESS_CTRL_DOMAIN1_WHITELIST_SHIFT  (25U)
#define CCM_ACCESS_CTRL_DOMAIN1_WHITELIST(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN1_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN1_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_DOMAIN2_WHITELIST_MASK   (0x4000000U)
#define CCM_ACCESS_CTRL_DOMAIN2_WHITELIST_SHIFT  (26U)
#define CCM_ACCESS_CTRL_DOMAIN2_WHITELIST(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN2_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN2_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_DOMAIN3_WHITELIST_MASK   (0x8000000U)
#define CCM_ACCESS_CTRL_DOMAIN3_WHITELIST_SHIFT  (27U)
#define CCM_ACCESS_CTRL_DOMAIN3_WHITELIST(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN3_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN3_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_SEMA_EN_MASK             (0x10000000U)
#define CCM_ACCESS_CTRL_SEMA_EN_SHIFT            (28U)
#define CCM_ACCESS_CTRL_SEMA_EN(x)               (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_SEMA_EN_SHIFT)) & CCM_ACCESS_CTRL_SEMA_EN_MASK)
#define CCM_ACCESS_CTRL_LOCK_MASK                (0x80000000U)
#define CCM_ACCESS_CTRL_LOCK_SHIFT               (31U)
#define CCM_ACCESS_CTRL_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_LOCK_SHIFT)) & CCM_ACCESS_CTRL_LOCK_MASK)

/* The count of CCM_ACCESS_CTRL */
#define CCM_ACCESS_CTRL_COUNT                    (125U)

/*! @name ACCESS_CTRL_ROOT_SET - Access Control Register */
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_MASK (0xFU)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_SHIFT (0U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_MASK (0xF0U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_SHIFT (4U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_MASK (0xF00U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_SHIFT (8U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_MASK (0xF000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_SHIFT (12U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_MASK   (0x30000U)
#define CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_SHIFT  (16U)
#define CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_MUTEX_MASK      (0x100000U)
#define CCM_ACCESS_CTRL_ROOT_SET_MUTEX_SHIFT     (20U)
#define CCM_ACCESS_CTRL_ROOT_SET_MUTEX(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_MUTEX_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_MUTEX_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_WHITELIST_MASK (0x1000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_WHITELIST_SHIFT (24U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_WHITELIST_MASK (0x2000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_WHITELIST_SHIFT (25U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_WHITELIST_MASK (0x4000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_WHITELIST_SHIFT (26U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_WHITELIST_MASK (0x8000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_WHITELIST_SHIFT (27U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_SEMA_EN_MASK    (0x10000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_SEMA_EN_SHIFT   (28U)
#define CCM_ACCESS_CTRL_ROOT_SET_SEMA_EN(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_SEMA_EN_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_SEMA_EN_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_LOCK_MASK       (0x80000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_LOCK_SHIFT      (31U)
#define CCM_ACCESS_CTRL_ROOT_SET_LOCK(x)         (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_LOCK_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_LOCK_MASK)

/* The count of CCM_ACCESS_CTRL_ROOT_SET */
#define CCM_ACCESS_CTRL_ROOT_SET_COUNT           (125U)

/*! @name ACCESS_CTRL_ROOT_CLR - Access Control Register */
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_MASK (0xFU)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_SHIFT (0U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_MASK (0xF0U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_SHIFT (4U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_MASK (0xF00U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_SHIFT (8U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_MASK (0xF000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_SHIFT (12U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_MASK   (0x30000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_SHIFT  (16U)
#define CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_MUTEX_MASK      (0x100000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_MUTEX_SHIFT     (20U)
#define CCM_ACCESS_CTRL_ROOT_CLR_MUTEX(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_MUTEX_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_MUTEX_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_WHITELIST_MASK (0x1000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_WHITELIST_SHIFT (24U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_WHITELIST_MASK (0x2000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_WHITELIST_SHIFT (25U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_WHITELIST_MASK (0x4000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_WHITELIST_SHIFT (26U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_WHITELIST_MASK (0x8000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_WHITELIST_SHIFT (27U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_SEMA_EN_MASK    (0x10000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_SEMA_EN_SHIFT   (28U)
#define CCM_ACCESS_CTRL_ROOT_CLR_SEMA_EN(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_SEMA_EN_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_SEMA_EN_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_LOCK_MASK       (0x80000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_LOCK_SHIFT      (31U)
#define CCM_ACCESS_CTRL_ROOT_CLR_LOCK(x)         (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_LOCK_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_LOCK_MASK)

/* The count of CCM_ACCESS_CTRL_ROOT_CLR */
#define CCM_ACCESS_CTRL_ROOT_CLR_COUNT           (125U)

/*! @name ACCESS_CTRL_ROOT_TOG - Access Control Register */
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_MASK (0xFU)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_SHIFT (0U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_MASK (0xF0U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_SHIFT (4U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_MASK (0xF00U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_SHIFT (8U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_MASK (0xF000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_SHIFT (12U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_MASK   (0x30000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_SHIFT  (16U)
#define CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_MUTEX_MASK      (0x100000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_MUTEX_SHIFT     (20U)
#define CCM_ACCESS_CTRL_ROOT_TOG_MUTEX(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_MUTEX_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_MUTEX_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_WHITELIST_MASK (0x1000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_WHITELIST_SHIFT (24U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_WHITELIST_MASK (0x2000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_WHITELIST_SHIFT (25U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_WHITELIST_MASK (0x4000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_WHITELIST_SHIFT (26U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_WHITELIST_MASK (0x8000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_WHITELIST_SHIFT (27U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_WHITELIST(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_WHITELIST_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_WHITELIST_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_SEMA_EN_MASK    (0x10000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_SEMA_EN_SHIFT   (28U)
#define CCM_ACCESS_CTRL_ROOT_TOG_SEMA_EN(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_SEMA_EN_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_SEMA_EN_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_LOCK_MASK       (0x80000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_LOCK_SHIFT      (31U)
#define CCM_ACCESS_CTRL_ROOT_TOG_LOCK(x)         (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_LOCK_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_LOCK_MASK)

/* The count of CCM_ACCESS_CTRL_ROOT_TOG */
#define CCM_ACCESS_CTRL_ROOT_TOG_COUNT           (125U)


/*!
 * @}
 */ /* end of group CCM_Register_Masks */


/* CCM - Peripheral instance base addresses */
/** Peripheral CCM base address */
#define CCM_BASE                                 (0x30380000u)
/** Peripheral CCM base pointer */
#define CCM                                      ((CCM_Type *)CCM_BASE)
/** Array initializer of CCM peripheral base addresses */
#define CCM_BASE_ADDRS                           { CCM_BASE }
/** Array initializer of CCM peripheral base pointers */
#define CCM_BASE_PTRS                            { CCM }
/** Interrupt vectors for the CCM peripheral type */
#define CCM_IRQS                                 { CCM1_IRQn, CCM2_IRQn }

/*!
 * @}
 */ /* end of group CCM_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- CCM_ANALOG Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Peripheral_Access_Layer CCM_ANALOG Peripheral Access Layer
 * @{
 */

/** CCM_ANALOG - Register Layout Typedef */
typedef struct {
  __IO uint32_t AUDIO_PLL1_CFG0;                   /**< AUDIO PLL1 Configuration 0 Register, offset: 0x0 */
  __IO uint32_t AUDIO_PLL1_CFG1;                   /**< AUDIO PLL1 Configuration 1 Register, offset: 0x4 */
  __IO uint32_t AUDIO_PLL2_CFG0;                   /**< AUDIO PLL2 Configuration 0 Register, offset: 0x8 */
  __IO uint32_t AUDIO_PLL2_CFG1;                   /**< AUDIO PLL2 Configuration 1 Register, offset: 0xC */
  __IO uint32_t VIDEO_PLL_CFG0;                    /**< VIDEO PLL Configuration 0 Register, offset: 0x10 */
  __IO uint32_t VIDEO_PLL_CFG1;                    /**< VIDEO PLL Configuration 1 Register, offset: 0x14 */
  __IO uint32_t GPU_PLL_CFG0;                      /**< GPU PLL Configuration 0 Register, offset: 0x18 */
  __IO uint32_t GPU_PLL_CFG1;                      /**< GPU PLL Configuration 1 Register, offset: 0x1C */
  __IO uint32_t VPU_PLL_CFG0;                      /**< VPU PLL Configuration 0 Register, offset: 0x20 */
  __IO uint32_t VPU_PLL_CFG1;                      /**< VPU PLL Configuration 1 Register, offset: 0x24 */
  __IO uint32_t ARM_PLL_CFG0;                      /**< ARM PLL Configuration 0 Register, offset: 0x28 */
  __IO uint32_t ARM_PLL_CFG1;                      /**< ARM PLL Configuration 1 Register, offset: 0x2C */
  __IO uint32_t SYS_PLL_CFG0;                      /**< System PLL Configuration 0 Register, offset: 0x30 */
  __IO uint32_t SYS_PLL_CFG1;                      /**< System_PLL Configuration 1 Register, offset: 0x34 */
  __IO uint32_t SYS_PLL_CFG2;                      /**< System_PLL Configuration 2 Register, offset: 0x38 */
  __IO uint32_t SYS_PLL2_CFG0;                     /**< System PLL Configuration 0 Register, offset: 0x3C */
  __IO uint32_t SYS_PLL2_CFG1;                     /**< System_PLL Configuration 1 Register, offset: 0x40 */
  __IO uint32_t SYS_PLL2_CFG2;                     /**< System_PLL Configuration 2 Register, offset: 0x44 */
  __IO uint32_t SYS_PLL3_CFG0;                     /**< System PLL Configuration 0 Register, offset: 0x48 */
  __IO uint32_t SYS_PLL3_CFG1;                     /**< System_PLL Configuration 1 Register, offset: 0x4C */
  __IO uint32_t SYS_PLL3_CFG2;                     /**< System_PLL Configuration 2 Register, offset: 0x50 */
  __IO uint32_t VIDEO_PLL2_CFG0;                   /**< VIDEO PLL2 Configuration 0 Register, offset: 0x54 */
  __IO uint32_t VIDEO_PLL2_CFG1;                   /**< VIDEO PLL2 Configuration 1 Register, offset: 0x58 */
  __IO uint32_t VIDEO_PLL2_CFG2;                   /**< VIDEO PLL2 Configuration 2 Register, offset: 0x5C */
  __IO uint32_t DRAM_PLL_CFG0;                     /**< DRAM PLL Configuration 0 Register, offset: 0x60 */
  __IO uint32_t DRAM_PLL_CFG1;                     /**< DRAM PLL Configuration 1 Register, offset: 0x64 */
  __IO uint32_t DRAM_PLL_CFG2;                     /**< DRAM PLL Configuration 2 Register, offset: 0x68 */
  __I  uint32_t DIGPROG;                           /**< DIGPROG Register, offset: 0x6C */
  __IO uint32_t OSC_MISC_CFG;                      /**< Osc Misc Configuration Register, offset: 0x70 */
  __IO uint32_t PLLOUT_MONITOR_CFG;                /**< PLLOUT Monitor Configuration Register, offset: 0x74 */
  __IO uint32_t FRAC_PLLOUT_DIV_CFG;               /**< Fractional PLLOUT Divider Configuration Register, offset: 0x78 */
  __IO uint32_t SCCG_PLLOUT_DIV_CFG;               /**< SCCG PLLOUT Divider Configuration Register, offset: 0x7C */
} CCM_ANALOG_Type;

/* ----------------------------------------------------------------------------
   -- CCM_ANALOG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Register_Masks CCM_ANALOG Register Masks
 * @{
 */

/*! @name AUDIO_PLL1_CFG0 - AUDIO PLL1 Configuration 0 Register */
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_ACK(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_ACK_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_ACK_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_VAL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_VAL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_BYPASS_MASK (0x4000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_BYPASS(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_BYPASS_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_BYPASS_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_MASK   (0x80000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_SHIFT  (19U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_MASK (0x200000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_SHIFT (21U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_SHIFT (31U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_MASK)

/*! @name AUDIO_PLL1_CFG1 - AUDIO PLL1 Configuration 1 Register */
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_FRAC_DIV_CTL_MASK)

/*! @name AUDIO_PLL2_CFG0 - AUDIO PLL2 Configuration 0 Register */
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_ACK(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_ACK_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_ACK_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_VAL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_VAL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_BYPASS_MASK (0x4000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_BYPASS(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_BYPASS_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_BYPASS_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_MASK   (0x80000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_SHIFT  (19U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_MASK (0x200000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_SHIFT (21U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_SHIFT (31U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_MASK)

/*! @name AUDIO_PLL2_CFG1 - AUDIO PLL2 Configuration 1 Register */
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_FRAC_DIV_CTL_MASK)

/*! @name VIDEO_PLL_CFG0 - VIDEO PLL Configuration 0 Register */
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_NEWDIV_ACK(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_NEWDIV_ACK_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_NEWDIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_NEWDIV_VAL_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_BYPASS_MASK (0x4000U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_BYPASS(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_BYPASS_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_BYPASS_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_LOCK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_PD_MASK    (0x80000U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_PD_SHIFT   (19U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_PD(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_CLKE_MASK  (0x200000U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_CLKE_SHIFT (21U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_CLKE(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_LOCK_MASK  (0x80000000U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_LOCK_SHIFT (31U)
#define CCM_ANALOG_VIDEO_PLL_CFG0_PLL_LOCK(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG0_PLL_LOCK_MASK)

/*! @name VIDEO_PLL_CFG1 - VIDEO PLL Configuration 1 Register */
#define CCM_ANALOG_VIDEO_PLL_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_VIDEO_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_VIDEO_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_VIDEO_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_VIDEO_PLL_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_VIDEO_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK)

/*! @name GPU_PLL_CFG0 - GPU PLL Configuration 0 Register */
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_ACK(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_ACK_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_VAL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_BYPASS_MASK  (0x4000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_BYPASS(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_BYPASS_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_BYPASS_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_SEL(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_MASK      (0x80000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_SHIFT     (19U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_PD(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_MASK    (0x200000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_SHIFT   (21U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_MASK    (0x80000000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_SHIFT   (31U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_MASK)

/*! @name GPU_PLL_CFG1 - GPU PLL Configuration 1 Register */
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK)

/*! @name VPU_PLL_CFG0 - VPU PLL Configuration 0 Register */
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_ACK(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_ACK_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_VAL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_BYPASS_MASK  (0x4000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_BYPASS(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_BYPASS_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_BYPASS_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_SEL(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_MASK      (0x80000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_SHIFT     (19U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_PD(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_MASK    (0x200000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_SHIFT   (21U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_MASK    (0x80000000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_SHIFT   (31U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_MASK)

/*! @name VPU_PLL_CFG1 - VPU PLL Configuration 1 Register */
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK)

/*! @name ARM_PLL_CFG0 - ARM PLL Configuration 0 Register */
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_ACK(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_ACK_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_VAL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_BYPASS_MASK  (0x4000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_BYPASS(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_BYPASS_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_BYPASS_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_SEL(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_MASK      (0x80000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_SHIFT     (19U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_PD(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_MASK    (0x200000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_SHIFT   (21U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_MASK    (0x80000000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_SHIFT   (31U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_MASK)

/*! @name ARM_PLL_CFG1 - ARM PLL Configuration 1 Register */
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK)

/*! @name SYS_PLL_CFG0 - System PLL Configuration 0 Register */
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_REFCLK_SEL_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_REFCLK_SEL_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_COUNTCLK_SEL_MASK (0x4U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_LOCK_SEL_MASK (0x8U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_LOCK_SEL_SHIFT (3U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_LOCK_SEL(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_BYPASS2_MASK (0x10U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_BYPASS2_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_BYPASS2(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_BYPASS2_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_BYPASS2_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_BYPASS1_MASK (0x20U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_BYPASS1_SHIFT (5U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_BYPASS1(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_BYPASS1_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_BYPASS1_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_PD_OVERRIDE_MASK (0x40U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT (6U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_PD_MASK      (0x80U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_PD_SHIFT     (7U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_PD(x)        (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV20_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV20_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV20_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV20_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV20_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV20_CLKE_MASK (0x200U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV20_CLKE_SHIFT (9U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV20_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV20_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV20_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV10_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV10_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV10_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV10_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV10_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV10_CLKE_MASK (0x800U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV10_CLKE_SHIFT (11U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV10_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV10_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV10_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV8_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV8_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV8_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV8_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV8_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV8_CLKE_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV8_CLKE_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV8_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV8_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV8_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV6_OVERRIDE_MASK (0x4000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV6_OVERRIDE_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV6_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV6_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV6_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV6_CLKE_MASK (0x8000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV6_CLKE_SHIFT (15U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV6_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV6_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV6_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV5_OVERRIDE_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV5_OVERRIDE_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV5_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV5_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV5_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV5_CLKE_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV5_CLKE_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV5_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV5_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV5_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV4_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV4_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV4_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV4_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV4_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV4_CLKE_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV4_CLKE_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV4_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV4_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV4_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV3_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV3_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV3_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV3_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV3_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV3_CLKE_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV3_CLKE_SHIFT (21U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV3_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV3_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV3_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV2_OVERRIDE_MASK (0x400000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV2_OVERRIDE_SHIFT (22U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV2_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV2_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV2_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV2_CLKE_MASK (0x800000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV2_CLKE_SHIFT (23U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV2_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV2_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_DIV2_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK (0x1000000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT (24U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_CLKE_MASK    (0x2000000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_CLKE_SHIFT   (25U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_CLKE(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_LOCK_MASK    (0x80000000U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_LOCK_SHIFT   (31U)
#define CCM_ANALOG_SYS_PLL_CFG0_PLL_LOCK(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG0_PLL_LOCK_MASK)

/*! @name SYS_PLL_CFG1 - System_PLL Configuration 1 Register */
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSE_MASK     (0x1U)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSE_SHIFT    (0U)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSE(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG1_PLL_SSE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG1_PLL_SSE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSMF_MASK    (0x1EU)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSMF_SHIFT   (1U)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSMF(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG1_PLL_SSMF_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG1_PLL_SSMF_MASK)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSMD_MASK    (0xE0U)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSMD_SHIFT   (5U)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSMD(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG1_PLL_SSMD_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG1_PLL_SSMD_MASK)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSDS_MASK    (0x100U)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSDS_SHIFT   (8U)
#define CCM_ANALOG_SYS_PLL_CFG1_PLL_SSDS(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG1_PLL_SSDS_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG1_PLL_SSDS_MASK)

/*! @name SYS_PLL_CFG2 - System_PLL Configuration 2 Register */
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_FILTER_RANGE_MASK (0x1U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_FILTER_RANGE_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_FILTER_RANGE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG2_PLL_FILTER_RANGE_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG2_PLL_FILTER_RANGE_MASK)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_OUTPUT_DIV_VAL_MASK (0x7EU)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT (1U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG2_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_FEEDBACK_DIVF2_MASK (0x1F80U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_FEEDBACK_DIVF2_SHIFT (7U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_FEEDBACK_DIVF2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG2_PLL_FEEDBACK_DIVF2_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG2_PLL_FEEDBACK_DIVF2_MASK)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_FEEDBACK_DIVF1_MASK (0x7E000U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_FEEDBACK_DIVF1_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_FEEDBACK_DIVF1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG2_PLL_FEEDBACK_DIVF1_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG2_PLL_FEEDBACK_DIVF1_MASK)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_REF_DIVR2_MASK (0x1F80000U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_REF_DIVR2_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_REF_DIVR2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG2_PLL_REF_DIVR2_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG2_PLL_REF_DIVR2_MASK)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_REF_DIVR1_MASK (0xE000000U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_REF_DIVR1_SHIFT (25U)
#define CCM_ANALOG_SYS_PLL_CFG2_PLL_REF_DIVR1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL_CFG2_PLL_REF_DIVR1_SHIFT)) & CCM_ANALOG_SYS_PLL_CFG2_PLL_REF_DIVR1_MASK)

/*! @name SYS_PLL2_CFG0 - System PLL Configuration 0 Register */
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_REFCLK_SEL_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_COUNTCLK_SEL_MASK (0x4U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_COUNTCLK_SEL_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_SEL_MASK (0x8U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_SEL_SHIFT (3U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS2_MASK (0x10U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS2_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS2(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS2_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS2_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS1_MASK (0x20U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS1_SHIFT (5U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS1(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS1_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS1_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_OVERRIDE_MASK (0x40U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_OVERRIDE_SHIFT (6U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_MASK     (0x80U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_SHIFT    (7U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_CLKE_MASK (0x200U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_CLKE_SHIFT (9U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_CLKE_MASK (0x800U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_CLKE_SHIFT (11U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_CLKE_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_CLKE_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_OVERRIDE_MASK (0x4000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_OVERRIDE_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_CLKE_MASK (0x8000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_CLKE_SHIFT (15U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_OVERRIDE_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_OVERRIDE_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_CLKE_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_CLKE_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_CLKE_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_CLKE_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_CLKE_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_CLKE_SHIFT (21U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_OVERRIDE_MASK (0x400000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_OVERRIDE_SHIFT (22U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_CLKE_MASK (0x800000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_CLKE_SHIFT (23U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_OVERRIDE_MASK (0x1000000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_OVERRIDE_SHIFT (24U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_MASK   (0x2000000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_SHIFT  (25U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_MASK   (0x80000000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_SHIFT  (31U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_MASK)

/*! @name SYS_PLL2_CFG1 - System_PLL Configuration 1 Register */
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSE_MASK    (0x1U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSE_SHIFT   (0U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSE(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMF_MASK   (0x1EU)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMF_SHIFT  (1U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMF(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMF_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMF_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMD_MASK   (0xE0U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMD_SHIFT  (5U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMD(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMD_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMD_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSDS_MASK   (0x100U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSDS_SHIFT  (8U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSDS(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSDS_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSDS_MASK)

/*! @name SYS_PLL2_CFG2 - System_PLL Configuration 2 Register */
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FILTER_RANGE_MASK (0x1U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FILTER_RANGE_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FILTER_RANGE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_FILTER_RANGE_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_FILTER_RANGE_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_MASK (0x7EU)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT (1U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF2_MASK (0x1F80U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF2_SHIFT (7U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF2_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF2_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF1_MASK (0x7E000U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF1_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF1_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF1_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR2_MASK (0x1F80000U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR2_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR2_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR2_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR1_MASK (0xE000000U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR1_SHIFT (25U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR1_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR1_MASK)

/*! @name SYS_PLL3_CFG0 - System PLL Configuration 0 Register */
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_REFCLK_SEL_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_REFCLK_SEL_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_COUNTCLK_SEL_MASK (0x4U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_COUNTCLK_SEL_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_SEL_MASK (0x8U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_SEL_SHIFT (3U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS2_MASK (0x10U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS2_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS2(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS2_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS2_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS1_MASK (0x20U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS1_SHIFT (5U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS1(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS1_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS1_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_OVERRIDE_MASK (0x40U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_OVERRIDE_SHIFT (6U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_MASK     (0x80U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_SHIFT    (7U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_CLKE_MASK (0x200U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_CLKE_SHIFT (9U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_CLKE_MASK (0x800U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_CLKE_SHIFT (11U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_CLKE_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_CLKE_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_OVERRIDE_MASK (0x4000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_OVERRIDE_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_CLKE_MASK (0x8000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_CLKE_SHIFT (15U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_OVERRIDE_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_OVERRIDE_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_CLKE_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_CLKE_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_CLKE_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_CLKE_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_CLKE_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_CLKE_SHIFT (21U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_OVERRIDE_MASK (0x400000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_OVERRIDE_SHIFT (22U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_CLKE_MASK (0x800000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_CLKE_SHIFT (23U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_CLKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_OVERRIDE_MASK (0x1000000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_OVERRIDE_SHIFT (24U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_MASK   (0x2000000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_SHIFT  (25U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_MASK   (0x80000000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_SHIFT  (31U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_MASK)

/*! @name SYS_PLL3_CFG1 - System_PLL Configuration 1 Register */
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSE_MASK    (0x1U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSE_SHIFT   (0U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSE(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMF_MASK   (0x1EU)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMF_SHIFT  (1U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMF(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMF_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMF_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMD_MASK   (0xE0U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMD_SHIFT  (5U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMD(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMD_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMD_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSDS_MASK   (0x100U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSDS_SHIFT  (8U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSDS(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSDS_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSDS_MASK)

/*! @name SYS_PLL3_CFG2 - System_PLL Configuration 2 Register */
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FILTER_RANGE_MASK (0x1U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FILTER_RANGE_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FILTER_RANGE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_FILTER_RANGE_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_FILTER_RANGE_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_OUTPUT_DIV_VAL_MASK (0x7EU)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT (1U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF2_MASK (0x1F80U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF2_SHIFT (7U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF2_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF2_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF1_MASK (0x7E000U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF1_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF1_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF1_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR2_MASK (0x1F80000U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR2_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR2_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR2_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR1_MASK (0xE000000U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR1_SHIFT (25U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR1_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR1_MASK)

/*! @name VIDEO_PLL2_CFG0 - VIDEO PLL2 Configuration 0 Register */
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_REFCLK_SEL_MASK (0x3U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_COUNTCLK_SEL_MASK (0x4U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_COUNTCLK_SEL_SHIFT (2U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_SEL_MASK (0x8U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_SEL_SHIFT (3U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS2_MASK (0x10U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS2_SHIFT (4U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS2_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS2_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS1_MASK (0x20U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS1_SHIFT (5U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS1_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS1_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_OVERRIDE_MASK (0x40U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_OVERRIDE_SHIFT (6U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_MASK   (0x80U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_SHIFT  (7U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_MASK (0x200U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_SHIFT (9U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_SHIFT (31U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_MASK)

/*! @name VIDEO_PLL2_CFG1 - VIDEO PLL2 Configuration 1 Register */
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSE_MASK  (0x1U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSE_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSE(x)    (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSE_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSE_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMF_MASK (0x1EU)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMF_SHIFT (1U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMF(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMF_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMF_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMD_MASK (0xE0U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMD_SHIFT (5U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMD(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMD_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMD_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSDS_MASK (0x100U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSDS_SHIFT (8U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSDS(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSDS_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSDS_MASK)

/*! @name VIDEO_PLL2_CFG2 - VIDEO PLL2 Configuration 2 Register */
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FILTER_RANGE_MASK (0x1U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FILTER_RANGE_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FILTER_RANGE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FILTER_RANGE_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FILTER_RANGE_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_MASK (0x7EU)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT (1U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF2_MASK (0x1F80U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF2_SHIFT (7U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF2_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF2_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF1_MASK (0x7E000U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF1_SHIFT (13U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF1_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF1_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR2_MASK (0x1F80000U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR2_SHIFT (19U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR2_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR2_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR1_MASK (0xE000000U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR1_SHIFT (25U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR1_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR1_MASK)

/*! @name DRAM_PLL_CFG0 - DRAM PLL Configuration 0 Register */
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_REFCLK_SEL_MASK (0x3U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_REFCLK_SEL_SHIFT (0U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_COUNTCLK_SEL_MASK (0x4U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT (2U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_COUNTCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_COUNTCLK_SEL_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_SEL_MASK (0x8U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_SEL_SHIFT (3U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_SEL_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_SEL_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS2_MASK (0x10U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS2_SHIFT (4U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS2(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS2_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS2_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS1_MASK (0x20U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS1_SHIFT (5U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS1(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS1_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS1_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_OVERRIDE_MASK (0x40U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT (6U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_OVERRIDE_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_MASK     (0x80U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_SHIFT    (7U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD(x)       (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_MASK   (0x200U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_SHIFT  (9U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_MASK   (0x80000000U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_SHIFT  (31U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_MASK)

/*! @name DRAM_PLL_CFG1 - DRAM PLL Configuration 1 Register */
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSE_MASK    (0x1U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSE_SHIFT   (0U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSE(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSE_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSE_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMF_MASK   (0x1EU)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMF_SHIFT  (1U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMF(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMF_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMF_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMD_MASK   (0xE0U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMD_SHIFT  (5U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMD(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMD_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMD_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSDS_MASK   (0x100U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSDS_SHIFT  (8U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSDS(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSDS_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSDS_MASK)

/*! @name DRAM_PLL_CFG2 - DRAM PLL Configuration 2 Register */
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FILTER_RANGE_MASK (0x1U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FILTER_RANGE_SHIFT (0U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FILTER_RANGE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_FILTER_RANGE_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_FILTER_RANGE_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_OUTPUT_DIV_VAL_MASK (0x7EU)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT (1U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF2_MASK (0x1F80U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF2_SHIFT (7U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF2_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF2_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF1_MASK (0x7E000U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF1_SHIFT (13U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF1_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF1_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR2_MASK (0x1F80000U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR2_SHIFT (19U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR2_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR2_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR1_MASK (0xE000000U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR1_SHIFT (25U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR1_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR1_MASK)

/*! @name DIGPROG - DIGPROG Register */
#define CCM_ANALOG_DIGPROG_DIGPROG_MINOR_MASK    (0xFFU)
#define CCM_ANALOG_DIGPROG_DIGPROG_MINOR_SHIFT   (0U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MINOR(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DIGPROG_DIGPROG_MINOR_SHIFT)) & CCM_ANALOG_DIGPROG_DIGPROG_MINOR_MASK)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_MASK (0xFF00U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_SHIFT (8U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_SHIFT)) & CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_MASK)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_MASK (0xFF0000U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_SHIFT (16U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_SHIFT)) & CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_MASK)

/*! @name OSC_MISC_CFG - Osc Misc Configuration Register */
#define CCM_ANALOG_OSC_MISC_CFG_OSC_32K_SEL_MASK (0x1U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_32K_SEL_SHIFT (0U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_32K_SEL(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_OSC_MISC_CFG_OSC_32K_SEL_SHIFT)) & CCM_ANALOG_OSC_MISC_CFG_OSC_32K_SEL_MASK)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_OVERRIDE_MASK (0x2U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_OVERRIDE_SHIFT (1U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_MASK (0x4U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_SHIFT (2U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_SHIFT)) & CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_MASK)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_OVERRIDE_MASK (0x8U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_OVERRIDE_SHIFT (3U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_OVERRIDE_SHIFT)) & CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_OVERRIDE_MASK)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_MASK (0x10U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_SHIFT (4U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_SHIFT)) & CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_MASK)

/*! @name PLLOUT_MONITOR_CFG - PLLOUT Monitor Configuration Register */
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CLK_SEL_MASK (0xFU)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CLK_SEL_SHIFT (0U)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CLK_SEL_SHIFT)) & CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CLK_SEL_MASK)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CKE_MASK (0x10U)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CKE_SHIFT (4U)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CKE(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CKE_SHIFT)) & CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CKE_MASK)

/*! @name FRAC_PLLOUT_DIV_CFG - Fractional PLLOUT Divider Configuration Register */
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL1_DIV_VAL_MASK (0x7U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL1_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL1_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL1_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL1_DIV_VAL_MASK)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL2_DIV_VAL_MASK (0x70U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL2_DIV_VAL_SHIFT (4U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL2_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL2_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL2_DIV_VAL_MASK)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VIDEO_PLL1_DIV_VAL_MASK (0x700U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VIDEO_PLL1_DIV_VAL_SHIFT (8U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VIDEO_PLL1_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VIDEO_PLL1_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VIDEO_PLL1_DIV_VAL_MASK)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_GPU_PLL_DIV_VAL_MASK (0x7000U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_GPU_PLL_DIV_VAL_SHIFT (12U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_GPU_PLL_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_GPU_PLL_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_GPU_PLL_DIV_VAL_MASK)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VPU_PLL_DIV_VAL_MASK (0x70000U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VPU_PLL_DIV_VAL_SHIFT (16U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VPU_PLL_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VPU_PLL_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VPU_PLL_DIV_VAL_MASK)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_ARM_PLL_DIV_VAL_MASK (0x700000U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_ARM_PLL_DIV_VAL_SHIFT (20U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_ARM_PLL_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_ARM_PLL_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_ARM_PLL_DIV_VAL_MASK)

/*! @name SCCG_PLLOUT_DIV_CFG - SCCG PLLOUT Divider Configuration Register */
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL1_DIV_VAL_MASK (0x7U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL1_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL1_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL1_DIV_VAL_SHIFT)) & CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL1_DIV_VAL_MASK)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL2_DIV_VAL_MASK (0x70U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL2_DIV_VAL_SHIFT (4U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL2_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL2_DIV_VAL_SHIFT)) & CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL2_DIV_VAL_MASK)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL3_DIV_VAL_MASK (0x700U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL3_DIV_VAL_SHIFT (8U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL3_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL3_DIV_VAL_SHIFT)) & CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL3_DIV_VAL_MASK)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_DRAM_PLL_DIV_VAL_MASK (0x7000U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_DRAM_PLL_DIV_VAL_SHIFT (12U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_DRAM_PLL_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_DRAM_PLL_DIV_VAL_SHIFT)) & CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_DRAM_PLL_DIV_VAL_MASK)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_VIDEO_PLL2_DIV_VAL_MASK (0x70000U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_VIDEO_PLL2_DIV_VAL_SHIFT (16U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_VIDEO_PLL2_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_VIDEO_PLL2_DIV_VAL_SHIFT)) & CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_VIDEO_PLL2_DIV_VAL_MASK)


/*!
 * @}
 */ /* end of group CCM_ANALOG_Register_Masks */


/* CCM_ANALOG - Peripheral instance base addresses */
/** Peripheral CCM_ANALOG base address */
#define CCM_ANALOG_BASE                          (0x30360000u)
/** Peripheral CCM_ANALOG base pointer */
#define CCM_ANALOG                               ((CCM_ANALOG_Type *)CCM_ANALOG_BASE)
/** Array initializer of CCM_ANALOG peripheral base addresses */
#define CCM_ANALOG_BASE_ADDRS                    { CCM_ANALOG_BASE }
/** Array initializer of CCM_ANALOG peripheral base pointers */
#define CCM_ANALOG_BASE_PTRS                     { CCM_ANALOG }

/*!
 * @}
 */ /* end of group CCM_ANALOG_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- ECSPI Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ECSPI_Peripheral_Access_Layer ECSPI Peripheral Access Layer
 * @{
 */

/** ECSPI - Register Layout Typedef */
typedef struct {
  __I  uint32_t RXDATA;                            /**< Receive Data Register, offset: 0x0 */
  __O  uint32_t TXDATA;                            /**< Transmit Data Register, offset: 0x4 */
  __IO uint32_t CONREG;                            /**< Control Register, offset: 0x8 */
  __IO uint32_t CONFIGREG;                         /**< Config Register, offset: 0xC */
  __IO uint32_t INTREG;                            /**< Interrupt Control Register, offset: 0x10 */
  __IO uint32_t DMAREG;                            /**< DMA Control Register, offset: 0x14 */
  __IO uint32_t STATREG;                           /**< Status Register, offset: 0x18 */
  __IO uint32_t PERIODREG;                         /**< Sample Period Control Register, offset: 0x1C */
  __IO uint32_t TESTREG;                           /**< Test Control Register, offset: 0x20 */
       uint8_t RESERVED_0[28];
  __O  uint32_t MSGDATA;                           /**< Message Data Register, offset: 0x40 */
} ECSPI_Type;

/* ----------------------------------------------------------------------------
   -- ECSPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ECSPI_Register_Masks ECSPI Register Masks
 * @{
 */

/*! @name RXDATA - Receive Data Register */
#define ECSPI_RXDATA_ECSPI_RXDATA_MASK           (0xFFFFFFFFU)
#define ECSPI_RXDATA_ECSPI_RXDATA_SHIFT          (0U)
#define ECSPI_RXDATA_ECSPI_RXDATA(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_RXDATA_ECSPI_RXDATA_SHIFT)) & ECSPI_RXDATA_ECSPI_RXDATA_MASK)

/*! @name TXDATA - Transmit Data Register */
#define ECSPI_TXDATA_ECSPI_TXDATA_MASK           (0xFFFFFFFFU)
#define ECSPI_TXDATA_ECSPI_TXDATA_SHIFT          (0U)
#define ECSPI_TXDATA_ECSPI_TXDATA(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_TXDATA_ECSPI_TXDATA_SHIFT)) & ECSPI_TXDATA_ECSPI_TXDATA_MASK)

/*! @name CONREG - Control Register */
#define ECSPI_CONREG_EN_MASK                     (0x1U)
#define ECSPI_CONREG_EN_SHIFT                    (0U)
#define ECSPI_CONREG_EN(x)                       (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_EN_SHIFT)) & ECSPI_CONREG_EN_MASK)
#define ECSPI_CONREG_HT_MASK                     (0x2U)
#define ECSPI_CONREG_HT_SHIFT                    (1U)
#define ECSPI_CONREG_HT(x)                       (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_HT_SHIFT)) & ECSPI_CONREG_HT_MASK)
#define ECSPI_CONREG_XCH_MASK                    (0x4U)
#define ECSPI_CONREG_XCH_SHIFT                   (2U)
#define ECSPI_CONREG_XCH(x)                      (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_XCH_SHIFT)) & ECSPI_CONREG_XCH_MASK)
#define ECSPI_CONREG_SMC_MASK                    (0x8U)
#define ECSPI_CONREG_SMC_SHIFT                   (3U)
#define ECSPI_CONREG_SMC(x)                      (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_SMC_SHIFT)) & ECSPI_CONREG_SMC_MASK)
#define ECSPI_CONREG_CHANNEL_MODE_MASK           (0xF0U)
#define ECSPI_CONREG_CHANNEL_MODE_SHIFT          (4U)
#define ECSPI_CONREG_CHANNEL_MODE(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_CHANNEL_MODE_SHIFT)) & ECSPI_CONREG_CHANNEL_MODE_MASK)
#define ECSPI_CONREG_POST_DIVIDER_MASK           (0xF00U)
#define ECSPI_CONREG_POST_DIVIDER_SHIFT          (8U)
#define ECSPI_CONREG_POST_DIVIDER(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_POST_DIVIDER_SHIFT)) & ECSPI_CONREG_POST_DIVIDER_MASK)
#define ECSPI_CONREG_PRE_DIVIDER_MASK            (0xF000U)
#define ECSPI_CONREG_PRE_DIVIDER_SHIFT           (12U)
#define ECSPI_CONREG_PRE_DIVIDER(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_PRE_DIVIDER_SHIFT)) & ECSPI_CONREG_PRE_DIVIDER_MASK)
#define ECSPI_CONREG_DRCTL_MASK                  (0x30000U)
#define ECSPI_CONREG_DRCTL_SHIFT                 (16U)
#define ECSPI_CONREG_DRCTL(x)                    (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_DRCTL_SHIFT)) & ECSPI_CONREG_DRCTL_MASK)
#define ECSPI_CONREG_CHANNEL_SELECT_MASK         (0xC0000U)
#define ECSPI_CONREG_CHANNEL_SELECT_SHIFT        (18U)
#define ECSPI_CONREG_CHANNEL_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_CHANNEL_SELECT_SHIFT)) & ECSPI_CONREG_CHANNEL_SELECT_MASK)
#define ECSPI_CONREG_BURST_LENGTH_MASK           (0xFFF00000U)
#define ECSPI_CONREG_BURST_LENGTH_SHIFT          (20U)
#define ECSPI_CONREG_BURST_LENGTH(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_BURST_LENGTH_SHIFT)) & ECSPI_CONREG_BURST_LENGTH_MASK)

/*! @name CONFIGREG - Config Register */
#define ECSPI_CONFIGREG_SCLK_PHA_MASK            (0xFU)
#define ECSPI_CONFIGREG_SCLK_PHA_SHIFT           (0U)
#define ECSPI_CONFIGREG_SCLK_PHA(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SCLK_PHA_SHIFT)) & ECSPI_CONFIGREG_SCLK_PHA_MASK)
#define ECSPI_CONFIGREG_SCLK_POL_MASK            (0xF0U)
#define ECSPI_CONFIGREG_SCLK_POL_SHIFT           (4U)
#define ECSPI_CONFIGREG_SCLK_POL(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SCLK_POL_SHIFT)) & ECSPI_CONFIGREG_SCLK_POL_MASK)
#define ECSPI_CONFIGREG_SS_CTL_MASK              (0xF00U)
#define ECSPI_CONFIGREG_SS_CTL_SHIFT             (8U)
#define ECSPI_CONFIGREG_SS_CTL(x)                (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SS_CTL_SHIFT)) & ECSPI_CONFIGREG_SS_CTL_MASK)
#define ECSPI_CONFIGREG_SS_POL_MASK              (0xF000U)
#define ECSPI_CONFIGREG_SS_POL_SHIFT             (12U)
#define ECSPI_CONFIGREG_SS_POL(x)                (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SS_POL_SHIFT)) & ECSPI_CONFIGREG_SS_POL_MASK)
#define ECSPI_CONFIGREG_DATA_CTL_MASK            (0xF0000U)
#define ECSPI_CONFIGREG_DATA_CTL_SHIFT           (16U)
#define ECSPI_CONFIGREG_DATA_CTL(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_DATA_CTL_SHIFT)) & ECSPI_CONFIGREG_DATA_CTL_MASK)
#define ECSPI_CONFIGREG_SCLK_CTL_MASK            (0xF00000U)
#define ECSPI_CONFIGREG_SCLK_CTL_SHIFT           (20U)
#define ECSPI_CONFIGREG_SCLK_CTL(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SCLK_CTL_SHIFT)) & ECSPI_CONFIGREG_SCLK_CTL_MASK)
#define ECSPI_CONFIGREG_HT_LENGTH_MASK           (0x1F000000U)
#define ECSPI_CONFIGREG_HT_LENGTH_SHIFT          (24U)
#define ECSPI_CONFIGREG_HT_LENGTH(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_HT_LENGTH_SHIFT)) & ECSPI_CONFIGREG_HT_LENGTH_MASK)

/*! @name INTREG - Interrupt Control Register */
#define ECSPI_INTREG_TEEN_MASK                   (0x1U)
#define ECSPI_INTREG_TEEN_SHIFT                  (0U)
#define ECSPI_INTREG_TEEN(x)                     (((uint32_t)(((uint32_t)(x)) << ECSPI_INTREG_TEEN_SHIFT)) & ECSPI_INTREG_TEEN_MASK)
#define ECSPI_INTREG_TDREN_MASK                  (0x2U)
#define ECSPI_INTREG_TDREN_SHIFT                 (1U)
#define ECSPI_INTREG_TDREN(x)                    (((uint32_t)(((uint32_t)(x)) << ECSPI_INTREG_TDREN_SHIFT)) & ECSPI_INTREG_TDREN_MASK)
#define ECSPI_INTREG_TFEN_MASK                   (0x4U)
#define ECSPI_INTREG_TFEN_SHIFT                  (2U)
#define ECSPI_INTREG_TFEN(x)                     (((uint32_t)(((uint32_t)(x)) << ECSPI_INTREG_TFEN_SHIFT)) & ECSPI_INTREG_TFEN_MASK)
#define ECSPI_INTREG_RREN_MASK                   (0x8U)
#define ECSPI_INTREG_RREN_SHIFT                  (3U)
#define ECSPI_INTREG_RREN(x)                     (((uint32_t)(((uint32_t)(x)) << ECSPI_INTREG_RREN_SHIFT)) & ECSPI_INTREG_RREN_MASK)
#define ECSPI_INTREG_RDREN_MASK                  (0x10U)
#define ECSPI_INTREG_RDREN_SHIFT                 (4U)
#define ECSPI_INTREG_RDREN(x)                    (((uint32_t)(((uint32_t)(x)) << ECSPI_INTREG_RDREN_SHIFT)) & ECSPI_INTREG_RDREN_MASK)
#define ECSPI_INTREG_RFEN_MASK                   (0x20U)
#define ECSPI_INTREG_RFEN_SHIFT                  (5U)
#define ECSPI_INTREG_RFEN(x)                     (((uint32_t)(((uint32_t)(x)) << ECSPI_INTREG_RFEN_SHIFT)) & ECSPI_INTREG_RFEN_MASK)
#define ECSPI_INTREG_ROEN_MASK                   (0x40U)
#define ECSPI_INTREG_ROEN_SHIFT                  (6U)
#define ECSPI_INTREG_ROEN(x)                     (((uint32_t)(((uint32_t)(x)) << ECSPI_INTREG_ROEN_SHIFT)) & ECSPI_INTREG_ROEN_MASK)
#define ECSPI_INTREG_TCEN_MASK                   (0x80U)
#define ECSPI_INTREG_TCEN_SHIFT                  (7U)
#define ECSPI_INTREG_TCEN(x)                     (((uint32_t)(((uint32_t)(x)) << ECSPI_INTREG_TCEN_SHIFT)) & ECSPI_INTREG_TCEN_MASK)

/*! @name DMAREG - DMA Control Register */
#define ECSPI_DMAREG_TX_THRESHOLD_MASK           (0x3FU)
#define ECSPI_DMAREG_TX_THRESHOLD_SHIFT          (0U)
#define ECSPI_DMAREG_TX_THRESHOLD(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_TX_THRESHOLD_SHIFT)) & ECSPI_DMAREG_TX_THRESHOLD_MASK)
#define ECSPI_DMAREG_TEDEN_MASK                  (0x80U)
#define ECSPI_DMAREG_TEDEN_SHIFT                 (7U)
#define ECSPI_DMAREG_TEDEN(x)                    (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_TEDEN_SHIFT)) & ECSPI_DMAREG_TEDEN_MASK)
#define ECSPI_DMAREG_RX_THRESHOLD_MASK           (0x3F0000U)
#define ECSPI_DMAREG_RX_THRESHOLD_SHIFT          (16U)
#define ECSPI_DMAREG_RX_THRESHOLD(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_RX_THRESHOLD_SHIFT)) & ECSPI_DMAREG_RX_THRESHOLD_MASK)
#define ECSPI_DMAREG_RXDEN_MASK                  (0x800000U)
#define ECSPI_DMAREG_RXDEN_SHIFT                 (23U)
#define ECSPI_DMAREG_RXDEN(x)                    (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_RXDEN_SHIFT)) & ECSPI_DMAREG_RXDEN_MASK)
#define ECSPI_DMAREG_RX_DMA_LENGTH_MASK          (0x3F000000U)
#define ECSPI_DMAREG_RX_DMA_LENGTH_SHIFT         (24U)
#define ECSPI_DMAREG_RX_DMA_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_RX_DMA_LENGTH_SHIFT)) & ECSPI_DMAREG_RX_DMA_LENGTH_MASK)
#define ECSPI_DMAREG_RXTDEN_MASK                 (0x80000000U)
#define ECSPI_DMAREG_RXTDEN_SHIFT                (31U)
#define ECSPI_DMAREG_RXTDEN(x)                   (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_RXTDEN_SHIFT)) & ECSPI_DMAREG_RXTDEN_MASK)

/*! @name STATREG - Status Register */
#define ECSPI_STATREG_TE_MASK                    (0x1U)
#define ECSPI_STATREG_TE_SHIFT                   (0U)
#define ECSPI_STATREG_TE(x)                      (((uint32_t)(((uint32_t)(x)) << ECSPI_STATREG_TE_SHIFT)) & ECSPI_STATREG_TE_MASK)
#define ECSPI_STATREG_TDR_MASK                   (0x2U)
#define ECSPI_STATREG_TDR_SHIFT                  (1U)
#define ECSPI_STATREG_TDR(x)                     (((uint32_t)(((uint32_t)(x)) << ECSPI_STATREG_TDR_SHIFT)) & ECSPI_STATREG_TDR_MASK)
#define ECSPI_STATREG_TF_MASK                    (0x4U)
#define ECSPI_STATREG_TF_SHIFT                   (2U)
#define ECSPI_STATREG_TF(x)                      (((uint32_t)(((uint32_t)(x)) << ECSPI_STATREG_TF_SHIFT)) & ECSPI_STATREG_TF_MASK)
#define ECSPI_STATREG_RR_MASK                    (0x8U)
#define ECSPI_STATREG_RR_SHIFT                   (3U)
#define ECSPI_STATREG_RR(x)                      (((uint32_t)(((uint32_t)(x)) << ECSPI_STATREG_RR_SHIFT)) & ECSPI_STATREG_RR_MASK)
#define ECSPI_STATREG_RDR_MASK                   (0x10U)
#define ECSPI_STATREG_RDR_SHIFT                  (4U)
#define ECSPI_STATREG_RDR(x)                     (((uint32_t)(((uint32_t)(x)) << ECSPI_STATREG_RDR_SHIFT)) & ECSPI_STATREG_RDR_MASK)
#define ECSPI_STATREG_RF_MASK                    (0x20U)
#define ECSPI_STATREG_RF_SHIFT                   (5U)
#define ECSPI_STATREG_RF(x)                      (((uint32_t)(((uint32_t)(x)) << ECSPI_STATREG_RF_SHIFT)) & ECSPI_STATREG_RF_MASK)
#define ECSPI_STATREG_RO_MASK                    (0x40U)
#define ECSPI_STATREG_RO_SHIFT                   (6U)
#define ECSPI_STATREG_RO(x)                      (((uint32_t)(((uint32_t)(x)) << ECSPI_STATREG_RO_SHIFT)) & ECSPI_STATREG_RO_MASK)
#define ECSPI_STATREG_TC_MASK                    (0x80U)
#define ECSPI_STATREG_TC_SHIFT                   (7U)
#define ECSPI_STATREG_TC(x)                      (((uint32_t)(((uint32_t)(x)) << ECSPI_STATREG_TC_SHIFT)) & ECSPI_STATREG_TC_MASK)

/*! @name PERIODREG - Sample Period Control Register */
#define ECSPI_PERIODREG_SAMPLE_PERIOD_MASK       (0x7FFFU)
#define ECSPI_PERIODREG_SAMPLE_PERIOD_SHIFT      (0U)
#define ECSPI_PERIODREG_SAMPLE_PERIOD(x)         (((uint32_t)(((uint32_t)(x)) << ECSPI_PERIODREG_SAMPLE_PERIOD_SHIFT)) & ECSPI_PERIODREG_SAMPLE_PERIOD_MASK)
#define ECSPI_PERIODREG_CSRC_MASK                (0x8000U)
#define ECSPI_PERIODREG_CSRC_SHIFT               (15U)
#define ECSPI_PERIODREG_CSRC(x)                  (((uint32_t)(((uint32_t)(x)) << ECSPI_PERIODREG_CSRC_SHIFT)) & ECSPI_PERIODREG_CSRC_MASK)
#define ECSPI_PERIODREG_CSD_CTL_MASK             (0x3F0000U)
#define ECSPI_PERIODREG_CSD_CTL_SHIFT            (16U)
#define ECSPI_PERIODREG_CSD_CTL(x)               (((uint32_t)(((uint32_t)(x)) << ECSPI_PERIODREG_CSD_CTL_SHIFT)) & ECSPI_PERIODREG_CSD_CTL_MASK)

/*! @name TESTREG - Test Control Register */
#define ECSPI_TESTREG_TXCNT_MASK                 (0x7FU)
#define ECSPI_TESTREG_TXCNT_SHIFT                (0U)
#define ECSPI_TESTREG_TXCNT(x)                   (((uint32_t)(((uint32_t)(x)) << ECSPI_TESTREG_TXCNT_SHIFT)) & ECSPI_TESTREG_TXCNT_MASK)
#define ECSPI_TESTREG_RXCNT_MASK                 (0x7F00U)
#define ECSPI_TESTREG_RXCNT_SHIFT                (8U)
#define ECSPI_TESTREG_RXCNT(x)                   (((uint32_t)(((uint32_t)(x)) << ECSPI_TESTREG_RXCNT_SHIFT)) & ECSPI_TESTREG_RXCNT_MASK)
#define ECSPI_TESTREG_LBC_MASK                   (0x80000000U)
#define ECSPI_TESTREG_LBC_SHIFT                  (31U)
#define ECSPI_TESTREG_LBC(x)                     (((uint32_t)(((uint32_t)(x)) << ECSPI_TESTREG_LBC_SHIFT)) & ECSPI_TESTREG_LBC_MASK)

/*! @name MSGDATA - Message Data Register */
#define ECSPI_MSGDATA_ECSPI_MSGDATA_MASK         (0xFFFFFFFFU)
#define ECSPI_MSGDATA_ECSPI_MSGDATA_SHIFT        (0U)
#define ECSPI_MSGDATA_ECSPI_MSGDATA(x)           (((uint32_t)(((uint32_t)(x)) << ECSPI_MSGDATA_ECSPI_MSGDATA_SHIFT)) & ECSPI_MSGDATA_ECSPI_MSGDATA_MASK)


/*!
 * @}
 */ /* end of group ECSPI_Register_Masks */


/* ECSPI - Peripheral instance base addresses */
/** Peripheral ECSPI1 base address */
#define ECSPI1_BASE                              (0x30820000u)
/** Peripheral ECSPI1 base pointer */
#define ECSPI1                                   ((ECSPI_Type *)ECSPI1_BASE)
/** Peripheral ECSPI2 base address */
#define ECSPI2_BASE                              (0x30830000u)
/** Peripheral ECSPI2 base pointer */
#define ECSPI2                                   ((ECSPI_Type *)ECSPI2_BASE)
/** Peripheral ECSPI3 base address */
#define ECSPI3_BASE                              (0x30840000u)
/** Peripheral ECSPI3 base pointer */
#define ECSPI3                                   ((ECSPI_Type *)ECSPI3_BASE)
/** Array initializer of ECSPI peripheral base addresses */
#define ECSPI_BASE_ADDRS                         { 0u, ECSPI1_BASE, ECSPI2_BASE, ECSPI3_BASE }
/** Array initializer of ECSPI peripheral base pointers */
#define ECSPI_BASE_PTRS                          { (ECSPI_Type *)0u, ECSPI1, ECSPI2, ECSPI3 }
/** Interrupt vectors for the ECSPI peripheral type */
#define ECSPI_IRQS                               { NotAvail_IRQn, ECSPI1_IRQn, ECSPI2_IRQn, ECSPI3_IRQn }

/*!
 * @}
 */ /* end of group ECSPI_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- ENET Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Peripheral_Access_Layer ENET Peripheral Access Layer
 * @{
 */

/** ENET - Register Layout Typedef */
typedef struct {
       uint8_t RESERVED_0[4];
  __IO uint32_t EIR;                               /**< Interrupt Event Register, offset: 0x4 */
  __IO uint32_t EIMR;                              /**< Interrupt Mask Register, offset: 0x8 */
       uint8_t RESERVED_1[4];
  __IO uint32_t RDAR;                              /**< Receive Descriptor Active Register - Ring 0, offset: 0x10 */
  __IO uint32_t TDAR;                              /**< Transmit Descriptor Active Register - Ring 0, offset: 0x14 */
       uint8_t RESERVED_2[12];
  __IO uint32_t ECR;                               /**< Ethernet Control Register, offset: 0x24 */
       uint8_t RESERVED_3[24];
  __IO uint32_t MMFR;                              /**< MII Management Frame Register, offset: 0x40 */
  __IO uint32_t MSCR;                              /**< MII Speed Control Register, offset: 0x44 */
       uint8_t RESERVED_4[28];
  __IO uint32_t MIBC;                              /**< MIB Control Register, offset: 0x64 */
       uint8_t RESERVED_5[28];
  __IO uint32_t RCR;                               /**< Receive Control Register, offset: 0x84 */
       uint8_t RESERVED_6[60];
  __IO uint32_t TCR;                               /**< Transmit Control Register, offset: 0xC4 */
       uint8_t RESERVED_7[28];
  __IO uint32_t PALR;                              /**< Physical Address Lower Register, offset: 0xE4 */
  __IO uint32_t PAUR;                              /**< Physical Address Upper Register, offset: 0xE8 */
  __IO uint32_t OPD;                               /**< Opcode/Pause Duration Register, offset: 0xEC */
  __IO uint32_t TXIC[3];                           /**< Transmit Interrupt Coalescing Register, array offset: 0xF0, array step: 0x4 */
       uint8_t RESERVED_8[4];
  __IO uint32_t RXIC[3];                           /**< Receive Interrupt Coalescing Register, array offset: 0x100, array step: 0x4 */
       uint8_t RESERVED_9[12];
  __IO uint32_t IAUR;                              /**< Descriptor Individual Upper Address Register, offset: 0x118 */
  __IO uint32_t IALR;                              /**< Descriptor Individual Lower Address Register, offset: 0x11C */
  __IO uint32_t GAUR;                              /**< Descriptor Group Upper Address Register, offset: 0x120 */
  __IO uint32_t GALR;                              /**< Descriptor Group Lower Address Register, offset: 0x124 */
       uint8_t RESERVED_10[28];
  __IO uint32_t TFWR;                              /**< Transmit FIFO Watermark Register, offset: 0x144 */
       uint8_t RESERVED_11[24];
  __IO uint32_t RDSR1;                             /**< Receive Descriptor Ring 1 Start Register, offset: 0x160 */
  __IO uint32_t TDSR1;                             /**< Transmit Buffer Descriptor Ring 1 Start Register, offset: 0x164 */
  __IO uint32_t MRBR1;                             /**< Maximum Receive Buffer Size Register - Ring 1, offset: 0x168 */
  __IO uint32_t RDSR2;                             /**< Receive Descriptor Ring 2 Start Register, offset: 0x16C */
  __IO uint32_t TDSR2;                             /**< Transmit Buffer Descriptor Ring 2 Start Register, offset: 0x170 */
  __IO uint32_t MRBR2;                             /**< Maximum Receive Buffer Size Register - Ring 2, offset: 0x174 */
       uint8_t RESERVED_12[8];
  __IO uint32_t RDSR;                              /**< Receive Descriptor Ring 0 Start Register, offset: 0x180 */
  __IO uint32_t TDSR;                              /**< Transmit Buffer Descriptor Ring 0 Start Register, offset: 0x184 */
  __IO uint32_t MRBR;                              /**< Maximum Receive Buffer Size Register - Ring 0, offset: 0x188 */
       uint8_t RESERVED_13[4];
  __IO uint32_t RSFL;                              /**< Receive FIFO Section Full Threshold, offset: 0x190 */
  __IO uint32_t RSEM;                              /**< Receive FIFO Section Empty Threshold, offset: 0x194 */
  __IO uint32_t RAEM;                              /**< Receive FIFO Almost Empty Threshold, offset: 0x198 */
  __IO uint32_t RAFL;                              /**< Receive FIFO Almost Full Threshold, offset: 0x19C */
  __IO uint32_t TSEM;                              /**< Transmit FIFO Section Empty Threshold, offset: 0x1A0 */
  __IO uint32_t TAEM;                              /**< Transmit FIFO Almost Empty Threshold, offset: 0x1A4 */
  __IO uint32_t TAFL;                              /**< Transmit FIFO Almost Full Threshold, offset: 0x1A8 */
  __IO uint32_t TIPG;                              /**< Transmit Inter-Packet Gap, offset: 0x1AC */
  __IO uint32_t FTRL;                              /**< Frame Truncation Length, offset: 0x1B0 */
       uint8_t RESERVED_14[12];
  __IO uint32_t TACC;                              /**< Transmit Accelerator Function Configuration, offset: 0x1C0 */
  __IO uint32_t RACC;                              /**< Receive Accelerator Function Configuration, offset: 0x1C4 */
  __IO uint32_t RCMR[2];                           /**< Receive Classification Match Register for Class n, array offset: 0x1C8, array step: 0x4 */
       uint8_t RESERVED_15[8];
  __IO uint32_t DMACFG[2];                         /**< DMA Class Based Configuration, array offset: 0x1D8, array step: 0x4 */
  __IO uint32_t RDAR1;                             /**< Receive Descriptor Active Register - Ring 1, offset: 0x1E0 */
  __IO uint32_t TDAR1;                             /**< Transmit Descriptor Active Register - Ring 1, offset: 0x1E4 */
  __IO uint32_t RDAR2;                             /**< Receive Descriptor Active Register - Ring 2, offset: 0x1E8 */
  __IO uint32_t TDAR2;                             /**< Transmit Descriptor Active Register - Ring 2, offset: 0x1EC */
  __IO uint32_t QOS;                               /**< QOS Scheme, offset: 0x1F0 */
       uint8_t RESERVED_16[12];
       uint32_t RMON_T_DROP;                       /**< Reserved Statistic Register, offset: 0x200 */
  __I  uint32_t RMON_T_PACKETS;                    /**< Tx Packet Count Statistic Register, offset: 0x204 */
  __I  uint32_t RMON_T_BC_PKT;                     /**< Tx Broadcast Packets Statistic Register, offset: 0x208 */
  __I  uint32_t RMON_T_MC_PKT;                     /**< Tx Multicast Packets Statistic Register, offset: 0x20C */
  __I  uint32_t RMON_T_CRC_ALIGN;                  /**< Tx Packets with CRC/Align Error Statistic Register, offset: 0x210 */
  __I  uint32_t RMON_T_UNDERSIZE;                  /**< Tx Packets Less Than Bytes and Good CRC Statistic Register, offset: 0x214 */
  __I  uint32_t RMON_T_OVERSIZE;                   /**< Tx Packets GT MAX_FL bytes and Good CRC Statistic Register, offset: 0x218 */
  __I  uint32_t RMON_T_FRAG;                       /**< Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register, offset: 0x21C */
  __I  uint32_t RMON_T_JAB;                        /**< Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register, offset: 0x220 */
  __I  uint32_t RMON_T_COL;                        /**< Tx Collision Count Statistic Register, offset: 0x224 */
  __I  uint32_t RMON_T_P64;                        /**< Tx 64-Byte Packets Statistic Register, offset: 0x228 */
  __I  uint32_t RMON_T_P65TO127;                   /**< Tx 65- to 127-byte Packets Statistic Register, offset: 0x22C */
  __I  uint32_t RMON_T_P128TO255;                  /**< Tx 128- to 255-byte Packets Statistic Register, offset: 0x230 */
  __I  uint32_t RMON_T_P256TO511;                  /**< Tx 256- to 511-byte Packets Statistic Register, offset: 0x234 */
  __I  uint32_t RMON_T_P512TO1023;                 /**< Tx 512- to 1023-byte Packets Statistic Register, offset: 0x238 */
  __I  uint32_t RMON_T_P1024TO2047;                /**< Tx 1024- to 2047-byte Packets Statistic Register, offset: 0x23C */
  __I  uint32_t RMON_T_P_GTE2048;                  /**< Tx Packets Greater Than 2048 Bytes Statistic Register, offset: 0x240 */
  __I  uint32_t RMON_T_OCTETS;                     /**< Tx Octets Statistic Register, offset: 0x244 */
       uint32_t IEEE_T_DROP;                       /**< Reserved Statistic Register, offset: 0x248 */
  __I  uint32_t IEEE_T_FRAME_OK;                   /**< Frames Transmitted OK Statistic Register, offset: 0x24C */
  __I  uint32_t IEEE_T_1COL;                       /**< Frames Transmitted with Single Collision Statistic Register, offset: 0x250 */
  __I  uint32_t IEEE_T_MCOL;                       /**< Frames Transmitted with Multiple Collisions Statistic Register, offset: 0x254 */
  __I  uint32_t IEEE_T_DEF;                        /**< Frames Transmitted after Deferral Delay Statistic Register, offset: 0x258 */
  __I  uint32_t IEEE_T_LCOL;                       /**< Frames Transmitted with Late Collision Statistic Register, offset: 0x25C */
  __I  uint32_t IEEE_T_EXCOL;                      /**< Frames Transmitted with Excessive Collisions Statistic Register, offset: 0x260 */
  __I  uint32_t IEEE_T_MACERR;                     /**< Frames Transmitted with Tx FIFO Underrun Statistic Register, offset: 0x264 */
  __I  uint32_t IEEE_T_CSERR;                      /**< Frames Transmitted with Carrier Sense Error Statistic Register, offset: 0x268 */
  __I  uint32_t IEEE_T_SQE;                        /**< Reserved Statistic Register, offset: 0x26C */
  __I  uint32_t IEEE_T_FDXFC;                      /**< Flow Control Pause Frames Transmitted Statistic Register, offset: 0x270 */
  __I  uint32_t IEEE_T_OCTETS_OK;                  /**< Octet Count for Frames Transmitted w/o Error Statistic Register, offset: 0x274 */
       uint8_t RESERVED_17[12];
  __I  uint32_t RMON_R_PACKETS;                    /**< Rx Packet Count Statistic Register, offset: 0x284 */
  __I  uint32_t RMON_R_BC_PKT;                     /**< Rx Broadcast Packets Statistic Register, offset: 0x288 */
  __I  uint32_t RMON_R_MC_PKT;                     /**< Rx Multicast Packets Statistic Register, offset: 0x28C */
  __I  uint32_t RMON_R_CRC_ALIGN;                  /**< Rx Packets with CRC/Align Error Statistic Register, offset: 0x290 */
  __I  uint32_t RMON_R_UNDERSIZE;                  /**< Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register, offset: 0x294 */
  __I  uint32_t RMON_R_OVERSIZE;                   /**< Rx Packets Greater Than MAX_FL and Good CRC Statistic Register, offset: 0x298 */
  __I  uint32_t RMON_R_FRAG;                       /**< Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register, offset: 0x29C */
  __I  uint32_t RMON_R_JAB;                        /**< Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register, offset: 0x2A0 */
       uint32_t RMON_R_RESVD_0;                    /**< Reserved Statistic Register, offset: 0x2A4 */
  __I  uint32_t RMON_R_P64;                        /**< Rx 64-Byte Packets Statistic Register, offset: 0x2A8 */
  __I  uint32_t RMON_R_P65TO127;                   /**< Rx 65- to 127-Byte Packets Statistic Register, offset: 0x2AC */
  __I  uint32_t RMON_R_P128TO255;                  /**< Rx 128- to 255-Byte Packets Statistic Register, offset: 0x2B0 */
  __I  uint32_t RMON_R_P256TO511;                  /**< Rx 256- to 511-Byte Packets Statistic Register, offset: 0x2B4 */
  __I  uint32_t RMON_R_P512TO1023;                 /**< Rx 512- to 1023-Byte Packets Statistic Register, offset: 0x2B8 */
  __I  uint32_t RMON_R_P1024TO2047;                /**< Rx 1024- to 2047-Byte Packets Statistic Register, offset: 0x2BC */
  __I  uint32_t RMON_R_P_GTE2048;                  /**< Rx Packets Greater than 2048 Bytes Statistic Register, offset: 0x2C0 */
  __I  uint32_t RMON_R_OCTETS;                     /**< Rx Octets Statistic Register, offset: 0x2C4 */
  __I  uint32_t IEEE_R_DROP;                       /**< Frames not Counted Correctly Statistic Register, offset: 0x2C8 */
  __I  uint32_t IEEE_R_FRAME_OK;                   /**< Frames Received OK Statistic Register, offset: 0x2CC */
  __I  uint32_t IEEE_R_CRC;                        /**< Frames Received with CRC Error Statistic Register, offset: 0x2D0 */
  __I  uint32_t IEEE_R_ALIGN;                      /**< Frames Received with Alignment Error Statistic Register, offset: 0x2D4 */
  __I  uint32_t IEEE_R_MACERR;                     /**< Receive FIFO Overflow Count Statistic Register, offset: 0x2D8 */
  __I  uint32_t IEEE_R_FDXFC;                      /**< Flow Control Pause Frames Received Statistic Register, offset: 0x2DC */
  __I  uint32_t IEEE_R_OCTETS_OK;                  /**< Octet Count for Frames Received without Error Statistic Register, offset: 0x2E0 */
       uint8_t RESERVED_18[284];
  __IO uint32_t ATCR;                              /**< Adjustable Timer Control Register, offset: 0x400 */
  __IO uint32_t ATVR;                              /**< Timer Value Register, offset: 0x404 */
  __IO uint32_t ATOFF;                             /**< Timer Offset Register, offset: 0x408 */
  __IO uint32_t ATPER;                             /**< Timer Period Register, offset: 0x40C */
  __IO uint32_t ATCOR;                             /**< Timer Correction Register, offset: 0x410 */
  __IO uint32_t ATINC;                             /**< Time-Stamping Clock Period Register, offset: 0x414 */
  __I  uint32_t ATSTMP;                            /**< Timestamp of Last Transmitted Frame, offset: 0x418 */
       uint8_t RESERVED_19[488];
  __IO uint32_t TGSR;                              /**< Timer Global Status Register, offset: 0x604 */
  struct {                                         /* offset: 0x608, array step: 0x8 */
    __IO uint32_t TCSR;                              /**< Timer Control Status Register, array offset: 0x608, array step: 0x8 */
    __IO uint32_t TCCR;                              /**< Timer Compare Capture Register, array offset: 0x60C, array step: 0x8 */
  } CHANNEL[4];
} ENET_Type;

/* ----------------------------------------------------------------------------
   -- ENET Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Register_Masks ENET Register Masks
 * @{
 */

/*! @name EIR - Interrupt Event Register */
#define ENET_EIR_RXB1_MASK                       (0x1U)
#define ENET_EIR_RXB1_SHIFT                      (0U)
#define ENET_EIR_RXB1(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIR_RXB1_SHIFT)) & ENET_EIR_RXB1_MASK)
#define ENET_EIR_RXF1_MASK                       (0x2U)
#define ENET_EIR_RXF1_SHIFT                      (1U)
#define ENET_EIR_RXF1(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIR_RXF1_SHIFT)) & ENET_EIR_RXF1_MASK)
#define ENET_EIR_TXB1_MASK                       (0x4U)
#define ENET_EIR_TXB1_SHIFT                      (2U)
#define ENET_EIR_TXB1(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIR_TXB1_SHIFT)) & ENET_EIR_TXB1_MASK)
#define ENET_EIR_TXF1_MASK                       (0x8U)
#define ENET_EIR_TXF1_SHIFT                      (3U)
#define ENET_EIR_TXF1(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIR_TXF1_SHIFT)) & ENET_EIR_TXF1_MASK)
#define ENET_EIR_RXB2_MASK                       (0x10U)
#define ENET_EIR_RXB2_SHIFT                      (4U)
#define ENET_EIR_RXB2(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIR_RXB2_SHIFT)) & ENET_EIR_RXB2_MASK)
#define ENET_EIR_RXF2_MASK                       (0x20U)
#define ENET_EIR_RXF2_SHIFT                      (5U)
#define ENET_EIR_RXF2(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIR_RXF2_SHIFT)) & ENET_EIR_RXF2_MASK)
#define ENET_EIR_TXB2_MASK                       (0x40U)
#define ENET_EIR_TXB2_SHIFT                      (6U)
#define ENET_EIR_TXB2(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIR_TXB2_SHIFT)) & ENET_EIR_TXB2_MASK)
#define ENET_EIR_TXF2_MASK                       (0x80U)
#define ENET_EIR_TXF2_SHIFT                      (7U)
#define ENET_EIR_TXF2(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIR_TXF2_SHIFT)) & ENET_EIR_TXF2_MASK)
#define ENET_EIR_RXFLUSH_0_MASK                  (0x1000U)
#define ENET_EIR_RXFLUSH_0_SHIFT                 (12U)
#define ENET_EIR_RXFLUSH_0(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_EIR_RXFLUSH_0_SHIFT)) & ENET_EIR_RXFLUSH_0_MASK)
#define ENET_EIR_RXFLUSH_1_MASK                  (0x2000U)
#define ENET_EIR_RXFLUSH_1_SHIFT                 (13U)
#define ENET_EIR_RXFLUSH_1(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_EIR_RXFLUSH_1_SHIFT)) & ENET_EIR_RXFLUSH_1_MASK)
#define ENET_EIR_RXFLUSH_2_MASK                  (0x4000U)
#define ENET_EIR_RXFLUSH_2_SHIFT                 (14U)
#define ENET_EIR_RXFLUSH_2(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_EIR_RXFLUSH_2_SHIFT)) & ENET_EIR_RXFLUSH_2_MASK)
#define ENET_EIR_TS_TIMER_MASK                   (0x8000U)
#define ENET_EIR_TS_TIMER_SHIFT                  (15U)
#define ENET_EIR_TS_TIMER(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_EIR_TS_TIMER_SHIFT)) & ENET_EIR_TS_TIMER_MASK)
#define ENET_EIR_TS_AVAIL_MASK                   (0x10000U)
#define ENET_EIR_TS_AVAIL_SHIFT                  (16U)
#define ENET_EIR_TS_AVAIL(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_EIR_TS_AVAIL_SHIFT)) & ENET_EIR_TS_AVAIL_MASK)
#define ENET_EIR_WAKEUP_MASK                     (0x20000U)
#define ENET_EIR_WAKEUP_SHIFT                    (17U)
#define ENET_EIR_WAKEUP(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_EIR_WAKEUP_SHIFT)) & ENET_EIR_WAKEUP_MASK)
#define ENET_EIR_PLR_MASK                        (0x40000U)
#define ENET_EIR_PLR_SHIFT                       (18U)
#define ENET_EIR_PLR(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_EIR_PLR_SHIFT)) & ENET_EIR_PLR_MASK)
#define ENET_EIR_UN_MASK                         (0x80000U)
#define ENET_EIR_UN_SHIFT                        (19U)
#define ENET_EIR_UN(x)                           (((uint32_t)(((uint32_t)(x)) << ENET_EIR_UN_SHIFT)) & ENET_EIR_UN_MASK)
#define ENET_EIR_RL_MASK                         (0x100000U)
#define ENET_EIR_RL_SHIFT                        (20U)
#define ENET_EIR_RL(x)                           (((uint32_t)(((uint32_t)(x)) << ENET_EIR_RL_SHIFT)) & ENET_EIR_RL_MASK)
#define ENET_EIR_LC_MASK                         (0x200000U)
#define ENET_EIR_LC_SHIFT                        (21U)
#define ENET_EIR_LC(x)                           (((uint32_t)(((uint32_t)(x)) << ENET_EIR_LC_SHIFT)) & ENET_EIR_LC_MASK)
#define ENET_EIR_EBERR_MASK                      (0x400000U)
#define ENET_EIR_EBERR_SHIFT                     (22U)
#define ENET_EIR_EBERR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIR_EBERR_SHIFT)) & ENET_EIR_EBERR_MASK)
#define ENET_EIR_MII_MASK                        (0x800000U)
#define ENET_EIR_MII_SHIFT                       (23U)
#define ENET_EIR_MII(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_EIR_MII_SHIFT)) & ENET_EIR_MII_MASK)
#define ENET_EIR_RXB_MASK                        (0x1000000U)
#define ENET_EIR_RXB_SHIFT                       (24U)
#define ENET_EIR_RXB(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_EIR_RXB_SHIFT)) & ENET_EIR_RXB_MASK)
#define ENET_EIR_RXF_MASK                        (0x2000000U)
#define ENET_EIR_RXF_SHIFT                       (25U)
#define ENET_EIR_RXF(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_EIR_RXF_SHIFT)) & ENET_EIR_RXF_MASK)
#define ENET_EIR_TXB_MASK                        (0x4000000U)
#define ENET_EIR_TXB_SHIFT                       (26U)
#define ENET_EIR_TXB(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_EIR_TXB_SHIFT)) & ENET_EIR_TXB_MASK)
#define ENET_EIR_TXF_MASK                        (0x8000000U)
#define ENET_EIR_TXF_SHIFT                       (27U)
#define ENET_EIR_TXF(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_EIR_TXF_SHIFT)) & ENET_EIR_TXF_MASK)
#define ENET_EIR_GRA_MASK                        (0x10000000U)
#define ENET_EIR_GRA_SHIFT                       (28U)
#define ENET_EIR_GRA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_EIR_GRA_SHIFT)) & ENET_EIR_GRA_MASK)
#define ENET_EIR_BABT_MASK                       (0x20000000U)
#define ENET_EIR_BABT_SHIFT                      (29U)
#define ENET_EIR_BABT(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIR_BABT_SHIFT)) & ENET_EIR_BABT_MASK)
#define ENET_EIR_BABR_MASK                       (0x40000000U)
#define ENET_EIR_BABR_SHIFT                      (30U)
#define ENET_EIR_BABR(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIR_BABR_SHIFT)) & ENET_EIR_BABR_MASK)

/*! @name EIMR - Interrupt Mask Register */
#define ENET_EIMR_RXB1_MASK                      (0x1U)
#define ENET_EIMR_RXB1_SHIFT                     (0U)
#define ENET_EIMR_RXB1(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_RXB1_SHIFT)) & ENET_EIMR_RXB1_MASK)
#define ENET_EIMR_RXF1_MASK                      (0x2U)
#define ENET_EIMR_RXF1_SHIFT                     (1U)
#define ENET_EIMR_RXF1(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_RXF1_SHIFT)) & ENET_EIMR_RXF1_MASK)
#define ENET_EIMR_TXB1_MASK                      (0x4U)
#define ENET_EIMR_TXB1_SHIFT                     (2U)
#define ENET_EIMR_TXB1(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_TXB1_SHIFT)) & ENET_EIMR_TXB1_MASK)
#define ENET_EIMR_TXF1_MASK                      (0x8U)
#define ENET_EIMR_TXF1_SHIFT                     (3U)
#define ENET_EIMR_TXF1(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_TXF1_SHIFT)) & ENET_EIMR_TXF1_MASK)
#define ENET_EIMR_RXB2_MASK                      (0x10U)
#define ENET_EIMR_RXB2_SHIFT                     (4U)
#define ENET_EIMR_RXB2(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_RXB2_SHIFT)) & ENET_EIMR_RXB2_MASK)
#define ENET_EIMR_RXF2_MASK                      (0x20U)
#define ENET_EIMR_RXF2_SHIFT                     (5U)
#define ENET_EIMR_RXF2(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_RXF2_SHIFT)) & ENET_EIMR_RXF2_MASK)
#define ENET_EIMR_TXB2_MASK                      (0x40U)
#define ENET_EIMR_TXB2_SHIFT                     (6U)
#define ENET_EIMR_TXB2(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_TXB2_SHIFT)) & ENET_EIMR_TXB2_MASK)
#define ENET_EIMR_TXF2_MASK                      (0x80U)
#define ENET_EIMR_TXF2_SHIFT                     (7U)
#define ENET_EIMR_TXF2(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_TXF2_SHIFT)) & ENET_EIMR_TXF2_MASK)
#define ENET_EIMR_RXFLUSH_0_MASK                 (0x1000U)
#define ENET_EIMR_RXFLUSH_0_SHIFT                (12U)
#define ENET_EIMR_RXFLUSH_0(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_RXFLUSH_0_SHIFT)) & ENET_EIMR_RXFLUSH_0_MASK)
#define ENET_EIMR_RXFLUSH_1_MASK                 (0x2000U)
#define ENET_EIMR_RXFLUSH_1_SHIFT                (13U)
#define ENET_EIMR_RXFLUSH_1(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_RXFLUSH_1_SHIFT)) & ENET_EIMR_RXFLUSH_1_MASK)
#define ENET_EIMR_RXFLUSH_2_MASK                 (0x4000U)
#define ENET_EIMR_RXFLUSH_2_SHIFT                (14U)
#define ENET_EIMR_RXFLUSH_2(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_RXFLUSH_2_SHIFT)) & ENET_EIMR_RXFLUSH_2_MASK)
#define ENET_EIMR_TS_TIMER_MASK                  (0x8000U)
#define ENET_EIMR_TS_TIMER_SHIFT                 (15U)
#define ENET_EIMR_TS_TIMER(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_TS_TIMER_SHIFT)) & ENET_EIMR_TS_TIMER_MASK)
#define ENET_EIMR_TS_AVAIL_MASK                  (0x10000U)
#define ENET_EIMR_TS_AVAIL_SHIFT                 (16U)
#define ENET_EIMR_TS_AVAIL(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_TS_AVAIL_SHIFT)) & ENET_EIMR_TS_AVAIL_MASK)
#define ENET_EIMR_WAKEUP_MASK                    (0x20000U)
#define ENET_EIMR_WAKEUP_SHIFT                   (17U)
#define ENET_EIMR_WAKEUP(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_WAKEUP_SHIFT)) & ENET_EIMR_WAKEUP_MASK)
#define ENET_EIMR_PLR_MASK                       (0x40000U)
#define ENET_EIMR_PLR_SHIFT                      (18U)
#define ENET_EIMR_PLR(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_PLR_SHIFT)) & ENET_EIMR_PLR_MASK)
#define ENET_EIMR_UN_MASK                        (0x80000U)
#define ENET_EIMR_UN_SHIFT                       (19U)
#define ENET_EIMR_UN(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_UN_SHIFT)) & ENET_EIMR_UN_MASK)
#define ENET_EIMR_RL_MASK                        (0x100000U)
#define ENET_EIMR_RL_SHIFT                       (20U)
#define ENET_EIMR_RL(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_RL_SHIFT)) & ENET_EIMR_RL_MASK)
#define ENET_EIMR_LC_MASK                        (0x200000U)
#define ENET_EIMR_LC_SHIFT                       (21U)
#define ENET_EIMR_LC(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_LC_SHIFT)) & ENET_EIMR_LC_MASK)
#define ENET_EIMR_EBERR_MASK                     (0x400000U)
#define ENET_EIMR_EBERR_SHIFT                    (22U)
#define ENET_EIMR_EBERR(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_EBERR_SHIFT)) & ENET_EIMR_EBERR_MASK)
#define ENET_EIMR_MII_MASK                       (0x800000U)
#define ENET_EIMR_MII_SHIFT                      (23U)
#define ENET_EIMR_MII(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_MII_SHIFT)) & ENET_EIMR_MII_MASK)
#define ENET_EIMR_RXB_MASK                       (0x1000000U)
#define ENET_EIMR_RXB_SHIFT                      (24U)
#define ENET_EIMR_RXB(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_RXB_SHIFT)) & ENET_EIMR_RXB_MASK)
#define ENET_EIMR_RXF_MASK                       (0x2000000U)
#define ENET_EIMR_RXF_SHIFT                      (25U)
#define ENET_EIMR_RXF(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_RXF_SHIFT)) & ENET_EIMR_RXF_MASK)
#define ENET_EIMR_TXB_MASK                       (0x4000000U)
#define ENET_EIMR_TXB_SHIFT                      (26U)
#define ENET_EIMR_TXB(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_TXB_SHIFT)) & ENET_EIMR_TXB_MASK)
#define ENET_EIMR_TXF_MASK                       (0x8000000U)
#define ENET_EIMR_TXF_SHIFT                      (27U)
#define ENET_EIMR_TXF(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_TXF_SHIFT)) & ENET_EIMR_TXF_MASK)
#define ENET_EIMR_GRA_MASK                       (0x10000000U)
#define ENET_EIMR_GRA_SHIFT                      (28U)
#define ENET_EIMR_GRA(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_GRA_SHIFT)) & ENET_EIMR_GRA_MASK)
#define ENET_EIMR_BABT_MASK                      (0x20000000U)
#define ENET_EIMR_BABT_SHIFT                     (29U)
#define ENET_EIMR_BABT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_BABT_SHIFT)) & ENET_EIMR_BABT_MASK)
#define ENET_EIMR_BABR_MASK                      (0x40000000U)
#define ENET_EIMR_BABR_SHIFT                     (30U)
#define ENET_EIMR_BABR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_EIMR_BABR_SHIFT)) & ENET_EIMR_BABR_MASK)

/*! @name RDAR - Receive Descriptor Active Register - Ring 0 */
#define ENET_RDAR_RDAR_MASK                      (0x1000000U)
#define ENET_RDAR_RDAR_SHIFT                     (24U)
#define ENET_RDAR_RDAR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RDAR_RDAR_SHIFT)) & ENET_RDAR_RDAR_MASK)

/*! @name TDAR - Transmit Descriptor Active Register - Ring 0 */
#define ENET_TDAR_TDAR_MASK                      (0x1000000U)
#define ENET_TDAR_TDAR_SHIFT                     (24U)
#define ENET_TDAR_TDAR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TDAR_TDAR_SHIFT)) & ENET_TDAR_TDAR_MASK)

/*! @name ECR - Ethernet Control Register */
#define ENET_ECR_RESET_MASK                      (0x1U)
#define ENET_ECR_RESET_SHIFT                     (0U)
#define ENET_ECR_RESET(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ECR_RESET_SHIFT)) & ENET_ECR_RESET_MASK)
#define ENET_ECR_ETHEREN_MASK                    (0x2U)
#define ENET_ECR_ETHEREN_SHIFT                   (1U)
#define ENET_ECR_ETHEREN(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_ECR_ETHEREN_SHIFT)) & ENET_ECR_ETHEREN_MASK)
#define ENET_ECR_MAGICEN_MASK                    (0x4U)
#define ENET_ECR_MAGICEN_SHIFT                   (2U)
#define ENET_ECR_MAGICEN(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_ECR_MAGICEN_SHIFT)) & ENET_ECR_MAGICEN_MASK)
#define ENET_ECR_SLEEP_MASK                      (0x8U)
#define ENET_ECR_SLEEP_SHIFT                     (3U)
#define ENET_ECR_SLEEP(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ECR_SLEEP_SHIFT)) & ENET_ECR_SLEEP_MASK)
#define ENET_ECR_EN1588_MASK                     (0x10U)
#define ENET_ECR_EN1588_SHIFT                    (4U)
#define ENET_ECR_EN1588(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_ECR_EN1588_SHIFT)) & ENET_ECR_EN1588_MASK)
#define ENET_ECR_SPEED_MASK                      (0x20U)
#define ENET_ECR_SPEED_SHIFT                     (5U)
#define ENET_ECR_SPEED(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ECR_SPEED_SHIFT)) & ENET_ECR_SPEED_MASK)
#define ENET_ECR_DBGEN_MASK                      (0x40U)
#define ENET_ECR_DBGEN_SHIFT                     (6U)
#define ENET_ECR_DBGEN(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ECR_DBGEN_SHIFT)) & ENET_ECR_DBGEN_MASK)
#define ENET_ECR_DBSWP_MASK                      (0x100U)
#define ENET_ECR_DBSWP_SHIFT                     (8U)
#define ENET_ECR_DBSWP(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ECR_DBSWP_SHIFT)) & ENET_ECR_DBSWP_MASK)
#define ENET_ECR_SVLANEN_MASK                    (0x200U)
#define ENET_ECR_SVLANEN_SHIFT                   (9U)
#define ENET_ECR_SVLANEN(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_ECR_SVLANEN_SHIFT)) & ENET_ECR_SVLANEN_MASK)
#define ENET_ECR_VLANUSE2ND_MASK                 (0x400U)
#define ENET_ECR_VLANUSE2ND_SHIFT                (10U)
#define ENET_ECR_VLANUSE2ND(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_ECR_VLANUSE2ND_SHIFT)) & ENET_ECR_VLANUSE2ND_MASK)
#define ENET_ECR_SVLANDBL_MASK                   (0x800U)
#define ENET_ECR_SVLANDBL_SHIFT                  (11U)
#define ENET_ECR_SVLANDBL(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ECR_SVLANDBL_SHIFT)) & ENET_ECR_SVLANDBL_MASK)

/*! @name MMFR - MII Management Frame Register */
#define ENET_MMFR_DATA_MASK                      (0xFFFFU)
#define ENET_MMFR_DATA_SHIFT                     (0U)
#define ENET_MMFR_DATA(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_DATA_SHIFT)) & ENET_MMFR_DATA_MASK)
#define ENET_MMFR_TA_MASK                        (0x30000U)
#define ENET_MMFR_TA_SHIFT                       (16U)
#define ENET_MMFR_TA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_TA_SHIFT)) & ENET_MMFR_TA_MASK)
#define ENET_MMFR_RA_MASK                        (0x7C0000U)
#define ENET_MMFR_RA_SHIFT                       (18U)
#define ENET_MMFR_RA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_RA_SHIFT)) & ENET_MMFR_RA_MASK)
#define ENET_MMFR_PA_MASK                        (0xF800000U)
#define ENET_MMFR_PA_SHIFT                       (23U)
#define ENET_MMFR_PA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_PA_SHIFT)) & ENET_MMFR_PA_MASK)
#define ENET_MMFR_OP_MASK                        (0x30000000U)
#define ENET_MMFR_OP_SHIFT                       (28U)
#define ENET_MMFR_OP(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_OP_SHIFT)) & ENET_MMFR_OP_MASK)
#define ENET_MMFR_ST_MASK                        (0xC0000000U)
#define ENET_MMFR_ST_SHIFT                       (30U)
#define ENET_MMFR_ST(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_ST_SHIFT)) & ENET_MMFR_ST_MASK)

/*! @name MSCR - MII Speed Control Register */
#define ENET_MSCR_MII_SPEED_MASK                 (0x7EU)
#define ENET_MSCR_MII_SPEED_SHIFT                (1U)
#define ENET_MSCR_MII_SPEED(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MSCR_MII_SPEED_SHIFT)) & ENET_MSCR_MII_SPEED_MASK)
#define ENET_MSCR_DIS_PRE_MASK                   (0x80U)
#define ENET_MSCR_DIS_PRE_SHIFT                  (7U)
#define ENET_MSCR_DIS_PRE(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_MSCR_DIS_PRE_SHIFT)) & ENET_MSCR_DIS_PRE_MASK)
#define ENET_MSCR_HOLDTIME_MASK                  (0x700U)
#define ENET_MSCR_HOLDTIME_SHIFT                 (8U)
#define ENET_MSCR_HOLDTIME(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MSCR_HOLDTIME_SHIFT)) & ENET_MSCR_HOLDTIME_MASK)

/*! @name MIBC - MIB Control Register */
#define ENET_MIBC_MIB_CLEAR_MASK                 (0x20000000U)
#define ENET_MIBC_MIB_CLEAR_SHIFT                (29U)
#define ENET_MIBC_MIB_CLEAR(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MIBC_MIB_CLEAR_SHIFT)) & ENET_MIBC_MIB_CLEAR_MASK)
#define ENET_MIBC_MIB_IDLE_MASK                  (0x40000000U)
#define ENET_MIBC_MIB_IDLE_SHIFT                 (30U)
#define ENET_MIBC_MIB_IDLE(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MIBC_MIB_IDLE_SHIFT)) & ENET_MIBC_MIB_IDLE_MASK)
#define ENET_MIBC_MIB_DIS_MASK                   (0x80000000U)
#define ENET_MIBC_MIB_DIS_SHIFT                  (31U)
#define ENET_MIBC_MIB_DIS(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_MIBC_MIB_DIS_SHIFT)) & ENET_MIBC_MIB_DIS_MASK)

/*! @name RCR - Receive Control Register */
#define ENET_RCR_LOOP_MASK                       (0x1U)
#define ENET_RCR_LOOP_SHIFT                      (0U)
#define ENET_RCR_LOOP(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_RCR_LOOP_SHIFT)) & ENET_RCR_LOOP_MASK)
#define ENET_RCR_DRT_MASK                        (0x2U)
#define ENET_RCR_DRT_SHIFT                       (1U)
#define ENET_RCR_DRT(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_RCR_DRT_SHIFT)) & ENET_RCR_DRT_MASK)
#define ENET_RCR_MII_MODE_MASK                   (0x4U)
#define ENET_RCR_MII_MODE_SHIFT                  (2U)
#define ENET_RCR_MII_MODE(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_RCR_MII_MODE_SHIFT)) & ENET_RCR_MII_MODE_MASK)
#define ENET_RCR_PROM_MASK                       (0x8U)
#define ENET_RCR_PROM_SHIFT                      (3U)
#define ENET_RCR_PROM(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_RCR_PROM_SHIFT)) & ENET_RCR_PROM_MASK)
#define ENET_RCR_BC_REJ_MASK                     (0x10U)
#define ENET_RCR_BC_REJ_SHIFT                    (4U)
#define ENET_RCR_BC_REJ(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_RCR_BC_REJ_SHIFT)) & ENET_RCR_BC_REJ_MASK)
#define ENET_RCR_FCE_MASK                        (0x20U)
#define ENET_RCR_FCE_SHIFT                       (5U)
#define ENET_RCR_FCE(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_RCR_FCE_SHIFT)) & ENET_RCR_FCE_MASK)
#define ENET_RCR_RGMII_EN_MASK                   (0x40U)
#define ENET_RCR_RGMII_EN_SHIFT                  (6U)
#define ENET_RCR_RGMII_EN(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_RCR_RGMII_EN_SHIFT)) & ENET_RCR_RGMII_EN_MASK)
#define ENET_RCR_RMII_MODE_MASK                  (0x100U)
#define ENET_RCR_RMII_MODE_SHIFT                 (8U)
#define ENET_RCR_RMII_MODE(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_RCR_RMII_MODE_SHIFT)) & ENET_RCR_RMII_MODE_MASK)
#define ENET_RCR_RMII_10T_MASK                   (0x200U)
#define ENET_RCR_RMII_10T_SHIFT                  (9U)
#define ENET_RCR_RMII_10T(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_RCR_RMII_10T_SHIFT)) & ENET_RCR_RMII_10T_MASK)
#define ENET_RCR_PADEN_MASK                      (0x1000U)
#define ENET_RCR_PADEN_SHIFT                     (12U)
#define ENET_RCR_PADEN(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCR_PADEN_SHIFT)) & ENET_RCR_PADEN_MASK)
#define ENET_RCR_PAUFWD_MASK                     (0x2000U)
#define ENET_RCR_PAUFWD_SHIFT                    (13U)
#define ENET_RCR_PAUFWD(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_RCR_PAUFWD_SHIFT)) & ENET_RCR_PAUFWD_MASK)
#define ENET_RCR_CRCFWD_MASK                     (0x4000U)
#define ENET_RCR_CRCFWD_SHIFT                    (14U)
#define ENET_RCR_CRCFWD(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_RCR_CRCFWD_SHIFT)) & ENET_RCR_CRCFWD_MASK)
#define ENET_RCR_CFEN_MASK                       (0x8000U)
#define ENET_RCR_CFEN_SHIFT                      (15U)
#define ENET_RCR_CFEN(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_RCR_CFEN_SHIFT)) & ENET_RCR_CFEN_MASK)
#define ENET_RCR_MAX_FL_MASK                     (0x3FFF0000U)
#define ENET_RCR_MAX_FL_SHIFT                    (16U)
#define ENET_RCR_MAX_FL(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_RCR_MAX_FL_SHIFT)) & ENET_RCR_MAX_FL_MASK)
#define ENET_RCR_NLC_MASK                        (0x40000000U)
#define ENET_RCR_NLC_SHIFT                       (30U)
#define ENET_RCR_NLC(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_RCR_NLC_SHIFT)) & ENET_RCR_NLC_MASK)
#define ENET_RCR_GRS_MASK                        (0x80000000U)
#define ENET_RCR_GRS_SHIFT                       (31U)
#define ENET_RCR_GRS(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_RCR_GRS_SHIFT)) & ENET_RCR_GRS_MASK)

/*! @name TCR - Transmit Control Register */
#define ENET_TCR_GTS_MASK                        (0x1U)
#define ENET_TCR_GTS_SHIFT                       (0U)
#define ENET_TCR_GTS(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_TCR_GTS_SHIFT)) & ENET_TCR_GTS_MASK)
#define ENET_TCR_FDEN_MASK                       (0x4U)
#define ENET_TCR_FDEN_SHIFT                      (2U)
#define ENET_TCR_FDEN(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TCR_FDEN_SHIFT)) & ENET_TCR_FDEN_MASK)
#define ENET_TCR_TFC_PAUSE_MASK                  (0x8U)
#define ENET_TCR_TFC_PAUSE_SHIFT                 (3U)
#define ENET_TCR_TFC_PAUSE(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_TCR_TFC_PAUSE_SHIFT)) & ENET_TCR_TFC_PAUSE_MASK)
#define ENET_TCR_RFC_PAUSE_MASK                  (0x10U)
#define ENET_TCR_RFC_PAUSE_SHIFT                 (4U)
#define ENET_TCR_RFC_PAUSE(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_TCR_RFC_PAUSE_SHIFT)) & ENET_TCR_RFC_PAUSE_MASK)
#define ENET_TCR_ADDSEL_MASK                     (0xE0U)
#define ENET_TCR_ADDSEL_SHIFT                    (5U)
#define ENET_TCR_ADDSEL(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TCR_ADDSEL_SHIFT)) & ENET_TCR_ADDSEL_MASK)
#define ENET_TCR_ADDINS_MASK                     (0x100U)
#define ENET_TCR_ADDINS_SHIFT                    (8U)
#define ENET_TCR_ADDINS(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TCR_ADDINS_SHIFT)) & ENET_TCR_ADDINS_MASK)
#define ENET_TCR_CRCFWD_MASK                     (0x200U)
#define ENET_TCR_CRCFWD_SHIFT                    (9U)
#define ENET_TCR_CRCFWD(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TCR_CRCFWD_SHIFT)) & ENET_TCR_CRCFWD_MASK)

/*! @name PALR - Physical Address Lower Register */
#define ENET_PALR_PADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_PALR_PADDR1_SHIFT                   (0U)
#define ENET_PALR_PADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_PALR_PADDR1_SHIFT)) & ENET_PALR_PADDR1_MASK)

/*! @name PAUR - Physical Address Upper Register */
#define ENET_PAUR_TYPE_MASK                      (0xFFFFU)
#define ENET_PAUR_TYPE_SHIFT                     (0U)
#define ENET_PAUR_TYPE(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_PAUR_TYPE_SHIFT)) & ENET_PAUR_TYPE_MASK)
#define ENET_PAUR_PADDR2_MASK                    (0xFFFF0000U)
#define ENET_PAUR_PADDR2_SHIFT                   (16U)
#define ENET_PAUR_PADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_PAUR_PADDR2_SHIFT)) & ENET_PAUR_PADDR2_MASK)

/*! @name OPD - Opcode/Pause Duration Register */
#define ENET_OPD_PAUSE_DUR_MASK                  (0xFFFFU)
#define ENET_OPD_PAUSE_DUR_SHIFT                 (0U)
#define ENET_OPD_PAUSE_DUR(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_OPD_PAUSE_DUR_SHIFT)) & ENET_OPD_PAUSE_DUR_MASK)
#define ENET_OPD_OPCODE_MASK                     (0xFFFF0000U)
#define ENET_OPD_OPCODE_SHIFT                    (16U)
#define ENET_OPD_OPCODE(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_OPD_OPCODE_SHIFT)) & ENET_OPD_OPCODE_MASK)

/*! @name TXIC - Transmit Interrupt Coalescing Register */
#define ENET_TXIC_ICTT_MASK                      (0xFFFFU)
#define ENET_TXIC_ICTT_SHIFT                     (0U)
#define ENET_TXIC_ICTT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TXIC_ICTT_SHIFT)) & ENET_TXIC_ICTT_MASK)
#define ENET_TXIC_ICFT_MASK                      (0xFF00000U)
#define ENET_TXIC_ICFT_SHIFT                     (20U)
#define ENET_TXIC_ICFT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TXIC_ICFT_SHIFT)) & ENET_TXIC_ICFT_MASK)
#define ENET_TXIC_ICCS_MASK                      (0x40000000U)
#define ENET_TXIC_ICCS_SHIFT                     (30U)
#define ENET_TXIC_ICCS(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TXIC_ICCS_SHIFT)) & ENET_TXIC_ICCS_MASK)
#define ENET_TXIC_ICEN_MASK                      (0x80000000U)
#define ENET_TXIC_ICEN_SHIFT                     (31U)
#define ENET_TXIC_ICEN(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TXIC_ICEN_SHIFT)) & ENET_TXIC_ICEN_MASK)

/* The count of ENET_TXIC */
#define ENET_TXIC_COUNT                          (3U)

/*! @name RXIC - Receive Interrupt Coalescing Register */
#define ENET_RXIC_ICTT_MASK                      (0xFFFFU)
#define ENET_RXIC_ICTT_SHIFT                     (0U)
#define ENET_RXIC_ICTT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RXIC_ICTT_SHIFT)) & ENET_RXIC_ICTT_MASK)
#define ENET_RXIC_ICFT_MASK                      (0xFF00000U)
#define ENET_RXIC_ICFT_SHIFT                     (20U)
#define ENET_RXIC_ICFT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RXIC_ICFT_SHIFT)) & ENET_RXIC_ICFT_MASK)
#define ENET_RXIC_ICCS_MASK                      (0x40000000U)
#define ENET_RXIC_ICCS_SHIFT                     (30U)
#define ENET_RXIC_ICCS(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RXIC_ICCS_SHIFT)) & ENET_RXIC_ICCS_MASK)
#define ENET_RXIC_ICEN_MASK                      (0x80000000U)
#define ENET_RXIC_ICEN_SHIFT                     (31U)
#define ENET_RXIC_ICEN(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RXIC_ICEN_SHIFT)) & ENET_RXIC_ICEN_MASK)

/* The count of ENET_RXIC */
#define ENET_RXIC_COUNT                          (3U)

/*! @name IAUR - Descriptor Individual Upper Address Register */
#define ENET_IAUR_IADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_IAUR_IADDR1_SHIFT                   (0U)
#define ENET_IAUR_IADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_IAUR_IADDR1_SHIFT)) & ENET_IAUR_IADDR1_MASK)

/*! @name IALR - Descriptor Individual Lower Address Register */
#define ENET_IALR_IADDR2_MASK                    (0xFFFFFFFFU)
#define ENET_IALR_IADDR2_SHIFT                   (0U)
#define ENET_IALR_IADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_IALR_IADDR2_SHIFT)) & ENET_IALR_IADDR2_MASK)

/*! @name GAUR - Descriptor Group Upper Address Register */
#define ENET_GAUR_GADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_GAUR_GADDR1_SHIFT                   (0U)
#define ENET_GAUR_GADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_GAUR_GADDR1_SHIFT)) & ENET_GAUR_GADDR1_MASK)

/*! @name GALR - Descriptor Group Lower Address Register */
#define ENET_GALR_GADDR2_MASK                    (0xFFFFFFFFU)
#define ENET_GALR_GADDR2_SHIFT                   (0U)
#define ENET_GALR_GADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_GALR_GADDR2_SHIFT)) & ENET_GALR_GADDR2_MASK)

/*! @name TFWR - Transmit FIFO Watermark Register */
#define ENET_TFWR_TFWR_MASK                      (0x3FU)
#define ENET_TFWR_TFWR_SHIFT                     (0U)
#define ENET_TFWR_TFWR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TFWR_TFWR_SHIFT)) & ENET_TFWR_TFWR_MASK)
#define ENET_TFWR_STRFWD_MASK                    (0x100U)
#define ENET_TFWR_STRFWD_SHIFT                   (8U)
#define ENET_TFWR_STRFWD(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_TFWR_STRFWD_SHIFT)) & ENET_TFWR_STRFWD_MASK)

/*! @name RDSR1 - Receive Descriptor Ring 1 Start Register */
#define ENET_RDSR1_R_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_RDSR1_R_DES_START_SHIFT             (3U)
#define ENET_RDSR1_R_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RDSR1_R_DES_START_SHIFT)) & ENET_RDSR1_R_DES_START_MASK)

/*! @name TDSR1 - Transmit Buffer Descriptor Ring 1 Start Register */
#define ENET_TDSR1_X_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_TDSR1_X_DES_START_SHIFT             (3U)
#define ENET_TDSR1_X_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_TDSR1_X_DES_START_SHIFT)) & ENET_TDSR1_X_DES_START_MASK)

/*! @name MRBR1 - Maximum Receive Buffer Size Register - Ring 1 */
#define ENET_MRBR1_R_BUF_SIZE_MASK               (0x7F0U)
#define ENET_MRBR1_R_BUF_SIZE_SHIFT              (4U)
#define ENET_MRBR1_R_BUF_SIZE(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MRBR1_R_BUF_SIZE_SHIFT)) & ENET_MRBR1_R_BUF_SIZE_MASK)

/*! @name RDSR2 - Receive Descriptor Ring 2 Start Register */
#define ENET_RDSR2_R_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_RDSR2_R_DES_START_SHIFT             (3U)
#define ENET_RDSR2_R_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RDSR2_R_DES_START_SHIFT)) & ENET_RDSR2_R_DES_START_MASK)

/*! @name TDSR2 - Transmit Buffer Descriptor Ring 2 Start Register */
#define ENET_TDSR2_X_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_TDSR2_X_DES_START_SHIFT             (3U)
#define ENET_TDSR2_X_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_TDSR2_X_DES_START_SHIFT)) & ENET_TDSR2_X_DES_START_MASK)

/*! @name MRBR2 - Maximum Receive Buffer Size Register - Ring 2 */
#define ENET_MRBR2_R_BUF_SIZE_MASK               (0x7F0U)
#define ENET_MRBR2_R_BUF_SIZE_SHIFT              (4U)
#define ENET_MRBR2_R_BUF_SIZE(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MRBR2_R_BUF_SIZE_SHIFT)) & ENET_MRBR2_R_BUF_SIZE_MASK)

/*! @name RDSR - Receive Descriptor Ring 0 Start Register */
#define ENET_RDSR_R_DES_START_MASK               (0xFFFFFFF8U)
#define ENET_RDSR_R_DES_START_SHIFT              (3U)
#define ENET_RDSR_R_DES_START(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RDSR_R_DES_START_SHIFT)) & ENET_RDSR_R_DES_START_MASK)

/*! @name TDSR - Transmit Buffer Descriptor Ring 0 Start Register */
#define ENET_TDSR_X_DES_START_MASK               (0xFFFFFFF8U)
#define ENET_TDSR_X_DES_START_SHIFT              (3U)
#define ENET_TDSR_X_DES_START(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_TDSR_X_DES_START_SHIFT)) & ENET_TDSR_X_DES_START_MASK)

/*! @name MRBR - Maximum Receive Buffer Size Register - Ring 0 */
#define ENET_MRBR_R_BUF_SIZE_MASK                (0x7F0U)
#define ENET_MRBR_R_BUF_SIZE_SHIFT               (4U)
#define ENET_MRBR_R_BUF_SIZE(x)                  (((uint32_t)(((uint32_t)(x)) << ENET_MRBR_R_BUF_SIZE_SHIFT)) & ENET_MRBR_R_BUF_SIZE_MASK)

/*! @name RSFL - Receive FIFO Section Full Threshold */
#define ENET_RSFL_RX_SECTION_FULL_MASK           (0x3FFU)
#define ENET_RSFL_RX_SECTION_FULL_SHIFT          (0U)
#define ENET_RSFL_RX_SECTION_FULL(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RSFL_RX_SECTION_FULL_SHIFT)) & ENET_RSFL_RX_SECTION_FULL_MASK)

/*! @name RSEM - Receive FIFO Section Empty Threshold */
#define ENET_RSEM_RX_SECTION_EMPTY_MASK          (0x3FFU)
#define ENET_RSEM_RX_SECTION_EMPTY_SHIFT         (0U)
#define ENET_RSEM_RX_SECTION_EMPTY(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RSEM_RX_SECTION_EMPTY_SHIFT)) & ENET_RSEM_RX_SECTION_EMPTY_MASK)
#define ENET_RSEM_STAT_SECTION_EMPTY_MASK        (0x1F0000U)
#define ENET_RSEM_STAT_SECTION_EMPTY_SHIFT       (16U)
#define ENET_RSEM_STAT_SECTION_EMPTY(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RSEM_STAT_SECTION_EMPTY_SHIFT)) & ENET_RSEM_STAT_SECTION_EMPTY_MASK)

/*! @name RAEM - Receive FIFO Almost Empty Threshold */
#define ENET_RAEM_RX_ALMOST_EMPTY_MASK           (0x3FFU)
#define ENET_RAEM_RX_ALMOST_EMPTY_SHIFT          (0U)
#define ENET_RAEM_RX_ALMOST_EMPTY(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RAEM_RX_ALMOST_EMPTY_SHIFT)) & ENET_RAEM_RX_ALMOST_EMPTY_MASK)

/*! @name RAFL - Receive FIFO Almost Full Threshold */
#define ENET_RAFL_RX_ALMOST_FULL_MASK            (0x3FFU)
#define ENET_RAFL_RX_ALMOST_FULL_SHIFT           (0U)
#define ENET_RAFL_RX_ALMOST_FULL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RAFL_RX_ALMOST_FULL_SHIFT)) & ENET_RAFL_RX_ALMOST_FULL_MASK)

/*! @name TSEM - Transmit FIFO Section Empty Threshold */
#define ENET_TSEM_TX_SECTION_EMPTY_MASK          (0x3FFU)
#define ENET_TSEM_TX_SECTION_EMPTY_SHIFT         (0U)
#define ENET_TSEM_TX_SECTION_EMPTY(x)            (((uint32_t)(((uint32_t)(x)) << ENET_TSEM_TX_SECTION_EMPTY_SHIFT)) & ENET_TSEM_TX_SECTION_EMPTY_MASK)

/*! @name TAEM - Transmit FIFO Almost Empty Threshold */
#define ENET_TAEM_TX_ALMOST_EMPTY_MASK           (0x3FFU)
#define ENET_TAEM_TX_ALMOST_EMPTY_SHIFT          (0U)
#define ENET_TAEM_TX_ALMOST_EMPTY(x)             (((uint32_t)(((uint32_t)(x)) << ENET_TAEM_TX_ALMOST_EMPTY_SHIFT)) & ENET_TAEM_TX_ALMOST_EMPTY_MASK)

/*! @name TAFL - Transmit FIFO Almost Full Threshold */
#define ENET_TAFL_TX_ALMOST_FULL_MASK            (0x3FFU)
#define ENET_TAFL_TX_ALMOST_FULL_SHIFT           (0U)
#define ENET_TAFL_TX_ALMOST_FULL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_TAFL_TX_ALMOST_FULL_SHIFT)) & ENET_TAFL_TX_ALMOST_FULL_MASK)

/*! @name TIPG - Transmit Inter-Packet Gap */
#define ENET_TIPG_IPG_MASK                       (0x1FU)
#define ENET_TIPG_IPG_SHIFT                      (0U)
#define ENET_TIPG_IPG(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TIPG_IPG_SHIFT)) & ENET_TIPG_IPG_MASK)

/*! @name FTRL - Frame Truncation Length */
#define ENET_FTRL_TRUNC_FL_MASK                  (0x3FFFU)
#define ENET_FTRL_TRUNC_FL_SHIFT                 (0U)
#define ENET_FTRL_TRUNC_FL(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_FTRL_TRUNC_FL_SHIFT)) & ENET_FTRL_TRUNC_FL_MASK)

/*! @name TACC - Transmit Accelerator Function Configuration */
#define ENET_TACC_SHIFT16_MASK                   (0x1U)
#define ENET_TACC_SHIFT16_SHIFT                  (0U)
#define ENET_TACC_SHIFT16(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_TACC_SHIFT16_SHIFT)) & ENET_TACC_SHIFT16_MASK)
#define ENET_TACC_IPCHK_MASK                     (0x8U)
#define ENET_TACC_IPCHK_SHIFT                    (3U)
#define ENET_TACC_IPCHK(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TACC_IPCHK_SHIFT)) & ENET_TACC_IPCHK_MASK)
#define ENET_TACC_PROCHK_MASK                    (0x10U)
#define ENET_TACC_PROCHK_SHIFT                   (4U)
#define ENET_TACC_PROCHK(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_TACC_PROCHK_SHIFT)) & ENET_TACC_PROCHK_MASK)

/*! @name RACC - Receive Accelerator Function Configuration */
#define ENET_RACC_PADREM_MASK                    (0x1U)
#define ENET_RACC_PADREM_SHIFT                   (0U)
#define ENET_RACC_PADREM(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_RACC_PADREM_SHIFT)) & ENET_RACC_PADREM_MASK)
#define ENET_RACC_IPDIS_MASK                     (0x2U)
#define ENET_RACC_IPDIS_SHIFT                    (1U)
#define ENET_RACC_IPDIS(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_RACC_IPDIS_SHIFT)) & ENET_RACC_IPDIS_MASK)
#define ENET_RACC_PRODIS_MASK                    (0x4U)
#define ENET_RACC_PRODIS_SHIFT                   (2U)
#define ENET_RACC_PRODIS(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_RACC_PRODIS_SHIFT)) & ENET_RACC_PRODIS_MASK)
#define ENET_RACC_LINEDIS_MASK                   (0x40U)
#define ENET_RACC_LINEDIS_SHIFT                  (6U)
#define ENET_RACC_LINEDIS(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_RACC_LINEDIS_SHIFT)) & ENET_RACC_LINEDIS_MASK)
#define ENET_RACC_SHIFT16_MASK                   (0x80U)
#define ENET_RACC_SHIFT16_SHIFT                  (7U)
#define ENET_RACC_SHIFT16(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_RACC_SHIFT16_SHIFT)) & ENET_RACC_SHIFT16_MASK)

/*! @name RCMR - Receive Classification Match Register for Class n */
#define ENET_RCMR_CMP0_MASK                      (0x7U)
#define ENET_RCMR_CMP0_SHIFT                     (0U)
#define ENET_RCMR_CMP0(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP0_SHIFT)) & ENET_RCMR_CMP0_MASK)
#define ENET_RCMR_CMP1_MASK                      (0x70U)
#define ENET_RCMR_CMP1_SHIFT                     (4U)
#define ENET_RCMR_CMP1(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP1_SHIFT)) & ENET_RCMR_CMP1_MASK)
#define ENET_RCMR_CMP2_MASK                      (0x700U)
#define ENET_RCMR_CMP2_SHIFT                     (8U)
#define ENET_RCMR_CMP2(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP2_SHIFT)) & ENET_RCMR_CMP2_MASK)
#define ENET_RCMR_CMP3_MASK                      (0x7000U)
#define ENET_RCMR_CMP3_SHIFT                     (12U)
#define ENET_RCMR_CMP3(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP3_SHIFT)) & ENET_RCMR_CMP3_MASK)
#define ENET_RCMR_MATCHEN_MASK                   (0x10000U)
#define ENET_RCMR_MATCHEN_SHIFT                  (16U)
#define ENET_RCMR_MATCHEN(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_MATCHEN_SHIFT)) & ENET_RCMR_MATCHEN_MASK)

/* The count of ENET_RCMR */
#define ENET_RCMR_COUNT                          (2U)

/*! @name DMACFG - DMA Class Based Configuration */
#define ENET_DMACFG_IDLE_SLOPE_MASK              (0xFFFFU)
#define ENET_DMACFG_IDLE_SLOPE_SHIFT             (0U)
#define ENET_DMACFG_IDLE_SLOPE(x)                (((uint32_t)(((uint32_t)(x)) << ENET_DMACFG_IDLE_SLOPE_SHIFT)) & ENET_DMACFG_IDLE_SLOPE_MASK)
#define ENET_DMACFG_DMA_CLASS_EN_MASK            (0x10000U)
#define ENET_DMACFG_DMA_CLASS_EN_SHIFT           (16U)
#define ENET_DMACFG_DMA_CLASS_EN(x)              (((uint32_t)(((uint32_t)(x)) << ENET_DMACFG_DMA_CLASS_EN_SHIFT)) & ENET_DMACFG_DMA_CLASS_EN_MASK)
#define ENET_DMACFG_CALC_NOIPG_MASK              (0x20000U)
#define ENET_DMACFG_CALC_NOIPG_SHIFT             (17U)
#define ENET_DMACFG_CALC_NOIPG(x)                (((uint32_t)(((uint32_t)(x)) << ENET_DMACFG_CALC_NOIPG_SHIFT)) & ENET_DMACFG_CALC_NOIPG_MASK)

/* The count of ENET_DMACFG */
#define ENET_DMACFG_COUNT                        (2U)

/*! @name RDAR1 - Receive Descriptor Active Register - Ring 1 */
#define ENET_RDAR1_RDAR_MASK                     (0x1000000U)
#define ENET_RDAR1_RDAR_SHIFT                    (24U)
#define ENET_RDAR1_RDAR(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_RDAR1_RDAR_SHIFT)) & ENET_RDAR1_RDAR_MASK)

/*! @name TDAR1 - Transmit Descriptor Active Register - Ring 1 */
#define ENET_TDAR1_TDAR_MASK                     (0x1000000U)
#define ENET_TDAR1_TDAR_SHIFT                    (24U)
#define ENET_TDAR1_TDAR(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TDAR1_TDAR_SHIFT)) & ENET_TDAR1_TDAR_MASK)

/*! @name RDAR2 - Receive Descriptor Active Register - Ring 2 */
#define ENET_RDAR2_RDAR_MASK                     (0x1000000U)
#define ENET_RDAR2_RDAR_SHIFT                    (24U)
#define ENET_RDAR2_RDAR(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_RDAR2_RDAR_SHIFT)) & ENET_RDAR2_RDAR_MASK)

/*! @name TDAR2 - Transmit Descriptor Active Register - Ring 2 */
#define ENET_TDAR2_TDAR_MASK                     (0x1000000U)
#define ENET_TDAR2_TDAR_SHIFT                    (24U)
#define ENET_TDAR2_TDAR(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TDAR2_TDAR_SHIFT)) & ENET_TDAR2_TDAR_MASK)

/*! @name QOS - QOS Scheme */
#define ENET_QOS_TX_SCHEME_MASK                  (0x7U)
#define ENET_QOS_TX_SCHEME_SHIFT                 (0U)
#define ENET_QOS_TX_SCHEME(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_QOS_TX_SCHEME_SHIFT)) & ENET_QOS_TX_SCHEME_MASK)
#define ENET_QOS_RX_FLUSH0_MASK                  (0x8U)
#define ENET_QOS_RX_FLUSH0_SHIFT                 (3U)
#define ENET_QOS_RX_FLUSH0(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_QOS_RX_FLUSH0_SHIFT)) & ENET_QOS_RX_FLUSH0_MASK)
#define ENET_QOS_RX_FLUSH1_MASK                  (0x10U)
#define ENET_QOS_RX_FLUSH1_SHIFT                 (4U)
#define ENET_QOS_RX_FLUSH1(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_QOS_RX_FLUSH1_SHIFT)) & ENET_QOS_RX_FLUSH1_MASK)
#define ENET_QOS_RX_FLUSH2_MASK                  (0x20U)
#define ENET_QOS_RX_FLUSH2_SHIFT                 (5U)
#define ENET_QOS_RX_FLUSH2(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_QOS_RX_FLUSH2_SHIFT)) & ENET_QOS_RX_FLUSH2_MASK)

/*! @name RMON_T_PACKETS - Tx Packet Count Statistic Register */
#define ENET_RMON_T_PACKETS_TXPKTS_MASK          (0xFFFFU)
#define ENET_RMON_T_PACKETS_TXPKTS_SHIFT         (0U)
#define ENET_RMON_T_PACKETS_TXPKTS(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_PACKETS_TXPKTS_SHIFT)) & ENET_RMON_T_PACKETS_TXPKTS_MASK)

/*! @name RMON_T_BC_PKT - Tx Broadcast Packets Statistic Register */
#define ENET_RMON_T_BC_PKT_TXPKTS_MASK           (0xFFFFU)
#define ENET_RMON_T_BC_PKT_TXPKTS_SHIFT          (0U)
#define ENET_RMON_T_BC_PKT_TXPKTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_BC_PKT_TXPKTS_SHIFT)) & ENET_RMON_T_BC_PKT_TXPKTS_MASK)

/*! @name RMON_T_MC_PKT - Tx Multicast Packets Statistic Register */
#define ENET_RMON_T_MC_PKT_TXPKTS_MASK           (0xFFFFU)
#define ENET_RMON_T_MC_PKT_TXPKTS_SHIFT          (0U)
#define ENET_RMON_T_MC_PKT_TXPKTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_MC_PKT_TXPKTS_SHIFT)) & ENET_RMON_T_MC_PKT_TXPKTS_MASK)

/*! @name RMON_T_CRC_ALIGN - Tx Packets with CRC/Align Error Statistic Register */
#define ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_CRC_ALIGN_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT)) & ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK)

/*! @name RMON_T_UNDERSIZE - Tx Packets Less Than Bytes and Good CRC Statistic Register */
#define ENET_RMON_T_UNDERSIZE_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_UNDERSIZE_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT)) & ENET_RMON_T_UNDERSIZE_TXPKTS_MASK)

/*! @name RMON_T_OVERSIZE - Tx Packets GT MAX_FL bytes and Good CRC Statistic Register */
#define ENET_RMON_T_OVERSIZE_TXPKTS_MASK         (0xFFFFU)
#define ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT        (0U)
#define ENET_RMON_T_OVERSIZE_TXPKTS(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT)) & ENET_RMON_T_OVERSIZE_TXPKTS_MASK)

/*! @name RMON_T_FRAG - Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
#define ENET_RMON_T_FRAG_TXPKTS_MASK             (0xFFFFU)
#define ENET_RMON_T_FRAG_TXPKTS_SHIFT            (0U)
#define ENET_RMON_T_FRAG_TXPKTS(x)               (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_FRAG_TXPKTS_SHIFT)) & ENET_RMON_T_FRAG_TXPKTS_MASK)

/*! @name RMON_T_JAB - Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register */
#define ENET_RMON_T_JAB_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_JAB_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_JAB_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_JAB_TXPKTS_SHIFT)) & ENET_RMON_T_JAB_TXPKTS_MASK)

/*! @name RMON_T_COL - Tx Collision Count Statistic Register */
#define ENET_RMON_T_COL_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_COL_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_COL_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_COL_TXPKTS_SHIFT)) & ENET_RMON_T_COL_TXPKTS_MASK)

/*! @name RMON_T_P64 - Tx 64-Byte Packets Statistic Register */
#define ENET_RMON_T_P64_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_P64_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_P64_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P64_TXPKTS_SHIFT)) & ENET_RMON_T_P64_TXPKTS_MASK)

/*! @name RMON_T_P65TO127 - Tx 65- to 127-byte Packets Statistic Register */
#define ENET_RMON_T_P65TO127_TXPKTS_MASK         (0xFFFFU)
#define ENET_RMON_T_P65TO127_TXPKTS_SHIFT        (0U)
#define ENET_RMON_T_P65TO127_TXPKTS(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P65TO127_TXPKTS_SHIFT)) & ENET_RMON_T_P65TO127_TXPKTS_MASK)

/*! @name RMON_T_P128TO255 - Tx 128- to 255-byte Packets Statistic Register */
#define ENET_RMON_T_P128TO255_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P128TO255_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P128TO255_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P128TO255_TXPKTS_SHIFT)) & ENET_RMON_T_P128TO255_TXPKTS_MASK)

/*! @name RMON_T_P256TO511 - Tx 256- to 511-byte Packets Statistic Register */
#define ENET_RMON_T_P256TO511_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P256TO511_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P256TO511_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P256TO511_TXPKTS_SHIFT)) & ENET_RMON_T_P256TO511_TXPKTS_MASK)

/*! @name RMON_T_P512TO1023 - Tx 512- to 1023-byte Packets Statistic Register */
#define ENET_RMON_T_P512TO1023_TXPKTS_MASK       (0xFFFFU)
#define ENET_RMON_T_P512TO1023_TXPKTS_SHIFT      (0U)
#define ENET_RMON_T_P512TO1023_TXPKTS(x)         (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P512TO1023_TXPKTS_SHIFT)) & ENET_RMON_T_P512TO1023_TXPKTS_MASK)

/*! @name RMON_T_P1024TO2047 - Tx 1024- to 2047-byte Packets Statistic Register */
#define ENET_RMON_T_P1024TO2047_TXPKTS_MASK      (0xFFFFU)
#define ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT     (0U)
#define ENET_RMON_T_P1024TO2047_TXPKTS(x)        (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT)) & ENET_RMON_T_P1024TO2047_TXPKTS_MASK)

/*! @name RMON_T_P_GTE2048 - Tx Packets Greater Than 2048 Bytes Statistic Register */
#define ENET_RMON_T_P_GTE2048_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P_GTE2048_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT)) & ENET_RMON_T_P_GTE2048_TXPKTS_MASK)

/*! @name RMON_T_OCTETS - Tx Octets Statistic Register */
#define ENET_RMON_T_OCTETS_TXOCTS_MASK           (0xFFFFFFFFU)
#define ENET_RMON_T_OCTETS_TXOCTS_SHIFT          (0U)
#define ENET_RMON_T_OCTETS_TXOCTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_OCTETS_TXOCTS_SHIFT)) & ENET_RMON_T_OCTETS_TXOCTS_MASK)

/*! @name IEEE_T_FRAME_OK - Frames Transmitted OK Statistic Register */
#define ENET_IEEE_T_FRAME_OK_COUNT_MASK          (0xFFFFU)
#define ENET_IEEE_T_FRAME_OK_COUNT_SHIFT         (0U)
#define ENET_IEEE_T_FRAME_OK_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_FRAME_OK_COUNT_SHIFT)) & ENET_IEEE_T_FRAME_OK_COUNT_MASK)

/*! @name IEEE_T_1COL - Frames Transmitted with Single Collision Statistic Register */
#define ENET_IEEE_T_1COL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_1COL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_1COL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_1COL_COUNT_SHIFT)) & ENET_IEEE_T_1COL_COUNT_MASK)

/*! @name IEEE_T_MCOL - Frames Transmitted with Multiple Collisions Statistic Register */
#define ENET_IEEE_T_MCOL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_MCOL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_MCOL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_MCOL_COUNT_SHIFT)) & ENET_IEEE_T_MCOL_COUNT_MASK)

/*! @name IEEE_T_DEF - Frames Transmitted after Deferral Delay Statistic Register */
#define ENET_IEEE_T_DEF_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_T_DEF_COUNT_SHIFT              (0U)
#define ENET_IEEE_T_DEF_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_DEF_COUNT_SHIFT)) & ENET_IEEE_T_DEF_COUNT_MASK)

/*! @name IEEE_T_LCOL - Frames Transmitted with Late Collision Statistic Register */
#define ENET_IEEE_T_LCOL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_LCOL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_LCOL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_LCOL_COUNT_SHIFT)) & ENET_IEEE_T_LCOL_COUNT_MASK)

/*! @name IEEE_T_EXCOL - Frames Transmitted with Excessive Collisions Statistic Register */
#define ENET_IEEE_T_EXCOL_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_EXCOL_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_EXCOL_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_EXCOL_COUNT_SHIFT)) & ENET_IEEE_T_EXCOL_COUNT_MASK)

/*! @name IEEE_T_MACERR - Frames Transmitted with Tx FIFO Underrun Statistic Register */
#define ENET_IEEE_T_MACERR_COUNT_MASK            (0xFFFFU)
#define ENET_IEEE_T_MACERR_COUNT_SHIFT           (0U)
#define ENET_IEEE_T_MACERR_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_MACERR_COUNT_SHIFT)) & ENET_IEEE_T_MACERR_COUNT_MASK)

/*! @name IEEE_T_CSERR - Frames Transmitted with Carrier Sense Error Statistic Register */
#define ENET_IEEE_T_CSERR_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_CSERR_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_CSERR_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_CSERR_COUNT_SHIFT)) & ENET_IEEE_T_CSERR_COUNT_MASK)

/*! @name IEEE_T_SQE - Reserved Statistic Register */
#define ENET_IEEE_T_SQE_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_T_SQE_COUNT_SHIFT              (0U)
#define ENET_IEEE_T_SQE_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_SQE_COUNT_SHIFT)) & ENET_IEEE_T_SQE_COUNT_MASK)

/*! @name IEEE_T_FDXFC - Flow Control Pause Frames Transmitted Statistic Register */
#define ENET_IEEE_T_FDXFC_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_FDXFC_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_FDXFC_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_FDXFC_COUNT_SHIFT)) & ENET_IEEE_T_FDXFC_COUNT_MASK)

/*! @name IEEE_T_OCTETS_OK - Octet Count for Frames Transmitted w/o Error Statistic Register */
#define ENET_IEEE_T_OCTETS_OK_COUNT_MASK         (0xFFFFFFFFU)
#define ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT        (0U)
#define ENET_IEEE_T_OCTETS_OK_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT)) & ENET_IEEE_T_OCTETS_OK_COUNT_MASK)

/*! @name RMON_R_PACKETS - Rx Packet Count Statistic Register */
#define ENET_RMON_R_PACKETS_COUNT_MASK           (0xFFFFU)
#define ENET_RMON_R_PACKETS_COUNT_SHIFT          (0U)
#define ENET_RMON_R_PACKETS_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_PACKETS_COUNT_SHIFT)) & ENET_RMON_R_PACKETS_COUNT_MASK)

/*! @name RMON_R_BC_PKT - Rx Broadcast Packets Statistic Register */
#define ENET_RMON_R_BC_PKT_COUNT_MASK            (0xFFFFU)
#define ENET_RMON_R_BC_PKT_COUNT_SHIFT           (0U)
#define ENET_RMON_R_BC_PKT_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_BC_PKT_COUNT_SHIFT)) & ENET_RMON_R_BC_PKT_COUNT_MASK)

/*! @name RMON_R_MC_PKT - Rx Multicast Packets Statistic Register */
#define ENET_RMON_R_MC_PKT_COUNT_MASK            (0xFFFFU)
#define ENET_RMON_R_MC_PKT_COUNT_SHIFT           (0U)
#define ENET_RMON_R_MC_PKT_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_MC_PKT_COUNT_SHIFT)) & ENET_RMON_R_MC_PKT_COUNT_MASK)

/*! @name RMON_R_CRC_ALIGN - Rx Packets with CRC/Align Error Statistic Register */
#define ENET_RMON_R_CRC_ALIGN_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT        (0U)
#define ENET_RMON_R_CRC_ALIGN_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT)) & ENET_RMON_R_CRC_ALIGN_COUNT_MASK)

/*! @name RMON_R_UNDERSIZE - Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register */
#define ENET_RMON_R_UNDERSIZE_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_UNDERSIZE_COUNT_SHIFT        (0U)
#define ENET_RMON_R_UNDERSIZE_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_UNDERSIZE_COUNT_SHIFT)) & ENET_RMON_R_UNDERSIZE_COUNT_MASK)

/*! @name RMON_R_OVERSIZE - Rx Packets Greater Than MAX_FL and Good CRC Statistic Register */
#define ENET_RMON_R_OVERSIZE_COUNT_MASK          (0xFFFFU)
#define ENET_RMON_R_OVERSIZE_COUNT_SHIFT         (0U)
#define ENET_RMON_R_OVERSIZE_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_OVERSIZE_COUNT_SHIFT)) & ENET_RMON_R_OVERSIZE_COUNT_MASK)

/*! @name RMON_R_FRAG - Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
#define ENET_RMON_R_FRAG_COUNT_MASK              (0xFFFFU)
#define ENET_RMON_R_FRAG_COUNT_SHIFT             (0U)
#define ENET_RMON_R_FRAG_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_FRAG_COUNT_SHIFT)) & ENET_RMON_R_FRAG_COUNT_MASK)

/*! @name RMON_R_JAB - Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register */
#define ENET_RMON_R_JAB_COUNT_MASK               (0xFFFFU)
#define ENET_RMON_R_JAB_COUNT_SHIFT              (0U)
#define ENET_RMON_R_JAB_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_JAB_COUNT_SHIFT)) & ENET_RMON_R_JAB_COUNT_MASK)

/*! @name RMON_R_P64 - Rx 64-Byte Packets Statistic Register */
#define ENET_RMON_R_P64_COUNT_MASK               (0xFFFFU)
#define ENET_RMON_R_P64_COUNT_SHIFT              (0U)
#define ENET_RMON_R_P64_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P64_COUNT_SHIFT)) & ENET_RMON_R_P64_COUNT_MASK)

/*! @name RMON_R_P65TO127 - Rx 65- to 127-Byte Packets Statistic Register */
#define ENET_RMON_R_P65TO127_COUNT_MASK          (0xFFFFU)
#define ENET_RMON_R_P65TO127_COUNT_SHIFT         (0U)
#define ENET_RMON_R_P65TO127_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P65TO127_COUNT_SHIFT)) & ENET_RMON_R_P65TO127_COUNT_MASK)

/*! @name RMON_R_P128TO255 - Rx 128- to 255-Byte Packets Statistic Register */
#define ENET_RMON_R_P128TO255_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P128TO255_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P128TO255_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P128TO255_COUNT_SHIFT)) & ENET_RMON_R_P128TO255_COUNT_MASK)

/*! @name RMON_R_P256TO511 - Rx 256- to 511-Byte Packets Statistic Register */
#define ENET_RMON_R_P256TO511_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P256TO511_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P256TO511_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P256TO511_COUNT_SHIFT)) & ENET_RMON_R_P256TO511_COUNT_MASK)

/*! @name RMON_R_P512TO1023 - Rx 512- to 1023-Byte Packets Statistic Register */
#define ENET_RMON_R_P512TO1023_COUNT_MASK        (0xFFFFU)
#define ENET_RMON_R_P512TO1023_COUNT_SHIFT       (0U)
#define ENET_RMON_R_P512TO1023_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P512TO1023_COUNT_SHIFT)) & ENET_RMON_R_P512TO1023_COUNT_MASK)

/*! @name RMON_R_P1024TO2047 - Rx 1024- to 2047-Byte Packets Statistic Register */
#define ENET_RMON_R_P1024TO2047_COUNT_MASK       (0xFFFFU)
#define ENET_RMON_R_P1024TO2047_COUNT_SHIFT      (0U)
#define ENET_RMON_R_P1024TO2047_COUNT(x)         (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P1024TO2047_COUNT_SHIFT)) & ENET_RMON_R_P1024TO2047_COUNT_MASK)

/*! @name RMON_R_P_GTE2048 - Rx Packets Greater than 2048 Bytes Statistic Register */
#define ENET_RMON_R_P_GTE2048_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P_GTE2048_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P_GTE2048_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P_GTE2048_COUNT_SHIFT)) & ENET_RMON_R_P_GTE2048_COUNT_MASK)

/*! @name RMON_R_OCTETS - Rx Octets Statistic Register */
#define ENET_RMON_R_OCTETS_COUNT_MASK            (0xFFFFFFFFU)
#define ENET_RMON_R_OCTETS_COUNT_SHIFT           (0U)
#define ENET_RMON_R_OCTETS_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_OCTETS_COUNT_SHIFT)) & ENET_RMON_R_OCTETS_COUNT_MASK)

/*! @name IEEE_R_DROP - Frames not Counted Correctly Statistic Register */
#define ENET_IEEE_R_DROP_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_R_DROP_COUNT_SHIFT             (0U)
#define ENET_IEEE_R_DROP_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_DROP_COUNT_SHIFT)) & ENET_IEEE_R_DROP_COUNT_MASK)

/*! @name IEEE_R_FRAME_OK - Frames Received OK Statistic Register */
#define ENET_IEEE_R_FRAME_OK_COUNT_MASK          (0xFFFFU)
#define ENET_IEEE_R_FRAME_OK_COUNT_SHIFT         (0U)
#define ENET_IEEE_R_FRAME_OK_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_FRAME_OK_COUNT_SHIFT)) & ENET_IEEE_R_FRAME_OK_COUNT_MASK)

/*! @name IEEE_R_CRC - Frames Received with CRC Error Statistic Register */
#define ENET_IEEE_R_CRC_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_R_CRC_COUNT_SHIFT              (0U)
#define ENET_IEEE_R_CRC_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_CRC_COUNT_SHIFT)) & ENET_IEEE_R_CRC_COUNT_MASK)

/*! @name IEEE_R_ALIGN - Frames Received with Alignment Error Statistic Register */
#define ENET_IEEE_R_ALIGN_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_R_ALIGN_COUNT_SHIFT            (0U)
#define ENET_IEEE_R_ALIGN_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_ALIGN_COUNT_SHIFT)) & ENET_IEEE_R_ALIGN_COUNT_MASK)

/*! @name IEEE_R_MACERR - Receive FIFO Overflow Count Statistic Register */
#define ENET_IEEE_R_MACERR_COUNT_MASK            (0xFFFFU)
#define ENET_IEEE_R_MACERR_COUNT_SHIFT           (0U)
#define ENET_IEEE_R_MACERR_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_MACERR_COUNT_SHIFT)) & ENET_IEEE_R_MACERR_COUNT_MASK)

/*! @name IEEE_R_FDXFC - Flow Control Pause Frames Received Statistic Register */
#define ENET_IEEE_R_FDXFC_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_R_FDXFC_COUNT_SHIFT            (0U)
#define ENET_IEEE_R_FDXFC_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_FDXFC_COUNT_SHIFT)) & ENET_IEEE_R_FDXFC_COUNT_MASK)

/*! @name IEEE_R_OCTETS_OK - Octet Count for Frames Received without Error Statistic Register */
#define ENET_IEEE_R_OCTETS_OK_COUNT_MASK         (0xFFFFFFFFU)
#define ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT        (0U)
#define ENET_IEEE_R_OCTETS_OK_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT)) & ENET_IEEE_R_OCTETS_OK_COUNT_MASK)

/*! @name ATCR - Adjustable Timer Control Register */
#define ENET_ATCR_EN_MASK                        (0x1U)
#define ENET_ATCR_EN_SHIFT                       (0U)
#define ENET_ATCR_EN(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_ATCR_EN_SHIFT)) & ENET_ATCR_EN_MASK)
#define ENET_ATCR_OFFEN_MASK                     (0x4U)
#define ENET_ATCR_OFFEN_SHIFT                    (2U)
#define ENET_ATCR_OFFEN(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_ATCR_OFFEN_SHIFT)) & ENET_ATCR_OFFEN_MASK)
#define ENET_ATCR_OFFRST_MASK                    (0x8U)
#define ENET_ATCR_OFFRST_SHIFT                   (3U)
#define ENET_ATCR_OFFRST(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_ATCR_OFFRST_SHIFT)) & ENET_ATCR_OFFRST_MASK)
#define ENET_ATCR_PEREN_MASK                     (0x10U)
#define ENET_ATCR_PEREN_SHIFT                    (4U)
#define ENET_ATCR_PEREN(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_ATCR_PEREN_SHIFT)) & ENET_ATCR_PEREN_MASK)
#define ENET_ATCR_PINPER_MASK                    (0x80U)
#define ENET_ATCR_PINPER_SHIFT                   (7U)
#define ENET_ATCR_PINPER(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_ATCR_PINPER_SHIFT)) & ENET_ATCR_PINPER_MASK)
#define ENET_ATCR_RESTART_MASK                   (0x200U)
#define ENET_ATCR_RESTART_SHIFT                  (9U)
#define ENET_ATCR_RESTART(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ATCR_RESTART_SHIFT)) & ENET_ATCR_RESTART_MASK)
#define ENET_ATCR_CAPTURE_MASK                   (0x800U)
#define ENET_ATCR_CAPTURE_SHIFT                  (11U)
#define ENET_ATCR_CAPTURE(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ATCR_CAPTURE_SHIFT)) & ENET_ATCR_CAPTURE_MASK)
#define ENET_ATCR_SLAVE_MASK                     (0x2000U)
#define ENET_ATCR_SLAVE_SHIFT                    (13U)
#define ENET_ATCR_SLAVE(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_ATCR_SLAVE_SHIFT)) & ENET_ATCR_SLAVE_MASK)

/*! @name ATVR - Timer Value Register */
#define ENET_ATVR_ATIME_MASK                     (0xFFFFFFFFU)
#define ENET_ATVR_ATIME_SHIFT                    (0U)
#define ENET_ATVR_ATIME(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_ATVR_ATIME_SHIFT)) & ENET_ATVR_ATIME_MASK)

/*! @name ATOFF - Timer Offset Register */
#define ENET_ATOFF_OFFSET_MASK                   (0xFFFFFFFFU)
#define ENET_ATOFF_OFFSET_SHIFT                  (0U)
#define ENET_ATOFF_OFFSET(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ATOFF_OFFSET_SHIFT)) & ENET_ATOFF_OFFSET_MASK)

/*! @name ATPER - Timer Period Register */
#define ENET_ATPER_PERIOD_MASK                   (0xFFFFFFFFU)
#define ENET_ATPER_PERIOD_SHIFT                  (0U)
#define ENET_ATPER_PERIOD(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ATPER_PERIOD_SHIFT)) & ENET_ATPER_PERIOD_MASK)

/*! @name ATCOR - Timer Correction Register */
#define ENET_ATCOR_COR_MASK                      (0x7FFFFFFFU)
#define ENET_ATCOR_COR_SHIFT                     (0U)
#define ENET_ATCOR_COR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ATCOR_COR_SHIFT)) & ENET_ATCOR_COR_MASK)

/*! @name ATINC - Time-Stamping Clock Period Register */
#define ENET_ATINC_INC_MASK                      (0x7FU)
#define ENET_ATINC_INC_SHIFT                     (0U)
#define ENET_ATINC_INC(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ATINC_INC_SHIFT)) & ENET_ATINC_INC_MASK)
#define ENET_ATINC_INC_CORR_MASK                 (0x7F00U)
#define ENET_ATINC_INC_CORR_SHIFT                (8U)
#define ENET_ATINC_INC_CORR(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_ATINC_INC_CORR_SHIFT)) & ENET_ATINC_INC_CORR_MASK)

/*! @name ATSTMP - Timestamp of Last Transmitted Frame */
#define ENET_ATSTMP_TIMESTAMP_MASK               (0xFFFFFFFFU)
#define ENET_ATSTMP_TIMESTAMP_SHIFT              (0U)
#define ENET_ATSTMP_TIMESTAMP(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_ATSTMP_TIMESTAMP_SHIFT)) & ENET_ATSTMP_TIMESTAMP_MASK)

/*! @name TGSR - Timer Global Status Register */
#define ENET_TGSR_TF0_MASK                       (0x1U)
#define ENET_TGSR_TF0_SHIFT                      (0U)
#define ENET_TGSR_TF0(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TGSR_TF0_SHIFT)) & ENET_TGSR_TF0_MASK)
#define ENET_TGSR_TF1_MASK                       (0x2U)
#define ENET_TGSR_TF1_SHIFT                      (1U)
#define ENET_TGSR_TF1(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TGSR_TF1_SHIFT)) & ENET_TGSR_TF1_MASK)
#define ENET_TGSR_TF2_MASK                       (0x4U)
#define ENET_TGSR_TF2_SHIFT                      (2U)
#define ENET_TGSR_TF2(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TGSR_TF2_SHIFT)) & ENET_TGSR_TF2_MASK)
#define ENET_TGSR_TF3_MASK                       (0x8U)
#define ENET_TGSR_TF3_SHIFT                      (3U)
#define ENET_TGSR_TF3(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TGSR_TF3_SHIFT)) & ENET_TGSR_TF3_MASK)

/*! @name TCSR - Timer Control Status Register */
#define ENET_TCSR_TDRE_MASK                      (0x1U)
#define ENET_TCSR_TDRE_SHIFT                     (0U)
#define ENET_TCSR_TDRE(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TCSR_TDRE_SHIFT)) & ENET_TCSR_TDRE_MASK)
#define ENET_TCSR_TMODE_MASK                     (0x3CU)
#define ENET_TCSR_TMODE_SHIFT                    (2U)
#define ENET_TCSR_TMODE(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TCSR_TMODE_SHIFT)) & ENET_TCSR_TMODE_MASK)
#define ENET_TCSR_TIE_MASK                       (0x40U)
#define ENET_TCSR_TIE_SHIFT                      (6U)
#define ENET_TCSR_TIE(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TCSR_TIE_SHIFT)) & ENET_TCSR_TIE_MASK)
#define ENET_TCSR_TF_MASK                        (0x80U)
#define ENET_TCSR_TF_SHIFT                       (7U)
#define ENET_TCSR_TF(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_TCSR_TF_SHIFT)) & ENET_TCSR_TF_MASK)

/* The count of ENET_TCSR */
#define ENET_TCSR_COUNT                          (4U)

/*! @name TCCR - Timer Compare Capture Register */
#define ENET_TCCR_TCC_MASK                       (0xFFFFFFFFU)
#define ENET_TCCR_TCC_SHIFT                      (0U)
#define ENET_TCCR_TCC(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TCCR_TCC_SHIFT)) & ENET_TCCR_TCC_MASK)

/* The count of ENET_TCCR */
#define ENET_TCCR_COUNT                          (4U)


/*!
 * @}
 */ /* end of group ENET_Register_Masks */


/* ENET - Peripheral instance base addresses */
/** Peripheral ENET base address */
#define ENET_BASE                                (0x30BE0000u)
/** Peripheral ENET base pointer */
#define ENET                                     ((ENET_Type *)ENET_BASE)
/** Array initializer of ENET peripheral base addresses */
#define ENET_BASE_ADDRS                          { ENET_BASE }
/** Array initializer of ENET peripheral base pointers */
#define ENET_BASE_PTRS                           { ENET }
/** Interrupt vectors for the ENET peripheral type */
#define ENET_Transmit_IRQS                       { ENET_IRQn }
#define ENET_Receive_IRQS                        { ENET_IRQn }
#define ENET_Error_IRQS                          { ENET_IRQn }
#define ENET_1588_Timer_IRQS                     { ENET_IRQn }
/* ENET Buffer Descriptor and Buffer Address Alignment. */
#define ENET_BUFF_ALIGNMENT                      (64U)


/*!
 * @}
 */ /* end of group ENET_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- GPC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Peripheral_Access_Layer GPC Peripheral Access Layer
 * @{
 */

/** GPC - Register Layout Typedef */
typedef struct {
  __IO uint32_t LPCR_A53_BSC;                      /**< Basic Low power control register of A53 platform, offset: 0x0 */
  __IO uint32_t LPCR_A53_AD;                       /**< Advanced Low power control register of A53 platform, offset: 0x4 */
  __IO uint32_t LPCR_M4;                           /**< Low power control register of CPU1, offset: 0x8 */
       uint8_t RESERVED_0[8];
  __IO uint32_t SLPCR;                             /**< System low power control register, offset: 0x14 */
  __IO uint32_t MST_CPU_MAPPING;                   /**< MASTER LPM Handshake, offset: 0x18 */
       uint8_t RESERVED_1[4];
  __IO uint32_t MLPCR;                             /**< Memory low power control register, offset: 0x20 */
  __IO uint32_t PGC_ACK_SEL_A53;                   /**< PGC acknowledge signal selection of A53 platform, offset: 0x24 */
  __IO uint32_t PGC_ACK_SEL_M4;                    /**< PGC acknowledge signal selection of M4 platform, offset: 0x28 */
  __IO uint32_t MISC;                              /**< GPC Miscellaneous register, offset: 0x2C */
  __IO uint32_t IMR_CORE0_A53[4];                  /**< IRQ masking register 1 of A53 core0..IRQ masking register 4 of A53 core0, array offset: 0x30, array step: 0x4 */
  __IO uint32_t IMR_CORE1_A53[4];                  /**< IRQ masking register 1 of A53 core1..IRQ masking register 4 of A53 core1, array offset: 0x40, array step: 0x4 */
  __IO uint32_t IMR_M4[4];                         /**< IRQ masking register 1 of M4..IRQ masking register 4 of M4, array offset: 0x50, array step: 0x4 */
       uint8_t RESERVED_2[16];
  __I  uint32_t ISR_A53[4];                        /**< IRQ status register 1 of A53..IRQ status register 4 of A53, array offset: 0x70, array step: 0x4 */
  __I  uint32_t ISR_M4[4];                         /**< IRQ status register 1 of M4..IRQ status register 4 of M4, array offset: 0x80, array step: 0x4 */
       uint8_t RESERVED_3[32];
  __IO uint32_t SLT0_CFG;                          /**< Slot configure register for A53 core, offset: 0xB0 */
  __IO uint32_t SLT1_CFG;                          /**< Slot configure register for A53 core, offset: 0xB4 */
  __IO uint32_t SLT2_CFG;                          /**< Slot configure register for A53 core, offset: 0xB8 */
  __IO uint32_t SLT3_CFG;                          /**< Slot configure register for A53 core, offset: 0xBC */
  __IO uint32_t SLT4_CFG;                          /**< Slot configure register for A53 core, offset: 0xC0 */
  __IO uint32_t SLT5_CFG;                          /**< Slot configure register for A53 core, offset: 0xC4 */
  __IO uint32_t SLT6_CFG;                          /**< Slot configure register for A53 core, offset: 0xC8 */
  __IO uint32_t SLT7_CFG;                          /**< Slot configure register for A53 core, offset: 0xCC */
  __IO uint32_t SLT8_CFG;                          /**< Slot configure register for A53 core, offset: 0xD0 */
  __IO uint32_t SLT9_CFG;                          /**< Slot configure register for A53 core, offset: 0xD4 */
  __IO uint32_t SLT10_CFG;                         /**< Slot configure register for A53 core, offset: 0xD8 */
  __IO uint32_t SLT11_CFG;                         /**< Slot configure register for A53 core, offset: 0xDC */
  __IO uint32_t SLT12_CFG;                         /**< Slot configure register for A53 core, offset: 0xE0 */
  __IO uint32_t SLT13_CFG;                         /**< Slot configure register for A53 core, offset: 0xE4 */
  __IO uint32_t SLT14_CFG;                         /**< Slot configure register for A53 core, offset: 0xE8 */
  __IO uint32_t PGC_CPU_0_1_MAPPING;               /**< PGC CPU mapping, offset: 0xEC */
  __IO uint32_t CPU_PGC_SW_PUP_REQ;                /**< CPU PGC software power up trigger, offset: 0xF0 */
  __IO uint32_t MIX_PGC_SW_PUP_REQ;                /**< MIX PGC software power up trigger, offset: 0xF4 */
  __IO uint32_t PU_PGC_SW_PUP_REQ;                 /**< PU PGC software up trigger, offset: 0xF8 */
  __IO uint32_t CPU_PGC_SW_PDN_REQ;                /**< CPU PGC software down trigger, offset: 0xFC */
  __IO uint32_t MIX_PGC_SW_PDN_REQ;                /**< MIX PGC software power down trigger, offset: 0x100 */
  __IO uint32_t PU_PGC_SW_PDN_REQ;                 /**< PU PGC software down trigger, offset: 0x104 */
  __IO uint32_t LPCR_A53_BSC2;                     /**< Basic Low power control register of A53 platform, offset: 0x108 */
       uint8_t RESERVED_4[36];
  __IO uint32_t CPU_PGC_PUP_STATUS1;               /**< CPU PGC software up trigger status1, offset: 0x130 */
  __I  uint32_t A53_MIX_PGC_PUP_STATUS[3];         /**< A53 MIX software up trigger status register, array offset: 0x134, array step: 0x4 */
  __I  uint32_t M4_MIX_PGC_PUP_STATUS[3];          /**< M4 MIX PGC software up trigger status register, array offset: 0x140, array step: 0x4 */
  __I  uint32_t A53_PU_PGC_PUP_STATUS[3];          /**< A53 PU software up trigger status register, array offset: 0x14C, array step: 0x4 */
  __I  uint32_t M4_PU_PGC_PUP_STATUS[3];           /**< M4 PU PGC software up trigger status register, array offset: 0x158, array step: 0x4 */
       uint8_t RESERVED_5[12];
  __IO uint32_t CPU_PGC_PDN_STATUS1;               /**< CPU PGC software dn trigger status1, offset: 0x170 */
  __I  uint32_t A53_MIX_PGC_PDN_STATUS[3];         /**< A53 MIX software down trigger status register, array offset: 0x174, array step: 0x4 */
  __I  uint32_t M4_MIX_PGC_PDN_STATUS[3];          /**< M4 MIX PGC software power down trigger status register, array offset: 0x180, array step: 0x4 */
  __I  uint32_t A53_PU_PGC_PDN_STATUS[3];          /**< A53 PU PGC software down trigger status, array offset: 0x18C, array step: 0x4 */
  __I  uint32_t M4_PU_PGC_PDN_STATUS[3];           /**< M4 PU PGC software down trigger status, array offset: 0x198, array step: 0x4 */
       uint8_t RESERVED_6[12];
  __IO uint32_t A53_MIX_PDN_FLG;                   /**< A53 MIX PDN FLG, offset: 0x1B0 */
  __IO uint32_t A53_PU_PDN_FLG;                    /**< A53 PU PDN FLG, offset: 0x1B4 */
  __IO uint32_t M4_MIX_PDN_FLG;                    /**< M4 MIX PDN FLG, offset: 0x1B8 */
  __IO uint32_t M4_PU_PDN_FLG;                     /**< M4 PU PDN FLG, offset: 0x1BC */
  __IO uint32_t IMR_CORE2_A53[4];                  /**< IRQ masking register 1 of A53 core2..IRQ masking register 4 of A53 core2, array offset: 0x1C0, array step: 0x4 */
  __IO uint32_t IMR_CORE3_A53[4];                  /**< IRQ masking register 1 of A53 core3..IRQ masking register 4 of A53 core3, array offset: 0x1D0, array step: 0x4 */
  __IO uint32_t ACK_SEL_A53_PU;                    /**< PGC acknowledge signal selection of A53 platform for PUs, offset: 0x1E0 */
  __IO uint32_t ACK_SEL_M4_PU;                     /**< PGC acknowledge signal selection of M4 platform for PUs, offset: 0x1E4 */
  __IO uint32_t SLT15_CFG;                         /**< Slot configure register for A53 core, offset: 0x1E8 */
  __IO uint32_t SLT16_CFG;                         /**< Slot configure register for A53 core, offset: 0x1EC */
  __IO uint32_t SLT17_CFG;                         /**< Slot configure register for A53 core, offset: 0x1F0 */
  __IO uint32_t SLT18_CFG;                         /**< Slot configure register for A53 core, offset: 0x1F4 */
  __IO uint32_t SLT19_CFG;                         /**< Slot configure register for A53 core, offset: 0x1F8 */
       uint8_t RESERVED_7[4];
  __IO uint32_t SLT_CFG_PU[20];                    /**< Slot configure register for PUs, array offset: 0x200, array step: 0x4 */
} GPC_Type;

/* ----------------------------------------------------------------------------
   -- GPC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Register_Masks GPC Register Masks
 * @{
 */

/*! @name LPCR_A53_BSC - Basic Low power control register of A53 platform */
#define GPC_LPCR_A53_BSC_LPM0_MASK               (0x3U)
#define GPC_LPCR_A53_BSC_LPM0_SHIFT              (0U)
#define GPC_LPCR_A53_BSC_LPM0(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_LPM0_SHIFT)) & GPC_LPCR_A53_BSC_LPM0_MASK)
#define GPC_LPCR_A53_BSC_LPM1_MASK               (0xCU)
#define GPC_LPCR_A53_BSC_LPM1_SHIFT              (2U)
#define GPC_LPCR_A53_BSC_LPM1(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_LPM1_SHIFT)) & GPC_LPCR_A53_BSC_LPM1_MASK)
#define GPC_LPCR_A53_BSC_MST_LPM_HSK_MASK_MASK   (0x40U)
#define GPC_LPCR_A53_BSC_MST_LPM_HSK_MASK_SHIFT  (6U)
#define GPC_LPCR_A53_BSC_MST_LPM_HSK_MASK(x)     (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_MST_LPM_HSK_MASK_SHIFT)) & GPC_LPCR_A53_BSC_MST_LPM_HSK_MASK_MASK)
#define GPC_LPCR_A53_BSC_CPU_CLK_ON_LPM_MASK     (0x4000U)
#define GPC_LPCR_A53_BSC_CPU_CLK_ON_LPM_SHIFT    (14U)
#define GPC_LPCR_A53_BSC_CPU_CLK_ON_LPM(x)       (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_CPU_CLK_ON_LPM_SHIFT)) & GPC_LPCR_A53_BSC_CPU_CLK_ON_LPM_MASK)
#define GPC_LPCR_A53_BSC_MASK_CORE0_WFI_MASK     (0x10000U)
#define GPC_LPCR_A53_BSC_MASK_CORE0_WFI_SHIFT    (16U)
#define GPC_LPCR_A53_BSC_MASK_CORE0_WFI(x)       (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_MASK_CORE0_WFI_SHIFT)) & GPC_LPCR_A53_BSC_MASK_CORE0_WFI_MASK)
#define GPC_LPCR_A53_BSC_MASK_CORE1_WFI_MASK     (0x20000U)
#define GPC_LPCR_A53_BSC_MASK_CORE1_WFI_SHIFT    (17U)
#define GPC_LPCR_A53_BSC_MASK_CORE1_WFI(x)       (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_MASK_CORE1_WFI_SHIFT)) & GPC_LPCR_A53_BSC_MASK_CORE1_WFI_MASK)
#define GPC_LPCR_A53_BSC_MASK_CORE2_WFI_MASK     (0x40000U)
#define GPC_LPCR_A53_BSC_MASK_CORE2_WFI_SHIFT    (18U)
#define GPC_LPCR_A53_BSC_MASK_CORE2_WFI(x)       (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_MASK_CORE2_WFI_SHIFT)) & GPC_LPCR_A53_BSC_MASK_CORE2_WFI_MASK)
#define GPC_LPCR_A53_BSC_MASK_CORE3_WFI_MASK     (0x80000U)
#define GPC_LPCR_A53_BSC_MASK_CORE3_WFI_SHIFT    (19U)
#define GPC_LPCR_A53_BSC_MASK_CORE3_WFI(x)       (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_MASK_CORE3_WFI_SHIFT)) & GPC_LPCR_A53_BSC_MASK_CORE3_WFI_MASK)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C2_MASK         (0x400000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C2_SHIFT        (22U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C2(x)           (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_IRQ_SRC_C2_SHIFT)) & GPC_LPCR_A53_BSC_IRQ_SRC_C2_MASK)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C3_MASK         (0x800000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C3_SHIFT        (23U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C3(x)           (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_IRQ_SRC_C3_SHIFT)) & GPC_LPCR_A53_BSC_IRQ_SRC_C3_MASK)
#define GPC_LPCR_A53_BSC_MASK_SCU_WFI_MASK       (0x1000000U)
#define GPC_LPCR_A53_BSC_MASK_SCU_WFI_SHIFT      (24U)
#define GPC_LPCR_A53_BSC_MASK_SCU_WFI(x)         (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_MASK_SCU_WFI_SHIFT)) & GPC_LPCR_A53_BSC_MASK_SCU_WFI_MASK)
#define GPC_LPCR_A53_BSC_MASK_L2CC_WFI_MASK      (0x4000000U)
#define GPC_LPCR_A53_BSC_MASK_L2CC_WFI_SHIFT     (26U)
#define GPC_LPCR_A53_BSC_MASK_L2CC_WFI(x)        (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_MASK_L2CC_WFI_SHIFT)) & GPC_LPCR_A53_BSC_MASK_L2CC_WFI_MASK)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C0_MASK         (0x10000000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C0_SHIFT        (28U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C0(x)           (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_IRQ_SRC_C0_SHIFT)) & GPC_LPCR_A53_BSC_IRQ_SRC_C0_MASK)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C1_MASK         (0x20000000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C1_SHIFT        (29U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C1(x)           (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_IRQ_SRC_C1_SHIFT)) & GPC_LPCR_A53_BSC_IRQ_SRC_C1_MASK)
#define GPC_LPCR_A53_BSC_IRQ_SRC_A53_WUP_MASK    (0x40000000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_A53_WUP_SHIFT   (30U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_A53_WUP(x)      (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_IRQ_SRC_A53_WUP_SHIFT)) & GPC_LPCR_A53_BSC_IRQ_SRC_A53_WUP_MASK)
#define GPC_LPCR_A53_BSC_MASK_DSM_TRIGGER_MASK   (0x80000000U)
#define GPC_LPCR_A53_BSC_MASK_DSM_TRIGGER_SHIFT  (31U)
#define GPC_LPCR_A53_BSC_MASK_DSM_TRIGGER(x)     (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_MASK_DSM_TRIGGER_SHIFT)) & GPC_LPCR_A53_BSC_MASK_DSM_TRIGGER_MASK)

/*! @name LPCR_A53_AD - Advanced Low power control register of A53 platform */
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN_MASK       (0x1U)
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN_SHIFT      (0U)
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN(x)         (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C0_WFI_PDN_SHIFT)) & GPC_LPCR_A53_AD_EN_C0_WFI_PDN_MASK)
#define GPC_LPCR_A53_AD_EN_C0_PDN_MASK           (0x2U)
#define GPC_LPCR_A53_AD_EN_C0_PDN_SHIFT          (1U)
#define GPC_LPCR_A53_AD_EN_C0_PDN(x)             (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C0_PDN_SHIFT)) & GPC_LPCR_A53_AD_EN_C0_PDN_MASK)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN_MASK       (0x4U)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN_SHIFT      (2U)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN(x)         (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C1_WFI_PDN_SHIFT)) & GPC_LPCR_A53_AD_EN_C1_WFI_PDN_MASK)
#define GPC_LPCR_A53_AD_EN_C1_PDN_MASK           (0x8U)
#define GPC_LPCR_A53_AD_EN_C1_PDN_SHIFT          (3U)
#define GPC_LPCR_A53_AD_EN_C1_PDN(x)             (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C1_PDN_SHIFT)) & GPC_LPCR_A53_AD_EN_C1_PDN_MASK)
#define GPC_LPCR_A53_AD_EN_PLAT_PDN_MASK         (0x10U)
#define GPC_LPCR_A53_AD_EN_PLAT_PDN_SHIFT        (4U)
#define GPC_LPCR_A53_AD_EN_PLAT_PDN(x)           (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_PLAT_PDN_SHIFT)) & GPC_LPCR_A53_AD_EN_PLAT_PDN_MASK)
#define GPC_LPCR_A53_AD_EN_L2_WFI_PDN_MASK       (0x20U)
#define GPC_LPCR_A53_AD_EN_L2_WFI_PDN_SHIFT      (5U)
#define GPC_LPCR_A53_AD_EN_L2_WFI_PDN(x)         (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_L2_WFI_PDN_SHIFT)) & GPC_LPCR_A53_AD_EN_L2_WFI_PDN_MASK)
#define GPC_LPCR_A53_AD_EN_C0_IRQ_PUP_MASK       (0x100U)
#define GPC_LPCR_A53_AD_EN_C0_IRQ_PUP_SHIFT      (8U)
#define GPC_LPCR_A53_AD_EN_C0_IRQ_PUP(x)         (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C0_IRQ_PUP_SHIFT)) & GPC_LPCR_A53_AD_EN_C0_IRQ_PUP_MASK)
#define GPC_LPCR_A53_AD_EN_C0_PUP_MASK           (0x200U)
#define GPC_LPCR_A53_AD_EN_C0_PUP_SHIFT          (9U)
#define GPC_LPCR_A53_AD_EN_C0_PUP(x)             (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C0_PUP_SHIFT)) & GPC_LPCR_A53_AD_EN_C0_PUP_MASK)
#define GPC_LPCR_A53_AD_EN_C1_IRQ_PUP_MASK       (0x400U)
#define GPC_LPCR_A53_AD_EN_C1_IRQ_PUP_SHIFT      (10U)
#define GPC_LPCR_A53_AD_EN_C1_IRQ_PUP(x)         (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C1_IRQ_PUP_SHIFT)) & GPC_LPCR_A53_AD_EN_C1_IRQ_PUP_MASK)
#define GPC_LPCR_A53_AD_EN_C1_PUP_MASK           (0x800U)
#define GPC_LPCR_A53_AD_EN_C1_PUP_SHIFT          (11U)
#define GPC_LPCR_A53_AD_EN_C1_PUP(x)             (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C1_PUP_SHIFT)) & GPC_LPCR_A53_AD_EN_C1_PUP_MASK)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN_MASK       (0x10000U)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN_SHIFT      (16U)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN(x)         (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C2_WFI_PDN_SHIFT)) & GPC_LPCR_A53_AD_EN_C2_WFI_PDN_MASK)
#define GPC_LPCR_A53_AD_EN_C2_PDN_MASK           (0x20000U)
#define GPC_LPCR_A53_AD_EN_C2_PDN_SHIFT          (17U)
#define GPC_LPCR_A53_AD_EN_C2_PDN(x)             (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C2_PDN_SHIFT)) & GPC_LPCR_A53_AD_EN_C2_PDN_MASK)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN_MASK       (0x40000U)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN_SHIFT      (18U)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN(x)         (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C3_WFI_PDN_SHIFT)) & GPC_LPCR_A53_AD_EN_C3_WFI_PDN_MASK)
#define GPC_LPCR_A53_AD_EN_C3_PDN_MASK           (0x80000U)
#define GPC_LPCR_A53_AD_EN_C3_PDN_SHIFT          (19U)
#define GPC_LPCR_A53_AD_EN_C3_PDN(x)             (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C3_PDN_SHIFT)) & GPC_LPCR_A53_AD_EN_C3_PDN_MASK)
#define GPC_LPCR_A53_AD_EN_C2_IRQ_PUP_MASK       (0x1000000U)
#define GPC_LPCR_A53_AD_EN_C2_IRQ_PUP_SHIFT      (24U)
#define GPC_LPCR_A53_AD_EN_C2_IRQ_PUP(x)         (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C2_IRQ_PUP_SHIFT)) & GPC_LPCR_A53_AD_EN_C2_IRQ_PUP_MASK)
#define GPC_LPCR_A53_AD_EN_C2_PUP_MASK           (0x2000000U)
#define GPC_LPCR_A53_AD_EN_C2_PUP_SHIFT          (25U)
#define GPC_LPCR_A53_AD_EN_C2_PUP(x)             (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C2_PUP_SHIFT)) & GPC_LPCR_A53_AD_EN_C2_PUP_MASK)
#define GPC_LPCR_A53_AD_EN_C3_IRQ_PUP_MASK       (0x4000000U)
#define GPC_LPCR_A53_AD_EN_C3_IRQ_PUP_SHIFT      (26U)
#define GPC_LPCR_A53_AD_EN_C3_IRQ_PUP(x)         (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C3_IRQ_PUP_SHIFT)) & GPC_LPCR_A53_AD_EN_C3_IRQ_PUP_MASK)
#define GPC_LPCR_A53_AD_EN_C3_PUP_MASK           (0x8000000U)
#define GPC_LPCR_A53_AD_EN_C3_PUP_SHIFT          (27U)
#define GPC_LPCR_A53_AD_EN_C3_PUP(x)             (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_EN_C3_PUP_SHIFT)) & GPC_LPCR_A53_AD_EN_C3_PUP_MASK)
#define GPC_LPCR_A53_AD_L2PGE_MASK               (0x80000000U)
#define GPC_LPCR_A53_AD_L2PGE_SHIFT              (31U)
#define GPC_LPCR_A53_AD_L2PGE(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_AD_L2PGE_SHIFT)) & GPC_LPCR_A53_AD_L2PGE_MASK)

/*! @name LPCR_M4 - Low power control register of CPU1 */
#define GPC_LPCR_M4_LPM0_MASK                    (0x3U)
#define GPC_LPCR_M4_LPM0_SHIFT                   (0U)
#define GPC_LPCR_M4_LPM0(x)                      (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_M4_LPM0_SHIFT)) & GPC_LPCR_M4_LPM0_MASK)
#define GPC_LPCR_M4_EN_M4_PDN_MASK               (0x4U)
#define GPC_LPCR_M4_EN_M4_PDN_SHIFT              (2U)
#define GPC_LPCR_M4_EN_M4_PDN(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_M4_EN_M4_PDN_SHIFT)) & GPC_LPCR_M4_EN_M4_PDN_MASK)
#define GPC_LPCR_M4_EN_M4_PUP_MASK               (0x8U)
#define GPC_LPCR_M4_EN_M4_PUP_SHIFT              (3U)
#define GPC_LPCR_M4_EN_M4_PUP(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_M4_EN_M4_PUP_SHIFT)) & GPC_LPCR_M4_EN_M4_PUP_MASK)
#define GPC_LPCR_M4_CPU_CLK_ON_LPM_MASK          (0x4000U)
#define GPC_LPCR_M4_CPU_CLK_ON_LPM_SHIFT         (14U)
#define GPC_LPCR_M4_CPU_CLK_ON_LPM(x)            (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_M4_CPU_CLK_ON_LPM_SHIFT)) & GPC_LPCR_M4_CPU_CLK_ON_LPM_MASK)
#define GPC_LPCR_M4_MASK_M4_WFI_MASK             (0x10000U)
#define GPC_LPCR_M4_MASK_M4_WFI_SHIFT            (16U)
#define GPC_LPCR_M4_MASK_M4_WFI(x)               (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_M4_MASK_M4_WFI_SHIFT)) & GPC_LPCR_M4_MASK_M4_WFI_MASK)
#define GPC_LPCR_M4_MASK_DSM_TRIGGER_MASK        (0x80000000U)
#define GPC_LPCR_M4_MASK_DSM_TRIGGER_SHIFT       (31U)
#define GPC_LPCR_M4_MASK_DSM_TRIGGER(x)          (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_M4_MASK_DSM_TRIGGER_SHIFT)) & GPC_LPCR_M4_MASK_DSM_TRIGGER_MASK)

/*! @name SLPCR - System low power control register */
#define GPC_SLPCR_BYPASS_PMIC_READY_MASK         (0x1U)
#define GPC_SLPCR_BYPASS_PMIC_READY_SHIFT        (0U)
#define GPC_SLPCR_BYPASS_PMIC_READY(x)           (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_BYPASS_PMIC_READY_SHIFT)) & GPC_SLPCR_BYPASS_PMIC_READY_MASK)
#define GPC_SLPCR_SBYOS_MASK                     (0x2U)
#define GPC_SLPCR_SBYOS_SHIFT                    (1U)
#define GPC_SLPCR_SBYOS(x)                       (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_SBYOS_SHIFT)) & GPC_SLPCR_SBYOS_MASK)
#define GPC_SLPCR_VSTBY_MASK                     (0x4U)
#define GPC_SLPCR_VSTBY_SHIFT                    (2U)
#define GPC_SLPCR_VSTBY(x)                       (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_VSTBY_SHIFT)) & GPC_SLPCR_VSTBY_MASK)
#define GPC_SLPCR_STBY_COUNT_MASK                (0x38U)
#define GPC_SLPCR_STBY_COUNT_SHIFT               (3U)
#define GPC_SLPCR_STBY_COUNT(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_STBY_COUNT_SHIFT)) & GPC_SLPCR_STBY_COUNT_MASK)
#define GPC_SLPCR_COSC_PWRDOWN_MASK              (0x40U)
#define GPC_SLPCR_COSC_PWRDOWN_SHIFT             (6U)
#define GPC_SLPCR_COSC_PWRDOWN(x)                (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_COSC_PWRDOWN_SHIFT)) & GPC_SLPCR_COSC_PWRDOWN_MASK)
#define GPC_SLPCR_COSC_EN_MASK                   (0x80U)
#define GPC_SLPCR_COSC_EN_SHIFT                  (7U)
#define GPC_SLPCR_COSC_EN(x)                     (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_COSC_EN_SHIFT)) & GPC_SLPCR_COSC_EN_MASK)
#define GPC_SLPCR_OSCCNT_MASK                    (0xFF00U)
#define GPC_SLPCR_OSCCNT_SHIFT                   (8U)
#define GPC_SLPCR_OSCCNT(x)                      (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_OSCCNT_SHIFT)) & GPC_SLPCR_OSCCNT_MASK)
#define GPC_SLPCR_EN_A53_FASTWUP_WAIT_MODE_MASK  (0x10000U)
#define GPC_SLPCR_EN_A53_FASTWUP_WAIT_MODE_SHIFT (16U)
#define GPC_SLPCR_EN_A53_FASTWUP_WAIT_MODE(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_EN_A53_FASTWUP_WAIT_MODE_SHIFT)) & GPC_SLPCR_EN_A53_FASTWUP_WAIT_MODE_MASK)
#define GPC_SLPCR_EN_A53_FASTWUP_STOP_MODE_MASK  (0x20000U)
#define GPC_SLPCR_EN_A53_FASTWUP_STOP_MODE_SHIFT (17U)
#define GPC_SLPCR_EN_A53_FASTWUP_STOP_MODE(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_EN_A53_FASTWUP_STOP_MODE_SHIFT)) & GPC_SLPCR_EN_A53_FASTWUP_STOP_MODE_MASK)
#define GPC_SLPCR_EN_M4_FASTWUP_WAIT_MODE_MASK   (0x40000U)
#define GPC_SLPCR_EN_M4_FASTWUP_WAIT_MODE_SHIFT  (18U)
#define GPC_SLPCR_EN_M4_FASTWUP_WAIT_MODE(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_EN_M4_FASTWUP_WAIT_MODE_SHIFT)) & GPC_SLPCR_EN_M4_FASTWUP_WAIT_MODE_MASK)
#define GPC_SLPCR_EN_M4_FASTWUP_STOP_MODE_MASK   (0x80000U)
#define GPC_SLPCR_EN_M4_FASTWUP_STOP_MODE_SHIFT  (19U)
#define GPC_SLPCR_EN_M4_FASTWUP_STOP_MODE(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_EN_M4_FASTWUP_STOP_MODE_SHIFT)) & GPC_SLPCR_EN_M4_FASTWUP_STOP_MODE_MASK)
#define GPC_SLPCR_DISABLE_A53_IS_DSM_MASK        (0x800000U)
#define GPC_SLPCR_DISABLE_A53_IS_DSM_SHIFT       (23U)
#define GPC_SLPCR_DISABLE_A53_IS_DSM(x)          (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_DISABLE_A53_IS_DSM_SHIFT)) & GPC_SLPCR_DISABLE_A53_IS_DSM_MASK)
#define GPC_SLPCR_REG_BYPASS_COUNT_MASK          (0x3F000000U)
#define GPC_SLPCR_REG_BYPASS_COUNT_SHIFT         (24U)
#define GPC_SLPCR_REG_BYPASS_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_REG_BYPASS_COUNT_SHIFT)) & GPC_SLPCR_REG_BYPASS_COUNT_MASK)
#define GPC_SLPCR_RBC_EN_MASK                    (0x40000000U)
#define GPC_SLPCR_RBC_EN_SHIFT                   (30U)
#define GPC_SLPCR_RBC_EN(x)                      (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_RBC_EN_SHIFT)) & GPC_SLPCR_RBC_EN_MASK)
#define GPC_SLPCR_EN_DSM_MASK                    (0x80000000U)
#define GPC_SLPCR_EN_DSM_SHIFT                   (31U)
#define GPC_SLPCR_EN_DSM(x)                      (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_EN_DSM_SHIFT)) & GPC_SLPCR_EN_DSM_MASK)

/*! @name MST_CPU_MAPPING - MASTER LPM Handshake */
#define GPC_MST_CPU_MAPPING_MST0_CPU_MAPPING_MASK (0x1U)
#define GPC_MST_CPU_MAPPING_MST0_CPU_MAPPING_SHIFT (0U)
#define GPC_MST_CPU_MAPPING_MST0_CPU_MAPPING(x)  (((uint32_t)(((uint32_t)(x)) << GPC_MST_CPU_MAPPING_MST0_CPU_MAPPING_SHIFT)) & GPC_MST_CPU_MAPPING_MST0_CPU_MAPPING_MASK)
#define GPC_MST_CPU_MAPPING_MEMLP_RET_PGEN_MASK  (0xFFFFFFFEU)
#define GPC_MST_CPU_MAPPING_MEMLP_RET_PGEN_SHIFT (1U)
#define GPC_MST_CPU_MAPPING_MEMLP_RET_PGEN(x)    (((uint32_t)(((uint32_t)(x)) << GPC_MST_CPU_MAPPING_MEMLP_RET_PGEN_SHIFT)) & GPC_MST_CPU_MAPPING_MEMLP_RET_PGEN_MASK)

/*! @name MLPCR - Memory low power control register */
#define GPC_MLPCR_MEMLP_CTL_DIS_MASK             (0x1U)
#define GPC_MLPCR_MEMLP_CTL_DIS_SHIFT            (0U)
#define GPC_MLPCR_MEMLP_CTL_DIS(x)               (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEMLP_CTL_DIS_SHIFT)) & GPC_MLPCR_MEMLP_CTL_DIS_MASK)
#define GPC_MLPCR_MEMLP_RET_SEL_MASK             (0x2U)
#define GPC_MLPCR_MEMLP_RET_SEL_SHIFT            (1U)
#define GPC_MLPCR_MEMLP_RET_SEL(x)               (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEMLP_RET_SEL_SHIFT)) & GPC_MLPCR_MEMLP_RET_SEL_MASK)
#define GPC_MLPCR_ROMLP_PDN_DIS_MASK             (0x4U)
#define GPC_MLPCR_ROMLP_PDN_DIS_SHIFT            (2U)
#define GPC_MLPCR_ROMLP_PDN_DIS(x)               (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_ROMLP_PDN_DIS_SHIFT)) & GPC_MLPCR_ROMLP_PDN_DIS_MASK)
#define GPC_MLPCR_MEMLP_ENT_CNT_MASK             (0xFF00U)
#define GPC_MLPCR_MEMLP_ENT_CNT_SHIFT            (8U)
#define GPC_MLPCR_MEMLP_ENT_CNT(x)               (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEMLP_ENT_CNT_SHIFT)) & GPC_MLPCR_MEMLP_ENT_CNT_MASK)
#define GPC_MLPCR_MEM_EXT_CNT_MASK               (0xFF0000U)
#define GPC_MLPCR_MEM_EXT_CNT_SHIFT              (16U)
#define GPC_MLPCR_MEM_EXT_CNT(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEM_EXT_CNT_SHIFT)) & GPC_MLPCR_MEM_EXT_CNT_MASK)
#define GPC_MLPCR_MEMLP_RET_PGEN_MASK            (0xFF000000U)
#define GPC_MLPCR_MEMLP_RET_PGEN_SHIFT           (24U)
#define GPC_MLPCR_MEMLP_RET_PGEN(x)              (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEMLP_RET_PGEN_SHIFT)) & GPC_MLPCR_MEMLP_RET_PGEN_MASK)

/*! @name PGC_ACK_SEL_A53 - PGC acknowledge signal selection of A53 platform */
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PDN_ACK_MASK (0x1U)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PDN_ACK_SHIFT (0U)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PDN_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PDN_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PDN_ACK_MASK (0x2U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PDN_ACK_SHIFT (1U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PDN_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PDN_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PDN_ACK_MASK (0x4U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PDN_ACK_SHIFT (2U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PDN_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PDN_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PDN_ACK_MASK (0x2000U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PDN_ACK_SHIFT (13U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PDN_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PDN_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PDN_ACK_MASK (0x4000U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PDN_ACK_SHIFT (14U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PDN_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PDN_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PDN_ACK_MASK (0x8000U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PDN_ACK_SHIFT (15U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PDN_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_PGC_PDN_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_PGC_PDN_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PUP_ACK_MASK (0x10000U)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PUP_ACK_SHIFT (16U)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PUP_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PUP_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PUP_ACK_MASK (0x20000U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PUP_ACK_SHIFT (17U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PUP_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PUP_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PUP_ACK_MASK (0x40000U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PUP_ACK_SHIFT (18U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PUP_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PUP_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PUP_ACK_MASK (0x20000000U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PUP_ACK_SHIFT (29U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PUP_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PUP_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PUP_ACK_MASK (0x40000000U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PUP_ACK_SHIFT (30U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PUP_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PUP_ACK_MASK)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PUP_ACK_MASK (0x80000000U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PUP_ACK_SHIFT (31U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PUP_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_A53_A53_PGC_PUP_ACK_SHIFT)) & GPC_PGC_ACK_SEL_A53_A53_PGC_PUP_ACK_MASK)

/*! @name PGC_ACK_SEL_M4 - PGC acknowledge signal selection of M4 platform */
#define GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PDN_ACK_MASK (0x1U)
#define GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PDN_ACK_SHIFT (0U)
#define GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PDN_ACK_SHIFT)) & GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PDN_ACK_MASK)
#define GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PDN_ACK_MASK (0x8000U)
#define GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PDN_ACK_SHIFT (15U)
#define GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PDN_ACK_SHIFT)) & GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PDN_ACK_MASK)
#define GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PUP_ACK_MASK (0x10000U)
#define GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PUP_ACK_SHIFT (16U)
#define GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PUP_ACK_SHIFT)) & GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PUP_ACK_MASK)
#define GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PUP_ACK_MASK (0x80000000U)
#define GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PUP_ACK_SHIFT (31U)
#define GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PUP_ACK_SHIFT)) & GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PUP_ACK_MASK)

/*! @name MISC - GPC Miscellaneous register */
#define GPC_MISC_M4_SLEEP_HOLD_REQ_B_MASK        (0x1U)
#define GPC_MISC_M4_SLEEP_HOLD_REQ_B_SHIFT       (0U)
#define GPC_MISC_M4_SLEEP_HOLD_REQ_B(x)          (((uint32_t)(((uint32_t)(x)) << GPC_MISC_M4_SLEEP_HOLD_REQ_B_SHIFT)) & GPC_MISC_M4_SLEEP_HOLD_REQ_B_MASK)
#define GPC_MISC_A53_SLEEP_HOLD_REQ_B_MASK       (0x2U)
#define GPC_MISC_A53_SLEEP_HOLD_REQ_B_SHIFT      (1U)
#define GPC_MISC_A53_SLEEP_HOLD_REQ_B(x)         (((uint32_t)(((uint32_t)(x)) << GPC_MISC_A53_SLEEP_HOLD_REQ_B_SHIFT)) & GPC_MISC_A53_SLEEP_HOLD_REQ_B_MASK)
#define GPC_MISC_GPC_IRQ_MASK_MASK               (0x20U)
#define GPC_MISC_GPC_IRQ_MASK_SHIFT              (5U)
#define GPC_MISC_GPC_IRQ_MASK(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_MISC_GPC_IRQ_MASK_SHIFT)) & GPC_MISC_GPC_IRQ_MASK_MASK)
#define GPC_MISC_M4_PDN_REQ_MASK_MASK            (0x100U)
#define GPC_MISC_M4_PDN_REQ_MASK_SHIFT           (8U)
#define GPC_MISC_M4_PDN_REQ_MASK(x)              (((uint32_t)(((uint32_t)(x)) << GPC_MISC_M4_PDN_REQ_MASK_SHIFT)) & GPC_MISC_M4_PDN_REQ_MASK_MASK)
#define GPC_MISC_A53_BYPASS_PUP_MASK_MASK        (0x1000000U)
#define GPC_MISC_A53_BYPASS_PUP_MASK_SHIFT       (24U)
#define GPC_MISC_A53_BYPASS_PUP_MASK(x)          (((uint32_t)(((uint32_t)(x)) << GPC_MISC_A53_BYPASS_PUP_MASK_SHIFT)) & GPC_MISC_A53_BYPASS_PUP_MASK_MASK)
#define GPC_MISC_M4_BYPASS_PUP_MASK_MASK         (0x2000000U)
#define GPC_MISC_M4_BYPASS_PUP_MASK_SHIFT        (25U)
#define GPC_MISC_M4_BYPASS_PUP_MASK(x)           (((uint32_t)(((uint32_t)(x)) << GPC_MISC_M4_BYPASS_PUP_MASK_SHIFT)) & GPC_MISC_M4_BYPASS_PUP_MASK_MASK)

/*! @name IMR_CORE0_A53 - IRQ masking register 1 of A53 core0..IRQ masking register 4 of A53 core0 */
#define GPC_IMR_CORE0_A53_IMR1_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR1_CORE0_A53_SHIFT   (0U)
#define GPC_IMR_CORE0_A53_IMR1_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR1_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR1_CORE0_A53_MASK)
#define GPC_IMR_CORE0_A53_IMR2_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR2_CORE0_A53_SHIFT   (0U)
#define GPC_IMR_CORE0_A53_IMR2_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR2_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR2_CORE0_A53_MASK)
#define GPC_IMR_CORE0_A53_IMR3_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR3_CORE0_A53_SHIFT   (0U)
#define GPC_IMR_CORE0_A53_IMR3_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR3_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR3_CORE0_A53_MASK)
#define GPC_IMR_CORE0_A53_IMR4_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR4_CORE0_A53_SHIFT   (0U)
#define GPC_IMR_CORE0_A53_IMR4_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR4_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR4_CORE0_A53_MASK)

/* The count of GPC_IMR_CORE0_A53 */
#define GPC_IMR_CORE0_A53_COUNT                  (4U)

/*! @name IMR_CORE1_A53 - IRQ masking register 1 of A53 core1..IRQ masking register 4 of A53 core1 */
#define GPC_IMR_CORE1_A53_IMR1_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR1_CORE1_A53_SHIFT   (0U)
#define GPC_IMR_CORE1_A53_IMR1_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR1_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR1_CORE1_A53_MASK)
#define GPC_IMR_CORE1_A53_IMR2_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR2_CORE1_A53_SHIFT   (0U)
#define GPC_IMR_CORE1_A53_IMR2_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR2_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR2_CORE1_A53_MASK)
#define GPC_IMR_CORE1_A53_IMR3_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR3_CORE1_A53_SHIFT   (0U)
#define GPC_IMR_CORE1_A53_IMR3_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR3_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR3_CORE1_A53_MASK)
#define GPC_IMR_CORE1_A53_IMR4_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR4_CORE1_A53_SHIFT   (0U)
#define GPC_IMR_CORE1_A53_IMR4_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR4_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR4_CORE1_A53_MASK)

/* The count of GPC_IMR_CORE1_A53 */
#define GPC_IMR_CORE1_A53_COUNT                  (4U)

/*! @name IMR_M4 - IRQ masking register 1 of M4..IRQ masking register 4 of M4 */
#define GPC_IMR_M4_IMR1_M4_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M4_IMR1_M4_SHIFT                 (0U)
#define GPC_IMR_M4_IMR1_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M4_IMR1_M4_SHIFT)) & GPC_IMR_M4_IMR1_M4_MASK)
#define GPC_IMR_M4_IMR2_M4_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M4_IMR2_M4_SHIFT                 (0U)
#define GPC_IMR_M4_IMR2_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M4_IMR2_M4_SHIFT)) & GPC_IMR_M4_IMR2_M4_MASK)
#define GPC_IMR_M4_IMR3_M4_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M4_IMR3_M4_SHIFT                 (0U)
#define GPC_IMR_M4_IMR3_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M4_IMR3_M4_SHIFT)) & GPC_IMR_M4_IMR3_M4_MASK)
#define GPC_IMR_M4_IMR4_M4_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M4_IMR4_M4_SHIFT                 (0U)
#define GPC_IMR_M4_IMR4_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M4_IMR4_M4_SHIFT)) & GPC_IMR_M4_IMR4_M4_MASK)

/* The count of GPC_IMR_M4 */
#define GPC_IMR_M4_COUNT                         (4U)

/*! @name ISR_A53 - IRQ status register 1 of A53..IRQ status register 4 of A53 */
#define GPC_ISR_A53_ISR1_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR1_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR1_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR1_A53_SHIFT)) & GPC_ISR_A53_ISR1_A53_MASK)
#define GPC_ISR_A53_ISR2_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR2_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR2_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR2_A53_SHIFT)) & GPC_ISR_A53_ISR2_A53_MASK)
#define GPC_ISR_A53_ISR3_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR3_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR3_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR3_A53_SHIFT)) & GPC_ISR_A53_ISR3_A53_MASK)
#define GPC_ISR_A53_ISR4_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR4_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR4_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR4_A53_SHIFT)) & GPC_ISR_A53_ISR4_A53_MASK)

/* The count of GPC_ISR_A53 */
#define GPC_ISR_A53_COUNT                        (4U)

/*! @name ISR_M4 - IRQ status register 1 of M4..IRQ status register 4 of M4 */
#define GPC_ISR_M4_ISR1_M4_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M4_ISR1_M4_SHIFT                 (0U)
#define GPC_ISR_M4_ISR1_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M4_ISR1_M4_SHIFT)) & GPC_ISR_M4_ISR1_M4_MASK)
#define GPC_ISR_M4_ISR2_M4_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M4_ISR2_M4_SHIFT                 (0U)
#define GPC_ISR_M4_ISR2_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M4_ISR2_M4_SHIFT)) & GPC_ISR_M4_ISR2_M4_MASK)
#define GPC_ISR_M4_ISR3_M4_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M4_ISR3_M4_SHIFT                 (0U)
#define GPC_ISR_M4_ISR3_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M4_ISR3_M4_SHIFT)) & GPC_ISR_M4_ISR3_M4_MASK)
#define GPC_ISR_M4_ISR4_M4_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M4_ISR4_M4_SHIFT                 (0U)
#define GPC_ISR_M4_ISR4_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M4_ISR4_M4_SHIFT)) & GPC_ISR_M4_ISR4_M4_MASK)

/* The count of GPC_ISR_M4 */
#define GPC_ISR_M4_COUNT                         (4U)

/*! @name SLT0_CFG - Slot configure register for A53 core */
#define GPC_SLT0_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT0_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT0_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT0_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT0_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT0_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT0_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT0_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT0_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT0_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT0_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT0_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT0_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT0_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT0_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT0_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT0_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT0_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT0_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT0_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT0_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT0_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT0_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT0_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT0_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT0_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT0_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT0_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT0_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT0_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT0_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT0_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT0_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT0_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT0_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT0_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT0_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT0_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT0_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT0_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT0_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT0_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT0_CFG_SCU_PDN_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT0_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT0_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT0_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT0_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT0_CFG_SCU_PUP_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT0_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT0_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT1_CFG - Slot configure register for A53 core */
#define GPC_SLT1_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT1_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT1_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT1_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT1_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT1_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT1_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT1_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT1_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT1_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT1_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT1_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT1_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT1_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT1_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT1_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT1_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT1_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT1_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT1_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT1_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT1_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT1_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT1_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT1_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT1_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT1_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT1_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT1_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT1_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT1_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT1_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT1_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT1_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT1_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT1_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT1_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT1_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT1_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT1_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT1_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT1_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT1_CFG_SCU_PDN_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT1_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT1_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT1_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT1_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT1_CFG_SCU_PUP_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT1_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT1_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT2_CFG - Slot configure register for A53 core */
#define GPC_SLT2_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT2_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT2_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT2_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT2_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT2_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT2_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT2_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT2_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT2_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT2_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT2_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT2_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT2_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT2_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT2_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT2_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT2_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT2_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT2_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT2_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT2_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT2_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT2_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT2_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT2_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT2_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT2_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT2_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT2_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT2_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT2_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT2_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT2_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT2_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT2_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT2_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT2_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT2_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT2_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT2_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT2_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT2_CFG_SCU_PDN_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT2_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT2_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT2_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT2_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT2_CFG_SCU_PUP_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT2_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT2_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT3_CFG - Slot configure register for A53 core */
#define GPC_SLT3_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT3_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT3_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT3_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT3_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT3_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT3_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT3_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT3_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT3_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT3_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT3_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT3_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT3_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT3_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT3_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT3_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT3_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT3_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT3_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT3_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT3_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT3_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT3_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT3_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT3_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT3_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT3_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT3_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT3_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT3_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT3_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT3_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT3_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT3_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT3_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT3_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT3_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT3_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT3_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT3_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT3_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT3_CFG_SCU_PDN_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT3_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT3_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT3_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT3_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT3_CFG_SCU_PUP_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT3_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT3_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT4_CFG - Slot configure register for A53 core */
#define GPC_SLT4_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT4_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT4_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT4_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT4_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT4_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT4_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT4_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT4_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT4_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT4_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT4_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT4_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT4_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT4_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT4_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT4_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT4_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT4_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT4_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT4_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT4_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT4_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT4_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT4_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT4_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT4_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT4_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT4_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT4_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT4_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT4_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT4_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT4_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT4_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT4_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT4_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT4_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT4_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT4_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT4_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT4_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT4_CFG_SCU_PDN_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT4_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT4_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT4_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT4_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT4_CFG_SCU_PUP_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT4_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT4_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT5_CFG - Slot configure register for A53 core */
#define GPC_SLT5_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT5_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT5_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT5_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT5_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT5_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT5_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT5_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT5_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT5_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT5_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT5_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT5_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT5_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT5_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT5_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT5_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT5_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT5_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT5_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT5_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT5_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT5_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT5_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT5_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT5_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT5_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT5_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT5_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT5_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT5_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT5_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT5_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT5_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT5_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT5_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT5_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT5_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT5_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT5_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT5_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT5_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT5_CFG_SCU_PDN_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT5_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT5_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT5_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT5_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT5_CFG_SCU_PUP_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT5_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT5_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT6_CFG - Slot configure register for A53 core */
#define GPC_SLT6_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT6_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT6_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT6_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT6_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT6_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT6_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT6_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT6_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT6_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT6_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT6_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT6_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT6_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT6_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT6_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT6_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT6_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT6_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT6_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT6_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT6_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT6_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT6_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT6_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT6_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT6_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT6_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT6_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT6_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT6_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT6_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT6_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT6_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT6_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT6_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT6_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT6_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT6_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT6_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT6_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT6_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT6_CFG_SCU_PDN_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT6_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT6_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT6_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT6_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT6_CFG_SCU_PUP_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT6_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT6_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT7_CFG - Slot configure register for A53 core */
#define GPC_SLT7_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT7_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT7_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT7_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT7_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT7_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT7_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT7_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT7_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT7_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT7_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT7_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT7_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT7_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT7_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT7_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT7_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT7_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT7_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT7_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT7_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT7_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT7_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT7_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT7_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT7_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT7_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT7_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT7_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT7_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT7_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT7_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT7_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT7_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT7_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT7_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT7_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT7_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT7_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT7_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT7_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT7_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT7_CFG_SCU_PDN_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT7_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT7_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT7_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT7_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT7_CFG_SCU_PUP_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT7_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT7_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT8_CFG - Slot configure register for A53 core */
#define GPC_SLT8_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT8_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT8_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT8_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT8_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT8_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT8_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT8_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT8_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT8_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT8_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT8_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT8_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT8_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT8_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT8_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT8_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT8_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT8_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT8_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT8_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT8_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT8_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT8_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT8_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT8_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT8_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT8_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT8_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT8_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT8_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT8_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT8_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT8_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT8_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT8_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT8_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT8_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT8_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT8_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT8_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT8_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT8_CFG_SCU_PDN_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT8_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT8_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT8_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT8_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT8_CFG_SCU_PUP_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT8_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT8_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT9_CFG - Slot configure register for A53 core */
#define GPC_SLT9_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT9_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT9_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT9_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT9_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT9_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT9_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT9_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT9_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT9_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT9_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT9_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT9_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT9_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT9_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT9_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT9_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT9_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT9_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT9_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT9_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT9_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT9_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT9_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT9_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT9_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT9_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT9_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT9_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT9_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT9_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT9_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT9_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT9_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT9_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT9_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT9_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT9_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT9_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT9_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT9_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT9_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT9_CFG_SCU_PDN_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT9_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT9_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT9_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT9_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT9_CFG_SCU_PUP_SLOT_CONTROL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_SLT9_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT9_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT10_CFG - Slot configure register for A53 core */
#define GPC_SLT10_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT10_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT10_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT10_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT10_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT10_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT10_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT10_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT10_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT10_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT10_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT10_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT10_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT10_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT10_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT10_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT10_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT10_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT10_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT10_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT10_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT10_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT10_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT10_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT10_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT10_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT10_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT10_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT10_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT10_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT10_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT10_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT10_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT10_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT10_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT10_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT10_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT10_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT10_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT10_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT10_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT10_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT10_CFG_SCU_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT10_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT10_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT10_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT10_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT10_CFG_SCU_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT10_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT10_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT11_CFG - Slot configure register for A53 core */
#define GPC_SLT11_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT11_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT11_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT11_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT11_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT11_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT11_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT11_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT11_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT11_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT11_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT11_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT11_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT11_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT11_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT11_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT11_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT11_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT11_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT11_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT11_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT11_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT11_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT11_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT11_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT11_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT11_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT11_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT11_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT11_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT11_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT11_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT11_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT11_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT11_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT11_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT11_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT11_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT11_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT11_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT11_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT11_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT11_CFG_SCU_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT11_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT11_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT11_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT11_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT11_CFG_SCU_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT11_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT11_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT12_CFG - Slot configure register for A53 core */
#define GPC_SLT12_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT12_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT12_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT12_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT12_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT12_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT12_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT12_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT12_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT12_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT12_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT12_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT12_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT12_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT12_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT12_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT12_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT12_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT12_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT12_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT12_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT12_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT12_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT12_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT12_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT12_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT12_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT12_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT12_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT12_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT12_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT12_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT12_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT12_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT12_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT12_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT12_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT12_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT12_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT12_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT12_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT12_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT12_CFG_SCU_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT12_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT12_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT12_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT12_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT12_CFG_SCU_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT12_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT12_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT13_CFG - Slot configure register for A53 core */
#define GPC_SLT13_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT13_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT13_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT13_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT13_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT13_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT13_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT13_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT13_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT13_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT13_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT13_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT13_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT13_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT13_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT13_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT13_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT13_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT13_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT13_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT13_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT13_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT13_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT13_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT13_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT13_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT13_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT13_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT13_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT13_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT13_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT13_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT13_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT13_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT13_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT13_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT13_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT13_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT13_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT13_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT13_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT13_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT13_CFG_SCU_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT13_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT13_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT13_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT13_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT13_CFG_SCU_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT13_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT13_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT14_CFG - Slot configure register for A53 core */
#define GPC_SLT14_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT14_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT14_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT14_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT14_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT14_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT14_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT14_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT14_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT14_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT14_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT14_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT14_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT14_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT14_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT14_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT14_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT14_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT14_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT14_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT14_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT14_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT14_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT14_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT14_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT14_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT14_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT14_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT14_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT14_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT14_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT14_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT14_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT14_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT14_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT14_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT14_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT14_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT14_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT14_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT14_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT14_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT14_CFG_SCU_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT14_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT14_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT14_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT14_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT14_CFG_SCU_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT14_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT14_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name PGC_CPU_0_1_MAPPING - PGC CPU mapping */
#define GPC_PGC_CPU_0_1_MAPPING_MF_A53_DOMAIN_MASK (0x1U)
#define GPC_PGC_CPU_0_1_MAPPING_MF_A53_DOMAIN_SHIFT (0U)
#define GPC_PGC_CPU_0_1_MAPPING_MF_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_MF_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_MF_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_A53_DOMAIN_MASK (0x4U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_A53_DOMAIN_SHIFT (2U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_MIPI_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_MIPI_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE_A53_DOMAIN_MASK (0x8U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE_A53_DOMAIN_SHIFT (3U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_PCIE_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_PCIE_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_A53_DOMAIN_MASK (0x10U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_A53_DOMAIN_SHIFT (4U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_OTG1_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_OTG1_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_OTG2_A53_DOMAIN_MASK (0x20U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG2_A53_DOMAIN_SHIFT (5U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG2_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_OTG2_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_OTG2_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_HSIC_A53_DOMAIN_MASK (0x40U)
#define GPC_PGC_CPU_0_1_MAPPING_HSIC_A53_DOMAIN_SHIFT (6U)
#define GPC_PGC_CPU_0_1_MAPPING_HSIC_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_HSIC_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_HSIC_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_A53_DOMAIN_MASK (0x80U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_A53_DOMAIN_SHIFT (7U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_DDR1_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_DDR1_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_DDR2_A53_DOMAIN_MASK (0x100U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR2_A53_DOMAIN_SHIFT (8U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR2_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_DDR2_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_DDR2_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_A53_DOMAIN_MASK (0x200U)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_A53_DOMAIN_SHIFT (9U)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_GPU_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_GPU_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_VPU_A53_DOMAIN_MASK (0x400U)
#define GPC_PGC_CPU_0_1_MAPPING_VPU_A53_DOMAIN_SHIFT (10U)
#define GPC_PGC_CPU_0_1_MAPPING_VPU_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_VPU_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_VPU_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_HDMI_A53_DOMAIN_MASK (0x800U)
#define GPC_PGC_CPU_0_1_MAPPING_HDMI_A53_DOMAIN_SHIFT (11U)
#define GPC_PGC_CPU_0_1_MAPPING_HDMI_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_HDMI_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_HDMI_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_DISP_A53_DOMAIN_MASK (0x1000U)
#define GPC_PGC_CPU_0_1_MAPPING_DISP_A53_DOMAIN_SHIFT (12U)
#define GPC_PGC_CPU_0_1_MAPPING_DISP_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_DISP_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_DISP_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_A53_DOMAIN_MASK (0x2000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_A53_DOMAIN_SHIFT (13U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_A53_DOMAIN_MASK (0x4000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_A53_DOMAIN_SHIFT (14U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE2_A53_DOMAIN_MASK (0x8000U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE2_A53_DOMAIN_SHIFT (15U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE2_A53_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_PCIE2_A53_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_PCIE2_A53_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_MF_M4_DOMAIN_MASK (0x10000U)
#define GPC_PGC_CPU_0_1_MAPPING_MF_M4_DOMAIN_SHIFT (16U)
#define GPC_PGC_CPU_0_1_MAPPING_MF_M4_DOMAIN(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_MF_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_MF_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_M4_DOMAIN_MASK (0x40000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_M4_DOMAIN_SHIFT (18U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_MIPI_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_MIPI_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE_M4_DOMAIN_MASK (0x80000U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE_M4_DOMAIN_SHIFT (19U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_PCIE_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_PCIE_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_M4_DOMAIN_MASK (0x100000U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_M4_DOMAIN_SHIFT (20U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_OTG1_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_OTG1_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_OTG2_M4_DOMAIN_MASK (0x200000U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG2_M4_DOMAIN_SHIFT (21U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG2_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_OTG2_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_OTG2_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_HSIC_M4_DOMAIN_MASK (0x400000U)
#define GPC_PGC_CPU_0_1_MAPPING_HSIC_M4_DOMAIN_SHIFT (22U)
#define GPC_PGC_CPU_0_1_MAPPING_HSIC_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_HSIC_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_HSIC_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_M4_DOMAIN_MASK (0x800000U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_M4_DOMAIN_SHIFT (23U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_DDR1_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_DDR1_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_DDR2_M4_DOMAIN_MASK (0x1000000U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR2_M4_DOMAIN_SHIFT (24U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR2_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_DDR2_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_DDR2_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_M4_DOMAIN_MASK (0x2000000U)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_M4_DOMAIN_SHIFT (25U)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_GPU_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_GPU_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_VPU_M4_DOMAIN_MASK (0x4000000U)
#define GPC_PGC_CPU_0_1_MAPPING_VPU_M4_DOMAIN_SHIFT (26U)
#define GPC_PGC_CPU_0_1_MAPPING_VPU_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_VPU_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_VPU_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_HDMI_M4_DOMAIN_MASK (0x8000000U)
#define GPC_PGC_CPU_0_1_MAPPING_HDMI_M4_DOMAIN_SHIFT (27U)
#define GPC_PGC_CPU_0_1_MAPPING_HDMI_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_HDMI_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_HDMI_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_DISP_M4_DOMAIN_MASK (0x10000000U)
#define GPC_PGC_CPU_0_1_MAPPING_DISP_M4_DOMAIN_SHIFT (28U)
#define GPC_PGC_CPU_0_1_MAPPING_DISP_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_DISP_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_DISP_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_M4_DOMAIN_MASK (0x20000000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_M4_DOMAIN_SHIFT (29U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_M4_DOMAIN_MASK (0x40000000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_M4_DOMAIN_SHIFT (30U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_M4_DOMAIN_MASK)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE2_M4_DOMAIN_MASK (0x80000000U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE2_M4_DOMAIN_SHIFT (31U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE2_M4_DOMAIN(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CPU_0_1_MAPPING_PCIE2_M4_DOMAIN_SHIFT)) & GPC_PGC_CPU_0_1_MAPPING_PCIE2_M4_DOMAIN_MASK)

/*! @name CPU_PGC_SW_PUP_REQ - CPU PGC software power up trigger */
#define GPC_CPU_PGC_SW_PUP_REQ_CORE0_A53_SW_PUP_REQ_MASK (0x1U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE0_A53_SW_PUP_REQ_SHIFT (0U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE0_A53_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_SW_PUP_REQ_CORE0_A53_SW_PUP_REQ_SHIFT)) & GPC_CPU_PGC_SW_PUP_REQ_CORE0_A53_SW_PUP_REQ_MASK)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE1_A53_SW_PUP_REQ_MASK (0x2U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE1_A53_SW_PUP_REQ_SHIFT (1U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE1_A53_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_SW_PUP_REQ_CORE1_A53_SW_PUP_REQ_SHIFT)) & GPC_CPU_PGC_SW_PUP_REQ_CORE1_A53_SW_PUP_REQ_MASK)
#define GPC_CPU_PGC_SW_PUP_REQ_SCU_A53_SW_PUP_REQ_MASK (0x4U)
#define GPC_CPU_PGC_SW_PUP_REQ_SCU_A53_SW_PUP_REQ_SHIFT (2U)
#define GPC_CPU_PGC_SW_PUP_REQ_SCU_A53_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_SW_PUP_REQ_SCU_A53_SW_PUP_REQ_SHIFT)) & GPC_CPU_PGC_SW_PUP_REQ_SCU_A53_SW_PUP_REQ_MASK)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE2_A53_SW_PUP_REQ_MASK (0x8U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE2_A53_SW_PUP_REQ_SHIFT (3U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE2_A53_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_SW_PUP_REQ_CORE2_A53_SW_PUP_REQ_SHIFT)) & GPC_CPU_PGC_SW_PUP_REQ_CORE2_A53_SW_PUP_REQ_MASK)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE3_A53_SW_PUP_REQ_MASK (0x10U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE3_A53_SW_PUP_REQ_SHIFT (4U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE3_A53_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_SW_PUP_REQ_CORE3_A53_SW_PUP_REQ_SHIFT)) & GPC_CPU_PGC_SW_PUP_REQ_CORE3_A53_SW_PUP_REQ_MASK)

/*! @name MIX_PGC_SW_PUP_REQ - MIX PGC software power up trigger */
#define GPC_MIX_PGC_SW_PUP_REQ_MIX_SW_PUP_REQ_MASK (0x1U)
#define GPC_MIX_PGC_SW_PUP_REQ_MIX_SW_PUP_REQ_SHIFT (0U)
#define GPC_MIX_PGC_SW_PUP_REQ_MIX_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_MIX_PGC_SW_PUP_REQ_MIX_SW_PUP_REQ_SHIFT)) & GPC_MIX_PGC_SW_PUP_REQ_MIX_SW_PUP_REQ_MASK)

/*! @name PU_PGC_SW_PUP_REQ - PU PGC software up trigger */
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_SW_PUP_REQ_MASK (0x1U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_SW_PUP_REQ_SHIFT (0U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_MIPI_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_MIPI_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_PCIE_SW_PUP_REQ_MASK (0x2U)
#define GPC_PU_PGC_SW_PUP_REQ_PCIE_SW_PUP_REQ_SHIFT (1U)
#define GPC_PU_PGC_SW_PUP_REQ_PCIE_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_PCIE_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_PCIE_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG1_SW_PUP_REQ_MASK (0x4U)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG1_SW_PUP_REQ_SHIFT (2U)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG1_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_USB_OTG1_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_USB_OTG1_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG2_SW_PUP_REQ_MASK (0x8U)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG2_SW_PUP_REQ_SHIFT (3U)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG2_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_USB_OTG2_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_USB_OTG2_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_HSIC_SW_PUP_REQ_MASK (0x10U)
#define GPC_PU_PGC_SW_PUP_REQ_HSIC_SW_PUP_REQ_SHIFT (4U)
#define GPC_PU_PGC_SW_PUP_REQ_HSIC_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_HSIC_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_HSIC_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_DDR1_SW_PUP_REQ_MASK (0x20U)
#define GPC_PU_PGC_SW_PUP_REQ_DDR1_SW_PUP_REQ_SHIFT (5U)
#define GPC_PU_PGC_SW_PUP_REQ_DDR1_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_DDR1_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_DDR1_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_DDR2_SW_PUP_REQ_MASK (0x40U)
#define GPC_PU_PGC_SW_PUP_REQ_DDR2_SW_PUP_REQ_SHIFT (6U)
#define GPC_PU_PGC_SW_PUP_REQ_DDR2_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_DDR2_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_DDR2_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_GPU_SW_PUP_REQ_MASK (0x80U)
#define GPC_PU_PGC_SW_PUP_REQ_GPU_SW_PUP_REQ_SHIFT (7U)
#define GPC_PU_PGC_SW_PUP_REQ_GPU_SW_PUP_REQ(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_GPU_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_GPU_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_VPU_SW_PUP_REQ_MASK (0x100U)
#define GPC_PU_PGC_SW_PUP_REQ_VPU_SW_PUP_REQ_SHIFT (8U)
#define GPC_PU_PGC_SW_PUP_REQ_VPU_SW_PUP_REQ(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_VPU_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_VPU_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_HDMI_SW_PUP_REQ_MASK (0x200U)
#define GPC_PU_PGC_SW_PUP_REQ_HDMI_SW_PUP_REQ_SHIFT (9U)
#define GPC_PU_PGC_SW_PUP_REQ_HDMI_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_HDMI_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_HDMI_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_DISP_SW_PUP_REQ_MASK (0x400U)
#define GPC_PU_PGC_SW_PUP_REQ_DISP_SW_PUP_REQ_SHIFT (10U)
#define GPC_PU_PGC_SW_PUP_REQ_DISP_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_DISP_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_DISP_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI1_SW_PUP_REQ_MASK (0x800U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI1_SW_PUP_REQ_SHIFT (11U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI1_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI1_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI1_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI2_SW_PUP_REQ_MASK (0x1000U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI2_SW_PUP_REQ_SHIFT (12U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI2_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI2_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI2_SW_PUP_REQ_MASK)
#define GPC_PU_PGC_SW_PUP_REQ_PCIE2_SW_PUP_REQ_MASK (0x2000U)
#define GPC_PU_PGC_SW_PUP_REQ_PCIE2_SW_PUP_REQ_SHIFT (13U)
#define GPC_PU_PGC_SW_PUP_REQ_PCIE2_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PUP_REQ_PCIE2_SW_PUP_REQ_SHIFT)) & GPC_PU_PGC_SW_PUP_REQ_PCIE2_SW_PUP_REQ_MASK)

/*! @name CPU_PGC_SW_PDN_REQ - CPU PGC software down trigger */
#define GPC_CPU_PGC_SW_PDN_REQ_CORE0_A53_SW_PDN_REQ_MASK (0x1U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE0_A53_SW_PDN_REQ_SHIFT (0U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE0_A53_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_SW_PDN_REQ_CORE0_A53_SW_PDN_REQ_SHIFT)) & GPC_CPU_PGC_SW_PDN_REQ_CORE0_A53_SW_PDN_REQ_MASK)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE1_A53_SW_PDN_REQ_MASK (0x2U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE1_A53_SW_PDN_REQ_SHIFT (1U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE1_A53_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_SW_PDN_REQ_CORE1_A53_SW_PDN_REQ_SHIFT)) & GPC_CPU_PGC_SW_PDN_REQ_CORE1_A53_SW_PDN_REQ_MASK)
#define GPC_CPU_PGC_SW_PDN_REQ_SCU_A53_SW_PDN_REQ_MASK (0x4U)
#define GPC_CPU_PGC_SW_PDN_REQ_SCU_A53_SW_PDN_REQ_SHIFT (2U)
#define GPC_CPU_PGC_SW_PDN_REQ_SCU_A53_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_SW_PDN_REQ_SCU_A53_SW_PDN_REQ_SHIFT)) & GPC_CPU_PGC_SW_PDN_REQ_SCU_A53_SW_PDN_REQ_MASK)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE2_A53_SW_PUP_REQ_MASK (0x8U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE2_A53_SW_PUP_REQ_SHIFT (3U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE2_A53_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_SW_PDN_REQ_CORE2_A53_SW_PUP_REQ_SHIFT)) & GPC_CPU_PGC_SW_PDN_REQ_CORE2_A53_SW_PUP_REQ_MASK)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE3_A53_SW_PUP_REQ_MASK (0x10U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE3_A53_SW_PUP_REQ_SHIFT (4U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE3_A53_SW_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_SW_PDN_REQ_CORE3_A53_SW_PUP_REQ_SHIFT)) & GPC_CPU_PGC_SW_PDN_REQ_CORE3_A53_SW_PUP_REQ_MASK)

/*! @name MIX_PGC_SW_PDN_REQ - MIX PGC software power down trigger */
#define GPC_MIX_PGC_SW_PDN_REQ_MIX_SW_PDN_REQ_MASK (0x1U)
#define GPC_MIX_PGC_SW_PDN_REQ_MIX_SW_PDN_REQ_SHIFT (0U)
#define GPC_MIX_PGC_SW_PDN_REQ_MIX_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_MIX_PGC_SW_PDN_REQ_MIX_SW_PDN_REQ_SHIFT)) & GPC_MIX_PGC_SW_PDN_REQ_MIX_SW_PDN_REQ_MASK)

/*! @name PU_PGC_SW_PDN_REQ - PU PGC software down trigger */
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_SW_PDN_REQ_MASK (0x1U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_SW_PDN_REQ_SHIFT (0U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_MIPI_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_MIPI_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_PCIE_SW_PDN_REQ_MASK (0x2U)
#define GPC_PU_PGC_SW_PDN_REQ_PCIE_SW_PDN_REQ_SHIFT (1U)
#define GPC_PU_PGC_SW_PDN_REQ_PCIE_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_PCIE_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_PCIE_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG1_SW_PDN_REQ_MASK (0x4U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG1_SW_PDN_REQ_SHIFT (2U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG1_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_USB_OTG1_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_USB_OTG1_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG2_SW_PDN_REQ_MASK (0x8U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG2_SW_PDN_REQ_SHIFT (3U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG2_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_USB_OTG2_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_USB_OTG2_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_USB_HSIC_SW_PDN_REQ_MASK (0x10U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_HSIC_SW_PDN_REQ_SHIFT (4U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_HSIC_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_USB_HSIC_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_USB_HSIC_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_DDR1_SW_PDN_REQ_MASK (0x20U)
#define GPC_PU_PGC_SW_PDN_REQ_DDR1_SW_PDN_REQ_SHIFT (5U)
#define GPC_PU_PGC_SW_PDN_REQ_DDR1_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_DDR1_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_DDR1_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_DDR2_SW_PDN_REQ_MASK (0x40U)
#define GPC_PU_PGC_SW_PDN_REQ_DDR2_SW_PDN_REQ_SHIFT (6U)
#define GPC_PU_PGC_SW_PDN_REQ_DDR2_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_DDR2_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_DDR2_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_GPU_SW_PDN_REQ_MASK (0x80U)
#define GPC_PU_PGC_SW_PDN_REQ_GPU_SW_PDN_REQ_SHIFT (7U)
#define GPC_PU_PGC_SW_PDN_REQ_GPU_SW_PDN_REQ(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_GPU_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_GPU_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_VPU_SW_PDN_REQ_MASK (0x100U)
#define GPC_PU_PGC_SW_PDN_REQ_VPU_SW_PDN_REQ_SHIFT (8U)
#define GPC_PU_PGC_SW_PDN_REQ_VPU_SW_PDN_REQ(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_VPU_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_VPU_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_HDMI_SW_PDN_REQ_MASK (0x200U)
#define GPC_PU_PGC_SW_PDN_REQ_HDMI_SW_PDN_REQ_SHIFT (9U)
#define GPC_PU_PGC_SW_PDN_REQ_HDMI_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_HDMI_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_HDMI_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_DISP_SW_PDN_REQ_MASK (0x400U)
#define GPC_PU_PGC_SW_PDN_REQ_DISP_SW_PDN_REQ_SHIFT (10U)
#define GPC_PU_PGC_SW_PDN_REQ_DISP_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_DISP_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_DISP_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI1_SW_PDN_REQ_MASK (0x800U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI1_SW_PDN_REQ_SHIFT (11U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI1_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI1_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI1_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI2_SW_PDN_REQ_MASK (0x1000U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI2_SW_PDN_REQ_SHIFT (12U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI2_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI2_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI2_SW_PDN_REQ_MASK)
#define GPC_PU_PGC_SW_PDN_REQ_PCIE2_SW_PDN_REQ_MASK (0x2000U)
#define GPC_PU_PGC_SW_PDN_REQ_PCIE2_SW_PDN_REQ_SHIFT (13U)
#define GPC_PU_PGC_SW_PDN_REQ_PCIE2_SW_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_PU_PGC_SW_PDN_REQ_PCIE2_SW_PDN_REQ_SHIFT)) & GPC_PU_PGC_SW_PDN_REQ_PCIE2_SW_PDN_REQ_MASK)

/*! @name LPCR_A53_BSC2 - Basic Low power control register of A53 platform */
#define GPC_LPCR_A53_BSC2_LPM2_MASK              (0x3U)
#define GPC_LPCR_A53_BSC2_LPM2_SHIFT             (0U)
#define GPC_LPCR_A53_BSC2_LPM2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC2_LPM2_SHIFT)) & GPC_LPCR_A53_BSC2_LPM2_MASK)
#define GPC_LPCR_A53_BSC2_LPM3_MASK              (0xCU)
#define GPC_LPCR_A53_BSC2_LPM3_SHIFT             (2U)
#define GPC_LPCR_A53_BSC2_LPM3(x)                (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC2_LPM3_SHIFT)) & GPC_LPCR_A53_BSC2_LPM3_MASK)

/*! @name CPU_PGC_PUP_STATUS1 - CPU PGC software up trigger status1 */
#define GPC_CPU_PGC_PUP_STATUS1_CORE0_A53_PUP_STATUS_MASK (0x1U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE0_A53_PUP_STATUS_SHIFT (0U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE0_A53_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_PUP_STATUS1_CORE0_A53_PUP_STATUS_SHIFT)) & GPC_CPU_PGC_PUP_STATUS1_CORE0_A53_PUP_STATUS_MASK)
#define GPC_CPU_PGC_PUP_STATUS1_CORE1_A53_PUP_STATUS_MASK (0x2U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE1_A53_PUP_STATUS_SHIFT (1U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE1_A53_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_PUP_STATUS1_CORE1_A53_PUP_STATUS_SHIFT)) & GPC_CPU_PGC_PUP_STATUS1_CORE1_A53_PUP_STATUS_MASK)
#define GPC_CPU_PGC_PUP_STATUS1_SCU_A53_PUP_STATUS_MASK (0x4U)
#define GPC_CPU_PGC_PUP_STATUS1_SCU_A53_PUP_STATUS_SHIFT (2U)
#define GPC_CPU_PGC_PUP_STATUS1_SCU_A53_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_PUP_STATUS1_SCU_A53_PUP_STATUS_SHIFT)) & GPC_CPU_PGC_PUP_STATUS1_SCU_A53_PUP_STATUS_MASK)
#define GPC_CPU_PGC_PUP_STATUS1_CORE2_A53_PUP_STATUS_MASK (0x8U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE2_A53_PUP_STATUS_SHIFT (3U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE2_A53_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_PUP_STATUS1_CORE2_A53_PUP_STATUS_SHIFT)) & GPC_CPU_PGC_PUP_STATUS1_CORE2_A53_PUP_STATUS_MASK)
#define GPC_CPU_PGC_PUP_STATUS1_CORE3_A53_PUP_REQ_MASK (0x10U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE3_A53_PUP_REQ_SHIFT (4U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE3_A53_PUP_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_PUP_STATUS1_CORE3_A53_PUP_REQ_SHIFT)) & GPC_CPU_PGC_PUP_STATUS1_CORE3_A53_PUP_REQ_MASK)

/*! @name A53_MIX_PGC_PUP_STATUS - A53 MIX software up trigger status register */
#define GPC_A53_MIX_PGC_PUP_STATUS_A53_MIX_PGC_PUP_STATUS_MASK (0x1U)
#define GPC_A53_MIX_PGC_PUP_STATUS_A53_MIX_PGC_PUP_STATUS_SHIFT (0U)
#define GPC_A53_MIX_PGC_PUP_STATUS_A53_MIX_PGC_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_MIX_PGC_PUP_STATUS_A53_MIX_PGC_PUP_STATUS_SHIFT)) & GPC_A53_MIX_PGC_PUP_STATUS_A53_MIX_PGC_PUP_STATUS_MASK)

/* The count of GPC_A53_MIX_PGC_PUP_STATUS */
#define GPC_A53_MIX_PGC_PUP_STATUS_COUNT         (3U)

/*! @name M4_MIX_PGC_PUP_STATUS - M4 MIX PGC software up trigger status register */
#define GPC_M4_MIX_PGC_PUP_STATUS_M4_MIX_PGC_PUP_STATUS_MASK (0x1U)
#define GPC_M4_MIX_PGC_PUP_STATUS_M4_MIX_PGC_PUP_STATUS_SHIFT (0U)
#define GPC_M4_MIX_PGC_PUP_STATUS_M4_MIX_PGC_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_MIX_PGC_PUP_STATUS_M4_MIX_PGC_PUP_STATUS_SHIFT)) & GPC_M4_MIX_PGC_PUP_STATUS_M4_MIX_PGC_PUP_STATUS_MASK)

/* The count of GPC_M4_MIX_PGC_PUP_STATUS */
#define GPC_M4_MIX_PGC_PUP_STATUS_COUNT          (3U)

/*! @name A53_PU_PGC_PUP_STATUS - A53 PU software up trigger status register */
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_PUP_STATUS_MASK (0x1U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_PUP_STATUS_SHIFT (0U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE_PUP_STATUS_MASK (0x2U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE_PUP_STATUS_SHIFT (1U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG1_PUP_STATUS_MASK (0x4U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG1_PUP_STATUS_SHIFT (2U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG1_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_OTG1_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_OTG1_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG2_PUP_STATUS_MASK (0x8U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG2_PUP_STATUS_SHIFT (3U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG2_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_OTG2_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_OTG2_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DDR1_PUP_STATUS_MASK (0x20U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DDR1_PUP_STATUS_SHIFT (5U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DDR1_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_DDR1_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_DDR1_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_GPU_PUP_STATUS_MASK (0x80U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_GPU_PUP_STATUS_SHIFT (7U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_GPU_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_GPU_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_GPU_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_VPU_PUP_STATUS_MASK (0x100U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_VPU_PUP_STATUS_SHIFT (8U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_VPU_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_VPU_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_VPU_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_HDMI_PUP_STATUS_MASK (0x200U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_HDMI_PUP_STATUS_SHIFT (9U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_HDMI_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_HDMI_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_HDMI_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DISP_PUP_STATUS_MASK (0x400U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DISP_PUP_STATUS_SHIFT (10U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DISP_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_DISP_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_DISP_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI1_PUP_STATUS_MASK (0x800U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI1_PUP_STATUS_SHIFT (11U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI1_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI1_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI1_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI2_PUP_STATUS_MASK (0x1000U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI2_PUP_STATUS_SHIFT (12U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI2_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI2_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI2_PUP_STATUS_MASK)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE2_PUP_STATUS_MASK (0x2000U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE2_PUP_STATUS_SHIFT (13U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE2_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE2_PUP_STATUS_SHIFT)) & GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE2_PUP_STATUS_MASK)

/* The count of GPC_A53_PU_PGC_PUP_STATUS */
#define GPC_A53_PU_PGC_PUP_STATUS_COUNT          (3U)

/*! @name M4_PU_PGC_PUP_STATUS - M4 PU PGC software up trigger status register */
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_PUP_STATUS_MASK (0x1U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_PUP_STATUS_SHIFT (0U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE_PUP_STATUS_MASK (0x2U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE_PUP_STATUS_SHIFT (1U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_OTG1_PUP_STATUS_MASK (0x4U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_OTG1_PUP_STATUS_SHIFT (2U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_OTG1_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_OTG1_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_OTG1_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_OTG2_PUP_STATUS_MASK (0x8U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_OTG2_PUP_STATUS_SHIFT (3U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_OTG2_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_OTG2_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_OTG2_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_DDR1_PUP_STATUS_MASK (0x20U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_DDR1_PUP_STATUS_SHIFT (5U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_DDR1_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_DDR1_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_DDR1_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_GPU_PUP_STATUS_MASK (0x80U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_GPU_PUP_STATUS_SHIFT (7U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_GPU_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_GPU_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_GPU_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_VPU_PUP_STATUS_MASK (0x100U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_VPU_PUP_STATUS_SHIFT (8U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_VPU_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_VPU_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_VPU_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_HDMI_PUP_STATUS_MASK (0x200U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_HDMI_PUP_STATUS_SHIFT (9U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_HDMI_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_HDMI_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_HDMI_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_DISP_PUP_STATUS_MASK (0x400U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_DISP_PUP_STATUS_SHIFT (10U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_DISP_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_DISP_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_DISP_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI1_PUP_STATUS_MASK (0x800U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI1_PUP_STATUS_SHIFT (11U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI1_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI1_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI1_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI2_PUP_STATUS_MASK (0x1000U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI2_PUP_STATUS_SHIFT (12U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI2_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI2_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI2_PUP_STATUS_MASK)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE2_PUP_STATUS_MASK (0x2000U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE2_PUP_STATUS_SHIFT (13U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE2_PUP_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE2_PUP_STATUS_SHIFT)) & GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE2_PUP_STATUS_MASK)

/* The count of GPC_M4_PU_PGC_PUP_STATUS */
#define GPC_M4_PU_PGC_PUP_STATUS_COUNT           (3U)

/*! @name CPU_PGC_PDN_STATUS1 - CPU PGC software dn trigger status1 */
#define GPC_CPU_PGC_PDN_STATUS1_CORE0_A53_PDN_STATUS_MASK (0x1U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE0_A53_PDN_STATUS_SHIFT (0U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE0_A53_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_PDN_STATUS1_CORE0_A53_PDN_STATUS_SHIFT)) & GPC_CPU_PGC_PDN_STATUS1_CORE0_A53_PDN_STATUS_MASK)
#define GPC_CPU_PGC_PDN_STATUS1_CORE1_A53_PDN_STATUS_MASK (0x2U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE1_A53_PDN_STATUS_SHIFT (1U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE1_A53_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_PDN_STATUS1_CORE1_A53_PDN_STATUS_SHIFT)) & GPC_CPU_PGC_PDN_STATUS1_CORE1_A53_PDN_STATUS_MASK)
#define GPC_CPU_PGC_PDN_STATUS1_SCU_A53_PDN_STATUS_MASK (0x4U)
#define GPC_CPU_PGC_PDN_STATUS1_SCU_A53_PDN_STATUS_SHIFT (2U)
#define GPC_CPU_PGC_PDN_STATUS1_SCU_A53_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_PDN_STATUS1_SCU_A53_PDN_STATUS_SHIFT)) & GPC_CPU_PGC_PDN_STATUS1_SCU_A53_PDN_STATUS_MASK)
#define GPC_CPU_PGC_PDN_STATUS1_CORE2_A53_PDN_STATUS_MASK (0x8U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE2_A53_PDN_STATUS_SHIFT (3U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE2_A53_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_PDN_STATUS1_CORE2_A53_PDN_STATUS_SHIFT)) & GPC_CPU_PGC_PDN_STATUS1_CORE2_A53_PDN_STATUS_MASK)
#define GPC_CPU_PGC_PDN_STATUS1_CORE3_A53_PDN_REQ_MASK (0x10U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE3_A53_PDN_REQ_SHIFT (4U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE3_A53_PDN_REQ(x) (((uint32_t)(((uint32_t)(x)) << GPC_CPU_PGC_PDN_STATUS1_CORE3_A53_PDN_REQ_SHIFT)) & GPC_CPU_PGC_PDN_STATUS1_CORE3_A53_PDN_REQ_MASK)

/*! @name A53_MIX_PGC_PDN_STATUS - A53 MIX software down trigger status register */
#define GPC_A53_MIX_PGC_PDN_STATUS_A53_MIX_PGC_PDN_STATUS_MASK (0x1U)
#define GPC_A53_MIX_PGC_PDN_STATUS_A53_MIX_PGC_PDN_STATUS_SHIFT (0U)
#define GPC_A53_MIX_PGC_PDN_STATUS_A53_MIX_PGC_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_MIX_PGC_PDN_STATUS_A53_MIX_PGC_PDN_STATUS_SHIFT)) & GPC_A53_MIX_PGC_PDN_STATUS_A53_MIX_PGC_PDN_STATUS_MASK)

/* The count of GPC_A53_MIX_PGC_PDN_STATUS */
#define GPC_A53_MIX_PGC_PDN_STATUS_COUNT         (3U)

/*! @name M4_MIX_PGC_PDN_STATUS - M4 MIX PGC software power down trigger status register */
#define GPC_M4_MIX_PGC_PDN_STATUS_M4_MIX_PGC_PDN_STATUS_MASK (0x1U)
#define GPC_M4_MIX_PGC_PDN_STATUS_M4_MIX_PGC_PDN_STATUS_SHIFT (0U)
#define GPC_M4_MIX_PGC_PDN_STATUS_M4_MIX_PGC_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_MIX_PGC_PDN_STATUS_M4_MIX_PGC_PDN_STATUS_SHIFT)) & GPC_M4_MIX_PGC_PDN_STATUS_M4_MIX_PGC_PDN_STATUS_MASK)

/* The count of GPC_M4_MIX_PGC_PDN_STATUS */
#define GPC_M4_MIX_PGC_PDN_STATUS_COUNT          (3U)

/*! @name A53_PU_PGC_PDN_STATUS - A53 PU PGC software down trigger status */
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_PDN_STATUS_MASK (0x1U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_PDN_STATUS_SHIFT (0U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE_PDN_STATUS_MASK (0x2U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE_PDN_STATUS_SHIFT (1U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG1_PDN_STATUS_MASK (0x4U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG1_PDN_STATUS_SHIFT (2U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG1_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_OTG1_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_OTG1_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG2_PDN_STATUS_MASK (0x8U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG2_PDN_STATUS_SHIFT (3U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG2_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_OTG2_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_OTG2_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DDR1_PDN_STATUS_MASK (0x20U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DDR1_PDN_STATUS_SHIFT (5U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DDR1_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_DDR1_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_DDR1_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_GPU_PDN_STATUS_MASK (0x80U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_GPU_PDN_STATUS_SHIFT (7U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_GPU_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_GPU_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_GPU_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_VPU_PDN_STATUS_MASK (0x100U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_VPU_PDN_STATUS_SHIFT (8U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_VPU_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_VPU_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_VPU_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_HDMI_PDN_STATUS_MASK (0x200U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_HDMI_PDN_STATUS_SHIFT (9U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_HDMI_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_HDMI_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_HDMI_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DISP_PDN_STATUS_MASK (0x400U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DISP_PDN_STATUS_SHIFT (10U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DISP_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_DISP_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_DISP_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI1_PDN_STATUS_MASK (0x800U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI1_PDN_STATUS_SHIFT (11U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI1_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI1_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI1_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI2_PDN_STATUS_MASK (0x1000U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI2_PDN_STATUS_SHIFT (12U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI2_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI2_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI2_PDN_STATUS_MASK)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE2_PDN_STATUS_MASK (0x2000U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE2_PDN_STATUS_SHIFT (13U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE2_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE2_PDN_STATUS_SHIFT)) & GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE2_PDN_STATUS_MASK)

/* The count of GPC_A53_PU_PGC_PDN_STATUS */
#define GPC_A53_PU_PGC_PDN_STATUS_COUNT          (3U)

/*! @name M4_PU_PGC_PDN_STATUS - M4 PU PGC software down trigger status */
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_PDN_STATUS_MASK (0x1U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_PDN_STATUS_SHIFT (0U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE_PDN_STATUS_MASK (0x2U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE_PDN_STATUS_SHIFT (1U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_OTG1_PDN_STATUS_MASK (0x4U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_OTG1_PDN_STATUS_SHIFT (2U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_OTG1_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_OTG1_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_OTG1_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_OTG2_PDN_STATUS_MASK (0x8U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_OTG2_PDN_STATUS_SHIFT (3U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_OTG2_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_OTG2_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_OTG2_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_DDR1_PDN_STATUS_MASK (0x20U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_DDR1_PDN_STATUS_SHIFT (5U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_DDR1_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_DDR1_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_DDR1_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_GPU_PDN_STATUS_MASK (0x80U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_GPU_PDN_STATUS_SHIFT (7U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_GPU_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_GPU_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_GPU_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_VPU_PDN_STATUS_MASK (0x100U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_VPU_PDN_STATUS_SHIFT (8U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_VPU_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_VPU_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_VPU_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_HDMI_PDN_STATUS_MASK (0x200U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_HDMI_PDN_STATUS_SHIFT (9U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_HDMI_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_HDMI_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_HDMI_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_DISP_PDN_STATUS_MASK (0x400U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_DISP_PDN_STATUS_SHIFT (10U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_DISP_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_DISP_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_DISP_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI1_PDN_STATUS_MASK (0x800U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI1_PDN_STATUS_SHIFT (11U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI1_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI1_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI1_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI2_PDN_STATUS_MASK (0x1000U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI2_PDN_STATUS_SHIFT (12U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI2_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI2_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI2_PDN_STATUS_MASK)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE2_PDN_STATUS_MASK (0x2000U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE2_PDN_STATUS_SHIFT (13U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE2_PDN_STATUS(x) (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE2_PDN_STATUS_SHIFT)) & GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE2_PDN_STATUS_MASK)

/* The count of GPC_M4_PU_PGC_PDN_STATUS */
#define GPC_M4_PU_PGC_PDN_STATUS_COUNT           (3U)

/*! @name A53_MIX_PDN_FLG - A53 MIX PDN FLG */
#define GPC_A53_MIX_PDN_FLG_A53_MIX_PDN_FLAG_MASK (0x1U)
#define GPC_A53_MIX_PDN_FLG_A53_MIX_PDN_FLAG_SHIFT (0U)
#define GPC_A53_MIX_PDN_FLG_A53_MIX_PDN_FLAG(x)  (((uint32_t)(((uint32_t)(x)) << GPC_A53_MIX_PDN_FLG_A53_MIX_PDN_FLAG_SHIFT)) & GPC_A53_MIX_PDN_FLG_A53_MIX_PDN_FLAG_MASK)

/*! @name A53_PU_PDN_FLG - A53 PU PDN FLG */
#define GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_MASK   (0x3FFFU)
#define GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_SHIFT  (0U)
#define GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG(x)     (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_SHIFT)) & GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_MASK)

/*! @name M4_MIX_PDN_FLG - M4 MIX PDN FLG */
#define GPC_M4_MIX_PDN_FLG_M4_MIX_PDN_FLAG_MASK  (0x1U)
#define GPC_M4_MIX_PDN_FLG_M4_MIX_PDN_FLAG_SHIFT (0U)
#define GPC_M4_MIX_PDN_FLG_M4_MIX_PDN_FLAG(x)    (((uint32_t)(((uint32_t)(x)) << GPC_M4_MIX_PDN_FLG_M4_MIX_PDN_FLAG_SHIFT)) & GPC_M4_MIX_PDN_FLG_M4_MIX_PDN_FLAG_MASK)

/*! @name M4_PU_PDN_FLG - M4 PU PDN FLG */
#define GPC_M4_PU_PDN_FLG_M4_PU_PDN_FLG_MASK     (0x3FFFU)
#define GPC_M4_PU_PDN_FLG_M4_PU_PDN_FLG_SHIFT    (0U)
#define GPC_M4_PU_PDN_FLG_M4_PU_PDN_FLG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PDN_FLG_M4_PU_PDN_FLG_SHIFT)) & GPC_M4_PU_PDN_FLG_M4_PU_PDN_FLG_MASK)

/*! @name IMR_CORE2_A53 - IRQ masking register 1 of A53 core2..IRQ masking register 4 of A53 core2 */
#define GPC_IMR_CORE2_A53_IMR1_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR1_CORE2_A53_SHIFT   (0U)
#define GPC_IMR_CORE2_A53_IMR1_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR1_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR1_CORE2_A53_MASK)
#define GPC_IMR_CORE2_A53_IMR2_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR2_CORE2_A53_SHIFT   (0U)
#define GPC_IMR_CORE2_A53_IMR2_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR2_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR2_CORE2_A53_MASK)
#define GPC_IMR_CORE2_A53_IMR3_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR3_CORE2_A53_SHIFT   (0U)
#define GPC_IMR_CORE2_A53_IMR3_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR3_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR3_CORE2_A53_MASK)
#define GPC_IMR_CORE2_A53_IMR4_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR4_CORE2_A53_SHIFT   (0U)
#define GPC_IMR_CORE2_A53_IMR4_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR4_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR4_CORE2_A53_MASK)

/* The count of GPC_IMR_CORE2_A53 */
#define GPC_IMR_CORE2_A53_COUNT                  (4U)

/*! @name IMR_CORE3_A53 - IRQ masking register 1 of A53 core3..IRQ masking register 4 of A53 core3 */
#define GPC_IMR_CORE3_A53_IMR1_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR1_CORE3_A53_SHIFT   (0U)
#define GPC_IMR_CORE3_A53_IMR1_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR1_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR1_CORE3_A53_MASK)
#define GPC_IMR_CORE3_A53_IMR2_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR2_CORE3_A53_SHIFT   (0U)
#define GPC_IMR_CORE3_A53_IMR2_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR2_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR2_CORE3_A53_MASK)
#define GPC_IMR_CORE3_A53_IMR3_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR3_CORE3_A53_SHIFT   (0U)
#define GPC_IMR_CORE3_A53_IMR3_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR3_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR3_CORE3_A53_MASK)
#define GPC_IMR_CORE3_A53_IMR4_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR4_CORE3_A53_SHIFT   (0U)
#define GPC_IMR_CORE3_A53_IMR4_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR4_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR4_CORE3_A53_MASK)

/* The count of GPC_IMR_CORE3_A53 */
#define GPC_IMR_CORE3_A53_COUNT                  (4U)

/*! @name ACK_SEL_A53_PU - PGC acknowledge signal selection of A53 platform for PUs */
#define GPC_ACK_SEL_A53_PU_MF_PGC_PDN_ACK_MASK   (0x1U)
#define GPC_ACK_SEL_A53_PU_MF_PGC_PDN_ACK_SHIFT  (0U)
#define GPC_ACK_SEL_A53_PU_MF_PGC_PDN_ACK(x)     (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_MF_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_MF_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PDN_ACK_MASK (0x4U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PDN_ACK_SHIFT (2U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PDN_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_MIPI_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_MIPI_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_PCIE_PGC_PDN_ACK_MASK (0x8U)
#define GPC_ACK_SEL_A53_PU_PCIE_PGC_PDN_ACK_SHIFT (3U)
#define GPC_ACK_SEL_A53_PU_PCIE_PGC_PDN_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_PCIE_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_PCIE_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PDN_ACK_MASK (0x10U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PDN_ACK_SHIFT (4U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PDN_ACK_MASK (0x20U)
#define GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PDN_ACK_SHIFT (5U)
#define GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_USB_HSIC_PGC_PDN_ACK_MASK (0x40U)
#define GPC_ACK_SEL_A53_PU_USB_HSIC_PGC_PDN_ACK_SHIFT (6U)
#define GPC_ACK_SEL_A53_PU_USB_HSIC_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_USB_HSIC_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_USB_HSIC_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PDN_ACK_MASK (0x80U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PDN_ACK_SHIFT (7U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PDN_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_DDR1_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_DDR1_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_DDR2_PGC_PDN_ACK_MASK (0x100U)
#define GPC_ACK_SEL_A53_PU_DDR2_PGC_PDN_ACK_SHIFT (8U)
#define GPC_ACK_SEL_A53_PU_DDR2_PGC_PDN_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_DDR2_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_DDR2_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_GPU_PGC_PDN_ACK_MASK  (0x200U)
#define GPC_ACK_SEL_A53_PU_GPU_PGC_PDN_ACK_SHIFT (9U)
#define GPC_ACK_SEL_A53_PU_GPU_PGC_PDN_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_GPU_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_GPU_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_VPU_PGC_PDN_ACK_MASK  (0x400U)
#define GPC_ACK_SEL_A53_PU_VPU_PGC_PDN_ACK_SHIFT (10U)
#define GPC_ACK_SEL_A53_PU_VPU_PGC_PDN_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_VPU_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_VPU_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_HDMI_PGC_PDN_ACK_MASK (0x800U)
#define GPC_ACK_SEL_A53_PU_HDMI_PGC_PDN_ACK_SHIFT (11U)
#define GPC_ACK_SEL_A53_PU_HDMI_PGC_PDN_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_HDMI_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_HDMI_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_DISP_PGC_PDN_ACK_MASK (0x1000U)
#define GPC_ACK_SEL_A53_PU_DISP_PGC_PDN_ACK_SHIFT (12U)
#define GPC_ACK_SEL_A53_PU_DISP_PGC_PDN_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_DISP_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_DISP_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PDN_ACK_MASK (0x2000U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PDN_ACK_SHIFT (13U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PDN_ACK_MASK (0x4000U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PDN_ACK_SHIFT (14U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_PCIE2_PGC_PDN_ACK_MASK (0x8000U)
#define GPC_ACK_SEL_A53_PU_PCIE2_PGC_PDN_ACK_SHIFT (15U)
#define GPC_ACK_SEL_A53_PU_PCIE2_PGC_PDN_ACK(x)  (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_PCIE2_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_PCIE2_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_MF_PGC_PUP_ACK_MASK   (0x10000U)
#define GPC_ACK_SEL_A53_PU_MF_PGC_PUP_ACK_SHIFT  (16U)
#define GPC_ACK_SEL_A53_PU_MF_PGC_PUP_ACK(x)     (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_MF_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_MF_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PUP_ACK_MASK (0x40000U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PUP_ACK_SHIFT (18U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PUP_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_MIPI_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_MIPI_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_PCIE_PGC_PUP_ACK_MASK (0x80000U)
#define GPC_ACK_SEL_A53_PU_PCIE_PGC_PUP_ACK_SHIFT (19U)
#define GPC_ACK_SEL_A53_PU_PCIE_PGC_PUP_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_PCIE_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_PCIE_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PUP_ACK_MASK (0x100000U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PUP_ACK_SHIFT (20U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PUP_ACK_MASK (0x200000U)
#define GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PUP_ACK_SHIFT (21U)
#define GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_USB_HSIC_PGC_PUP_ACK_MASK (0x400000U)
#define GPC_ACK_SEL_A53_PU_USB_HSIC_PGC_PUP_ACK_SHIFT (22U)
#define GPC_ACK_SEL_A53_PU_USB_HSIC_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_USB_HSIC_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_USB_HSIC_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PUP_ACK_MASK (0x800000U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PUP_ACK_SHIFT (23U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PUP_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_DDR1_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_DDR1_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_DDR2_PGC_PUP_ACK_MASK (0x1000000U)
#define GPC_ACK_SEL_A53_PU_DDR2_PGC_PUP_ACK_SHIFT (24U)
#define GPC_ACK_SEL_A53_PU_DDR2_PGC_PUP_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_DDR2_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_DDR2_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_GPU_PGC_PUP_ACK_MASK  (0x2000000U)
#define GPC_ACK_SEL_A53_PU_GPU_PGC_PUP_ACK_SHIFT (25U)
#define GPC_ACK_SEL_A53_PU_GPU_PGC_PUP_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_GPU_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_GPU_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_VPU_PGC_PUP_ACK_MASK  (0x4000000U)
#define GPC_ACK_SEL_A53_PU_VPU_PGC_PUP_ACK_SHIFT (26U)
#define GPC_ACK_SEL_A53_PU_VPU_PGC_PUP_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_VPU_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_VPU_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_HDMI_PGC_PUP_ACK_MASK (0x8000000U)
#define GPC_ACK_SEL_A53_PU_HDMI_PGC_PUP_ACK_SHIFT (27U)
#define GPC_ACK_SEL_A53_PU_HDMI_PGC_PUP_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_HDMI_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_HDMI_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_DISP_PGC_PUP_ACK_MASK (0x10000000U)
#define GPC_ACK_SEL_A53_PU_DISP_PGC_PUP_ACK_SHIFT (28U)
#define GPC_ACK_SEL_A53_PU_DISP_PGC_PUP_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_DISP_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_DISP_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PUP_ACK_MASK (0x20000000U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PUP_ACK_SHIFT (29U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PUP_ACK_MASK (0x40000000U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PUP_ACK_SHIFT (30U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_A53_PU_PCIE2_PGC_PUP_ACK_MASK (0x80000000U)
#define GPC_ACK_SEL_A53_PU_PCIE2_PGC_PUP_ACK_SHIFT (31U)
#define GPC_ACK_SEL_A53_PU_PCIE2_PGC_PUP_ACK(x)  (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_A53_PU_PCIE2_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_A53_PU_PCIE2_PGC_PUP_ACK_MASK)

/*! @name ACK_SEL_M4_PU - PGC acknowledge signal selection of M4 platform for PUs */
#define GPC_ACK_SEL_M4_PU_MF_PGC_PDN_ACK_MASK    (0x1U)
#define GPC_ACK_SEL_M4_PU_MF_PGC_PDN_ACK_SHIFT   (0U)
#define GPC_ACK_SEL_M4_PU_MF_PGC_PDN_ACK(x)      (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_MF_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_MF_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_MIPI_PGC_PDN_ACK_MASK  (0x4U)
#define GPC_ACK_SEL_M4_PU_MIPI_PGC_PDN_ACK_SHIFT (2U)
#define GPC_ACK_SEL_M4_PU_MIPI_PGC_PDN_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_MIPI_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_MIPI_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_PCIE_PGC_PDN_ACK_MASK  (0x8U)
#define GPC_ACK_SEL_M4_PU_PCIE_PGC_PDN_ACK_SHIFT (3U)
#define GPC_ACK_SEL_M4_PU_PCIE_PGC_PDN_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_PCIE_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_PCIE_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PDN_ACK_MASK (0x10U)
#define GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PDN_ACK_SHIFT (4U)
#define GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PDN_ACK_MASK (0x20U)
#define GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PDN_ACK_SHIFT (5U)
#define GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_USB_HSIC_PGC_PDN_ACK_MASK (0x40U)
#define GPC_ACK_SEL_M4_PU_USB_HSIC_PGC_PDN_ACK_SHIFT (6U)
#define GPC_ACK_SEL_M4_PU_USB_HSIC_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_USB_HSIC_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_USB_HSIC_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_DDR1_PGC_PDN_ACK_MASK  (0x80U)
#define GPC_ACK_SEL_M4_PU_DDR1_PGC_PDN_ACK_SHIFT (7U)
#define GPC_ACK_SEL_M4_PU_DDR1_PGC_PDN_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_DDR1_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_DDR1_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_DDR2_PGC_PDN_ACK_MASK  (0x100U)
#define GPC_ACK_SEL_M4_PU_DDR2_PGC_PDN_ACK_SHIFT (8U)
#define GPC_ACK_SEL_M4_PU_DDR2_PGC_PDN_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_DDR2_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_DDR2_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_GPU_PGC_PDN_ACK_MASK   (0x200U)
#define GPC_ACK_SEL_M4_PU_GPU_PGC_PDN_ACK_SHIFT  (9U)
#define GPC_ACK_SEL_M4_PU_GPU_PGC_PDN_ACK(x)     (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_GPU_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_GPU_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_VPU_PGC_PDN_ACK_MASK   (0x400U)
#define GPC_ACK_SEL_M4_PU_VPU_PGC_PDN_ACK_SHIFT  (10U)
#define GPC_ACK_SEL_M4_PU_VPU_PGC_PDN_ACK(x)     (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_VPU_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_VPU_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_HDMI_PGC_PDN_ACK_MASK  (0x800U)
#define GPC_ACK_SEL_M4_PU_HDMI_PGC_PDN_ACK_SHIFT (11U)
#define GPC_ACK_SEL_M4_PU_HDMI_PGC_PDN_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_HDMI_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_HDMI_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_DISP_PGC_PDN_ACK_MASK  (0x1000U)
#define GPC_ACK_SEL_M4_PU_DISP_PGC_PDN_ACK_SHIFT (12U)
#define GPC_ACK_SEL_M4_PU_DISP_PGC_PDN_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_DISP_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_DISP_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PDN_ACK_MASK (0x2000U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PDN_ACK_SHIFT (13U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PDN_ACK_MASK (0x4000U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PDN_ACK_SHIFT (14U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PDN_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_PCIE2_PGC_PDN_ACK_MASK (0x8000U)
#define GPC_ACK_SEL_M4_PU_PCIE2_PGC_PDN_ACK_SHIFT (15U)
#define GPC_ACK_SEL_M4_PU_PCIE2_PGC_PDN_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_PCIE2_PGC_PDN_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_PCIE2_PGC_PDN_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_MF_PGC_PUP_ACK_MASK    (0x10000U)
#define GPC_ACK_SEL_M4_PU_MF_PGC_PUP_ACK_SHIFT   (16U)
#define GPC_ACK_SEL_M4_PU_MF_PGC_PUP_ACK(x)      (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_MF_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_MF_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_MIPI_PGC_PUP_ACK_MASK  (0x40000U)
#define GPC_ACK_SEL_M4_PU_MIPI_PGC_PUP_ACK_SHIFT (18U)
#define GPC_ACK_SEL_M4_PU_MIPI_PGC_PUP_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_MIPI_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_MIPI_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_PCIE_PGC_PUP_ACK_MASK  (0x80000U)
#define GPC_ACK_SEL_M4_PU_PCIE_PGC_PUP_ACK_SHIFT (19U)
#define GPC_ACK_SEL_M4_PU_PCIE_PGC_PUP_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_PCIE_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_PCIE_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PUP_ACK_MASK (0x100000U)
#define GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PUP_ACK_SHIFT (20U)
#define GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PUP_ACK_MASK (0x200000U)
#define GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PUP_ACK_SHIFT (21U)
#define GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_USB_HSIC_PGC_PUP_ACK_MASK (0x400000U)
#define GPC_ACK_SEL_M4_PU_USB_HSIC_PGC_PUP_ACK_SHIFT (22U)
#define GPC_ACK_SEL_M4_PU_USB_HSIC_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_USB_HSIC_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_USB_HSIC_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_DDR1_PGC_PUP_ACK_MASK  (0x800000U)
#define GPC_ACK_SEL_M4_PU_DDR1_PGC_PUP_ACK_SHIFT (23U)
#define GPC_ACK_SEL_M4_PU_DDR1_PGC_PUP_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_DDR1_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_DDR1_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_DDR2_PGC_PUP_ACK_MASK  (0x1000000U)
#define GPC_ACK_SEL_M4_PU_DDR2_PGC_PUP_ACK_SHIFT (24U)
#define GPC_ACK_SEL_M4_PU_DDR2_PGC_PUP_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_DDR2_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_DDR2_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_GPU_PGC_PUP_ACK_MASK   (0x2000000U)
#define GPC_ACK_SEL_M4_PU_GPU_PGC_PUP_ACK_SHIFT  (25U)
#define GPC_ACK_SEL_M4_PU_GPU_PGC_PUP_ACK(x)     (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_GPU_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_GPU_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_VPU_PGC_PUP_ACK_MASK   (0x4000000U)
#define GPC_ACK_SEL_M4_PU_VPU_PGC_PUP_ACK_SHIFT  (26U)
#define GPC_ACK_SEL_M4_PU_VPU_PGC_PUP_ACK(x)     (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_VPU_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_VPU_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_HDMI_PGC_PUP_ACK_MASK  (0x8000000U)
#define GPC_ACK_SEL_M4_PU_HDMI_PGC_PUP_ACK_SHIFT (27U)
#define GPC_ACK_SEL_M4_PU_HDMI_PGC_PUP_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_HDMI_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_HDMI_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_DISP_PGC_PUP_ACK_MASK  (0x10000000U)
#define GPC_ACK_SEL_M4_PU_DISP_PGC_PUP_ACK_SHIFT (28U)
#define GPC_ACK_SEL_M4_PU_DISP_PGC_PUP_ACK(x)    (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_DISP_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_DISP_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PUP_ACK_MASK (0x20000000U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PUP_ACK_SHIFT (29U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PUP_ACK_MASK (0x40000000U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PUP_ACK_SHIFT (30U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PUP_ACK(x) (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PUP_ACK_MASK)
#define GPC_ACK_SEL_M4_PU_PCIE2_PGC_PUP_ACK_MASK (0x80000000U)
#define GPC_ACK_SEL_M4_PU_PCIE2_PGC_PUP_ACK_SHIFT (31U)
#define GPC_ACK_SEL_M4_PU_PCIE2_PGC_PUP_ACK(x)   (((uint32_t)(((uint32_t)(x)) << GPC_ACK_SEL_M4_PU_PCIE2_PGC_PUP_ACK_SHIFT)) & GPC_ACK_SEL_M4_PU_PCIE2_PGC_PUP_ACK_MASK)

/*! @name SLT15_CFG - Slot configure register for A53 core */
#define GPC_SLT15_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT15_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT15_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT15_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT15_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT15_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT15_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT15_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT15_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT15_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT15_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT15_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT15_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT15_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT15_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT15_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT15_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT15_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT15_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT15_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT15_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT15_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT15_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT15_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT15_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT15_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT15_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT15_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT15_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT15_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT15_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT15_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT15_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT15_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT15_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT15_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT15_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT15_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT15_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT15_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT15_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT15_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT15_CFG_SCU_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT15_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT15_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT15_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT15_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT15_CFG_SCU_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT15_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT15_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT16_CFG - Slot configure register for A53 core */
#define GPC_SLT16_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT16_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT16_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT16_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT16_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT16_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT16_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT16_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT16_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT16_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT16_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT16_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT16_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT16_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT16_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT16_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT16_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT16_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT16_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT16_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT16_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT16_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT16_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT16_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT16_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT16_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT16_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT16_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT16_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT16_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT16_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT16_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT16_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT16_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT16_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT16_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT16_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT16_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT16_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT16_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT16_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT16_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT16_CFG_SCU_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT16_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT16_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT16_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT16_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT16_CFG_SCU_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT16_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT16_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT17_CFG - Slot configure register for A53 core */
#define GPC_SLT17_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT17_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT17_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT17_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT17_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT17_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT17_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT17_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT17_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT17_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT17_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT17_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT17_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT17_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT17_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT17_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT17_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT17_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT17_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT17_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT17_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT17_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT17_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT17_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT17_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT17_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT17_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT17_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT17_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT17_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT17_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT17_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT17_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT17_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT17_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT17_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT17_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT17_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT17_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT17_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT17_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT17_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT17_CFG_SCU_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT17_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT17_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT17_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT17_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT17_CFG_SCU_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT17_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT17_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT18_CFG - Slot configure register for A53 core */
#define GPC_SLT18_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT18_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT18_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT18_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT18_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT18_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT18_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT18_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT18_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT18_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT18_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT18_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT18_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT18_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT18_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT18_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT18_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT18_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT18_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT18_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT18_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT18_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT18_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT18_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT18_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT18_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT18_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT18_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT18_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT18_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT18_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT18_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT18_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT18_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT18_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT18_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT18_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT18_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT18_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT18_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT18_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT18_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT18_CFG_SCU_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT18_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT18_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT18_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT18_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT18_CFG_SCU_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT18_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT18_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT19_CFG - Slot configure register for A53 core */
#define GPC_SLT19_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT19_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT19_CFG_CORE0_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT19_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT19_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT19_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT19_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT19_CFG_CORE0_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT19_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT19_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT19_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT19_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT19_CFG_CORE1_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT19_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT19_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT19_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT19_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT19_CFG_CORE1_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT19_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT19_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT19_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT19_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT19_CFG_CORE2_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT19_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT19_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT19_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT19_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT19_CFG_CORE2_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT19_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT19_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT19_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT19_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT19_CFG_CORE3_A53_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT19_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT19_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT19_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT19_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT19_CFG_CORE3_A53_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT19_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT19_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT19_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT19_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT19_CFG_SCU_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT19_CFG_SCU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT19_CFG_SCU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT19_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT19_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT19_CFG_SCU_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT19_CFG_SCU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT19_CFG_SCU_PUP_SLOT_CONTROL_MASK)

/*! @name SLT_CFG_PU - Slot configure register for PUs */
#define GPC_SLT_CFG_PU_MF_PDN_SLOT_CONTROL_MASK  (0x1U)
#define GPC_SLT_CFG_PU_MF_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT_CFG_PU_MF_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_MF_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_MF_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_MF_PUP_SLOT_CONTROL_MASK  (0x2U)
#define GPC_SLT_CFG_PU_MF_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT_CFG_PU_MF_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_MF_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_MF_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_MIPI_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT_CFG_PU_MIPI_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT_CFG_PU_MIPI_PDN_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_MIPI_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_MIPI_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_MIPI_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT_CFG_PU_MIPI_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT_CFG_PU_MIPI_PUP_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_MIPI_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_MIPI_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_PCIE_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT_CFG_PU_PCIE_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT_CFG_PU_PCIE_PDN_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_PCIE_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_PCIE_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_PCIE_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT_CFG_PU_PCIE_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT_CFG_PU_PCIE_PUP_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_PCIE_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_PCIE_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_OTG1_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT_CFG_PU_OTG1_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT_CFG_PU_OTG1_PDN_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_OTG1_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_OTG1_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_OTG1_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT_CFG_PU_OTG1_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT_CFG_PU_OTG1_PUP_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_OTG1_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_OTG1_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_OTG2_PDN_SLOT_CONTROL_MASK (0x100U)
#define GPC_SLT_CFG_PU_OTG2_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT_CFG_PU_OTG2_PDN_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_OTG2_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_OTG2_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_OTG2_PUP_SLOT_CONTROL_MASK (0x200U)
#define GPC_SLT_CFG_PU_OTG2_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT_CFG_PU_OTG2_PUP_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_OTG2_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_OTG2_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_HSIC_PDN_SLOT_CONTROL_MASK (0x400U)
#define GPC_SLT_CFG_PU_HSIC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT_CFG_PU_HSIC_PDN_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_HSIC_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_HSIC_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_HSIC_PUP_SLOT_CONTROL_MASK (0x800U)
#define GPC_SLT_CFG_PU_HSIC_PUP_SLOT_CONTROL_SHIFT (11U)
#define GPC_SLT_CFG_PU_HSIC_PUP_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_HSIC_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_HSIC_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_M4_PDN_SLOT_CONTROL_MASK  (0x1000U)
#define GPC_SLT_CFG_PU_M4_PDN_SLOT_CONTROL_SHIFT (12U)
#define GPC_SLT_CFG_PU_M4_PDN_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_M4_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_M4_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_M4_PUP_SLOT_CONTROL_MASK  (0x2000U)
#define GPC_SLT_CFG_PU_M4_PUP_SLOT_CONTROL_SHIFT (13U)
#define GPC_SLT_CFG_PU_M4_PUP_SLOT_CONTROL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_M4_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_M4_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_DDR1_PDN_SLOT_CONTROL_MASK (0x4000U)
#define GPC_SLT_CFG_PU_DDR1_PDN_SLOT_CONTROL_SHIFT (14U)
#define GPC_SLT_CFG_PU_DDR1_PDN_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_DDR1_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_DDR1_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_DDR1_PUP_SLOT_CONTROL_MASK (0x8000U)
#define GPC_SLT_CFG_PU_DDR1_PUP_SLOT_CONTROL_SHIFT (15U)
#define GPC_SLT_CFG_PU_DDR1_PUP_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_DDR1_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_DDR1_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_DDR2_PDN_SLOT_CONTROL_MASK (0x10000U)
#define GPC_SLT_CFG_PU_DDR2_PDN_SLOT_CONTROL_SHIFT (16U)
#define GPC_SLT_CFG_PU_DDR2_PDN_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_DDR2_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_DDR2_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_DDR2_PUP_SLOT_CONTROL_MASK (0x20000U)
#define GPC_SLT_CFG_PU_DDR2_PUP_SLOT_CONTROL_SHIFT (17U)
#define GPC_SLT_CFG_PU_DDR2_PUP_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_DDR2_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_DDR2_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_GPU_PDN_SLOT_CONTROL_MASK (0x40000U)
#define GPC_SLT_CFG_PU_GPU_PDN_SLOT_CONTROL_SHIFT (18U)
#define GPC_SLT_CFG_PU_GPU_PDN_SLOT_CONTROL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_GPU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_GPU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_GPU_PUP_SLOT_CONTROL_MASK (0x80000U)
#define GPC_SLT_CFG_PU_GPU_PUP_SLOT_CONTROL_SHIFT (19U)
#define GPC_SLT_CFG_PU_GPU_PUP_SLOT_CONTROL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_GPU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_GPU_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_VPU_PDN_SLOT_CONTROL_MASK (0x100000U)
#define GPC_SLT_CFG_PU_VPU_PDN_SLOT_CONTROL_SHIFT (20U)
#define GPC_SLT_CFG_PU_VPU_PDN_SLOT_CONTROL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_VPU_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_VPU_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_VPU_PUP_SLOT_CONTROL_MASK (0x200000U)
#define GPC_SLT_CFG_PU_VPU_PUP_SLOT_CONTROL_SHIFT (21U)
#define GPC_SLT_CFG_PU_VPU_PUP_SLOT_CONTROL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_VPU_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_VPU_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_HDMI_PDN_SLOT_CONTROL_MASK (0x400000U)
#define GPC_SLT_CFG_PU_HDMI_PDN_SLOT_CONTROL_SHIFT (22U)
#define GPC_SLT_CFG_PU_HDMI_PDN_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_HDMI_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_HDMI_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_HDMI_PUP_SLOT_CONTROL_MASK (0x800000U)
#define GPC_SLT_CFG_PU_HDMI_PUP_SLOT_CONTROL_SHIFT (23U)
#define GPC_SLT_CFG_PU_HDMI_PUP_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_HDMI_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_HDMI_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_DISP_PDN_SLOT_CONTROL_MASK (0x1000000U)
#define GPC_SLT_CFG_PU_DISP_PDN_SLOT_CONTROL_SHIFT (24U)
#define GPC_SLT_CFG_PU_DISP_PDN_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_DISP_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_DISP_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_DISP_PUP_SLOT_CONTROL_MASK (0x2000000U)
#define GPC_SLT_CFG_PU_DISP_PUP_SLOT_CONTROL_SHIFT (25U)
#define GPC_SLT_CFG_PU_DISP_PUP_SLOT_CONTROL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_DISP_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_DISP_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_MIPI_CSI1_PDN_SLOT_CONTROL_MASK (0x4000000U)
#define GPC_SLT_CFG_PU_MIPI_CSI1_PDN_SLOT_CONTROL_SHIFT (26U)
#define GPC_SLT_CFG_PU_MIPI_CSI1_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_MIPI_CSI1_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_MIPI_CSI1_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_MIPI_CSI1_PUP_SLOT_CONTROL_MASK (0x8000000U)
#define GPC_SLT_CFG_PU_MIPI_CSI1_PUP_SLOT_CONTROL_SHIFT (27U)
#define GPC_SLT_CFG_PU_MIPI_CSI1_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_MIPI_CSI1_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_MIPI_CSI1_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_MIPI_CSI2_PDN_SLOT_CONTROL_MASK (0x10000000U)
#define GPC_SLT_CFG_PU_MIPI_CSI2_PDN_SLOT_CONTROL_SHIFT (28U)
#define GPC_SLT_CFG_PU_MIPI_CSI2_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_MIPI_CSI2_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_MIPI_CSI2_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_MIPI_CSI2_PUP_SLOT_CONTROL_MASK (0x20000000U)
#define GPC_SLT_CFG_PU_MIPI_CSI2_PUP_SLOT_CONTROL_SHIFT (29U)
#define GPC_SLT_CFG_PU_MIPI_CSI2_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_MIPI_CSI2_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_MIPI_CSI2_PUP_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_PCIE2_PDN_SLOT_CONTROL_MASK (0x40000000U)
#define GPC_SLT_CFG_PU_PCIE2_PDN_SLOT_CONTROL_SHIFT (30U)
#define GPC_SLT_CFG_PU_PCIE2_PDN_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_PCIE2_PDN_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_PCIE2_PDN_SLOT_CONTROL_MASK)
#define GPC_SLT_CFG_PU_PCIE2_PUP_SLOT_CONTROL_MASK (0x80000000U)
#define GPC_SLT_CFG_PU_PCIE2_PUP_SLOT_CONTROL_SHIFT (31U)
#define GPC_SLT_CFG_PU_PCIE2_PUP_SLOT_CONTROL(x) (((uint32_t)(((uint32_t)(x)) << GPC_SLT_CFG_PU_PCIE2_PUP_SLOT_CONTROL_SHIFT)) & GPC_SLT_CFG_PU_PCIE2_PUP_SLOT_CONTROL_MASK)

/* The count of GPC_SLT_CFG_PU */
#define GPC_SLT_CFG_PU_COUNT                     (20U)


/*!
 * @}
 */ /* end of group GPC_Register_Masks */


/* GPC - Peripheral instance base addresses */
/** Peripheral GPC base address */
#define GPC_BASE                                 (0x303A0000u)
/** Peripheral GPC base pointer */
#define GPC                                      ((GPC_Type *)GPC_BASE)
/** Array initializer of GPC peripheral base addresses */
#define GPC_BASE_ADDRS                           { GPC_BASE }
/** Array initializer of GPC peripheral base pointers */
#define GPC_BASE_PTRS                            { GPC }
/** Interrupt vectors for the GPC peripheral type */
#define GPC_IRQS                                 { GPC_IRQn }

/*!
 * @}
 */ /* end of group GPC_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- GPC_PGC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_PGC_Peripheral_Access_Layer GPC_PGC Peripheral Access Layer
 * @{
 */

/** GPC_PGC - Register Layout Typedef */
typedef struct {
  __IO uint32_t A53CORE0_CTRL;                     /**< GPC PGC Control Register, offset: 0x0 */
  __IO uint32_t A53CORE0_PUPSCR;                   /**< GPC PGC Up Sequence Control Register, offset: 0x4 */
  __IO uint32_t A53CORE0_PDNSCR;                   /**< GPC PGC Down Sequence Control Register, offset: 0x8 */
  __IO uint32_t A53CORE0_SR;                       /**< GPC PGC Status Register, offset: 0xC */
  __IO uint32_t A53CORE0_AUXSW;                    /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x10 */
       uint8_t RESERVED_0[44];
  __IO uint32_t A53CORE1_CTRL;                     /**< GPC PGC Control Register, offset: 0x40 */
  __IO uint32_t A53CORE1_PUPSCR;                   /**< GPC PGC Up Sequence Control Register, offset: 0x44 */
  __IO uint32_t A53CORE1_PDNSCR;                   /**< GPC PGC Down Sequence Control Register, offset: 0x48 */
  __IO uint32_t A53CORE1_SR;                       /**< GPC PGC Status Register, offset: 0x4C */
  __IO uint32_t A53CORE1_AUXSW;                    /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x50 */
       uint8_t RESERVED_1[44];
  __IO uint32_t A53CORE2_CTRL;                     /**< GPC PGC Control Register, offset: 0x80 */
  __IO uint32_t A53CORE2_PUPSCR;                   /**< GPC PGC Up Sequence Control Register, offset: 0x84 */
  __IO uint32_t A53CORE2_PDNSCR;                   /**< GPC PGC Down Sequence Control Register, offset: 0x88 */
  __IO uint32_t A53CORE2_SR;                       /**< GPC PGC Status Register, offset: 0x8C */
  __IO uint32_t A53CORE2_AUXSW;                    /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x90 */
       uint8_t RESERVED_2[44];
  __IO uint32_t A53CORE3_CTRL;                     /**< GPC PGC Control Register, offset: 0xC0 */
  __IO uint32_t A53CORE3_PUPSCR;                   /**< GPC PGC Up Sequence Control Register, offset: 0xC4 */
  __IO uint32_t A53CORE3_PDNSCR;                   /**< GPC PGC Down Sequence Control Register, offset: 0xC8 */
  __IO uint32_t A53CORE3_SR;                       /**< GPC PGC Status Register, offset: 0xCC */
  __IO uint32_t A53CORE3_AUXSW;                    /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0xD0 */
       uint8_t RESERVED_3[44];
  __IO uint32_t A53SCU_CTRL;                       /**< GPC PGC Control Register, offset: 0x100 */
  __IO uint32_t A53SCU_PUPSCR;                     /**< GPC PGC Up Sequence Control Register, offset: 0x104 */
  __IO uint32_t A53SCU_PDNSCR;                     /**< GPC PGC Down Sequence Control Register, offset: 0x108 */
  __IO uint32_t A53SCU_SR;                         /**< GPC PGC Status Register, offset: 0x10C */
  __IO uint32_t A53SCU_AUXSW;                      /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x110 */
       uint8_t RESERVED_4[236];
  __IO uint32_t CTRL;                              /**< GPC PGC Control Register, offset: 0x200 */
  __IO uint32_t PUPSCR;                            /**< GPC PGC Up Sequence Control Register, offset: 0x204 */
  __IO uint32_t PDNSCR;                            /**< GPC PGC Down Sequence Control Register, offset: 0x208 */
  __IO uint32_t SR;                                /**< GPC PGC Status Register, offset: 0x20C */
  __IO uint32_t AUXSW;                             /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x210 */
       uint8_t RESERVED_5[492];
  __IO uint32_t PU0_CTRL;                          /**< GPC PGC Control Register, offset: 0x400 */
  __IO uint32_t PU0_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x404 */
  __IO uint32_t PU0_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x408 */
  __IO uint32_t PU0_SR;                            /**< GPC PGC Status Register, offset: 0x40C */
  __IO uint32_t PU0_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x410 */
       uint8_t RESERVED_6[44];
  __IO uint32_t PU1_CTRL;                          /**< GPC PGC Control Register, offset: 0x440 */
  __IO uint32_t PU1_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x444 */
  __IO uint32_t PU1_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x448 */
  __IO uint32_t PU1_SR;                            /**< GPC PGC Status Register, offset: 0x44C */
  __IO uint32_t PU1_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x450 */
       uint8_t RESERVED_7[44];
  __IO uint32_t PU2_CTRL;                          /**< GPC PGC Control Register, offset: 0x480 */
  __IO uint32_t PU2_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x484 */
  __IO uint32_t PU2_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x488 */
  __IO uint32_t PU2_SR;                            /**< GPC PGC Status Register, offset: 0x48C */
  __IO uint32_t PU2_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x490 */
       uint8_t RESERVED_8[44];
  __IO uint32_t PU3_CTRL;                          /**< GPC PGC Control Register, offset: 0x4C0 */
  __IO uint32_t PU3_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x4C4 */
  __IO uint32_t PU3_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x4C8 */
  __IO uint32_t PU3_SR;                            /**< GPC PGC Status Register, offset: 0x4CC */
  __IO uint32_t PU3_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x4D0 */
       uint8_t RESERVED_9[44];
  __IO uint32_t PU4_CTRL;                          /**< GPC PGC Control Register, offset: 0x500 */
  __IO uint32_t PU4_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x504 */
  __IO uint32_t PU4_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x508 */
  __IO uint32_t PU4_SR;                            /**< GPC PGC Status Register, offset: 0x50C */
  __IO uint32_t PU4_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x510 */
       uint8_t RESERVED_10[44];
  __IO uint32_t PU5_CTRL;                          /**< GPC PGC Control Register, offset: 0x540 */
  __IO uint32_t PU5_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x544 */
  __IO uint32_t PU5_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x548 */
  __IO uint32_t PU5_SR;                            /**< GPC PGC Status Register, offset: 0x54C */
  __IO uint32_t PU5_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x550 */
       uint8_t RESERVED_11[44];
  __IO uint32_t PU6_CTRL;                          /**< GPC PGC Control Register, offset: 0x580 */
  __IO uint32_t PU6_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x584 */
  __IO uint32_t PU6_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x588 */
  __IO uint32_t PU6_SR;                            /**< GPC PGC Status Register, offset: 0x58C */
  __IO uint32_t PU6_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x590 */
       uint8_t RESERVED_12[44];
  __IO uint32_t PU7_CTRL;                          /**< GPC PGC Control Register, offset: 0x5C0 */
  __IO uint32_t PU7_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x5C4 */
  __IO uint32_t PU7_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x5C8 */
  __IO uint32_t PU7_SR;                            /**< GPC PGC Status Register, offset: 0x5CC */
  __IO uint32_t PU7_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x5D0 */
       uint8_t RESERVED_13[44];
  __IO uint32_t PU8_CTRL;                          /**< GPC PGC Control Register, offset: 0x600 */
  __IO uint32_t PU8_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x604 */
  __IO uint32_t PU8_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x608 */
  __IO uint32_t PU8_SR;                            /**< GPC PGC Status Register, offset: 0x60C */
  __IO uint32_t PU8_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x610 */
       uint8_t RESERVED_14[44];
  __IO uint32_t PU9_CTRL;                          /**< GPC PGC Control Register, offset: 0x640 */
  __IO uint32_t PU9_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x644 */
  __IO uint32_t PU9_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x648 */
  __IO uint32_t PU9_SR;                            /**< GPC PGC Status Register, offset: 0x64C */
  __IO uint32_t PU9_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x650 */
       uint8_t RESERVED_15[44];
  __IO uint32_t PU10_CTRL;                         /**< GPC PGC Control Register, offset: 0x680 */
  __IO uint32_t PU10_PUPSCR;                       /**< GPC PGC Up Sequence Control Register, offset: 0x684 */
  __IO uint32_t PU10_PDNSCR;                       /**< GPC PGC Down Sequence Control Register, offset: 0x688 */
  __IO uint32_t PU10_SR;                           /**< GPC PGC Status Register, offset: 0x68C */
  __IO uint32_t PU10_AUXSW;                        /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x690 */
       uint8_t RESERVED_16[44];
  __IO uint32_t PU11_CTRL;                         /**< GPC PGC Control Register, offset: 0x6C0 */
  __IO uint32_t PU11_PUPSCR;                       /**< GPC PGC Up Sequence Control Register, offset: 0x6C4 */
  __IO uint32_t PU11_PDNSCR;                       /**< GPC PGC Down Sequence Control Register, offset: 0x6C8 */
  __IO uint32_t PU11_SR;                           /**< GPC PGC Status Register, offset: 0x6CC */
  __IO uint32_t PU11_AUXSW;                        /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x6D0 */
       uint8_t RESERVED_17[44];
  __IO uint32_t PU12_CTRL;                         /**< GPC PGC Control Register, offset: 0x700 */
  __IO uint32_t PU12_PUPSCR;                       /**< GPC PGC Up Sequence Control Register, offset: 0x704 */
  __IO uint32_t PU12_PDNSCR;                       /**< GPC PGC Down Sequence Control Register, offset: 0x708 */
  __IO uint32_t PU12_SR;                           /**< GPC PGC Status Register, offset: 0x70C */
  __IO uint32_t PU12_AUXSW;                        /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x710 */
       uint8_t RESERVED_18[44];
  __IO uint32_t PU13_CTRL;                         /**< GPC PGC Control Register, offset: 0x740 */
  __IO uint32_t PU13_PUPSCR;                       /**< GPC PGC Up Sequence Control Register, offset: 0x744 */
  __IO uint32_t PU13_PDNSCR;                       /**< GPC PGC Down Sequence Control Register, offset: 0x748 */
  __IO uint32_t PU13_SR;                           /**< GPC PGC Status Register, offset: 0x74C */
  __IO uint32_t PU13_AUXSW;                        /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x750 */
} GPC_PGC_Type;

/* ----------------------------------------------------------------------------
   -- GPC_PGC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_PGC_Register_Masks GPC_PGC Register Masks
 * @{
 */

/*! @name A53CORE0_CTRL - GPC PGC Control Register */
#define GPC_PGC_A53CORE0_CTRL_PCR_MASK           (0x1U)
#define GPC_PGC_A53CORE0_CTRL_PCR_SHIFT          (0U)
#define GPC_PGC_A53CORE0_CTRL_PCR(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_CTRL_PCR_SHIFT)) & GPC_PGC_A53CORE0_CTRL_PCR_MASK)
#define GPC_PGC_A53CORE0_CTRL_L2RSTDIS_MASK      (0x7EU)
#define GPC_PGC_A53CORE0_CTRL_L2RSTDIS_SHIFT     (1U)
#define GPC_PGC_A53CORE0_CTRL_L2RSTDIS(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53CORE0_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53CORE0_CTRL_DFTRAM_TCD1_MASK   (0x3F00U)
#define GPC_PGC_A53CORE0_CTRL_DFTRAM_TCD1_SHIFT  (8U)
#define GPC_PGC_A53CORE0_CTRL_DFTRAM_TCD1(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53CORE0_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53CORE0_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53CORE0_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53CORE0_CTRL_L2RETN_TCD1_TDR(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53CORE0_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53CORE0_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53CORE0_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53CORE0_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53CORE0_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name A53CORE0_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_A53CORE0_PUPSCR_SW_MASK          (0x3FU)
#define GPC_PGC_A53CORE0_PUPSCR_SW_SHIFT         (0U)
#define GPC_PGC_A53CORE0_PUPSCR_SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PUPSCR_SW_SHIFT)) & GPC_PGC_A53CORE0_PUPSCR_SW_MASK)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_A53CORE0_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_A53CORE0_PUPSCR_SW2ISO_MASK      (0x7FFF80U)
#define GPC_PGC_A53CORE0_PUPSCR_SW2ISO_SHIFT     (7U)
#define GPC_PGC_A53CORE0_PUPSCR_SW2ISO(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53CORE0_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name A53CORE0_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_A53CORE0_PDNSCR_ISO_MASK         (0x3FU)
#define GPC_PGC_A53CORE0_PDNSCR_ISO_SHIFT        (0U)
#define GPC_PGC_A53CORE0_PDNSCR_ISO(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53CORE0_PDNSCR_ISO_MASK)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_A53CORE0_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_A53CORE0_PDNSCR_ISO2SW_MASK      (0x3F00U)
#define GPC_PGC_A53CORE0_PDNSCR_ISO2SW_SHIFT     (8U)
#define GPC_PGC_A53CORE0_PDNSCR_ISO2SW(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53CORE0_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_A53CORE0_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_A53CORE0_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_A53CORE0_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_A53CORE0_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name A53CORE0_SR - GPC PGC Status Register */
#define GPC_PGC_A53CORE0_SR_PSR_MASK             (0x1U)
#define GPC_PGC_A53CORE0_SR_PSR_SHIFT            (0U)
#define GPC_PGC_A53CORE0_SR_PSR(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_SR_PSR_SHIFT)) & GPC_PGC_A53CORE0_SR_PSR_MASK)
#define GPC_PGC_A53CORE0_SR_L2RETN_FLAG_MASK     (0x2U)
#define GPC_PGC_A53CORE0_SR_L2RETN_FLAG_SHIFT    (1U)
#define GPC_PGC_A53CORE0_SR_L2RETN_FLAG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_A53CORE0_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_A53CORE0_SR_ALLOFF_FLAG_MASK     (0x4U)
#define GPC_PGC_A53CORE0_SR_ALLOFF_FLAG_SHIFT    (2U)
#define GPC_PGC_A53CORE0_SR_ALLOFF_FLAG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_A53CORE0_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_A53CORE0_SR_PUP_CLK_DIV_SEL_MASK (0x78U)
#define GPC_PGC_A53CORE0_SR_PUP_CLK_DIV_SEL_SHIFT (3U)
#define GPC_PGC_A53CORE0_SR_PUP_CLK_DIV_SEL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE0_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53CORE0_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53CORE0_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53CORE0_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53CORE0_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name A53CORE0_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_A53CORE0_AUXSW_SW2_MASK          (0x3FU)
#define GPC_PGC_A53CORE0_AUXSW_SW2_SHIFT         (0U)
#define GPC_PGC_A53CORE0_AUXSW_SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_AUXSW_SW2_SHIFT)) & GPC_PGC_A53CORE0_AUXSW_SW2_MASK)
#define GPC_PGC_A53CORE0_AUXSW_ISO2SW2_MASK      (0x3F00U)
#define GPC_PGC_A53CORE0_AUXSW_ISO2SW2_SHIFT     (8U)
#define GPC_PGC_A53CORE0_AUXSW_ISO2SW2(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_A53CORE0_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_A53CORE0_AUXSW_PDN_CLK_DIV_SEL_MASK (0xF0000U)
#define GPC_PGC_A53CORE0_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
#define GPC_PGC_A53CORE0_AUXSW_PDN_CLK_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE0_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name A53CORE1_CTRL - GPC PGC Control Register */
#define GPC_PGC_A53CORE1_CTRL_PCR_MASK           (0x1U)
#define GPC_PGC_A53CORE1_CTRL_PCR_SHIFT          (0U)
#define GPC_PGC_A53CORE1_CTRL_PCR(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_CTRL_PCR_SHIFT)) & GPC_PGC_A53CORE1_CTRL_PCR_MASK)
#define GPC_PGC_A53CORE1_CTRL_L2RSTDIS_MASK      (0x7EU)
#define GPC_PGC_A53CORE1_CTRL_L2RSTDIS_SHIFT     (1U)
#define GPC_PGC_A53CORE1_CTRL_L2RSTDIS(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53CORE1_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53CORE1_CTRL_DFTRAM_TCD1_MASK   (0x3F00U)
#define GPC_PGC_A53CORE1_CTRL_DFTRAM_TCD1_SHIFT  (8U)
#define GPC_PGC_A53CORE1_CTRL_DFTRAM_TCD1(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53CORE1_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53CORE1_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53CORE1_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53CORE1_CTRL_L2RETN_TCD1_TDR(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53CORE1_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53CORE1_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53CORE1_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53CORE1_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53CORE1_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name A53CORE1_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_A53CORE1_PUPSCR_SW_MASK          (0x3FU)
#define GPC_PGC_A53CORE1_PUPSCR_SW_SHIFT         (0U)
#define GPC_PGC_A53CORE1_PUPSCR_SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PUPSCR_SW_SHIFT)) & GPC_PGC_A53CORE1_PUPSCR_SW_MASK)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_A53CORE1_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_A53CORE1_PUPSCR_SW2ISO_MASK      (0x7FFF80U)
#define GPC_PGC_A53CORE1_PUPSCR_SW2ISO_SHIFT     (7U)
#define GPC_PGC_A53CORE1_PUPSCR_SW2ISO(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53CORE1_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name A53CORE1_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_A53CORE1_PDNSCR_ISO_MASK         (0x3FU)
#define GPC_PGC_A53CORE1_PDNSCR_ISO_SHIFT        (0U)
#define GPC_PGC_A53CORE1_PDNSCR_ISO(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53CORE1_PDNSCR_ISO_MASK)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_A53CORE1_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_A53CORE1_PDNSCR_ISO2SW_MASK      (0x3F00U)
#define GPC_PGC_A53CORE1_PDNSCR_ISO2SW_SHIFT     (8U)
#define GPC_PGC_A53CORE1_PDNSCR_ISO2SW(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53CORE1_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_A53CORE1_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_A53CORE1_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_A53CORE1_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_A53CORE1_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name A53CORE1_SR - GPC PGC Status Register */
#define GPC_PGC_A53CORE1_SR_PSR_MASK             (0x1U)
#define GPC_PGC_A53CORE1_SR_PSR_SHIFT            (0U)
#define GPC_PGC_A53CORE1_SR_PSR(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_SR_PSR_SHIFT)) & GPC_PGC_A53CORE1_SR_PSR_MASK)
#define GPC_PGC_A53CORE1_SR_L2RETN_FLAG_MASK     (0x2U)
#define GPC_PGC_A53CORE1_SR_L2RETN_FLAG_SHIFT    (1U)
#define GPC_PGC_A53CORE1_SR_L2RETN_FLAG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_A53CORE1_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_A53CORE1_SR_ALLOFF_FLAG_MASK     (0x4U)
#define GPC_PGC_A53CORE1_SR_ALLOFF_FLAG_SHIFT    (2U)
#define GPC_PGC_A53CORE1_SR_ALLOFF_FLAG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_A53CORE1_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_A53CORE1_SR_PUP_CLK_DIV_SEL_MASK (0x78U)
#define GPC_PGC_A53CORE1_SR_PUP_CLK_DIV_SEL_SHIFT (3U)
#define GPC_PGC_A53CORE1_SR_PUP_CLK_DIV_SEL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE1_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53CORE1_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53CORE1_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53CORE1_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53CORE1_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name A53CORE1_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_A53CORE1_AUXSW_SW2_MASK          (0x3FU)
#define GPC_PGC_A53CORE1_AUXSW_SW2_SHIFT         (0U)
#define GPC_PGC_A53CORE1_AUXSW_SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_AUXSW_SW2_SHIFT)) & GPC_PGC_A53CORE1_AUXSW_SW2_MASK)
#define GPC_PGC_A53CORE1_AUXSW_ISO2SW2_MASK      (0x3F00U)
#define GPC_PGC_A53CORE1_AUXSW_ISO2SW2_SHIFT     (8U)
#define GPC_PGC_A53CORE1_AUXSW_ISO2SW2(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_A53CORE1_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_A53CORE1_AUXSW_PDN_CLK_DIV_SEL_MASK (0xF0000U)
#define GPC_PGC_A53CORE1_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
#define GPC_PGC_A53CORE1_AUXSW_PDN_CLK_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE1_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name A53CORE2_CTRL - GPC PGC Control Register */
#define GPC_PGC_A53CORE2_CTRL_PCR_MASK           (0x1U)
#define GPC_PGC_A53CORE2_CTRL_PCR_SHIFT          (0U)
#define GPC_PGC_A53CORE2_CTRL_PCR(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_CTRL_PCR_SHIFT)) & GPC_PGC_A53CORE2_CTRL_PCR_MASK)
#define GPC_PGC_A53CORE2_CTRL_L2RSTDIS_MASK      (0x7EU)
#define GPC_PGC_A53CORE2_CTRL_L2RSTDIS_SHIFT     (1U)
#define GPC_PGC_A53CORE2_CTRL_L2RSTDIS(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53CORE2_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53CORE2_CTRL_DFTRAM_TCD1_MASK   (0x3F00U)
#define GPC_PGC_A53CORE2_CTRL_DFTRAM_TCD1_SHIFT  (8U)
#define GPC_PGC_A53CORE2_CTRL_DFTRAM_TCD1(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53CORE2_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53CORE2_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53CORE2_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53CORE2_CTRL_L2RETN_TCD1_TDR(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53CORE2_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53CORE2_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53CORE2_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53CORE2_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53CORE2_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name A53CORE2_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_A53CORE2_PUPSCR_SW_MASK          (0x3FU)
#define GPC_PGC_A53CORE2_PUPSCR_SW_SHIFT         (0U)
#define GPC_PGC_A53CORE2_PUPSCR_SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PUPSCR_SW_SHIFT)) & GPC_PGC_A53CORE2_PUPSCR_SW_MASK)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_A53CORE2_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_A53CORE2_PUPSCR_SW2ISO_MASK      (0x7FFF80U)
#define GPC_PGC_A53CORE2_PUPSCR_SW2ISO_SHIFT     (7U)
#define GPC_PGC_A53CORE2_PUPSCR_SW2ISO(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53CORE2_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name A53CORE2_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_A53CORE2_PDNSCR_ISO_MASK         (0x3FU)
#define GPC_PGC_A53CORE2_PDNSCR_ISO_SHIFT        (0U)
#define GPC_PGC_A53CORE2_PDNSCR_ISO(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53CORE2_PDNSCR_ISO_MASK)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_A53CORE2_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_A53CORE2_PDNSCR_ISO2SW_MASK      (0x3F00U)
#define GPC_PGC_A53CORE2_PDNSCR_ISO2SW_SHIFT     (8U)
#define GPC_PGC_A53CORE2_PDNSCR_ISO2SW(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53CORE2_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_A53CORE2_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_A53CORE2_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_A53CORE2_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_A53CORE2_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name A53CORE2_SR - GPC PGC Status Register */
#define GPC_PGC_A53CORE2_SR_PSR_MASK             (0x1U)
#define GPC_PGC_A53CORE2_SR_PSR_SHIFT            (0U)
#define GPC_PGC_A53CORE2_SR_PSR(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_SR_PSR_SHIFT)) & GPC_PGC_A53CORE2_SR_PSR_MASK)
#define GPC_PGC_A53CORE2_SR_L2RETN_FLAG_MASK     (0x2U)
#define GPC_PGC_A53CORE2_SR_L2RETN_FLAG_SHIFT    (1U)
#define GPC_PGC_A53CORE2_SR_L2RETN_FLAG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_A53CORE2_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_A53CORE2_SR_ALLOFF_FLAG_MASK     (0x4U)
#define GPC_PGC_A53CORE2_SR_ALLOFF_FLAG_SHIFT    (2U)
#define GPC_PGC_A53CORE2_SR_ALLOFF_FLAG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_A53CORE2_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_A53CORE2_SR_PUP_CLK_DIV_SEL_MASK (0x78U)
#define GPC_PGC_A53CORE2_SR_PUP_CLK_DIV_SEL_SHIFT (3U)
#define GPC_PGC_A53CORE2_SR_PUP_CLK_DIV_SEL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE2_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53CORE2_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53CORE2_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53CORE2_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53CORE2_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name A53CORE2_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_A53CORE2_AUXSW_SW2_MASK          (0x3FU)
#define GPC_PGC_A53CORE2_AUXSW_SW2_SHIFT         (0U)
#define GPC_PGC_A53CORE2_AUXSW_SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_AUXSW_SW2_SHIFT)) & GPC_PGC_A53CORE2_AUXSW_SW2_MASK)
#define GPC_PGC_A53CORE2_AUXSW_ISO2SW2_MASK      (0x3F00U)
#define GPC_PGC_A53CORE2_AUXSW_ISO2SW2_SHIFT     (8U)
#define GPC_PGC_A53CORE2_AUXSW_ISO2SW2(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_A53CORE2_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_A53CORE2_AUXSW_PDN_CLK_DIV_SEL_MASK (0xF0000U)
#define GPC_PGC_A53CORE2_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
#define GPC_PGC_A53CORE2_AUXSW_PDN_CLK_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE2_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name A53CORE3_CTRL - GPC PGC Control Register */
#define GPC_PGC_A53CORE3_CTRL_PCR_MASK           (0x1U)
#define GPC_PGC_A53CORE3_CTRL_PCR_SHIFT          (0U)
#define GPC_PGC_A53CORE3_CTRL_PCR(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_CTRL_PCR_SHIFT)) & GPC_PGC_A53CORE3_CTRL_PCR_MASK)
#define GPC_PGC_A53CORE3_CTRL_L2RSTDIS_MASK      (0x7EU)
#define GPC_PGC_A53CORE3_CTRL_L2RSTDIS_SHIFT     (1U)
#define GPC_PGC_A53CORE3_CTRL_L2RSTDIS(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53CORE3_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53CORE3_CTRL_DFTRAM_TCD1_MASK   (0x3F00U)
#define GPC_PGC_A53CORE3_CTRL_DFTRAM_TCD1_SHIFT  (8U)
#define GPC_PGC_A53CORE3_CTRL_DFTRAM_TCD1(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53CORE3_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53CORE3_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53CORE3_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53CORE3_CTRL_L2RETN_TCD1_TDR(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53CORE3_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53CORE3_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53CORE3_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53CORE3_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53CORE3_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name A53CORE3_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_A53CORE3_PUPSCR_SW_MASK          (0x3FU)
#define GPC_PGC_A53CORE3_PUPSCR_SW_SHIFT         (0U)
#define GPC_PGC_A53CORE3_PUPSCR_SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PUPSCR_SW_SHIFT)) & GPC_PGC_A53CORE3_PUPSCR_SW_MASK)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_A53CORE3_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_A53CORE3_PUPSCR_SW2ISO_MASK      (0x7FFF80U)
#define GPC_PGC_A53CORE3_PUPSCR_SW2ISO_SHIFT     (7U)
#define GPC_PGC_A53CORE3_PUPSCR_SW2ISO(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53CORE3_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name A53CORE3_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_A53CORE3_PDNSCR_ISO_MASK         (0x3FU)
#define GPC_PGC_A53CORE3_PDNSCR_ISO_SHIFT        (0U)
#define GPC_PGC_A53CORE3_PDNSCR_ISO(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53CORE3_PDNSCR_ISO_MASK)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_A53CORE3_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_A53CORE3_PDNSCR_ISO2SW_MASK      (0x3F00U)
#define GPC_PGC_A53CORE3_PDNSCR_ISO2SW_SHIFT     (8U)
#define GPC_PGC_A53CORE3_PDNSCR_ISO2SW(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53CORE3_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_A53CORE3_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_A53CORE3_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_A53CORE3_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_A53CORE3_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name A53CORE3_SR - GPC PGC Status Register */
#define GPC_PGC_A53CORE3_SR_PSR_MASK             (0x1U)
#define GPC_PGC_A53CORE3_SR_PSR_SHIFT            (0U)
#define GPC_PGC_A53CORE3_SR_PSR(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_SR_PSR_SHIFT)) & GPC_PGC_A53CORE3_SR_PSR_MASK)
#define GPC_PGC_A53CORE3_SR_L2RETN_FLAG_MASK     (0x2U)
#define GPC_PGC_A53CORE3_SR_L2RETN_FLAG_SHIFT    (1U)
#define GPC_PGC_A53CORE3_SR_L2RETN_FLAG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_A53CORE3_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_A53CORE3_SR_ALLOFF_FLAG_MASK     (0x4U)
#define GPC_PGC_A53CORE3_SR_ALLOFF_FLAG_SHIFT    (2U)
#define GPC_PGC_A53CORE3_SR_ALLOFF_FLAG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_A53CORE3_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_A53CORE3_SR_PUP_CLK_DIV_SEL_MASK (0x78U)
#define GPC_PGC_A53CORE3_SR_PUP_CLK_DIV_SEL_SHIFT (3U)
#define GPC_PGC_A53CORE3_SR_PUP_CLK_DIV_SEL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE3_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53CORE3_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53CORE3_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53CORE3_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53CORE3_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name A53CORE3_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_A53CORE3_AUXSW_SW2_MASK          (0x3FU)
#define GPC_PGC_A53CORE3_AUXSW_SW2_SHIFT         (0U)
#define GPC_PGC_A53CORE3_AUXSW_SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_AUXSW_SW2_SHIFT)) & GPC_PGC_A53CORE3_AUXSW_SW2_MASK)
#define GPC_PGC_A53CORE3_AUXSW_ISO2SW2_MASK      (0x3F00U)
#define GPC_PGC_A53CORE3_AUXSW_ISO2SW2_SHIFT     (8U)
#define GPC_PGC_A53CORE3_AUXSW_ISO2SW2(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_A53CORE3_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_A53CORE3_AUXSW_PDN_CLK_DIV_SEL_MASK (0xF0000U)
#define GPC_PGC_A53CORE3_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
#define GPC_PGC_A53CORE3_AUXSW_PDN_CLK_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE3_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name A53SCU_CTRL - GPC PGC Control Register */
#define GPC_PGC_A53SCU_CTRL_PCR_MASK             (0x1U)
#define GPC_PGC_A53SCU_CTRL_PCR_SHIFT            (0U)
#define GPC_PGC_A53SCU_CTRL_PCR(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_PCR_SHIFT)) & GPC_PGC_A53SCU_CTRL_PCR_MASK)
#define GPC_PGC_A53SCU_CTRL_L2RSTDIS_MASK        (0x7EU)
#define GPC_PGC_A53SCU_CTRL_L2RSTDIS_SHIFT       (1U)
#define GPC_PGC_A53SCU_CTRL_L2RSTDIS(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53SCU_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_MASK     (0x3F00U)
#define GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_SHIFT    (8U)
#define GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name A53SCU_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_A53SCU_PUPSCR_SW_MASK            (0x3FU)
#define GPC_PGC_A53SCU_PUPSCR_SW_SHIFT           (0U)
#define GPC_PGC_A53SCU_PUPSCR_SW(x)              (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PUPSCR_SW_SHIFT)) & GPC_PGC_A53SCU_PUPSCR_SW_MASK)
#define GPC_PGC_A53SCU_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_A53SCU_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_A53SCU_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_A53SCU_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_A53SCU_PUPSCR_SW2ISO_MASK        (0x7FFF80U)
#define GPC_PGC_A53SCU_PUPSCR_SW2ISO_SHIFT       (7U)
#define GPC_PGC_A53SCU_PUPSCR_SW2ISO(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53SCU_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_A53SCU_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_A53SCU_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_A53SCU_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53SCU_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name A53SCU_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_A53SCU_PDNSCR_ISO_MASK           (0x3FU)
#define GPC_PGC_A53SCU_PDNSCR_ISO_SHIFT          (0U)
#define GPC_PGC_A53SCU_PDNSCR_ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_ISO_MASK)
#define GPC_PGC_A53SCU_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_A53SCU_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_A53SCU_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_A53SCU_PDNSCR_ISO2SW_MASK        (0x3F00U)
#define GPC_PGC_A53SCU_PDNSCR_ISO2SW_SHIFT       (8U)
#define GPC_PGC_A53SCU_PDNSCR_ISO2SW(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_A53SCU_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_A53SCU_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_A53SCU_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_A53SCU_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_A53SCU_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_A53SCU_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name A53SCU_SR - GPC PGC Status Register */
#define GPC_PGC_A53SCU_SR_PSR_MASK               (0x1U)
#define GPC_PGC_A53SCU_SR_PSR_SHIFT              (0U)
#define GPC_PGC_A53SCU_SR_PSR(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_SR_PSR_SHIFT)) & GPC_PGC_A53SCU_SR_PSR_MASK)
#define GPC_PGC_A53SCU_SR_L2RETN_FLAG_MASK       (0x2U)
#define GPC_PGC_A53SCU_SR_L2RETN_FLAG_SHIFT      (1U)
#define GPC_PGC_A53SCU_SR_L2RETN_FLAG(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_A53SCU_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_A53SCU_SR_ALLOFF_FLAG_MASK       (0x4U)
#define GPC_PGC_A53SCU_SR_ALLOFF_FLAG_SHIFT      (2U)
#define GPC_PGC_A53SCU_SR_ALLOFF_FLAG(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_A53SCU_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_MASK   (0x78U)
#define GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_SHIFT  (3U)
#define GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name A53SCU_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_A53SCU_AUXSW_SW2_MASK            (0x3FU)
#define GPC_PGC_A53SCU_AUXSW_SW2_SHIFT           (0U)
#define GPC_PGC_A53SCU_AUXSW_SW2(x)              (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_AUXSW_SW2_SHIFT)) & GPC_PGC_A53SCU_AUXSW_SW2_MASK)
#define GPC_PGC_A53SCU_AUXSW_ISO2SW2_MASK        (0x3F00U)
#define GPC_PGC_A53SCU_AUXSW_ISO2SW2_SHIFT       (8U)
#define GPC_PGC_A53SCU_AUXSW_ISO2SW2(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_A53SCU_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_A53SCU_AUXSW_PDN_CLK_DIV_SEL_MASK (0xF0000U)
#define GPC_PGC_A53SCU_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
#define GPC_PGC_A53SCU_AUXSW_PDN_CLK_DIV_SEL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53SCU_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name CTRL - GPC PGC Control Register */
#define GPC_PGC_CTRL_PCR_MASK                    (0x1U)
#define GPC_PGC_CTRL_PCR_SHIFT                   (0U)
#define GPC_PGC_CTRL_PCR(x)                      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CTRL_PCR_SHIFT)) & GPC_PGC_CTRL_PCR_MASK)
#define GPC_PGC_CTRL_L2RSTDIS_MASK               (0x7EU)
#define GPC_PGC_CTRL_L2RSTDIS_SHIFT              (1U)
#define GPC_PGC_CTRL_L2RSTDIS(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_CTRL_DFTRAM_TCD1_MASK            (0x3F00U)
#define GPC_PGC_CTRL_DFTRAM_TCD1_SHIFT           (8U)
#define GPC_PGC_CTRL_DFTRAM_TCD1(x)              (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_CTRL_L2RETN_TCD1_TDR_MASK        (0x3F0000U)
#define GPC_PGC_CTRL_L2RETN_TCD1_TDR_SHIFT       (16U)
#define GPC_PGC_CTRL_L2RETN_TCD1_TDR(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_CTRL_MEMPWR_TCD1_TDR_TRM_MASK    (0x3F000000U)
#define GPC_PGC_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT   (24U)
#define GPC_PGC_CTRL_MEMPWR_TCD1_TDR_TRM(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PUPSCR_SW_MASK                   (0x3FU)
#define GPC_PGC_PUPSCR_SW_SHIFT                  (0U)
#define GPC_PGC_PUPSCR_SW(x)                     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PUPSCR_SW_SHIFT)) & GPC_PGC_PUPSCR_SW_MASK)
#define GPC_PGC_PUPSCR_PUP_WAIT_SCALL_OUT_MASK   (0x40U)
#define GPC_PGC_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT  (6U)
#define GPC_PGC_PUPSCR_PUP_WAIT_SCALL_OUT(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PUPSCR_SW2ISO_MASK               (0x7FFF80U)
#define GPC_PGC_PUPSCR_SW2ISO_SHIFT              (7U)
#define GPC_PGC_PUPSCR_SW2ISO(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PDNSCR_ISO_MASK                  (0x3FU)
#define GPC_PGC_PDNSCR_ISO_SHIFT                 (0U)
#define GPC_PGC_PDNSCR_ISO(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PDNSCR_ISO_SHIFT)) & GPC_PGC_PDNSCR_ISO_MASK)
#define GPC_PGC_PDNSCR_PDN_WAIT_SCALL_OUT_MASK   (0x80U)
#define GPC_PGC_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT  (7U)
#define GPC_PGC_PDNSCR_PDN_WAIT_SCALL_OUT(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PDNSCR_ISO2SW_MASK               (0x3F00U)
#define GPC_PGC_PDNSCR_ISO2SW_SHIFT              (8U)
#define GPC_PGC_PDNSCR_ISO2SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK  (0xFF000000U)
#define GPC_PGC_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PDNSCR_PUP_SCPRE_SCALL_CNT(x)    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name SR - GPC PGC Status Register */
#define GPC_PGC_SR_PSR_MASK                      (0x1U)
#define GPC_PGC_SR_PSR_SHIFT                     (0U)
#define GPC_PGC_SR_PSR(x)                        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_SR_PSR_SHIFT)) & GPC_PGC_SR_PSR_MASK)
#define GPC_PGC_SR_L2RETN_FLAG_MASK              (0x2U)
#define GPC_PGC_SR_L2RETN_FLAG_SHIFT             (1U)
#define GPC_PGC_SR_L2RETN_FLAG(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_SR_ALLOFF_FLAG_MASK              (0x4U)
#define GPC_PGC_SR_ALLOFF_FLAG_SHIFT             (2U)
#define GPC_PGC_SR_ALLOFF_FLAG(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_SR_PUP_CLK_DIV_SEL_MASK          (0x78U)
#define GPC_PGC_SR_PUP_CLK_DIV_SEL_SHIFT         (3U)
#define GPC_PGC_SR_PUP_CLK_DIV_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_SR_L2RSTDIS_DEASSERT_CNT_MASK    (0x3FF00U)
#define GPC_PGC_SR_L2RSTDIS_DEASSERT_CNT_SHIFT   (8U)
#define GPC_PGC_SR_L2RSTDIS_DEASSERT_CNT(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_AUXSW_SW2_MASK                   (0x3FU)
#define GPC_PGC_AUXSW_SW2_SHIFT                  (0U)
#define GPC_PGC_AUXSW_SW2(x)                     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_AUXSW_SW2_SHIFT)) & GPC_PGC_AUXSW_SW2_MASK)
#define GPC_PGC_AUXSW_ISO2SW2_MASK               (0x3F00U)
#define GPC_PGC_AUXSW_ISO2SW2_SHIFT              (8U)
#define GPC_PGC_AUXSW_ISO2SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_AUXSW_PDN_CLK_DIV_SEL_MASK       (0xF0000U)
#define GPC_PGC_AUXSW_PDN_CLK_DIV_SEL_SHIFT      (16U)
#define GPC_PGC_AUXSW_PDN_CLK_DIV_SEL(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU0_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU0_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU0_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU0_CTRL_PCR(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_CTRL_PCR_SHIFT)) & GPC_PGC_PU0_CTRL_PCR_MASK)
#define GPC_PGC_PU0_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU0_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU0_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU0_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU0_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU0_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU0_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU0_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU0_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU0_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU0_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU0_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU0_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU0_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU0_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU0_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU0_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU0_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU0_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU0_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PUPSCR_SW_SHIFT)) & GPC_PGC_PU0_PUPSCR_SW_MASK)
#define GPC_PGC_PU0_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU0_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU0_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU0_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU0_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU0_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU0_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU0_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU0_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU0_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU0_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU0_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU0_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU0_PDNSCR_ISO_MASK)
#define GPC_PGC_PU0_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU0_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU0_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU0_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU0_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU0_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU0_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU0_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU0_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU0_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU0_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU0_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU0_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU0_SR - GPC PGC Status Register */
#define GPC_PGC_PU0_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU0_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU0_SR_PSR(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_SR_PSR_SHIFT)) & GPC_PGC_PU0_SR_PSR_MASK)
#define GPC_PGC_PU0_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU0_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU0_SR_L2RETN_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU0_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU0_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU0_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU0_SR_ALLOFF_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU0_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU0_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU0_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
#define GPC_PGC_PU0_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU0_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU0_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU0_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU0_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU0_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU0_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU0_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU0_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU0_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_AUXSW_SW2_SHIFT)) & GPC_PGC_PU0_AUXSW_SW2_MASK)
#define GPC_PGC_PU0_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU0_AUXSW_ISO2SW2_SHIFT          (8U)
#define GPC_PGC_PU0_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU0_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU0_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU0_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
#define GPC_PGC_PU0_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU0_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU1_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU1_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU1_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU1_CTRL_PCR(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_CTRL_PCR_SHIFT)) & GPC_PGC_PU1_CTRL_PCR_MASK)
#define GPC_PGC_PU1_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU1_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU1_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU1_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU1_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU1_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU1_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU1_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU1_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU1_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU1_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU1_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU1_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU1_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU1_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU1_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU1_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU1_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU1_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU1_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PUPSCR_SW_SHIFT)) & GPC_PGC_PU1_PUPSCR_SW_MASK)
#define GPC_PGC_PU1_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU1_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU1_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU1_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU1_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU1_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU1_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU1_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU1_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU1_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU1_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU1_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU1_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU1_PDNSCR_ISO_MASK)
#define GPC_PGC_PU1_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU1_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU1_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU1_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU1_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU1_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU1_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU1_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU1_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU1_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU1_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU1_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU1_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU1_SR - GPC PGC Status Register */
#define GPC_PGC_PU1_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU1_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU1_SR_PSR(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_SR_PSR_SHIFT)) & GPC_PGC_PU1_SR_PSR_MASK)
#define GPC_PGC_PU1_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU1_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU1_SR_L2RETN_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU1_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU1_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU1_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU1_SR_ALLOFF_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU1_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU1_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU1_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
#define GPC_PGC_PU1_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU1_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU1_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU1_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU1_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU1_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU1_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU1_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU1_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU1_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_AUXSW_SW2_SHIFT)) & GPC_PGC_PU1_AUXSW_SW2_MASK)
#define GPC_PGC_PU1_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU1_AUXSW_ISO2SW2_SHIFT          (8U)
#define GPC_PGC_PU1_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU1_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU1_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU1_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
#define GPC_PGC_PU1_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU1_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU2_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU2_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU2_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU2_CTRL_PCR(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_CTRL_PCR_SHIFT)) & GPC_PGC_PU2_CTRL_PCR_MASK)
#define GPC_PGC_PU2_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU2_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU2_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU2_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU2_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU2_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU2_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU2_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU2_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU2_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU2_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU2_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU2_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU2_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU2_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU2_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU2_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU2_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU2_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU2_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PUPSCR_SW_SHIFT)) & GPC_PGC_PU2_PUPSCR_SW_MASK)
#define GPC_PGC_PU2_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU2_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU2_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU2_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU2_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU2_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU2_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU2_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU2_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU2_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU2_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU2_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU2_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU2_PDNSCR_ISO_MASK)
#define GPC_PGC_PU2_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU2_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU2_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU2_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU2_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU2_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU2_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU2_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU2_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU2_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU2_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU2_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU2_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU2_SR - GPC PGC Status Register */
#define GPC_PGC_PU2_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU2_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU2_SR_PSR(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_SR_PSR_SHIFT)) & GPC_PGC_PU2_SR_PSR_MASK)
#define GPC_PGC_PU2_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU2_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU2_SR_L2RETN_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU2_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU2_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU2_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU2_SR_ALLOFF_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU2_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU2_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU2_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
#define GPC_PGC_PU2_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU2_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU2_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU2_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU2_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU2_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU2_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU2_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU2_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU2_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_AUXSW_SW2_SHIFT)) & GPC_PGC_PU2_AUXSW_SW2_MASK)
#define GPC_PGC_PU2_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU2_AUXSW_ISO2SW2_SHIFT          (8U)
#define GPC_PGC_PU2_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU2_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU2_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU2_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
#define GPC_PGC_PU2_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU2_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU3_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU3_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU3_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU3_CTRL_PCR(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_CTRL_PCR_SHIFT)) & GPC_PGC_PU3_CTRL_PCR_MASK)
#define GPC_PGC_PU3_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU3_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU3_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU3_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU3_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU3_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU3_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU3_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU3_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU3_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU3_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU3_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU3_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU3_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU3_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU3_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU3_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU3_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU3_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU3_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PUPSCR_SW_SHIFT)) & GPC_PGC_PU3_PUPSCR_SW_MASK)
#define GPC_PGC_PU3_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU3_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU3_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU3_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU3_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU3_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU3_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU3_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU3_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU3_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU3_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU3_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU3_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU3_PDNSCR_ISO_MASK)
#define GPC_PGC_PU3_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU3_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU3_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU3_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU3_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU3_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU3_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU3_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU3_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU3_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU3_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU3_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU3_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU3_SR - GPC PGC Status Register */
#define GPC_PGC_PU3_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU3_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU3_SR_PSR(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_SR_PSR_SHIFT)) & GPC_PGC_PU3_SR_PSR_MASK)
#define GPC_PGC_PU3_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU3_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU3_SR_L2RETN_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU3_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU3_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU3_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU3_SR_ALLOFF_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU3_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU3_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU3_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
#define GPC_PGC_PU3_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU3_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU3_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU3_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU3_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU3_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU3_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU3_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU3_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU3_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_AUXSW_SW2_SHIFT)) & GPC_PGC_PU3_AUXSW_SW2_MASK)
#define GPC_PGC_PU3_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU3_AUXSW_ISO2SW2_SHIFT          (8U)
#define GPC_PGC_PU3_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU3_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU3_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU3_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
#define GPC_PGC_PU3_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU3_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU4_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU4_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU4_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU4_CTRL_PCR(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_CTRL_PCR_SHIFT)) & GPC_PGC_PU4_CTRL_PCR_MASK)
#define GPC_PGC_PU4_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU4_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU4_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU4_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU4_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU4_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU4_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU4_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU4_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU4_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU4_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU4_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU4_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU4_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU4_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU4_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU4_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU4_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU4_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU4_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PUPSCR_SW_SHIFT)) & GPC_PGC_PU4_PUPSCR_SW_MASK)
#define GPC_PGC_PU4_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU4_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU4_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU4_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU4_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU4_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU4_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU4_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU4_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU4_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU4_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU4_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU4_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU4_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU4_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU4_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU4_PDNSCR_ISO_MASK)
#define GPC_PGC_PU4_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU4_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU4_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU4_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU4_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU4_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU4_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU4_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU4_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU4_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU4_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU4_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU4_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU4_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU4_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU4_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU4_SR - GPC PGC Status Register */
#define GPC_PGC_PU4_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU4_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU4_SR_PSR(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_SR_PSR_SHIFT)) & GPC_PGC_PU4_SR_PSR_MASK)
#define GPC_PGC_PU4_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU4_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU4_SR_L2RETN_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU4_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU4_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU4_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU4_SR_ALLOFF_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU4_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU4_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU4_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
#define GPC_PGC_PU4_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU4_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU4_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU4_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU4_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU4_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU4_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU4_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU4_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU4_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_AUXSW_SW2_SHIFT)) & GPC_PGC_PU4_AUXSW_SW2_MASK)
#define GPC_PGC_PU4_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU4_AUXSW_ISO2SW2_SHIFT          (8U)
#define GPC_PGC_PU4_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU4_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU4_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU4_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
#define GPC_PGC_PU4_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU4_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU5_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU5_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU5_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU5_CTRL_PCR(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_CTRL_PCR_SHIFT)) & GPC_PGC_PU5_CTRL_PCR_MASK)
#define GPC_PGC_PU5_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU5_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU5_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU5_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU5_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU5_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU5_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU5_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU5_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU5_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU5_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU5_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU5_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU5_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU5_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU5_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU5_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU5_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU5_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU5_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PUPSCR_SW_SHIFT)) & GPC_PGC_PU5_PUPSCR_SW_MASK)
#define GPC_PGC_PU5_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU5_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU5_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU5_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU5_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU5_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU5_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU5_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU5_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU5_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU5_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU5_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU5_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU5_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU5_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU5_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU5_PDNSCR_ISO_MASK)
#define GPC_PGC_PU5_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU5_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU5_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU5_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU5_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU5_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU5_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU5_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU5_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU5_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU5_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU5_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU5_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU5_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU5_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU5_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU5_SR - GPC PGC Status Register */
#define GPC_PGC_PU5_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU5_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU5_SR_PSR(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_SR_PSR_SHIFT)) & GPC_PGC_PU5_SR_PSR_MASK)
#define GPC_PGC_PU5_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU5_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU5_SR_L2RETN_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU5_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU5_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU5_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU5_SR_ALLOFF_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU5_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU5_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU5_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
#define GPC_PGC_PU5_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU5_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU5_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU5_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU5_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU5_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU5_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU5_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU5_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU5_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_AUXSW_SW2_SHIFT)) & GPC_PGC_PU5_AUXSW_SW2_MASK)
#define GPC_PGC_PU5_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU5_AUXSW_ISO2SW2_SHIFT          (8U)
#define GPC_PGC_PU5_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU5_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU5_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU5_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
#define GPC_PGC_PU5_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU5_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU6_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU6_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU6_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU6_CTRL_PCR(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_CTRL_PCR_SHIFT)) & GPC_PGC_PU6_CTRL_PCR_MASK)
#define GPC_PGC_PU6_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU6_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU6_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU6_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU6_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU6_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU6_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU6_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU6_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU6_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU6_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU6_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU6_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU6_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU6_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU6_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU6_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU6_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU6_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU6_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PUPSCR_SW_SHIFT)) & GPC_PGC_PU6_PUPSCR_SW_MASK)
#define GPC_PGC_PU6_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU6_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU6_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU6_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU6_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU6_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU6_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU6_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU6_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU6_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU6_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU6_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU6_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU6_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU6_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU6_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU6_PDNSCR_ISO_MASK)
#define GPC_PGC_PU6_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU6_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU6_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU6_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU6_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU6_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU6_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU6_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU6_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU6_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU6_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU6_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU6_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU6_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU6_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU6_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU6_SR - GPC PGC Status Register */
#define GPC_PGC_PU6_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU6_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU6_SR_PSR(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_SR_PSR_SHIFT)) & GPC_PGC_PU6_SR_PSR_MASK)
#define GPC_PGC_PU6_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU6_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU6_SR_L2RETN_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU6_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU6_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU6_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU6_SR_ALLOFF_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU6_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU6_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU6_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
#define GPC_PGC_PU6_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU6_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU6_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU6_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU6_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU6_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU6_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU6_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU6_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU6_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_AUXSW_SW2_SHIFT)) & GPC_PGC_PU6_AUXSW_SW2_MASK)
#define GPC_PGC_PU6_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU6_AUXSW_ISO2SW2_SHIFT          (8U)
#define GPC_PGC_PU6_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU6_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU6_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU6_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
#define GPC_PGC_PU6_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU6_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU7_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU7_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU7_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU7_CTRL_PCR(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_CTRL_PCR_SHIFT)) & GPC_PGC_PU7_CTRL_PCR_MASK)
#define GPC_PGC_PU7_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU7_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU7_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU7_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU7_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU7_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU7_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU7_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU7_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU7_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU7_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU7_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU7_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU7_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU7_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU7_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU7_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU7_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU7_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU7_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PUPSCR_SW_SHIFT)) & GPC_PGC_PU7_PUPSCR_SW_MASK)
#define GPC_PGC_PU7_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU7_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU7_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU7_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU7_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU7_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU7_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU7_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU7_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU7_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU7_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU7_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU7_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU7_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU7_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU7_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU7_PDNSCR_ISO_MASK)
#define GPC_PGC_PU7_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU7_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU7_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU7_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU7_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU7_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU7_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU7_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU7_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU7_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU7_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU7_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU7_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU7_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU7_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU7_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU7_SR - GPC PGC Status Register */
#define GPC_PGC_PU7_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU7_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU7_SR_PSR(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_SR_PSR_SHIFT)) & GPC_PGC_PU7_SR_PSR_MASK)
#define GPC_PGC_PU7_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU7_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU7_SR_L2RETN_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU7_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU7_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU7_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU7_SR_ALLOFF_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU7_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU7_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU7_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
#define GPC_PGC_PU7_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU7_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU7_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU7_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU7_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU7_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU7_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU7_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU7_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU7_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_AUXSW_SW2_SHIFT)) & GPC_PGC_PU7_AUXSW_SW2_MASK)
#define GPC_PGC_PU7_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU7_AUXSW_ISO2SW2_SHIFT          (8U)
#define GPC_PGC_PU7_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU7_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU7_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU7_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
#define GPC_PGC_PU7_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU7_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU8_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU8_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU8_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU8_CTRL_PCR(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_CTRL_PCR_SHIFT)) & GPC_PGC_PU8_CTRL_PCR_MASK)
#define GPC_PGC_PU8_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU8_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU8_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU8_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU8_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU8_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU8_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU8_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU8_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU8_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU8_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU8_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU8_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU8_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU8_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU8_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU8_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU8_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU8_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU8_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PUPSCR_SW_SHIFT)) & GPC_PGC_PU8_PUPSCR_SW_MASK)
#define GPC_PGC_PU8_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU8_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU8_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU8_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU8_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU8_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU8_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU8_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU8_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU8_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU8_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU8_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU8_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU8_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU8_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU8_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU8_PDNSCR_ISO_MASK)
#define GPC_PGC_PU8_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU8_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU8_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU8_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU8_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU8_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU8_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU8_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU8_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU8_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU8_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU8_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU8_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU8_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU8_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU8_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU8_SR - GPC PGC Status Register */
#define GPC_PGC_PU8_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU8_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU8_SR_PSR(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_SR_PSR_SHIFT)) & GPC_PGC_PU8_SR_PSR_MASK)
#define GPC_PGC_PU8_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU8_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU8_SR_L2RETN_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU8_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU8_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU8_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU8_SR_ALLOFF_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU8_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU8_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU8_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
#define GPC_PGC_PU8_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU8_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU8_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU8_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU8_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU8_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU8_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU8_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU8_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU8_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_AUXSW_SW2_SHIFT)) & GPC_PGC_PU8_AUXSW_SW2_MASK)
#define GPC_PGC_PU8_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU8_AUXSW_ISO2SW2_SHIFT          (8U)
#define GPC_PGC_PU8_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU8_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU8_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU8_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
#define GPC_PGC_PU8_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU8_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU9_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU9_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU9_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU9_CTRL_PCR(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_CTRL_PCR_SHIFT)) & GPC_PGC_PU9_CTRL_PCR_MASK)
#define GPC_PGC_PU9_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU9_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU9_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU9_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU9_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU9_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU9_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU9_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU9_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU9_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU9_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU9_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU9_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU9_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU9_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU9_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU9_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU9_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU9_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU9_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PUPSCR_SW_SHIFT)) & GPC_PGC_PU9_PUPSCR_SW_MASK)
#define GPC_PGC_PU9_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU9_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU9_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU9_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU9_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU9_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU9_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU9_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU9_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU9_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU9_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU9_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU9_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU9_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU9_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU9_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU9_PDNSCR_ISO_MASK)
#define GPC_PGC_PU9_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU9_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU9_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU9_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU9_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU9_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU9_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU9_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU9_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU9_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU9_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU9_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU9_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU9_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU9_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU9_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU9_SR - GPC PGC Status Register */
#define GPC_PGC_PU9_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU9_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU9_SR_PSR(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_SR_PSR_SHIFT)) & GPC_PGC_PU9_SR_PSR_MASK)
#define GPC_PGC_PU9_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU9_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU9_SR_L2RETN_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU9_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU9_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU9_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU9_SR_ALLOFF_FLAG(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU9_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU9_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU9_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
#define GPC_PGC_PU9_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU9_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU9_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU9_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU9_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU9_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU9_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU9_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU9_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU9_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_AUXSW_SW2_SHIFT)) & GPC_PGC_PU9_AUXSW_SW2_MASK)
#define GPC_PGC_PU9_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU9_AUXSW_ISO2SW2_SHIFT          (8U)
#define GPC_PGC_PU9_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU9_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU9_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU9_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
#define GPC_PGC_PU9_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU9_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU10_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU10_CTRL_PCR_MASK               (0x1U)
#define GPC_PGC_PU10_CTRL_PCR_SHIFT              (0U)
#define GPC_PGC_PU10_CTRL_PCR(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_CTRL_PCR_SHIFT)) & GPC_PGC_PU10_CTRL_PCR_MASK)
#define GPC_PGC_PU10_CTRL_L2RSTDIS_MASK          (0x7EU)
#define GPC_PGC_PU10_CTRL_L2RSTDIS_SHIFT         (1U)
#define GPC_PGC_PU10_CTRL_L2RSTDIS(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU10_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU10_CTRL_DFTRAM_TCD1_MASK       (0x3F00U)
#define GPC_PGC_PU10_CTRL_DFTRAM_TCD1_SHIFT      (8U)
#define GPC_PGC_PU10_CTRL_DFTRAM_TCD1(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU10_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU10_CTRL_L2RETN_TCD1_TDR_MASK   (0x3F0000U)
#define GPC_PGC_PU10_CTRL_L2RETN_TCD1_TDR_SHIFT  (16U)
#define GPC_PGC_PU10_CTRL_L2RETN_TCD1_TDR(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU10_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU10_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU10_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU10_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU10_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU10_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU10_PUPSCR_SW_MASK              (0x3FU)
#define GPC_PGC_PU10_PUPSCR_SW_SHIFT             (0U)
#define GPC_PGC_PU10_PUPSCR_SW(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PUPSCR_SW_SHIFT)) & GPC_PGC_PU10_PUPSCR_SW_MASK)
#define GPC_PGC_PU10_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU10_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU10_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU10_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU10_PUPSCR_SW2ISO_MASK          (0x7FFF80U)
#define GPC_PGC_PU10_PUPSCR_SW2ISO_SHIFT         (7U)
#define GPC_PGC_PU10_PUPSCR_SW2ISO(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU10_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU10_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU10_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU10_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU10_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU10_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU10_PDNSCR_ISO_MASK             (0x3FU)
#define GPC_PGC_PU10_PDNSCR_ISO_SHIFT            (0U)
#define GPC_PGC_PU10_PDNSCR_ISO(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU10_PDNSCR_ISO_MASK)
#define GPC_PGC_PU10_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU10_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU10_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU10_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU10_PDNSCR_ISO2SW_MASK          (0x3F00U)
#define GPC_PGC_PU10_PDNSCR_ISO2SW_SHIFT         (8U)
#define GPC_PGC_PU10_PDNSCR_ISO2SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU10_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU10_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU10_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU10_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU10_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU10_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU10_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU10_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU10_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU10_SR - GPC PGC Status Register */
#define GPC_PGC_PU10_SR_PSR_MASK                 (0x1U)
#define GPC_PGC_PU10_SR_PSR_SHIFT                (0U)
#define GPC_PGC_PU10_SR_PSR(x)                   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_SR_PSR_SHIFT)) & GPC_PGC_PU10_SR_PSR_MASK)
#define GPC_PGC_PU10_SR_L2RETN_FLAG_MASK         (0x2U)
#define GPC_PGC_PU10_SR_L2RETN_FLAG_SHIFT        (1U)
#define GPC_PGC_PU10_SR_L2RETN_FLAG(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU10_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU10_SR_ALLOFF_FLAG_MASK         (0x4U)
#define GPC_PGC_PU10_SR_ALLOFF_FLAG_SHIFT        (2U)
#define GPC_PGC_PU10_SR_ALLOFF_FLAG(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU10_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU10_SR_PUP_CLK_DIV_SEL_MASK     (0x78U)
#define GPC_PGC_PU10_SR_PUP_CLK_DIV_SEL_SHIFT    (3U)
#define GPC_PGC_PU10_SR_PUP_CLK_DIV_SEL(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU10_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU10_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU10_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU10_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU10_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU10_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU10_AUXSW_SW2_MASK              (0x3FU)
#define GPC_PGC_PU10_AUXSW_SW2_SHIFT             (0U)
#define GPC_PGC_PU10_AUXSW_SW2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_AUXSW_SW2_SHIFT)) & GPC_PGC_PU10_AUXSW_SW2_MASK)
#define GPC_PGC_PU10_AUXSW_ISO2SW2_MASK          (0x3F00U)
#define GPC_PGC_PU10_AUXSW_ISO2SW2_SHIFT         (8U)
#define GPC_PGC_PU10_AUXSW_ISO2SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU10_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU10_AUXSW_PDN_CLK_DIV_SEL_MASK  (0xF0000U)
#define GPC_PGC_PU10_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
#define GPC_PGC_PU10_AUXSW_PDN_CLK_DIV_SEL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU10_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU11_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU11_CTRL_PCR_MASK               (0x1U)
#define GPC_PGC_PU11_CTRL_PCR_SHIFT              (0U)
#define GPC_PGC_PU11_CTRL_PCR(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_CTRL_PCR_SHIFT)) & GPC_PGC_PU11_CTRL_PCR_MASK)
#define GPC_PGC_PU11_CTRL_L2RSTDIS_MASK          (0x7EU)
#define GPC_PGC_PU11_CTRL_L2RSTDIS_SHIFT         (1U)
#define GPC_PGC_PU11_CTRL_L2RSTDIS(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU11_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU11_CTRL_DFTRAM_TCD1_MASK       (0x3F00U)
#define GPC_PGC_PU11_CTRL_DFTRAM_TCD1_SHIFT      (8U)
#define GPC_PGC_PU11_CTRL_DFTRAM_TCD1(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU11_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU11_CTRL_L2RETN_TCD1_TDR_MASK   (0x3F0000U)
#define GPC_PGC_PU11_CTRL_L2RETN_TCD1_TDR_SHIFT  (16U)
#define GPC_PGC_PU11_CTRL_L2RETN_TCD1_TDR(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU11_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU11_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU11_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU11_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU11_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU11_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU11_PUPSCR_SW_MASK              (0x3FU)
#define GPC_PGC_PU11_PUPSCR_SW_SHIFT             (0U)
#define GPC_PGC_PU11_PUPSCR_SW(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PUPSCR_SW_SHIFT)) & GPC_PGC_PU11_PUPSCR_SW_MASK)
#define GPC_PGC_PU11_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU11_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU11_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU11_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU11_PUPSCR_SW2ISO_MASK          (0x7FFF80U)
#define GPC_PGC_PU11_PUPSCR_SW2ISO_SHIFT         (7U)
#define GPC_PGC_PU11_PUPSCR_SW2ISO(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU11_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU11_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU11_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU11_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU11_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU11_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU11_PDNSCR_ISO_MASK             (0x3FU)
#define GPC_PGC_PU11_PDNSCR_ISO_SHIFT            (0U)
#define GPC_PGC_PU11_PDNSCR_ISO(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU11_PDNSCR_ISO_MASK)
#define GPC_PGC_PU11_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU11_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU11_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU11_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU11_PDNSCR_ISO2SW_MASK          (0x3F00U)
#define GPC_PGC_PU11_PDNSCR_ISO2SW_SHIFT         (8U)
#define GPC_PGC_PU11_PDNSCR_ISO2SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU11_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU11_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU11_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU11_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU11_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU11_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU11_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU11_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU11_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU11_SR - GPC PGC Status Register */
#define GPC_PGC_PU11_SR_PSR_MASK                 (0x1U)
#define GPC_PGC_PU11_SR_PSR_SHIFT                (0U)
#define GPC_PGC_PU11_SR_PSR(x)                   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_SR_PSR_SHIFT)) & GPC_PGC_PU11_SR_PSR_MASK)
#define GPC_PGC_PU11_SR_L2RETN_FLAG_MASK         (0x2U)
#define GPC_PGC_PU11_SR_L2RETN_FLAG_SHIFT        (1U)
#define GPC_PGC_PU11_SR_L2RETN_FLAG(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU11_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU11_SR_ALLOFF_FLAG_MASK         (0x4U)
#define GPC_PGC_PU11_SR_ALLOFF_FLAG_SHIFT        (2U)
#define GPC_PGC_PU11_SR_ALLOFF_FLAG(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU11_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU11_SR_PUP_CLK_DIV_SEL_MASK     (0x78U)
#define GPC_PGC_PU11_SR_PUP_CLK_DIV_SEL_SHIFT    (3U)
#define GPC_PGC_PU11_SR_PUP_CLK_DIV_SEL(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU11_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU11_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU11_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU11_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU11_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU11_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU11_AUXSW_SW2_MASK              (0x3FU)
#define GPC_PGC_PU11_AUXSW_SW2_SHIFT             (0U)
#define GPC_PGC_PU11_AUXSW_SW2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_AUXSW_SW2_SHIFT)) & GPC_PGC_PU11_AUXSW_SW2_MASK)
#define GPC_PGC_PU11_AUXSW_ISO2SW2_MASK          (0x3F00U)
#define GPC_PGC_PU11_AUXSW_ISO2SW2_SHIFT         (8U)
#define GPC_PGC_PU11_AUXSW_ISO2SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU11_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU11_AUXSW_PDN_CLK_DIV_SEL_MASK  (0xF0000U)
#define GPC_PGC_PU11_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
#define GPC_PGC_PU11_AUXSW_PDN_CLK_DIV_SEL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU11_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU12_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU12_CTRL_PCR_MASK               (0x1U)
#define GPC_PGC_PU12_CTRL_PCR_SHIFT              (0U)
#define GPC_PGC_PU12_CTRL_PCR(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_CTRL_PCR_SHIFT)) & GPC_PGC_PU12_CTRL_PCR_MASK)
#define GPC_PGC_PU12_CTRL_L2RSTDIS_MASK          (0x7EU)
#define GPC_PGC_PU12_CTRL_L2RSTDIS_SHIFT         (1U)
#define GPC_PGC_PU12_CTRL_L2RSTDIS(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU12_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU12_CTRL_DFTRAM_TCD1_MASK       (0x3F00U)
#define GPC_PGC_PU12_CTRL_DFTRAM_TCD1_SHIFT      (8U)
#define GPC_PGC_PU12_CTRL_DFTRAM_TCD1(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU12_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU12_CTRL_L2RETN_TCD1_TDR_MASK   (0x3F0000U)
#define GPC_PGC_PU12_CTRL_L2RETN_TCD1_TDR_SHIFT  (16U)
#define GPC_PGC_PU12_CTRL_L2RETN_TCD1_TDR(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU12_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU12_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU12_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU12_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU12_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU12_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU12_PUPSCR_SW_MASK              (0x3FU)
#define GPC_PGC_PU12_PUPSCR_SW_SHIFT             (0U)
#define GPC_PGC_PU12_PUPSCR_SW(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PUPSCR_SW_SHIFT)) & GPC_PGC_PU12_PUPSCR_SW_MASK)
#define GPC_PGC_PU12_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU12_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU12_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU12_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU12_PUPSCR_SW2ISO_MASK          (0x7FFF80U)
#define GPC_PGC_PU12_PUPSCR_SW2ISO_SHIFT         (7U)
#define GPC_PGC_PU12_PUPSCR_SW2ISO(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU12_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU12_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU12_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU12_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU12_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU12_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU12_PDNSCR_ISO_MASK             (0x3FU)
#define GPC_PGC_PU12_PDNSCR_ISO_SHIFT            (0U)
#define GPC_PGC_PU12_PDNSCR_ISO(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU12_PDNSCR_ISO_MASK)
#define GPC_PGC_PU12_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU12_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU12_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU12_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU12_PDNSCR_ISO2SW_MASK          (0x3F00U)
#define GPC_PGC_PU12_PDNSCR_ISO2SW_SHIFT         (8U)
#define GPC_PGC_PU12_PDNSCR_ISO2SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU12_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU12_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU12_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU12_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU12_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU12_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU12_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU12_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU12_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU12_SR - GPC PGC Status Register */
#define GPC_PGC_PU12_SR_PSR_MASK                 (0x1U)
#define GPC_PGC_PU12_SR_PSR_SHIFT                (0U)
#define GPC_PGC_PU12_SR_PSR(x)                   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_SR_PSR_SHIFT)) & GPC_PGC_PU12_SR_PSR_MASK)
#define GPC_PGC_PU12_SR_L2RETN_FLAG_MASK         (0x2U)
#define GPC_PGC_PU12_SR_L2RETN_FLAG_SHIFT        (1U)
#define GPC_PGC_PU12_SR_L2RETN_FLAG(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU12_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU12_SR_ALLOFF_FLAG_MASK         (0x4U)
#define GPC_PGC_PU12_SR_ALLOFF_FLAG_SHIFT        (2U)
#define GPC_PGC_PU12_SR_ALLOFF_FLAG(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU12_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU12_SR_PUP_CLK_DIV_SEL_MASK     (0x78U)
#define GPC_PGC_PU12_SR_PUP_CLK_DIV_SEL_SHIFT    (3U)
#define GPC_PGC_PU12_SR_PUP_CLK_DIV_SEL(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU12_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU12_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU12_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU12_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU12_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU12_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU12_AUXSW_SW2_MASK              (0x3FU)
#define GPC_PGC_PU12_AUXSW_SW2_SHIFT             (0U)
#define GPC_PGC_PU12_AUXSW_SW2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_AUXSW_SW2_SHIFT)) & GPC_PGC_PU12_AUXSW_SW2_MASK)
#define GPC_PGC_PU12_AUXSW_ISO2SW2_MASK          (0x3F00U)
#define GPC_PGC_PU12_AUXSW_ISO2SW2_SHIFT         (8U)
#define GPC_PGC_PU12_AUXSW_ISO2SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU12_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU12_AUXSW_PDN_CLK_DIV_SEL_MASK  (0xF0000U)
#define GPC_PGC_PU12_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
#define GPC_PGC_PU12_AUXSW_PDN_CLK_DIV_SEL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU12_AUXSW_PDN_CLK_DIV_SEL_MASK)

/*! @name PU13_CTRL - GPC PGC Control Register */
#define GPC_PGC_PU13_CTRL_PCR_MASK               (0x1U)
#define GPC_PGC_PU13_CTRL_PCR_SHIFT              (0U)
#define GPC_PGC_PU13_CTRL_PCR(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_CTRL_PCR_SHIFT)) & GPC_PGC_PU13_CTRL_PCR_MASK)
#define GPC_PGC_PU13_CTRL_L2RSTDIS_MASK          (0x7EU)
#define GPC_PGC_PU13_CTRL_L2RSTDIS_SHIFT         (1U)
#define GPC_PGC_PU13_CTRL_L2RSTDIS(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU13_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU13_CTRL_DFTRAM_TCD1_MASK       (0x3F00U)
#define GPC_PGC_PU13_CTRL_DFTRAM_TCD1_SHIFT      (8U)
#define GPC_PGC_PU13_CTRL_DFTRAM_TCD1(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU13_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU13_CTRL_L2RETN_TCD1_TDR_MASK   (0x3F0000U)
#define GPC_PGC_PU13_CTRL_L2RETN_TCD1_TDR_SHIFT  (16U)
#define GPC_PGC_PU13_CTRL_L2RETN_TCD1_TDR(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU13_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU13_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU13_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU13_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU13_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)

/*! @name PU13_PUPSCR - GPC PGC Up Sequence Control Register */
#define GPC_PGC_PU13_PUPSCR_SW_MASK              (0x3FU)
#define GPC_PGC_PU13_PUPSCR_SW_SHIFT             (0U)
#define GPC_PGC_PU13_PUPSCR_SW(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PUPSCR_SW_SHIFT)) & GPC_PGC_PU13_PUPSCR_SW_MASK)
#define GPC_PGC_PU13_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU13_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU13_PUPSCR_PUP_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU13_PUPSCR_PUP_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU13_PUPSCR_SW2ISO_MASK          (0x7FFF80U)
#define GPC_PGC_PU13_PUPSCR_SW2ISO_SHIFT         (7U)
#define GPC_PGC_PU13_PUPSCR_SW2ISO(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU13_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU13_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU13_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU13_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU13_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)

/*! @name PU13_PDNSCR - GPC PGC Down Sequence Control Register */
#define GPC_PGC_PU13_PDNSCR_ISO_MASK             (0x3FU)
#define GPC_PGC_PU13_PDNSCR_ISO_SHIFT            (0U)
#define GPC_PGC_PU13_PDNSCR_ISO(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU13_PDNSCR_ISO_MASK)
#define GPC_PGC_PU13_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU13_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU13_PDNSCR_PDN_WAIT_SCALL_OUT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT)) & GPC_PGC_PU13_PDNSCR_PDN_WAIT_SCALL_OUT_MASK)
#define GPC_PGC_PU13_PDNSCR_ISO2SW_MASK          (0x3F00U)
#define GPC_PGC_PU13_PDNSCR_ISO2SW_SHIFT         (8U)
#define GPC_PGC_PU13_PDNSCR_ISO2SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU13_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU13_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU13_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU13_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU13_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU13_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU13_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU13_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU13_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)

/*! @name PU13_SR - GPC PGC Status Register */
#define GPC_PGC_PU13_SR_PSR_MASK                 (0x1U)
#define GPC_PGC_PU13_SR_PSR_SHIFT                (0U)
#define GPC_PGC_PU13_SR_PSR(x)                   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_SR_PSR_SHIFT)) & GPC_PGC_PU13_SR_PSR_MASK)
#define GPC_PGC_PU13_SR_L2RETN_FLAG_MASK         (0x2U)
#define GPC_PGC_PU13_SR_L2RETN_FLAG_SHIFT        (1U)
#define GPC_PGC_PU13_SR_L2RETN_FLAG(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_SR_L2RETN_FLAG_SHIFT)) & GPC_PGC_PU13_SR_L2RETN_FLAG_MASK)
#define GPC_PGC_PU13_SR_ALLOFF_FLAG_MASK         (0x4U)
#define GPC_PGC_PU13_SR_ALLOFF_FLAG_SHIFT        (2U)
#define GPC_PGC_PU13_SR_ALLOFF_FLAG(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_SR_ALLOFF_FLAG_SHIFT)) & GPC_PGC_PU13_SR_ALLOFF_FLAG_MASK)
#define GPC_PGC_PU13_SR_PUP_CLK_DIV_SEL_MASK     (0x78U)
#define GPC_PGC_PU13_SR_PUP_CLK_DIV_SEL_SHIFT    (3U)
#define GPC_PGC_PU13_SR_PUP_CLK_DIV_SEL(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU13_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU13_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU13_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU13_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU13_SR_L2RSTDIS_DEASSERT_CNT_MASK)

/*! @name PU13_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
#define GPC_PGC_PU13_AUXSW_SW2_MASK              (0x3FU)
#define GPC_PGC_PU13_AUXSW_SW2_SHIFT             (0U)
#define GPC_PGC_PU13_AUXSW_SW2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_AUXSW_SW2_SHIFT)) & GPC_PGC_PU13_AUXSW_SW2_MASK)
#define GPC_PGC_PU13_AUXSW_ISO2SW2_MASK          (0x3F00U)
#define GPC_PGC_PU13_AUXSW_ISO2SW2_SHIFT         (8U)
#define GPC_PGC_PU13_AUXSW_ISO2SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU13_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU13_AUXSW_PDN_CLK_DIV_SEL_MASK  (0xF0000U)
#define GPC_PGC_PU13_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
#define GPC_PGC_PU13_AUXSW_PDN_CLK_DIV_SEL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU13_AUXSW_PDN_CLK_DIV_SEL_MASK)


/*!
 * @}
 */ /* end of group GPC_PGC_Register_Masks */


/* GPC_PGC - Peripheral instance base addresses */
/** Peripheral GPC_PGC base address */
#define GPC_PGC_BASE                             (0x303A0800u)
/** Peripheral GPC_PGC base pointer */
#define GPC_PGC                                  ((GPC_PGC_Type *)GPC_PGC_BASE)
/** Array initializer of GPC_PGC peripheral base addresses */
#define GPC_PGC_BASE_ADDRS                       { GPC_PGC_BASE }
/** Array initializer of GPC_PGC peripheral base pointers */
#define GPC_PGC_BASE_PTRS                        { GPC_PGC }

/*!
 * @}
 */ /* end of group GPC_PGC_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- GPIO Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Peripheral_Access_Layer GPIO Peripheral Access Layer
 * @{
 */

/** GPIO - Register Layout Typedef */
typedef struct {
  __IO uint32_t DR;                                /**< GPIO data register, offset: 0x0 */
  __IO uint32_t GDIR;                              /**< GPIO direction register, offset: 0x4 */
  __I  uint32_t PSR;                               /**< GPIO pad status register, offset: 0x8 */
  __IO uint32_t ICR1;                              /**< GPIO interrupt configuration register1, offset: 0xC */
  __IO uint32_t ICR2;                              /**< GPIO interrupt configuration register2, offset: 0x10 */
  __IO uint32_t IMR;                               /**< GPIO interrupt mask register, offset: 0x14 */
  __IO uint32_t ISR;                               /**< GPIO interrupt status register, offset: 0x18 */
  __IO uint32_t EDGE_SEL;                          /**< GPIO edge select register, offset: 0x1C */
} GPIO_Type;

/* ----------------------------------------------------------------------------
   -- GPIO Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Masks GPIO Register Masks
 * @{
 */

/*! @name DR - GPIO data register */
#define GPIO_DR_DR_MASK                          (0xFFFFFFFFU)
#define GPIO_DR_DR_SHIFT                         (0U)
#define GPIO_DR_DR(x)                            (((uint32_t)(((uint32_t)(x)) << GPIO_DR_DR_SHIFT)) & GPIO_DR_DR_MASK)

/*! @name GDIR - GPIO direction register */
#define GPIO_GDIR_GDIR_MASK                      (0xFFFFFFFFU)
#define GPIO_GDIR_GDIR_SHIFT                     (0U)
#define GPIO_GDIR_GDIR(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_GDIR_GDIR_SHIFT)) & GPIO_GDIR_GDIR_MASK)

/*! @name PSR - GPIO pad status register */
#define GPIO_PSR_PSR_MASK                        (0xFFFFFFFFU)
#define GPIO_PSR_PSR_SHIFT                       (0U)
#define GPIO_PSR_PSR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_PSR_PSR_SHIFT)) & GPIO_PSR_PSR_MASK)

/*! @name ICR1 - GPIO interrupt configuration register1 */
#define GPIO_ICR1_ICR0_MASK                      (0x3U)
#define GPIO_ICR1_ICR0_SHIFT                     (0U)
#define GPIO_ICR1_ICR0(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR0_SHIFT)) & GPIO_ICR1_ICR0_MASK)
#define GPIO_ICR1_ICR1_MASK                      (0xCU)
#define GPIO_ICR1_ICR1_SHIFT                     (2U)
#define GPIO_ICR1_ICR1(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR1_SHIFT)) & GPIO_ICR1_ICR1_MASK)
#define GPIO_ICR1_ICR2_MASK                      (0x30U)
#define GPIO_ICR1_ICR2_SHIFT                     (4U)
#define GPIO_ICR1_ICR2(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR2_SHIFT)) & GPIO_ICR1_ICR2_MASK)
#define GPIO_ICR1_ICR3_MASK                      (0xC0U)
#define GPIO_ICR1_ICR3_SHIFT                     (6U)
#define GPIO_ICR1_ICR3(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR3_SHIFT)) & GPIO_ICR1_ICR3_MASK)
#define GPIO_ICR1_ICR4_MASK                      (0x300U)
#define GPIO_ICR1_ICR4_SHIFT                     (8U)
#define GPIO_ICR1_ICR4(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR4_SHIFT)) & GPIO_ICR1_ICR4_MASK)
#define GPIO_ICR1_ICR5_MASK                      (0xC00U)
#define GPIO_ICR1_ICR5_SHIFT                     (10U)
#define GPIO_ICR1_ICR5(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR5_SHIFT)) & GPIO_ICR1_ICR5_MASK)
#define GPIO_ICR1_ICR6_MASK                      (0x3000U)
#define GPIO_ICR1_ICR6_SHIFT                     (12U)
#define GPIO_ICR1_ICR6(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR6_SHIFT)) & GPIO_ICR1_ICR6_MASK)
#define GPIO_ICR1_ICR7_MASK                      (0xC000U)
#define GPIO_ICR1_ICR7_SHIFT                     (14U)
#define GPIO_ICR1_ICR7(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR7_SHIFT)) & GPIO_ICR1_ICR7_MASK)
#define GPIO_ICR1_ICR8_MASK                      (0x30000U)
#define GPIO_ICR1_ICR8_SHIFT                     (16U)
#define GPIO_ICR1_ICR8(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR8_SHIFT)) & GPIO_ICR1_ICR8_MASK)
#define GPIO_ICR1_ICR9_MASK                      (0xC0000U)
#define GPIO_ICR1_ICR9_SHIFT                     (18U)
#define GPIO_ICR1_ICR9(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR9_SHIFT)) & GPIO_ICR1_ICR9_MASK)
#define GPIO_ICR1_ICR10_MASK                     (0x300000U)
#define GPIO_ICR1_ICR10_SHIFT                    (20U)
#define GPIO_ICR1_ICR10(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR10_SHIFT)) & GPIO_ICR1_ICR10_MASK)
#define GPIO_ICR1_ICR11_MASK                     (0xC00000U)
#define GPIO_ICR1_ICR11_SHIFT                    (22U)
#define GPIO_ICR1_ICR11(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR11_SHIFT)) & GPIO_ICR1_ICR11_MASK)
#define GPIO_ICR1_ICR12_MASK                     (0x3000000U)
#define GPIO_ICR1_ICR12_SHIFT                    (24U)
#define GPIO_ICR1_ICR12(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR12_SHIFT)) & GPIO_ICR1_ICR12_MASK)
#define GPIO_ICR1_ICR13_MASK                     (0xC000000U)
#define GPIO_ICR1_ICR13_SHIFT                    (26U)
#define GPIO_ICR1_ICR13(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR13_SHIFT)) & GPIO_ICR1_ICR13_MASK)
#define GPIO_ICR1_ICR14_MASK                     (0x30000000U)
#define GPIO_ICR1_ICR14_SHIFT                    (28U)
#define GPIO_ICR1_ICR14(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR14_SHIFT)) & GPIO_ICR1_ICR14_MASK)
#define GPIO_ICR1_ICR15_MASK                     (0xC0000000U)
#define GPIO_ICR1_ICR15_SHIFT                    (30U)
#define GPIO_ICR1_ICR15(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR15_SHIFT)) & GPIO_ICR1_ICR15_MASK)

/*! @name ICR2 - GPIO interrupt configuration register2 */
#define GPIO_ICR2_ICR16_MASK                     (0x3U)
#define GPIO_ICR2_ICR16_SHIFT                    (0U)
#define GPIO_ICR2_ICR16(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR16_SHIFT)) & GPIO_ICR2_ICR16_MASK)
#define GPIO_ICR2_ICR17_MASK                     (0xCU)
#define GPIO_ICR2_ICR17_SHIFT                    (2U)
#define GPIO_ICR2_ICR17(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR17_SHIFT)) & GPIO_ICR2_ICR17_MASK)
#define GPIO_ICR2_ICR18_MASK                     (0x30U)
#define GPIO_ICR2_ICR18_SHIFT                    (4U)
#define GPIO_ICR2_ICR18(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR18_SHIFT)) & GPIO_ICR2_ICR18_MASK)
#define GPIO_ICR2_ICR19_MASK                     (0xC0U)
#define GPIO_ICR2_ICR19_SHIFT                    (6U)
#define GPIO_ICR2_ICR19(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR19_SHIFT)) & GPIO_ICR2_ICR19_MASK)
#define GPIO_ICR2_ICR20_MASK                     (0x300U)
#define GPIO_ICR2_ICR20_SHIFT                    (8U)
#define GPIO_ICR2_ICR20(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR20_SHIFT)) & GPIO_ICR2_ICR20_MASK)
#define GPIO_ICR2_ICR21_MASK                     (0xC00U)
#define GPIO_ICR2_ICR21_SHIFT                    (10U)
#define GPIO_ICR2_ICR21(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR21_SHIFT)) & GPIO_ICR2_ICR21_MASK)
#define GPIO_ICR2_ICR22_MASK                     (0x3000U)
#define GPIO_ICR2_ICR22_SHIFT                    (12U)
#define GPIO_ICR2_ICR22(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR22_SHIFT)) & GPIO_ICR2_ICR22_MASK)
#define GPIO_ICR2_ICR23_MASK                     (0xC000U)
#define GPIO_ICR2_ICR23_SHIFT                    (14U)
#define GPIO_ICR2_ICR23(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR23_SHIFT)) & GPIO_ICR2_ICR23_MASK)
#define GPIO_ICR2_ICR24_MASK                     (0x30000U)
#define GPIO_ICR2_ICR24_SHIFT                    (16U)
#define GPIO_ICR2_ICR24(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR24_SHIFT)) & GPIO_ICR2_ICR24_MASK)
#define GPIO_ICR2_ICR25_MASK                     (0xC0000U)
#define GPIO_ICR2_ICR25_SHIFT                    (18U)
#define GPIO_ICR2_ICR25(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR25_SHIFT)) & GPIO_ICR2_ICR25_MASK)
#define GPIO_ICR2_ICR26_MASK                     (0x300000U)
#define GPIO_ICR2_ICR26_SHIFT                    (20U)
#define GPIO_ICR2_ICR26(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR26_SHIFT)) & GPIO_ICR2_ICR26_MASK)
#define GPIO_ICR2_ICR27_MASK                     (0xC00000U)
#define GPIO_ICR2_ICR27_SHIFT                    (22U)
#define GPIO_ICR2_ICR27(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR27_SHIFT)) & GPIO_ICR2_ICR27_MASK)
#define GPIO_ICR2_ICR28_MASK                     (0x3000000U)
#define GPIO_ICR2_ICR28_SHIFT                    (24U)
#define GPIO_ICR2_ICR28(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR28_SHIFT)) & GPIO_ICR2_ICR28_MASK)
#define GPIO_ICR2_ICR29_MASK                     (0xC000000U)
#define GPIO_ICR2_ICR29_SHIFT                    (26U)
#define GPIO_ICR2_ICR29(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR29_SHIFT)) & GPIO_ICR2_ICR29_MASK)
#define GPIO_ICR2_ICR30_MASK                     (0x30000000U)
#define GPIO_ICR2_ICR30_SHIFT                    (28U)
#define GPIO_ICR2_ICR30(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR30_SHIFT)) & GPIO_ICR2_ICR30_MASK)
#define GPIO_ICR2_ICR31_MASK                     (0xC0000000U)
#define GPIO_ICR2_ICR31_SHIFT                    (30U)
#define GPIO_ICR2_ICR31(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR31_SHIFT)) & GPIO_ICR2_ICR31_MASK)

/*! @name IMR - GPIO interrupt mask register */
#define GPIO_IMR_IMR_MASK                        (0xFFFFFFFFU)
#define GPIO_IMR_IMR_SHIFT                       (0U)
#define GPIO_IMR_IMR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_IMR_IMR_SHIFT)) & GPIO_IMR_IMR_MASK)

/*! @name ISR - GPIO interrupt status register */
#define GPIO_ISR_ISR_MASK                        (0xFFFFFFFFU)
#define GPIO_ISR_ISR_SHIFT                       (0U)
#define GPIO_ISR_ISR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_ISR_ISR_SHIFT)) & GPIO_ISR_ISR_MASK)

/*! @name EDGE_SEL - GPIO edge select register */
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL_MASK         (0xFFFFFFFFU)
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL_SHIFT        (0U)
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL(x)           (((uint32_t)(((uint32_t)(x)) << GPIO_EDGE_SEL_GPIO_EDGE_SEL_SHIFT)) & GPIO_EDGE_SEL_GPIO_EDGE_SEL_MASK)


/*!
 * @}
 */ /* end of group GPIO_Register_Masks */


/* GPIO - Peripheral instance base addresses */
/** Peripheral GPIO1 base address */
#define GPIO1_BASE                               (0x30200000u)
/** Peripheral GPIO1 base pointer */
#define GPIO1                                    ((GPIO_Type *)GPIO1_BASE)
/** Peripheral GPIO2 base address */
#define GPIO2_BASE                               (0x30210000u)
/** Peripheral GPIO2 base pointer */
#define GPIO2                                    ((GPIO_Type *)GPIO2_BASE)
/** Peripheral GPIO3 base address */
#define GPIO3_BASE                               (0x30220000u)
/** Peripheral GPIO3 base pointer */
#define GPIO3                                    ((GPIO_Type *)GPIO3_BASE)
/** Peripheral GPIO4 base address */
#define GPIO4_BASE                               (0x30230000u)
/** Peripheral GPIO4 base pointer */
#define GPIO4                                    ((GPIO_Type *)GPIO4_BASE)
/** Peripheral GPIO5 base address */
#define GPIO5_BASE                               (0x30240000u)
/** Peripheral GPIO5 base pointer */
#define GPIO5                                    ((GPIO_Type *)GPIO5_BASE)
/** Array initializer of GPIO peripheral base addresses */
#define GPIO_BASE_ADDRS                          { 0u, GPIO1_BASE, GPIO2_BASE, GPIO3_BASE, GPIO4_BASE, GPIO5_BASE }
/** Array initializer of GPIO peripheral base pointers */
#define GPIO_BASE_PTRS                           { (GPIO_Type *)0u, GPIO1, GPIO2, GPIO3, GPIO4, GPIO5 }
/** Interrupt vectors for the GPIO peripheral type */
#define GPIO_IRQS                                { NotAvail_IRQn, GPIO1_INT0_IRQn, GPIO1_INT1_IRQn, GPIO1_INT2_IRQn, GPIO1_INT3_IRQn, GPIO1_INT4_IRQn, GPIO1_INT5_IRQn, GPIO1_INT6_IRQn, GPIO1_INT7_IRQn, NotAvail_IRQn, NotAvail_IRQn, NotAvail_IRQn, NotAvail_IRQn }
#define GPIO_COMBINED_IRQS                       { NotAvail_IRQn, GPIO1_Combined_0_15_IRQn, GPIO1_Combined_16_31_IRQn, GPIO2_Combined_0_15_IRQn, GPIO2_Combined_16_31_IRQn, GPIO3_Combined_0_15_IRQn, GPIO3_Combined_16_31_IRQn, GPIO4_Combined_0_15_IRQn, GPIO4_Combined_16_31_IRQn, GPIO5_Combined_0_15_IRQn, GPIO5_Combined_16_31_IRQn }

/*!
 * @}
 */ /* end of group GPIO_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- GPMI Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPMI_Peripheral_Access_Layer GPMI Peripheral Access Layer
 * @{
 */

/** GPMI - Register Layout Typedef */
typedef struct {
  __IO uint32_t CTRL0;                             /**< GPMI Control Register 0 Description, offset: 0x0 */
  __IO uint32_t CTRL0_SET;                         /**< GPMI Control Register 0 Description, offset: 0x4 */
  __IO uint32_t CTRL0_CLR;                         /**< GPMI Control Register 0 Description, offset: 0x8 */
  __IO uint32_t CTRL0_TOG;                         /**< GPMI Control Register 0 Description, offset: 0xC */
  __IO uint32_t COMPARE;                           /**< GPMI Compare Register Description, offset: 0x10 */
       uint8_t RESERVED_0[12];
  __IO uint32_t ECCCTRL;                           /**< GPMI Integrated ECC Control Register Description, offset: 0x20 */
  __IO uint32_t ECCCTRL_SET;                       /**< GPMI Integrated ECC Control Register Description, offset: 0x24 */
  __IO uint32_t ECCCTRL_CLR;                       /**< GPMI Integrated ECC Control Register Description, offset: 0x28 */
  __IO uint32_t ECCCTRL_TOG;                       /**< GPMI Integrated ECC Control Register Description, offset: 0x2C */
  __IO uint32_t ECCCOUNT;                          /**< GPMI Integrated ECC Transfer Count Register Description, offset: 0x30 */
       uint8_t RESERVED_1[12];
  __IO uint32_t PAYLOAD;                           /**< GPMI Payload Address Register Description, offset: 0x40 */
       uint8_t RESERVED_2[12];
  __IO uint32_t AUXILIARY;                         /**< GPMI Auxiliary Address Register Description, offset: 0x50 */
       uint8_t RESERVED_3[12];
  __IO uint32_t CTRL1;                             /**< GPMI Control Register 1 Description, offset: 0x60 */
  __IO uint32_t CTRL1_SET;                         /**< GPMI Control Register 1 Description, offset: 0x64 */
  __IO uint32_t CTRL1_CLR;                         /**< GPMI Control Register 1 Description, offset: 0x68 */
  __IO uint32_t CTRL1_TOG;                         /**< GPMI Control Register 1 Description, offset: 0x6C */
  __IO uint32_t TIMING0;                           /**< GPMI Timing Register 0 Description, offset: 0x70 */
       uint8_t RESERVED_4[12];
  __IO uint32_t TIMING1;                           /**< GPMI Timing Register 1 Description, offset: 0x80 */
       uint8_t RESERVED_5[12];
  __IO uint32_t TIMING2;                           /**< GPMI Timing Register 2 Description, offset: 0x90 */
       uint8_t RESERVED_6[12];
  __IO uint32_t DATA;                              /**< GPMI DMA Data Transfer Register Description, offset: 0xA0 */
       uint8_t RESERVED_7[12];
  __I  uint32_t STAT;                              /**< GPMI Status Register Description, offset: 0xB0 */
       uint8_t RESERVED_8[12];
  __I  uint32_t DEBUGr;                            /**< GPMI Debug Information Register Description, offset: 0xC0 */
       uint8_t RESERVED_9[12];
  __I  uint32_t VERSION;                           /**< GPMI Version Register Description, offset: 0xD0 */
       uint8_t RESERVED_10[12];
  __IO uint32_t DEBUG2;                            /**< GPMI Debug2 Information Register Description, offset: 0xE0 */
       uint8_t RESERVED_11[12];
  __I  uint32_t DEBUG3;                            /**< GPMI Debug3 Information Register Description, offset: 0xF0 */
       uint8_t RESERVED_12[12];
  __IO uint32_t READ_DDR_DLL_CTRL;                 /**< GPMI Double Rate Read DLL Control Register Description, offset: 0x100 */
       uint8_t RESERVED_13[12];
  __IO uint32_t WRITE_DDR_DLL_CTRL;                /**< GPMI Double Rate Write DLL Control Register Description, offset: 0x110 */
       uint8_t RESERVED_14[12];
  __I  uint32_t READ_DDR_DLL_STS;                  /**< GPMI Double Rate Read DLL Status Register Description, offset: 0x120 */
       uint8_t RESERVED_15[12];
  __I  uint32_t WRITE_DDR_DLL_STS;                 /**< GPMI Double Rate Write DLL Status Register Description, offset: 0x130 */
} GPMI_Type;

/* ----------------------------------------------------------------------------
   -- GPMI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPMI_Register_Masks GPMI Register Masks
 * @{
 */

/*! @name CTRL0 - GPMI Control Register 0 Description */
#define GPMI_CTRL0_XFER_COUNT_MASK               (0xFFFFU)
#define GPMI_CTRL0_XFER_COUNT_SHIFT              (0U)
#define GPMI_CTRL0_XFER_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_XFER_COUNT_SHIFT)) & GPMI_CTRL0_XFER_COUNT_MASK)
#define GPMI_CTRL0_ADDRESS_INCREMENT_MASK        (0x10000U)
#define GPMI_CTRL0_ADDRESS_INCREMENT_SHIFT       (16U)
#define GPMI_CTRL0_ADDRESS_INCREMENT(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_ADDRESS_INCREMENT_SHIFT)) & GPMI_CTRL0_ADDRESS_INCREMENT_MASK)
#define GPMI_CTRL0_ADDRESS_MASK                  (0xE0000U)
#define GPMI_CTRL0_ADDRESS_SHIFT                 (17U)
#define GPMI_CTRL0_ADDRESS(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_ADDRESS_SHIFT)) & GPMI_CTRL0_ADDRESS_MASK)
#define GPMI_CTRL0_CS_MASK                       (0x700000U)
#define GPMI_CTRL0_CS_SHIFT                      (20U)
#define GPMI_CTRL0_CS(x)                         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CS_SHIFT)) & GPMI_CTRL0_CS_MASK)
#define GPMI_CTRL0_WORD_LENGTH_MASK              (0x800000U)
#define GPMI_CTRL0_WORD_LENGTH_SHIFT             (23U)
#define GPMI_CTRL0_WORD_LENGTH(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_WORD_LENGTH_SHIFT)) & GPMI_CTRL0_WORD_LENGTH_MASK)
#define GPMI_CTRL0_COMMAND_MODE_MASK             (0x3000000U)
#define GPMI_CTRL0_COMMAND_MODE_SHIFT            (24U)
#define GPMI_CTRL0_COMMAND_MODE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_COMMAND_MODE_MASK)
#define GPMI_CTRL0_UDMA_MASK                     (0x4000000U)
#define GPMI_CTRL0_UDMA_SHIFT                    (26U)
#define GPMI_CTRL0_UDMA(x)                       (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_UDMA_SHIFT)) & GPMI_CTRL0_UDMA_MASK)
#define GPMI_CTRL0_LOCK_CS_MASK                  (0x8000000U)
#define GPMI_CTRL0_LOCK_CS_SHIFT                 (27U)
#define GPMI_CTRL0_LOCK_CS(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_LOCK_CS_SHIFT)) & GPMI_CTRL0_LOCK_CS_MASK)
#define GPMI_CTRL0_DEV_IRQ_EN_MASK               (0x10000000U)
#define GPMI_CTRL0_DEV_IRQ_EN_SHIFT              (28U)
#define GPMI_CTRL0_DEV_IRQ_EN(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_DEV_IRQ_EN_SHIFT)) & GPMI_CTRL0_DEV_IRQ_EN_MASK)
#define GPMI_CTRL0_RUN_MASK                      (0x20000000U)
#define GPMI_CTRL0_RUN_SHIFT                     (29U)
#define GPMI_CTRL0_RUN(x)                        (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_RUN_SHIFT)) & GPMI_CTRL0_RUN_MASK)
#define GPMI_CTRL0_CLKGATE_MASK                  (0x40000000U)
#define GPMI_CTRL0_CLKGATE_SHIFT                 (30U)
#define GPMI_CTRL0_CLKGATE(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLKGATE_SHIFT)) & GPMI_CTRL0_CLKGATE_MASK)
#define GPMI_CTRL0_SFTRST_MASK                   (0x80000000U)
#define GPMI_CTRL0_SFTRST_SHIFT                  (31U)
#define GPMI_CTRL0_SFTRST(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SFTRST_SHIFT)) & GPMI_CTRL0_SFTRST_MASK)

/*! @name CTRL0_SET - GPMI Control Register 0 Description */
#define GPMI_CTRL0_SET_XFER_COUNT_MASK           (0xFFFFU)
#define GPMI_CTRL0_SET_XFER_COUNT_SHIFT          (0U)
#define GPMI_CTRL0_SET_XFER_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_XFER_COUNT_SHIFT)) & GPMI_CTRL0_SET_XFER_COUNT_MASK)
#define GPMI_CTRL0_SET_ADDRESS_INCREMENT_MASK    (0x10000U)
#define GPMI_CTRL0_SET_ADDRESS_INCREMENT_SHIFT   (16U)
#define GPMI_CTRL0_SET_ADDRESS_INCREMENT(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_ADDRESS_INCREMENT_SHIFT)) & GPMI_CTRL0_SET_ADDRESS_INCREMENT_MASK)
#define GPMI_CTRL0_SET_ADDRESS_MASK              (0xE0000U)
#define GPMI_CTRL0_SET_ADDRESS_SHIFT             (17U)
#define GPMI_CTRL0_SET_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_ADDRESS_SHIFT)) & GPMI_CTRL0_SET_ADDRESS_MASK)
#define GPMI_CTRL0_SET_CS_MASK                   (0x700000U)
#define GPMI_CTRL0_SET_CS_SHIFT                  (20U)
#define GPMI_CTRL0_SET_CS(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_CS_SHIFT)) & GPMI_CTRL0_SET_CS_MASK)
#define GPMI_CTRL0_SET_WORD_LENGTH_MASK          (0x800000U)
#define GPMI_CTRL0_SET_WORD_LENGTH_SHIFT         (23U)
#define GPMI_CTRL0_SET_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_WORD_LENGTH_SHIFT)) & GPMI_CTRL0_SET_WORD_LENGTH_MASK)
#define GPMI_CTRL0_SET_COMMAND_MODE_MASK         (0x3000000U)
#define GPMI_CTRL0_SET_COMMAND_MODE_SHIFT        (24U)
#define GPMI_CTRL0_SET_COMMAND_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_SET_COMMAND_MODE_MASK)
#define GPMI_CTRL0_SET_UDMA_MASK                 (0x4000000U)
#define GPMI_CTRL0_SET_UDMA_SHIFT                (26U)
#define GPMI_CTRL0_SET_UDMA(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_UDMA_SHIFT)) & GPMI_CTRL0_SET_UDMA_MASK)
#define GPMI_CTRL0_SET_LOCK_CS_MASK              (0x8000000U)
#define GPMI_CTRL0_SET_LOCK_CS_SHIFT             (27U)
#define GPMI_CTRL0_SET_LOCK_CS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_LOCK_CS_SHIFT)) & GPMI_CTRL0_SET_LOCK_CS_MASK)
#define GPMI_CTRL0_SET_DEV_IRQ_EN_MASK           (0x10000000U)
#define GPMI_CTRL0_SET_DEV_IRQ_EN_SHIFT          (28U)
#define GPMI_CTRL0_SET_DEV_IRQ_EN(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_DEV_IRQ_EN_SHIFT)) & GPMI_CTRL0_SET_DEV_IRQ_EN_MASK)
#define GPMI_CTRL0_SET_RUN_MASK                  (0x20000000U)
#define GPMI_CTRL0_SET_RUN_SHIFT                 (29U)
#define GPMI_CTRL0_SET_RUN(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_RUN_SHIFT)) & GPMI_CTRL0_SET_RUN_MASK)
#define GPMI_CTRL0_SET_CLKGATE_MASK              (0x40000000U)
#define GPMI_CTRL0_SET_CLKGATE_SHIFT             (30U)
#define GPMI_CTRL0_SET_CLKGATE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_CLKGATE_SHIFT)) & GPMI_CTRL0_SET_CLKGATE_MASK)
#define GPMI_CTRL0_SET_SFTRST_MASK               (0x80000000U)
#define GPMI_CTRL0_SET_SFTRST_SHIFT              (31U)
#define GPMI_CTRL0_SET_SFTRST(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_SFTRST_SHIFT)) & GPMI_CTRL0_SET_SFTRST_MASK)

/*! @name CTRL0_CLR - GPMI Control Register 0 Description */
#define GPMI_CTRL0_CLR_XFER_COUNT_MASK           (0xFFFFU)
#define GPMI_CTRL0_CLR_XFER_COUNT_SHIFT          (0U)
#define GPMI_CTRL0_CLR_XFER_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_XFER_COUNT_SHIFT)) & GPMI_CTRL0_CLR_XFER_COUNT_MASK)
#define GPMI_CTRL0_CLR_ADDRESS_INCREMENT_MASK    (0x10000U)
#define GPMI_CTRL0_CLR_ADDRESS_INCREMENT_SHIFT   (16U)
#define GPMI_CTRL0_CLR_ADDRESS_INCREMENT(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_ADDRESS_INCREMENT_SHIFT)) & GPMI_CTRL0_CLR_ADDRESS_INCREMENT_MASK)
#define GPMI_CTRL0_CLR_ADDRESS_MASK              (0xE0000U)
#define GPMI_CTRL0_CLR_ADDRESS_SHIFT             (17U)
#define GPMI_CTRL0_CLR_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_ADDRESS_SHIFT)) & GPMI_CTRL0_CLR_ADDRESS_MASK)
#define GPMI_CTRL0_CLR_CS_MASK                   (0x700000U)
#define GPMI_CTRL0_CLR_CS_SHIFT                  (20U)
#define GPMI_CTRL0_CLR_CS(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_CS_SHIFT)) & GPMI_CTRL0_CLR_CS_MASK)
#define GPMI_CTRL0_CLR_WORD_LENGTH_MASK          (0x800000U)
#define GPMI_CTRL0_CLR_WORD_LENGTH_SHIFT         (23U)
#define GPMI_CTRL0_CLR_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_WORD_LENGTH_SHIFT)) & GPMI_CTRL0_CLR_WORD_LENGTH_MASK)
#define GPMI_CTRL0_CLR_COMMAND_MODE_MASK         (0x3000000U)
#define GPMI_CTRL0_CLR_COMMAND_MODE_SHIFT        (24U)
#define GPMI_CTRL0_CLR_COMMAND_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_CLR_COMMAND_MODE_MASK)
#define GPMI_CTRL0_CLR_UDMA_MASK                 (0x4000000U)
#define GPMI_CTRL0_CLR_UDMA_SHIFT                (26U)
#define GPMI_CTRL0_CLR_UDMA(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_UDMA_SHIFT)) & GPMI_CTRL0_CLR_UDMA_MASK)
#define GPMI_CTRL0_CLR_LOCK_CS_MASK              (0x8000000U)
#define GPMI_CTRL0_CLR_LOCK_CS_SHIFT             (27U)
#define GPMI_CTRL0_CLR_LOCK_CS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_LOCK_CS_SHIFT)) & GPMI_CTRL0_CLR_LOCK_CS_MASK)
#define GPMI_CTRL0_CLR_DEV_IRQ_EN_MASK           (0x10000000U)
#define GPMI_CTRL0_CLR_DEV_IRQ_EN_SHIFT          (28U)
#define GPMI_CTRL0_CLR_DEV_IRQ_EN(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_DEV_IRQ_EN_SHIFT)) & GPMI_CTRL0_CLR_DEV_IRQ_EN_MASK)
#define GPMI_CTRL0_CLR_RUN_MASK                  (0x20000000U)
#define GPMI_CTRL0_CLR_RUN_SHIFT                 (29U)
#define GPMI_CTRL0_CLR_RUN(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_RUN_SHIFT)) & GPMI_CTRL0_CLR_RUN_MASK)
#define GPMI_CTRL0_CLR_CLKGATE_MASK              (0x40000000U)
#define GPMI_CTRL0_CLR_CLKGATE_SHIFT             (30U)
#define GPMI_CTRL0_CLR_CLKGATE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_CLKGATE_SHIFT)) & GPMI_CTRL0_CLR_CLKGATE_MASK)
#define GPMI_CTRL0_CLR_SFTRST_MASK               (0x80000000U)
#define GPMI_CTRL0_CLR_SFTRST_SHIFT              (31U)
#define GPMI_CTRL0_CLR_SFTRST(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_SFTRST_SHIFT)) & GPMI_CTRL0_CLR_SFTRST_MASK)

/*! @name CTRL0_TOG - GPMI Control Register 0 Description */
#define GPMI_CTRL0_TOG_XFER_COUNT_MASK           (0xFFFFU)
#define GPMI_CTRL0_TOG_XFER_COUNT_SHIFT          (0U)
#define GPMI_CTRL0_TOG_XFER_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_XFER_COUNT_SHIFT)) & GPMI_CTRL0_TOG_XFER_COUNT_MASK)
#define GPMI_CTRL0_TOG_ADDRESS_INCREMENT_MASK    (0x10000U)
#define GPMI_CTRL0_TOG_ADDRESS_INCREMENT_SHIFT   (16U)
#define GPMI_CTRL0_TOG_ADDRESS_INCREMENT(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_ADDRESS_INCREMENT_SHIFT)) & GPMI_CTRL0_TOG_ADDRESS_INCREMENT_MASK)
#define GPMI_CTRL0_TOG_ADDRESS_MASK              (0xE0000U)
#define GPMI_CTRL0_TOG_ADDRESS_SHIFT             (17U)
#define GPMI_CTRL0_TOG_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_ADDRESS_SHIFT)) & GPMI_CTRL0_TOG_ADDRESS_MASK)
#define GPMI_CTRL0_TOG_CS_MASK                   (0x700000U)
#define GPMI_CTRL0_TOG_CS_SHIFT                  (20U)
#define GPMI_CTRL0_TOG_CS(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_CS_SHIFT)) & GPMI_CTRL0_TOG_CS_MASK)
#define GPMI_CTRL0_TOG_WORD_LENGTH_MASK          (0x800000U)
#define GPMI_CTRL0_TOG_WORD_LENGTH_SHIFT         (23U)
#define GPMI_CTRL0_TOG_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_WORD_LENGTH_SHIFT)) & GPMI_CTRL0_TOG_WORD_LENGTH_MASK)
#define GPMI_CTRL0_TOG_COMMAND_MODE_MASK         (0x3000000U)
#define GPMI_CTRL0_TOG_COMMAND_MODE_SHIFT        (24U)
#define GPMI_CTRL0_TOG_COMMAND_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_TOG_COMMAND_MODE_MASK)
#define GPMI_CTRL0_TOG_UDMA_MASK                 (0x4000000U)
#define GPMI_CTRL0_TOG_UDMA_SHIFT                (26U)
#define GPMI_CTRL0_TOG_UDMA(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_UDMA_SHIFT)) & GPMI_CTRL0_TOG_UDMA_MASK)
#define GPMI_CTRL0_TOG_LOCK_CS_MASK              (0x8000000U)
#define GPMI_CTRL0_TOG_LOCK_CS_SHIFT             (27U)
#define GPMI_CTRL0_TOG_LOCK_CS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_LOCK_CS_SHIFT)) & GPMI_CTRL0_TOG_LOCK_CS_MASK)
#define GPMI_CTRL0_TOG_DEV_IRQ_EN_MASK           (0x10000000U)
#define GPMI_CTRL0_TOG_DEV_IRQ_EN_SHIFT          (28U)
#define GPMI_CTRL0_TOG_DEV_IRQ_EN(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_DEV_IRQ_EN_SHIFT)) & GPMI_CTRL0_TOG_DEV_IRQ_EN_MASK)
#define GPMI_CTRL0_TOG_RUN_MASK                  (0x20000000U)
#define GPMI_CTRL0_TOG_RUN_SHIFT                 (29U)
#define GPMI_CTRL0_TOG_RUN(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_RUN_SHIFT)) & GPMI_CTRL0_TOG_RUN_MASK)
#define GPMI_CTRL0_TOG_CLKGATE_MASK              (0x40000000U)
#define GPMI_CTRL0_TOG_CLKGATE_SHIFT             (30U)
#define GPMI_CTRL0_TOG_CLKGATE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_CLKGATE_SHIFT)) & GPMI_CTRL0_TOG_CLKGATE_MASK)
#define GPMI_CTRL0_TOG_SFTRST_MASK               (0x80000000U)
#define GPMI_CTRL0_TOG_SFTRST_SHIFT              (31U)
#define GPMI_CTRL0_TOG_SFTRST(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_SFTRST_SHIFT)) & GPMI_CTRL0_TOG_SFTRST_MASK)

/*! @name COMPARE - GPMI Compare Register Description */
#define GPMI_COMPARE_REFERENCE_MASK              (0xFFFFU)
#define GPMI_COMPARE_REFERENCE_SHIFT             (0U)
#define GPMI_COMPARE_REFERENCE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_COMPARE_REFERENCE_SHIFT)) & GPMI_COMPARE_REFERENCE_MASK)
#define GPMI_COMPARE_MASK_MASK                   (0xFFFF0000U)
#define GPMI_COMPARE_MASK_SHIFT                  (16U)
#define GPMI_COMPARE_MASK(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_COMPARE_MASK_SHIFT)) & GPMI_COMPARE_MASK_MASK)

/*! @name ECCCTRL - GPMI Integrated ECC Control Register Description */
#define GPMI_ECCCTRL_BUFFER_MASK_MASK            (0x1FFU)
#define GPMI_ECCCTRL_BUFFER_MASK_SHIFT           (0U)
#define GPMI_ECCCTRL_BUFFER_MASK(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_RANDOMIZER_TYPE_MASK        (0x600U)
#define GPMI_ECCCTRL_RANDOMIZER_TYPE_SHIFT       (9U)
#define GPMI_ECCCTRL_RANDOMIZER_TYPE(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_RANDOMIZER_ENABLE_MASK      (0x800U)
#define GPMI_ECCCTRL_RANDOMIZER_ENABLE_SHIFT     (11U)
#define GPMI_ECCCTRL_RANDOMIZER_ENABLE(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_RANDOMIZER_ENABLE_SHIFT)) & GPMI_ECCCTRL_RANDOMIZER_ENABLE_MASK)
#define GPMI_ECCCTRL_ENABLE_ECC_MASK             (0x1000U)
#define GPMI_ECCCTRL_ENABLE_ECC_SHIFT            (12U)
#define GPMI_ECCCTRL_ENABLE_ECC(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_ENABLE_ECC_SHIFT)) & GPMI_ECCCTRL_ENABLE_ECC_MASK)
#define GPMI_ECCCTRL_ECC_CMD_MASK                (0x6000U)
#define GPMI_ECCCTRL_ECC_CMD_SHIFT               (13U)
#define GPMI_ECCCTRL_ECC_CMD(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_ECC_CMD_MASK)
#define GPMI_ECCCTRL_RSVD2_MASK                  (0x8000U)
#define GPMI_ECCCTRL_RSVD2_SHIFT                 (15U)
#define GPMI_ECCCTRL_RSVD2(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_RSVD2_SHIFT)) & GPMI_ECCCTRL_RSVD2_MASK)
#define GPMI_ECCCTRL_HANDLE_MASK                 (0xFFFF0000U)
#define GPMI_ECCCTRL_HANDLE_SHIFT                (16U)
#define GPMI_ECCCTRL_HANDLE(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_HANDLE_SHIFT)) & GPMI_ECCCTRL_HANDLE_MASK)

/*! @name ECCCTRL_SET - GPMI Integrated ECC Control Register Description */
#define GPMI_ECCCTRL_SET_BUFFER_MASK_MASK        (0x1FFU)
#define GPMI_ECCCTRL_SET_BUFFER_MASK_SHIFT       (0U)
#define GPMI_ECCCTRL_SET_BUFFER_MASK(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_SET_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_MASK    (0x600U)
#define GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_SHIFT   (9U)
#define GPMI_ECCCTRL_SET_RANDOMIZER_TYPE(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE_MASK  (0x800U)
#define GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE_SHIFT (11U)
#define GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE(x)    (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE_SHIFT)) & GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE_MASK)
#define GPMI_ECCCTRL_SET_ENABLE_ECC_MASK         (0x1000U)
#define GPMI_ECCCTRL_SET_ENABLE_ECC_SHIFT        (12U)
#define GPMI_ECCCTRL_SET_ENABLE_ECC(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_ENABLE_ECC_SHIFT)) & GPMI_ECCCTRL_SET_ENABLE_ECC_MASK)
#define GPMI_ECCCTRL_SET_ECC_CMD_MASK            (0x6000U)
#define GPMI_ECCCTRL_SET_ECC_CMD_SHIFT           (13U)
#define GPMI_ECCCTRL_SET_ECC_CMD(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_SET_ECC_CMD_MASK)
#define GPMI_ECCCTRL_SET_RSVD2_MASK              (0x8000U)
#define GPMI_ECCCTRL_SET_RSVD2_SHIFT             (15U)
#define GPMI_ECCCTRL_SET_RSVD2(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_RSVD2_SHIFT)) & GPMI_ECCCTRL_SET_RSVD2_MASK)
#define GPMI_ECCCTRL_SET_HANDLE_MASK             (0xFFFF0000U)
#define GPMI_ECCCTRL_SET_HANDLE_SHIFT            (16U)
#define GPMI_ECCCTRL_SET_HANDLE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_HANDLE_SHIFT)) & GPMI_ECCCTRL_SET_HANDLE_MASK)

/*! @name ECCCTRL_CLR - GPMI Integrated ECC Control Register Description */
#define GPMI_ECCCTRL_CLR_BUFFER_MASK_MASK        (0x1FFU)
#define GPMI_ECCCTRL_CLR_BUFFER_MASK_SHIFT       (0U)
#define GPMI_ECCCTRL_CLR_BUFFER_MASK(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_CLR_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_MASK    (0x600U)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_SHIFT   (9U)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE_MASK  (0x800U)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE_SHIFT (11U)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE(x)    (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE_SHIFT)) & GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE_MASK)
#define GPMI_ECCCTRL_CLR_ENABLE_ECC_MASK         (0x1000U)
#define GPMI_ECCCTRL_CLR_ENABLE_ECC_SHIFT        (12U)
#define GPMI_ECCCTRL_CLR_ENABLE_ECC(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_ENABLE_ECC_SHIFT)) & GPMI_ECCCTRL_CLR_ENABLE_ECC_MASK)
#define GPMI_ECCCTRL_CLR_ECC_CMD_MASK            (0x6000U)
#define GPMI_ECCCTRL_CLR_ECC_CMD_SHIFT           (13U)
#define GPMI_ECCCTRL_CLR_ECC_CMD(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_CLR_ECC_CMD_MASK)
#define GPMI_ECCCTRL_CLR_RSVD2_MASK              (0x8000U)
#define GPMI_ECCCTRL_CLR_RSVD2_SHIFT             (15U)
#define GPMI_ECCCTRL_CLR_RSVD2(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_RSVD2_SHIFT)) & GPMI_ECCCTRL_CLR_RSVD2_MASK)
#define GPMI_ECCCTRL_CLR_HANDLE_MASK             (0xFFFF0000U)
#define GPMI_ECCCTRL_CLR_HANDLE_SHIFT            (16U)
#define GPMI_ECCCTRL_CLR_HANDLE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_HANDLE_SHIFT)) & GPMI_ECCCTRL_CLR_HANDLE_MASK)

/*! @name ECCCTRL_TOG - GPMI Integrated ECC Control Register Description */
#define GPMI_ECCCTRL_TOG_BUFFER_MASK_MASK        (0x1FFU)
#define GPMI_ECCCTRL_TOG_BUFFER_MASK_SHIFT       (0U)
#define GPMI_ECCCTRL_TOG_BUFFER_MASK(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_TOG_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_MASK    (0x600U)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_SHIFT   (9U)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE_MASK  (0x800U)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE_SHIFT (11U)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE(x)    (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE_SHIFT)) & GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE_MASK)
#define GPMI_ECCCTRL_TOG_ENABLE_ECC_MASK         (0x1000U)
#define GPMI_ECCCTRL_TOG_ENABLE_ECC_SHIFT        (12U)
#define GPMI_ECCCTRL_TOG_ENABLE_ECC(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_ENABLE_ECC_SHIFT)) & GPMI_ECCCTRL_TOG_ENABLE_ECC_MASK)
#define GPMI_ECCCTRL_TOG_ECC_CMD_MASK            (0x6000U)
#define GPMI_ECCCTRL_TOG_ECC_CMD_SHIFT           (13U)
#define GPMI_ECCCTRL_TOG_ECC_CMD(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_TOG_ECC_CMD_MASK)
#define GPMI_ECCCTRL_TOG_RSVD2_MASK              (0x8000U)
#define GPMI_ECCCTRL_TOG_RSVD2_SHIFT             (15U)
#define GPMI_ECCCTRL_TOG_RSVD2(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_RSVD2_SHIFT)) & GPMI_ECCCTRL_TOG_RSVD2_MASK)
#define GPMI_ECCCTRL_TOG_HANDLE_MASK             (0xFFFF0000U)
#define GPMI_ECCCTRL_TOG_HANDLE_SHIFT            (16U)
#define GPMI_ECCCTRL_TOG_HANDLE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_HANDLE_SHIFT)) & GPMI_ECCCTRL_TOG_HANDLE_MASK)

/*! @name ECCCOUNT - GPMI Integrated ECC Transfer Count Register Description */
#define GPMI_ECCCOUNT_COUNT_MASK                 (0xFFFFU)
#define GPMI_ECCCOUNT_COUNT_SHIFT                (0U)
#define GPMI_ECCCOUNT_COUNT(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCOUNT_COUNT_SHIFT)) & GPMI_ECCCOUNT_COUNT_MASK)
#define GPMI_ECCCOUNT_RANDOMIZER_PAGE_MASK       (0xFF0000U)
#define GPMI_ECCCOUNT_RANDOMIZER_PAGE_SHIFT      (16U)
#define GPMI_ECCCOUNT_RANDOMIZER_PAGE(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCOUNT_RANDOMIZER_PAGE_SHIFT)) & GPMI_ECCCOUNT_RANDOMIZER_PAGE_MASK)

/*! @name PAYLOAD - GPMI Payload Address Register Description */
#define GPMI_PAYLOAD_RSVD0_MASK                  (0x3U)
#define GPMI_PAYLOAD_RSVD0_SHIFT                 (0U)
#define GPMI_PAYLOAD_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_PAYLOAD_RSVD0_SHIFT)) & GPMI_PAYLOAD_RSVD0_MASK)
#define GPMI_PAYLOAD_ADDRESS_MASK                (0xFFFFFFFCU)
#define GPMI_PAYLOAD_ADDRESS_SHIFT               (2U)
#define GPMI_PAYLOAD_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_PAYLOAD_ADDRESS_SHIFT)) & GPMI_PAYLOAD_ADDRESS_MASK)

/*! @name AUXILIARY - GPMI Auxiliary Address Register Description */
#define GPMI_AUXILIARY_RSVD0_MASK                (0x3U)
#define GPMI_AUXILIARY_RSVD0_SHIFT               (0U)
#define GPMI_AUXILIARY_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_AUXILIARY_RSVD0_SHIFT)) & GPMI_AUXILIARY_RSVD0_MASK)
#define GPMI_AUXILIARY_ADDRESS_MASK              (0xFFFFFFFCU)
#define GPMI_AUXILIARY_ADDRESS_SHIFT             (2U)
#define GPMI_AUXILIARY_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_AUXILIARY_ADDRESS_SHIFT)) & GPMI_AUXILIARY_ADDRESS_MASK)

/*! @name CTRL1 - GPMI Control Register 1 Description */
#define GPMI_CTRL1_GPMI_MODE_MASK                (0x1U)
#define GPMI_CTRL1_GPMI_MODE_SHIFT               (0U)
#define GPMI_CTRL1_GPMI_MODE(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_GPMI_MODE_SHIFT)) & GPMI_CTRL1_GPMI_MODE_MASK)
#define GPMI_CTRL1_CAMERA_MODE_MASK              (0x2U)
#define GPMI_CTRL1_CAMERA_MODE_SHIFT             (1U)
#define GPMI_CTRL1_CAMERA_MODE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CAMERA_MODE_SHIFT)) & GPMI_CTRL1_CAMERA_MODE_MASK)
#define GPMI_CTRL1_ATA_IRQRDY_POLARITY_MASK      (0x4U)
#define GPMI_CTRL1_ATA_IRQRDY_POLARITY_SHIFT     (2U)
#define GPMI_CTRL1_ATA_IRQRDY_POLARITY(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_ATA_IRQRDY_POLARITY_SHIFT)) & GPMI_CTRL1_ATA_IRQRDY_POLARITY_MASK)
#define GPMI_CTRL1_DEV_RESET_MASK                (0x8U)
#define GPMI_CTRL1_DEV_RESET_SHIFT               (3U)
#define GPMI_CTRL1_DEV_RESET(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_DEV_RESET_SHIFT)) & GPMI_CTRL1_DEV_RESET_MASK)
#define GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_ABORT_WAIT_REQUEST_MASK       (0x80U)
#define GPMI_CTRL1_ABORT_WAIT_REQUEST_SHIFT      (7U)
#define GPMI_CTRL1_ABORT_WAIT_REQUEST(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_ABORT_WAIT_REQUEST_SHIFT)) & GPMI_CTRL1_ABORT_WAIT_REQUEST_MASK)
#define GPMI_CTRL1_BURST_EN_MASK                 (0x100U)
#define GPMI_CTRL1_BURST_EN_SHIFT                (8U)
#define GPMI_CTRL1_BURST_EN(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_BURST_EN_SHIFT)) & GPMI_CTRL1_BURST_EN_MASK)
#define GPMI_CTRL1_TIMEOUT_IRQ_MASK              (0x200U)
#define GPMI_CTRL1_TIMEOUT_IRQ_SHIFT             (9U)
#define GPMI_CTRL1_TIMEOUT_IRQ(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TIMEOUT_IRQ_SHIFT)) & GPMI_CTRL1_TIMEOUT_IRQ_MASK)
#define GPMI_CTRL1_DEV_IRQ_MASK                  (0x400U)
#define GPMI_CTRL1_DEV_IRQ_SHIFT                 (10U)
#define GPMI_CTRL1_DEV_IRQ(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_DEV_IRQ_SHIFT)) & GPMI_CTRL1_DEV_IRQ_MASK)
#define GPMI_CTRL1_DMA2ECC_MODE_MASK             (0x800U)
#define GPMI_CTRL1_DMA2ECC_MODE_SHIFT            (11U)
#define GPMI_CTRL1_DMA2ECC_MODE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_DMA2ECC_MODE_SHIFT)) & GPMI_CTRL1_DMA2ECC_MODE_MASK)
#define GPMI_CTRL1_RDN_DELAY_MASK                (0xF000U)
#define GPMI_CTRL1_RDN_DELAY_SHIFT               (12U)
#define GPMI_CTRL1_RDN_DELAY(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_RDN_DELAY_SHIFT)) & GPMI_CTRL1_RDN_DELAY_MASK)
#define GPMI_CTRL1_HALF_PERIOD_MASK              (0x10000U)
#define GPMI_CTRL1_HALF_PERIOD_SHIFT             (16U)
#define GPMI_CTRL1_HALF_PERIOD(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_HALF_PERIOD_SHIFT)) & GPMI_CTRL1_HALF_PERIOD_MASK)
#define GPMI_CTRL1_DLL_ENABLE_MASK               (0x20000U)
#define GPMI_CTRL1_DLL_ENABLE_SHIFT              (17U)
#define GPMI_CTRL1_DLL_ENABLE(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_DLL_ENABLE_SHIFT)) & GPMI_CTRL1_DLL_ENABLE_MASK)
#define GPMI_CTRL1_BCH_MODE_MASK                 (0x40000U)
#define GPMI_CTRL1_BCH_MODE_SHIFT                (18U)
#define GPMI_CTRL1_BCH_MODE(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_BCH_MODE_SHIFT)) & GPMI_CTRL1_BCH_MODE_MASK)
#define GPMI_CTRL1_GANGED_RDYBUSY_MASK           (0x80000U)
#define GPMI_CTRL1_GANGED_RDYBUSY_SHIFT          (19U)
#define GPMI_CTRL1_GANGED_RDYBUSY(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_GANGED_RDYBUSY_SHIFT)) & GPMI_CTRL1_GANGED_RDYBUSY_MASK)
#define GPMI_CTRL1_TIMEOUT_IRQ_EN_MASK           (0x100000U)
#define GPMI_CTRL1_TIMEOUT_IRQ_EN_SHIFT          (20U)
#define GPMI_CTRL1_TIMEOUT_IRQ_EN(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TIMEOUT_IRQ_EN_SHIFT)) & GPMI_CTRL1_TIMEOUT_IRQ_EN_MASK)
#define GPMI_CTRL1_TEST_TRIGGER_MASK             (0x200000U)
#define GPMI_CTRL1_TEST_TRIGGER_SHIFT            (21U)
#define GPMI_CTRL1_TEST_TRIGGER(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TEST_TRIGGER_SHIFT)) & GPMI_CTRL1_TEST_TRIGGER_MASK)
#define GPMI_CTRL1_WRN_DLY_SEL_MASK              (0xC00000U)
#define GPMI_CTRL1_WRN_DLY_SEL_SHIFT             (22U)
#define GPMI_CTRL1_WRN_DLY_SEL(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_DECOUPLE_CS_MASK              (0x1000000U)
#define GPMI_CTRL1_DECOUPLE_CS_SHIFT             (24U)
#define GPMI_CTRL1_DECOUPLE_CS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_DECOUPLE_CS_SHIFT)) & GPMI_CTRL1_DECOUPLE_CS_MASK)
#define GPMI_CTRL1_SSYNCMODE_MASK                (0x2000000U)
#define GPMI_CTRL1_SSYNCMODE_SHIFT               (25U)
#define GPMI_CTRL1_SSYNCMODE(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SSYNCMODE_SHIFT)) & GPMI_CTRL1_SSYNCMODE_MASK)
#define GPMI_CTRL1_UPDATE_CS_MASK                (0x4000000U)
#define GPMI_CTRL1_UPDATE_CS_SHIFT               (26U)
#define GPMI_CTRL1_UPDATE_CS(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_UPDATE_CS_SHIFT)) & GPMI_CTRL1_UPDATE_CS_MASK)
#define GPMI_CTRL1_GPMI_CLK_DIV2_EN_MASK         (0x8000000U)
#define GPMI_CTRL1_GPMI_CLK_DIV2_EN_SHIFT        (27U)
#define GPMI_CTRL1_GPMI_CLK_DIV2_EN(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_GPMI_CLK_DIV2_EN_SHIFT)) & GPMI_CTRL1_GPMI_CLK_DIV2_EN_MASK)
#define GPMI_CTRL1_TOGGLE_MODE_MASK              (0x10000000U)
#define GPMI_CTRL1_TOGGLE_MODE_SHIFT             (28U)
#define GPMI_CTRL1_TOGGLE_MODE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOGGLE_MODE_SHIFT)) & GPMI_CTRL1_TOGGLE_MODE_MASK)
#define GPMI_CTRL1_WRITE_CLK_STOP_MASK           (0x20000000U)
#define GPMI_CTRL1_WRITE_CLK_STOP_SHIFT          (29U)
#define GPMI_CTRL1_WRITE_CLK_STOP(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_WRITE_CLK_STOP_SHIFT)) & GPMI_CTRL1_WRITE_CLK_STOP_MASK)
#define GPMI_CTRL1_SSYNC_CLK_STOP_MASK           (0x40000000U)
#define GPMI_CTRL1_SSYNC_CLK_STOP_SHIFT          (30U)
#define GPMI_CTRL1_SSYNC_CLK_STOP(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SSYNC_CLK_STOP_SHIFT)) & GPMI_CTRL1_SSYNC_CLK_STOP_MASK)
#define GPMI_CTRL1_DEV_CLK_STOP_MASK             (0x80000000U)
#define GPMI_CTRL1_DEV_CLK_STOP_SHIFT            (31U)
#define GPMI_CTRL1_DEV_CLK_STOP(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_DEV_CLK_STOP_SHIFT)) & GPMI_CTRL1_DEV_CLK_STOP_MASK)

/*! @name CTRL1_SET - GPMI Control Register 1 Description */
#define GPMI_CTRL1_SET_GPMI_MODE_MASK            (0x1U)
#define GPMI_CTRL1_SET_GPMI_MODE_SHIFT           (0U)
#define GPMI_CTRL1_SET_GPMI_MODE(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_GPMI_MODE_SHIFT)) & GPMI_CTRL1_SET_GPMI_MODE_MASK)
#define GPMI_CTRL1_SET_CAMERA_MODE_MASK          (0x2U)
#define GPMI_CTRL1_SET_CAMERA_MODE_SHIFT         (1U)
#define GPMI_CTRL1_SET_CAMERA_MODE(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_CAMERA_MODE_SHIFT)) & GPMI_CTRL1_SET_CAMERA_MODE_MASK)
#define GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY_MASK  (0x4U)
#define GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY_SHIFT (2U)
#define GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY(x)    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY_SHIFT)) & GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY_MASK)
#define GPMI_CTRL1_SET_DEV_RESET_MASK            (0x8U)
#define GPMI_CTRL1_SET_DEV_RESET_SHIFT           (3U)
#define GPMI_CTRL1_SET_DEV_RESET(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_DEV_RESET_SHIFT)) & GPMI_CTRL1_SET_DEV_RESET_MASK)
#define GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_SET_ABORT_WAIT_REQUEST_MASK   (0x80U)
#define GPMI_CTRL1_SET_ABORT_WAIT_REQUEST_SHIFT  (7U)
#define GPMI_CTRL1_SET_ABORT_WAIT_REQUEST(x)     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_ABORT_WAIT_REQUEST_SHIFT)) & GPMI_CTRL1_SET_ABORT_WAIT_REQUEST_MASK)
#define GPMI_CTRL1_SET_BURST_EN_MASK             (0x100U)
#define GPMI_CTRL1_SET_BURST_EN_SHIFT            (8U)
#define GPMI_CTRL1_SET_BURST_EN(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_BURST_EN_SHIFT)) & GPMI_CTRL1_SET_BURST_EN_MASK)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_MASK          (0x200U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_SHIFT         (9U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_TIMEOUT_IRQ_SHIFT)) & GPMI_CTRL1_SET_TIMEOUT_IRQ_MASK)
#define GPMI_CTRL1_SET_DEV_IRQ_MASK              (0x400U)
#define GPMI_CTRL1_SET_DEV_IRQ_SHIFT             (10U)
#define GPMI_CTRL1_SET_DEV_IRQ(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_DEV_IRQ_SHIFT)) & GPMI_CTRL1_SET_DEV_IRQ_MASK)
#define GPMI_CTRL1_SET_DMA2ECC_MODE_MASK         (0x800U)
#define GPMI_CTRL1_SET_DMA2ECC_MODE_SHIFT        (11U)
#define GPMI_CTRL1_SET_DMA2ECC_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_DMA2ECC_MODE_SHIFT)) & GPMI_CTRL1_SET_DMA2ECC_MODE_MASK)
#define GPMI_CTRL1_SET_RDN_DELAY_MASK            (0xF000U)
#define GPMI_CTRL1_SET_RDN_DELAY_SHIFT           (12U)
#define GPMI_CTRL1_SET_RDN_DELAY(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_RDN_DELAY_SHIFT)) & GPMI_CTRL1_SET_RDN_DELAY_MASK)
#define GPMI_CTRL1_SET_HALF_PERIOD_MASK          (0x10000U)
#define GPMI_CTRL1_SET_HALF_PERIOD_SHIFT         (16U)
#define GPMI_CTRL1_SET_HALF_PERIOD(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_HALF_PERIOD_SHIFT)) & GPMI_CTRL1_SET_HALF_PERIOD_MASK)
#define GPMI_CTRL1_SET_DLL_ENABLE_MASK           (0x20000U)
#define GPMI_CTRL1_SET_DLL_ENABLE_SHIFT          (17U)
#define GPMI_CTRL1_SET_DLL_ENABLE(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_DLL_ENABLE_SHIFT)) & GPMI_CTRL1_SET_DLL_ENABLE_MASK)
#define GPMI_CTRL1_SET_BCH_MODE_MASK             (0x40000U)
#define GPMI_CTRL1_SET_BCH_MODE_SHIFT            (18U)
#define GPMI_CTRL1_SET_BCH_MODE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_BCH_MODE_SHIFT)) & GPMI_CTRL1_SET_BCH_MODE_MASK)
#define GPMI_CTRL1_SET_GANGED_RDYBUSY_MASK       (0x80000U)
#define GPMI_CTRL1_SET_GANGED_RDYBUSY_SHIFT      (19U)
#define GPMI_CTRL1_SET_GANGED_RDYBUSY(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_GANGED_RDYBUSY_SHIFT)) & GPMI_CTRL1_SET_GANGED_RDYBUSY_MASK)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_EN_MASK       (0x100000U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_EN_SHIFT      (20U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_EN(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_TIMEOUT_IRQ_EN_SHIFT)) & GPMI_CTRL1_SET_TIMEOUT_IRQ_EN_MASK)
#define GPMI_CTRL1_SET_TEST_TRIGGER_MASK         (0x200000U)
#define GPMI_CTRL1_SET_TEST_TRIGGER_SHIFT        (21U)
#define GPMI_CTRL1_SET_TEST_TRIGGER(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_TEST_TRIGGER_SHIFT)) & GPMI_CTRL1_SET_TEST_TRIGGER_MASK)
#define GPMI_CTRL1_SET_WRN_DLY_SEL_MASK          (0xC00000U)
#define GPMI_CTRL1_SET_WRN_DLY_SEL_SHIFT         (22U)
#define GPMI_CTRL1_SET_WRN_DLY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_SET_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_SET_DECOUPLE_CS_MASK          (0x1000000U)
#define GPMI_CTRL1_SET_DECOUPLE_CS_SHIFT         (24U)
#define GPMI_CTRL1_SET_DECOUPLE_CS(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_DECOUPLE_CS_SHIFT)) & GPMI_CTRL1_SET_DECOUPLE_CS_MASK)
#define GPMI_CTRL1_SET_SSYNCMODE_MASK            (0x2000000U)
#define GPMI_CTRL1_SET_SSYNCMODE_SHIFT           (25U)
#define GPMI_CTRL1_SET_SSYNCMODE(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_SSYNCMODE_SHIFT)) & GPMI_CTRL1_SET_SSYNCMODE_MASK)
#define GPMI_CTRL1_SET_UPDATE_CS_MASK            (0x4000000U)
#define GPMI_CTRL1_SET_UPDATE_CS_SHIFT           (26U)
#define GPMI_CTRL1_SET_UPDATE_CS(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_UPDATE_CS_SHIFT)) & GPMI_CTRL1_SET_UPDATE_CS_MASK)
#define GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN_MASK     (0x8000000U)
#define GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN_SHIFT    (27U)
#define GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN(x)       (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN_SHIFT)) & GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN_MASK)
#define GPMI_CTRL1_SET_TOGGLE_MODE_MASK          (0x10000000U)
#define GPMI_CTRL1_SET_TOGGLE_MODE_SHIFT         (28U)
#define GPMI_CTRL1_SET_TOGGLE_MODE(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_TOGGLE_MODE_SHIFT)) & GPMI_CTRL1_SET_TOGGLE_MODE_MASK)
#define GPMI_CTRL1_SET_WRITE_CLK_STOP_MASK       (0x20000000U)
#define GPMI_CTRL1_SET_WRITE_CLK_STOP_SHIFT      (29U)
#define GPMI_CTRL1_SET_WRITE_CLK_STOP(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_WRITE_CLK_STOP_SHIFT)) & GPMI_CTRL1_SET_WRITE_CLK_STOP_MASK)
#define GPMI_CTRL1_SET_SSYNC_CLK_STOP_MASK       (0x40000000U)
#define GPMI_CTRL1_SET_SSYNC_CLK_STOP_SHIFT      (30U)
#define GPMI_CTRL1_SET_SSYNC_CLK_STOP(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_SSYNC_CLK_STOP_SHIFT)) & GPMI_CTRL1_SET_SSYNC_CLK_STOP_MASK)
#define GPMI_CTRL1_SET_DEV_CLK_STOP_MASK         (0x80000000U)
#define GPMI_CTRL1_SET_DEV_CLK_STOP_SHIFT        (31U)
#define GPMI_CTRL1_SET_DEV_CLK_STOP(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_DEV_CLK_STOP_SHIFT)) & GPMI_CTRL1_SET_DEV_CLK_STOP_MASK)

/*! @name CTRL1_CLR - GPMI Control Register 1 Description */
#define GPMI_CTRL1_CLR_GPMI_MODE_MASK            (0x1U)
#define GPMI_CTRL1_CLR_GPMI_MODE_SHIFT           (0U)
#define GPMI_CTRL1_CLR_GPMI_MODE(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_GPMI_MODE_SHIFT)) & GPMI_CTRL1_CLR_GPMI_MODE_MASK)
#define GPMI_CTRL1_CLR_CAMERA_MODE_MASK          (0x2U)
#define GPMI_CTRL1_CLR_CAMERA_MODE_SHIFT         (1U)
#define GPMI_CTRL1_CLR_CAMERA_MODE(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_CAMERA_MODE_SHIFT)) & GPMI_CTRL1_CLR_CAMERA_MODE_MASK)
#define GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY_MASK  (0x4U)
#define GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY_SHIFT (2U)
#define GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY(x)    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY_SHIFT)) & GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY_MASK)
#define GPMI_CTRL1_CLR_DEV_RESET_MASK            (0x8U)
#define GPMI_CTRL1_CLR_DEV_RESET_SHIFT           (3U)
#define GPMI_CTRL1_CLR_DEV_RESET(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_DEV_RESET_SHIFT)) & GPMI_CTRL1_CLR_DEV_RESET_MASK)
#define GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST_MASK   (0x80U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST_SHIFT  (7U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST(x)     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST_SHIFT)) & GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST_MASK)
#define GPMI_CTRL1_CLR_BURST_EN_MASK             (0x100U)
#define GPMI_CTRL1_CLR_BURST_EN_SHIFT            (8U)
#define GPMI_CTRL1_CLR_BURST_EN(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_BURST_EN_SHIFT)) & GPMI_CTRL1_CLR_BURST_EN_MASK)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_MASK          (0x200U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_SHIFT         (9U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_TIMEOUT_IRQ_SHIFT)) & GPMI_CTRL1_CLR_TIMEOUT_IRQ_MASK)
#define GPMI_CTRL1_CLR_DEV_IRQ_MASK              (0x400U)
#define GPMI_CTRL1_CLR_DEV_IRQ_SHIFT             (10U)
#define GPMI_CTRL1_CLR_DEV_IRQ(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_DEV_IRQ_SHIFT)) & GPMI_CTRL1_CLR_DEV_IRQ_MASK)
#define GPMI_CTRL1_CLR_DMA2ECC_MODE_MASK         (0x800U)
#define GPMI_CTRL1_CLR_DMA2ECC_MODE_SHIFT        (11U)
#define GPMI_CTRL1_CLR_DMA2ECC_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_DMA2ECC_MODE_SHIFT)) & GPMI_CTRL1_CLR_DMA2ECC_MODE_MASK)
#define GPMI_CTRL1_CLR_RDN_DELAY_MASK            (0xF000U)
#define GPMI_CTRL1_CLR_RDN_DELAY_SHIFT           (12U)
#define GPMI_CTRL1_CLR_RDN_DELAY(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_RDN_DELAY_SHIFT)) & GPMI_CTRL1_CLR_RDN_DELAY_MASK)
#define GPMI_CTRL1_CLR_HALF_PERIOD_MASK          (0x10000U)
#define GPMI_CTRL1_CLR_HALF_PERIOD_SHIFT         (16U)
#define GPMI_CTRL1_CLR_HALF_PERIOD(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_HALF_PERIOD_SHIFT)) & GPMI_CTRL1_CLR_HALF_PERIOD_MASK)
#define GPMI_CTRL1_CLR_DLL_ENABLE_MASK           (0x20000U)
#define GPMI_CTRL1_CLR_DLL_ENABLE_SHIFT          (17U)
#define GPMI_CTRL1_CLR_DLL_ENABLE(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_DLL_ENABLE_SHIFT)) & GPMI_CTRL1_CLR_DLL_ENABLE_MASK)
#define GPMI_CTRL1_CLR_BCH_MODE_MASK             (0x40000U)
#define GPMI_CTRL1_CLR_BCH_MODE_SHIFT            (18U)
#define GPMI_CTRL1_CLR_BCH_MODE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_BCH_MODE_SHIFT)) & GPMI_CTRL1_CLR_BCH_MODE_MASK)
#define GPMI_CTRL1_CLR_GANGED_RDYBUSY_MASK       (0x80000U)
#define GPMI_CTRL1_CLR_GANGED_RDYBUSY_SHIFT      (19U)
#define GPMI_CTRL1_CLR_GANGED_RDYBUSY(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_GANGED_RDYBUSY_SHIFT)) & GPMI_CTRL1_CLR_GANGED_RDYBUSY_MASK)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN_MASK       (0x100000U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN_SHIFT      (20U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN_SHIFT)) & GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN_MASK)
#define GPMI_CTRL1_CLR_TEST_TRIGGER_MASK         (0x200000U)
#define GPMI_CTRL1_CLR_TEST_TRIGGER_SHIFT        (21U)
#define GPMI_CTRL1_CLR_TEST_TRIGGER(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_TEST_TRIGGER_SHIFT)) & GPMI_CTRL1_CLR_TEST_TRIGGER_MASK)
#define GPMI_CTRL1_CLR_WRN_DLY_SEL_MASK          (0xC00000U)
#define GPMI_CTRL1_CLR_WRN_DLY_SEL_SHIFT         (22U)
#define GPMI_CTRL1_CLR_WRN_DLY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_CLR_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_CLR_DECOUPLE_CS_MASK          (0x1000000U)
#define GPMI_CTRL1_CLR_DECOUPLE_CS_SHIFT         (24U)
#define GPMI_CTRL1_CLR_DECOUPLE_CS(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_DECOUPLE_CS_SHIFT)) & GPMI_CTRL1_CLR_DECOUPLE_CS_MASK)
#define GPMI_CTRL1_CLR_SSYNCMODE_MASK            (0x2000000U)
#define GPMI_CTRL1_CLR_SSYNCMODE_SHIFT           (25U)
#define GPMI_CTRL1_CLR_SSYNCMODE(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_SSYNCMODE_SHIFT)) & GPMI_CTRL1_CLR_SSYNCMODE_MASK)
#define GPMI_CTRL1_CLR_UPDATE_CS_MASK            (0x4000000U)
#define GPMI_CTRL1_CLR_UPDATE_CS_SHIFT           (26U)
#define GPMI_CTRL1_CLR_UPDATE_CS(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_UPDATE_CS_SHIFT)) & GPMI_CTRL1_CLR_UPDATE_CS_MASK)
#define GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN_MASK     (0x8000000U)
#define GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN_SHIFT    (27U)
#define GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN(x)       (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN_SHIFT)) & GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN_MASK)
#define GPMI_CTRL1_CLR_TOGGLE_MODE_MASK          (0x10000000U)
#define GPMI_CTRL1_CLR_TOGGLE_MODE_SHIFT         (28U)
#define GPMI_CTRL1_CLR_TOGGLE_MODE(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_TOGGLE_MODE_SHIFT)) & GPMI_CTRL1_CLR_TOGGLE_MODE_MASK)
#define GPMI_CTRL1_CLR_WRITE_CLK_STOP_MASK       (0x20000000U)
#define GPMI_CTRL1_CLR_WRITE_CLK_STOP_SHIFT      (29U)
#define GPMI_CTRL1_CLR_WRITE_CLK_STOP(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_WRITE_CLK_STOP_SHIFT)) & GPMI_CTRL1_CLR_WRITE_CLK_STOP_MASK)
#define GPMI_CTRL1_CLR_SSYNC_CLK_STOP_MASK       (0x40000000U)
#define GPMI_CTRL1_CLR_SSYNC_CLK_STOP_SHIFT      (30U)
#define GPMI_CTRL1_CLR_SSYNC_CLK_STOP(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_SSYNC_CLK_STOP_SHIFT)) & GPMI_CTRL1_CLR_SSYNC_CLK_STOP_MASK)
#define GPMI_CTRL1_CLR_DEV_CLK_STOP_MASK         (0x80000000U)
#define GPMI_CTRL1_CLR_DEV_CLK_STOP_SHIFT        (31U)
#define GPMI_CTRL1_CLR_DEV_CLK_STOP(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_DEV_CLK_STOP_SHIFT)) & GPMI_CTRL1_CLR_DEV_CLK_STOP_MASK)

/*! @name CTRL1_TOG - GPMI Control Register 1 Description */
#define GPMI_CTRL1_TOG_GPMI_MODE_MASK            (0x1U)
#define GPMI_CTRL1_TOG_GPMI_MODE_SHIFT           (0U)
#define GPMI_CTRL1_TOG_GPMI_MODE(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_GPMI_MODE_SHIFT)) & GPMI_CTRL1_TOG_GPMI_MODE_MASK)
#define GPMI_CTRL1_TOG_CAMERA_MODE_MASK          (0x2U)
#define GPMI_CTRL1_TOG_CAMERA_MODE_SHIFT         (1U)
#define GPMI_CTRL1_TOG_CAMERA_MODE(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_CAMERA_MODE_SHIFT)) & GPMI_CTRL1_TOG_CAMERA_MODE_MASK)
#define GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY_MASK  (0x4U)
#define GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY_SHIFT (2U)
#define GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY(x)    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY_SHIFT)) & GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY_MASK)
#define GPMI_CTRL1_TOG_DEV_RESET_MASK            (0x8U)
#define GPMI_CTRL1_TOG_DEV_RESET_SHIFT           (3U)
#define GPMI_CTRL1_TOG_DEV_RESET(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_DEV_RESET_SHIFT)) & GPMI_CTRL1_TOG_DEV_RESET_MASK)
#define GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST_MASK   (0x80U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST_SHIFT  (7U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST(x)     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST_SHIFT)) & GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST_MASK)
#define GPMI_CTRL1_TOG_BURST_EN_MASK             (0x100U)
#define GPMI_CTRL1_TOG_BURST_EN_SHIFT            (8U)
#define GPMI_CTRL1_TOG_BURST_EN(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_BURST_EN_SHIFT)) & GPMI_CTRL1_TOG_BURST_EN_MASK)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_MASK          (0x200U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_SHIFT         (9U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_TIMEOUT_IRQ_SHIFT)) & GPMI_CTRL1_TOG_TIMEOUT_IRQ_MASK)
#define GPMI_CTRL1_TOG_DEV_IRQ_MASK              (0x400U)
#define GPMI_CTRL1_TOG_DEV_IRQ_SHIFT             (10U)
#define GPMI_CTRL1_TOG_DEV_IRQ(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_DEV_IRQ_SHIFT)) & GPMI_CTRL1_TOG_DEV_IRQ_MASK)
#define GPMI_CTRL1_TOG_DMA2ECC_MODE_MASK         (0x800U)
#define GPMI_CTRL1_TOG_DMA2ECC_MODE_SHIFT        (11U)
#define GPMI_CTRL1_TOG_DMA2ECC_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_DMA2ECC_MODE_SHIFT)) & GPMI_CTRL1_TOG_DMA2ECC_MODE_MASK)
#define GPMI_CTRL1_TOG_RDN_DELAY_MASK            (0xF000U)
#define GPMI_CTRL1_TOG_RDN_DELAY_SHIFT           (12U)
#define GPMI_CTRL1_TOG_RDN_DELAY(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_RDN_DELAY_SHIFT)) & GPMI_CTRL1_TOG_RDN_DELAY_MASK)
#define GPMI_CTRL1_TOG_HALF_PERIOD_MASK          (0x10000U)
#define GPMI_CTRL1_TOG_HALF_PERIOD_SHIFT         (16U)
#define GPMI_CTRL1_TOG_HALF_PERIOD(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_HALF_PERIOD_SHIFT)) & GPMI_CTRL1_TOG_HALF_PERIOD_MASK)
#define GPMI_CTRL1_TOG_DLL_ENABLE_MASK           (0x20000U)
#define GPMI_CTRL1_TOG_DLL_ENABLE_SHIFT          (17U)
#define GPMI_CTRL1_TOG_DLL_ENABLE(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_DLL_ENABLE_SHIFT)) & GPMI_CTRL1_TOG_DLL_ENABLE_MASK)
#define GPMI_CTRL1_TOG_BCH_MODE_MASK             (0x40000U)
#define GPMI_CTRL1_TOG_BCH_MODE_SHIFT            (18U)
#define GPMI_CTRL1_TOG_BCH_MODE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_BCH_MODE_SHIFT)) & GPMI_CTRL1_TOG_BCH_MODE_MASK)
#define GPMI_CTRL1_TOG_GANGED_RDYBUSY_MASK       (0x80000U)
#define GPMI_CTRL1_TOG_GANGED_RDYBUSY_SHIFT      (19U)
#define GPMI_CTRL1_TOG_GANGED_RDYBUSY(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_GANGED_RDYBUSY_SHIFT)) & GPMI_CTRL1_TOG_GANGED_RDYBUSY_MASK)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN_MASK       (0x100000U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN_SHIFT      (20U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN_SHIFT)) & GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN_MASK)
#define GPMI_CTRL1_TOG_TEST_TRIGGER_MASK         (0x200000U)
#define GPMI_CTRL1_TOG_TEST_TRIGGER_SHIFT        (21U)
#define GPMI_CTRL1_TOG_TEST_TRIGGER(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_TEST_TRIGGER_SHIFT)) & GPMI_CTRL1_TOG_TEST_TRIGGER_MASK)
#define GPMI_CTRL1_TOG_WRN_DLY_SEL_MASK          (0xC00000U)
#define GPMI_CTRL1_TOG_WRN_DLY_SEL_SHIFT         (22U)
#define GPMI_CTRL1_TOG_WRN_DLY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_TOG_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_TOG_DECOUPLE_CS_MASK          (0x1000000U)
#define GPMI_CTRL1_TOG_DECOUPLE_CS_SHIFT         (24U)
#define GPMI_CTRL1_TOG_DECOUPLE_CS(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_DECOUPLE_CS_SHIFT)) & GPMI_CTRL1_TOG_DECOUPLE_CS_MASK)
#define GPMI_CTRL1_TOG_SSYNCMODE_MASK            (0x2000000U)
#define GPMI_CTRL1_TOG_SSYNCMODE_SHIFT           (25U)
#define GPMI_CTRL1_TOG_SSYNCMODE(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_SSYNCMODE_SHIFT)) & GPMI_CTRL1_TOG_SSYNCMODE_MASK)
#define GPMI_CTRL1_TOG_UPDATE_CS_MASK            (0x4000000U)
#define GPMI_CTRL1_TOG_UPDATE_CS_SHIFT           (26U)
#define GPMI_CTRL1_TOG_UPDATE_CS(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_UPDATE_CS_SHIFT)) & GPMI_CTRL1_TOG_UPDATE_CS_MASK)
#define GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN_MASK     (0x8000000U)
#define GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN_SHIFT    (27U)
#define GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN(x)       (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN_SHIFT)) & GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN_MASK)
#define GPMI_CTRL1_TOG_TOGGLE_MODE_MASK          (0x10000000U)
#define GPMI_CTRL1_TOG_TOGGLE_MODE_SHIFT         (28U)
#define GPMI_CTRL1_TOG_TOGGLE_MODE(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_TOGGLE_MODE_SHIFT)) & GPMI_CTRL1_TOG_TOGGLE_MODE_MASK)
#define GPMI_CTRL1_TOG_WRITE_CLK_STOP_MASK       (0x20000000U)
#define GPMI_CTRL1_TOG_WRITE_CLK_STOP_SHIFT      (29U)
#define GPMI_CTRL1_TOG_WRITE_CLK_STOP(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_WRITE_CLK_STOP_SHIFT)) & GPMI_CTRL1_TOG_WRITE_CLK_STOP_MASK)
#define GPMI_CTRL1_TOG_SSYNC_CLK_STOP_MASK       (0x40000000U)
#define GPMI_CTRL1_TOG_SSYNC_CLK_STOP_SHIFT      (30U)
#define GPMI_CTRL1_TOG_SSYNC_CLK_STOP(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_SSYNC_CLK_STOP_SHIFT)) & GPMI_CTRL1_TOG_SSYNC_CLK_STOP_MASK)
#define GPMI_CTRL1_TOG_DEV_CLK_STOP_MASK         (0x80000000U)
#define GPMI_CTRL1_TOG_DEV_CLK_STOP_SHIFT        (31U)
#define GPMI_CTRL1_TOG_DEV_CLK_STOP(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_DEV_CLK_STOP_SHIFT)) & GPMI_CTRL1_TOG_DEV_CLK_STOP_MASK)

/*! @name TIMING0 - GPMI Timing Register 0 Description */
#define GPMI_TIMING0_DATA_SETUP_MASK             (0xFFU)
#define GPMI_TIMING0_DATA_SETUP_SHIFT            (0U)
#define GPMI_TIMING0_DATA_SETUP(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_DATA_SETUP_SHIFT)) & GPMI_TIMING0_DATA_SETUP_MASK)
#define GPMI_TIMING0_DATA_HOLD_MASK              (0xFF00U)
#define GPMI_TIMING0_DATA_HOLD_SHIFT             (8U)
#define GPMI_TIMING0_DATA_HOLD(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_DATA_HOLD_SHIFT)) & GPMI_TIMING0_DATA_HOLD_MASK)
#define GPMI_TIMING0_ADDRESS_SETUP_MASK          (0xFF0000U)
#define GPMI_TIMING0_ADDRESS_SETUP_SHIFT         (16U)
#define GPMI_TIMING0_ADDRESS_SETUP(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_ADDRESS_SETUP_SHIFT)) & GPMI_TIMING0_ADDRESS_SETUP_MASK)
#define GPMI_TIMING0_RSVD1_MASK                  (0xFF000000U)
#define GPMI_TIMING0_RSVD1_SHIFT                 (24U)
#define GPMI_TIMING0_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_RSVD1_SHIFT)) & GPMI_TIMING0_RSVD1_MASK)

/*! @name TIMING1 - GPMI Timing Register 1 Description */
#define GPMI_TIMING1_RSVD1_MASK                  (0xFFFFU)
#define GPMI_TIMING1_RSVD1_SHIFT                 (0U)
#define GPMI_TIMING1_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING1_RSVD1_SHIFT)) & GPMI_TIMING1_RSVD1_MASK)
#define GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_MASK    (0xFFFF0000U)
#define GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_SHIFT   (16U)
#define GPMI_TIMING1_DEVICE_BUSY_TIMEOUT(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_SHIFT)) & GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_MASK)

/*! @name TIMING2 - GPMI Timing Register 2 Description */
#define GPMI_TIMING2_DATA_PAUSE_MASK             (0xFU)
#define GPMI_TIMING2_DATA_PAUSE_SHIFT            (0U)
#define GPMI_TIMING2_DATA_PAUSE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_DATA_PAUSE_SHIFT)) & GPMI_TIMING2_DATA_PAUSE_MASK)
#define GPMI_TIMING2_CMDADD_PAUSE_MASK           (0xF0U)
#define GPMI_TIMING2_CMDADD_PAUSE_SHIFT          (4U)
#define GPMI_TIMING2_CMDADD_PAUSE(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_CMDADD_PAUSE_SHIFT)) & GPMI_TIMING2_CMDADD_PAUSE_MASK)
#define GPMI_TIMING2_POSTAMBLE_DELAY_MASK        (0xF00U)
#define GPMI_TIMING2_POSTAMBLE_DELAY_SHIFT       (8U)
#define GPMI_TIMING2_POSTAMBLE_DELAY(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_POSTAMBLE_DELAY_SHIFT)) & GPMI_TIMING2_POSTAMBLE_DELAY_MASK)
#define GPMI_TIMING2_PREAMBLE_DELAY_MASK         (0xF000U)
#define GPMI_TIMING2_PREAMBLE_DELAY_SHIFT        (12U)
#define GPMI_TIMING2_PREAMBLE_DELAY(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_PREAMBLE_DELAY_SHIFT)) & GPMI_TIMING2_PREAMBLE_DELAY_MASK)
#define GPMI_TIMING2_CE_DELAY_MASK               (0x1F0000U)
#define GPMI_TIMING2_CE_DELAY_SHIFT              (16U)
#define GPMI_TIMING2_CE_DELAY(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_CE_DELAY_SHIFT)) & GPMI_TIMING2_CE_DELAY_MASK)
#define GPMI_TIMING2_RSVD0_MASK                  (0xE00000U)
#define GPMI_TIMING2_RSVD0_SHIFT                 (21U)
#define GPMI_TIMING2_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_RSVD0_SHIFT)) & GPMI_TIMING2_RSVD0_MASK)
#define GPMI_TIMING2_READ_LATENCY_MASK           (0x7000000U)
#define GPMI_TIMING2_READ_LATENCY_SHIFT          (24U)
#define GPMI_TIMING2_READ_LATENCY(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_READ_LATENCY_SHIFT)) & GPMI_TIMING2_READ_LATENCY_MASK)
#define GPMI_TIMING2_TCR_MASK                    (0x18000000U)
#define GPMI_TIMING2_TCR_SHIFT                   (27U)
#define GPMI_TIMING2_TCR(x)                      (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_TCR_SHIFT)) & GPMI_TIMING2_TCR_MASK)
#define GPMI_TIMING2_TRPSTH_MASK                 (0xE0000000U)
#define GPMI_TIMING2_TRPSTH_SHIFT                (29U)
#define GPMI_TIMING2_TRPSTH(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_TRPSTH_SHIFT)) & GPMI_TIMING2_TRPSTH_MASK)

/*! @name DATA - GPMI DMA Data Transfer Register Description */
#define GPMI_DATA_DATA_MASK                      (0xFFFFFFFFU)
#define GPMI_DATA_DATA_SHIFT                     (0U)
#define GPMI_DATA_DATA(x)                        (((uint32_t)(((uint32_t)(x)) << GPMI_DATA_DATA_SHIFT)) & GPMI_DATA_DATA_MASK)

/*! @name STAT - GPMI Status Register Description */
#define GPMI_STAT_PRESENT_MASK                   (0x1U)
#define GPMI_STAT_PRESENT_SHIFT                  (0U)
#define GPMI_STAT_PRESENT(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_PRESENT_SHIFT)) & GPMI_STAT_PRESENT_MASK)
#define GPMI_STAT_FIFO_FULL_MASK                 (0x2U)
#define GPMI_STAT_FIFO_FULL_SHIFT                (1U)
#define GPMI_STAT_FIFO_FULL(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_FIFO_FULL_SHIFT)) & GPMI_STAT_FIFO_FULL_MASK)
#define GPMI_STAT_FIFO_EMPTY_MASK                (0x4U)
#define GPMI_STAT_FIFO_EMPTY_SHIFT               (2U)
#define GPMI_STAT_FIFO_EMPTY(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_FIFO_EMPTY_SHIFT)) & GPMI_STAT_FIFO_EMPTY_MASK)
#define GPMI_STAT_INVALID_BUFFER_MASK_MASK       (0x8U)
#define GPMI_STAT_INVALID_BUFFER_MASK_SHIFT      (3U)
#define GPMI_STAT_INVALID_BUFFER_MASK(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_INVALID_BUFFER_MASK_SHIFT)) & GPMI_STAT_INVALID_BUFFER_MASK_MASK)
#define GPMI_STAT_ATA_IRQ_MASK                   (0x10U)
#define GPMI_STAT_ATA_IRQ_SHIFT                  (4U)
#define GPMI_STAT_ATA_IRQ(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_ATA_IRQ_SHIFT)) & GPMI_STAT_ATA_IRQ_MASK)
#define GPMI_STAT_RSVD1_MASK                     (0xE0U)
#define GPMI_STAT_RSVD1_SHIFT                    (5U)
#define GPMI_STAT_RSVD1(x)                       (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_RSVD1_SHIFT)) & GPMI_STAT_RSVD1_MASK)
#define GPMI_STAT_DEV0_ERROR_MASK                (0x100U)
#define GPMI_STAT_DEV0_ERROR_SHIFT               (8U)
#define GPMI_STAT_DEV0_ERROR(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_DEV0_ERROR_SHIFT)) & GPMI_STAT_DEV0_ERROR_MASK)
#define GPMI_STAT_DEV1_ERROR_MASK                (0x200U)
#define GPMI_STAT_DEV1_ERROR_SHIFT               (9U)
#define GPMI_STAT_DEV1_ERROR(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_DEV1_ERROR_SHIFT)) & GPMI_STAT_DEV1_ERROR_MASK)
#define GPMI_STAT_DEV2_ERROR_MASK                (0x400U)
#define GPMI_STAT_DEV2_ERROR_SHIFT               (10U)
#define GPMI_STAT_DEV2_ERROR(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_DEV2_ERROR_SHIFT)) & GPMI_STAT_DEV2_ERROR_MASK)
#define GPMI_STAT_DEV3_ERROR_MASK                (0x800U)
#define GPMI_STAT_DEV3_ERROR_SHIFT               (11U)
#define GPMI_STAT_DEV3_ERROR(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_DEV3_ERROR_SHIFT)) & GPMI_STAT_DEV3_ERROR_MASK)
#define GPMI_STAT_DEV4_ERROR_MASK                (0x1000U)
#define GPMI_STAT_DEV4_ERROR_SHIFT               (12U)
#define GPMI_STAT_DEV4_ERROR(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_DEV4_ERROR_SHIFT)) & GPMI_STAT_DEV4_ERROR_MASK)
#define GPMI_STAT_DEV5_ERROR_MASK                (0x2000U)
#define GPMI_STAT_DEV5_ERROR_SHIFT               (13U)
#define GPMI_STAT_DEV5_ERROR(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_DEV5_ERROR_SHIFT)) & GPMI_STAT_DEV5_ERROR_MASK)
#define GPMI_STAT_DEV6_ERROR_MASK                (0x4000U)
#define GPMI_STAT_DEV6_ERROR_SHIFT               (14U)
#define GPMI_STAT_DEV6_ERROR(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_DEV6_ERROR_SHIFT)) & GPMI_STAT_DEV6_ERROR_MASK)
#define GPMI_STAT_DEV7_ERROR_MASK                (0x8000U)
#define GPMI_STAT_DEV7_ERROR_SHIFT               (15U)
#define GPMI_STAT_DEV7_ERROR(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_DEV7_ERROR_SHIFT)) & GPMI_STAT_DEV7_ERROR_MASK)
#define GPMI_STAT_RDY_TIMEOUT_MASK               (0xFF0000U)
#define GPMI_STAT_RDY_TIMEOUT_SHIFT              (16U)
#define GPMI_STAT_RDY_TIMEOUT(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_RDY_TIMEOUT_SHIFT)) & GPMI_STAT_RDY_TIMEOUT_MASK)
#define GPMI_STAT_READY_BUSY_MASK                (0xFF000000U)
#define GPMI_STAT_READY_BUSY_SHIFT               (24U)
#define GPMI_STAT_READY_BUSY(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_READY_BUSY_SHIFT)) & GPMI_STAT_READY_BUSY_MASK)

/*! @name DEBUG - GPMI Debug Information Register Description */
#define GPMI_DEBUG_CMD_END_MASK                  (0xFFU)
#define GPMI_DEBUG_CMD_END_SHIFT                 (0U)
#define GPMI_DEBUG_CMD_END(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_CMD_END_SHIFT)) & GPMI_DEBUG_CMD_END_MASK)
#define GPMI_DEBUG_DMAREQ_MASK                   (0xFF00U)
#define GPMI_DEBUG_DMAREQ_SHIFT                  (8U)
#define GPMI_DEBUG_DMAREQ(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_DMAREQ_SHIFT)) & GPMI_DEBUG_DMAREQ_MASK)
#define GPMI_DEBUG_DMA_SENSE_MASK                (0xFF0000U)
#define GPMI_DEBUG_DMA_SENSE_SHIFT               (16U)
#define GPMI_DEBUG_DMA_SENSE(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_DMA_SENSE_SHIFT)) & GPMI_DEBUG_DMA_SENSE_MASK)
#define GPMI_DEBUG_WAIT_FOR_READY_END_MASK       (0xFF000000U)
#define GPMI_DEBUG_WAIT_FOR_READY_END_SHIFT      (24U)
#define GPMI_DEBUG_WAIT_FOR_READY_END(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_WAIT_FOR_READY_END_SHIFT)) & GPMI_DEBUG_WAIT_FOR_READY_END_MASK)

/*! @name VERSION - GPMI Version Register Description */
#define GPMI_VERSION_STEP_MASK                   (0xFFFFU)
#define GPMI_VERSION_STEP_SHIFT                  (0U)
#define GPMI_VERSION_STEP(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_VERSION_STEP_SHIFT)) & GPMI_VERSION_STEP_MASK)
#define GPMI_VERSION_MINOR_MASK                  (0xFF0000U)
#define GPMI_VERSION_MINOR_SHIFT                 (16U)
#define GPMI_VERSION_MINOR(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_VERSION_MINOR_SHIFT)) & GPMI_VERSION_MINOR_MASK)
#define GPMI_VERSION_MAJOR_MASK                  (0xFF000000U)
#define GPMI_VERSION_MAJOR_SHIFT                 (24U)
#define GPMI_VERSION_MAJOR(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_VERSION_MAJOR_SHIFT)) & GPMI_VERSION_MAJOR_MASK)

/*! @name DEBUG2 - GPMI Debug2 Information Register Description */
#define GPMI_DEBUG2_RDN_TAP_MASK                 (0x3FU)
#define GPMI_DEBUG2_RDN_TAP_SHIFT                (0U)
#define GPMI_DEBUG2_RDN_TAP(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_RDN_TAP_SHIFT)) & GPMI_DEBUG2_RDN_TAP_MASK)
#define GPMI_DEBUG2_UPDATE_WINDOW_MASK           (0x40U)
#define GPMI_DEBUG2_UPDATE_WINDOW_SHIFT          (6U)
#define GPMI_DEBUG2_UPDATE_WINDOW(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_UPDATE_WINDOW_SHIFT)) & GPMI_DEBUG2_UPDATE_WINDOW_MASK)
#define GPMI_DEBUG2_VIEW_DELAYED_RDN_MASK        (0x80U)
#define GPMI_DEBUG2_VIEW_DELAYED_RDN_SHIFT       (7U)
#define GPMI_DEBUG2_VIEW_DELAYED_RDN(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_VIEW_DELAYED_RDN_SHIFT)) & GPMI_DEBUG2_VIEW_DELAYED_RDN_MASK)
#define GPMI_DEBUG2_SYND2GPMI_READY_MASK         (0x100U)
#define GPMI_DEBUG2_SYND2GPMI_READY_SHIFT        (8U)
#define GPMI_DEBUG2_SYND2GPMI_READY(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_SYND2GPMI_READY_SHIFT)) & GPMI_DEBUG2_SYND2GPMI_READY_MASK)
#define GPMI_DEBUG2_SYND2GPMI_VALID_MASK         (0x200U)
#define GPMI_DEBUG2_SYND2GPMI_VALID_SHIFT        (9U)
#define GPMI_DEBUG2_SYND2GPMI_VALID(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_SYND2GPMI_VALID_SHIFT)) & GPMI_DEBUG2_SYND2GPMI_VALID_MASK)
#define GPMI_DEBUG2_GPMI2SYND_READY_MASK         (0x400U)
#define GPMI_DEBUG2_GPMI2SYND_READY_SHIFT        (10U)
#define GPMI_DEBUG2_GPMI2SYND_READY(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_GPMI2SYND_READY_SHIFT)) & GPMI_DEBUG2_GPMI2SYND_READY_MASK)
#define GPMI_DEBUG2_GPMI2SYND_VALID_MASK         (0x800U)
#define GPMI_DEBUG2_GPMI2SYND_VALID_SHIFT        (11U)
#define GPMI_DEBUG2_GPMI2SYND_VALID(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_GPMI2SYND_VALID_SHIFT)) & GPMI_DEBUG2_GPMI2SYND_VALID_MASK)
#define GPMI_DEBUG2_SYND2GPMI_BE_MASK            (0xF000U)
#define GPMI_DEBUG2_SYND2GPMI_BE_SHIFT           (12U)
#define GPMI_DEBUG2_SYND2GPMI_BE(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_SYND2GPMI_BE_SHIFT)) & GPMI_DEBUG2_SYND2GPMI_BE_MASK)
#define GPMI_DEBUG2_MAIN_STATE_MASK              (0xF0000U)
#define GPMI_DEBUG2_MAIN_STATE_SHIFT             (16U)
#define GPMI_DEBUG2_MAIN_STATE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_MAIN_STATE_SHIFT)) & GPMI_DEBUG2_MAIN_STATE_MASK)
#define GPMI_DEBUG2_PIN_STATE_MASK               (0x700000U)
#define GPMI_DEBUG2_PIN_STATE_SHIFT              (20U)
#define GPMI_DEBUG2_PIN_STATE(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_PIN_STATE_SHIFT)) & GPMI_DEBUG2_PIN_STATE_MASK)
#define GPMI_DEBUG2_BUSY_MASK                    (0x800000U)
#define GPMI_DEBUG2_BUSY_SHIFT                   (23U)
#define GPMI_DEBUG2_BUSY(x)                      (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_BUSY_SHIFT)) & GPMI_DEBUG2_BUSY_MASK)
#define GPMI_DEBUG2_UDMA_STATE_MASK              (0xF000000U)
#define GPMI_DEBUG2_UDMA_STATE_SHIFT             (24U)
#define GPMI_DEBUG2_UDMA_STATE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_UDMA_STATE_SHIFT)) & GPMI_DEBUG2_UDMA_STATE_MASK)
#define GPMI_DEBUG2_RSVD1_MASK                   (0xF0000000U)
#define GPMI_DEBUG2_RSVD1_SHIFT                  (28U)
#define GPMI_DEBUG2_RSVD1(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_RSVD1_SHIFT)) & GPMI_DEBUG2_RSVD1_MASK)

/*! @name DEBUG3 - GPMI Debug3 Information Register Description */
#define GPMI_DEBUG3_DEV_WORD_CNTR_MASK           (0xFFFFU)
#define GPMI_DEBUG3_DEV_WORD_CNTR_SHIFT          (0U)
#define GPMI_DEBUG3_DEV_WORD_CNTR(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG3_DEV_WORD_CNTR_SHIFT)) & GPMI_DEBUG3_DEV_WORD_CNTR_MASK)
#define GPMI_DEBUG3_APB_WORD_CNTR_MASK           (0xFFFF0000U)
#define GPMI_DEBUG3_APB_WORD_CNTR_SHIFT          (16U)
#define GPMI_DEBUG3_APB_WORD_CNTR(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG3_APB_WORD_CNTR_SHIFT)) & GPMI_DEBUG3_APB_WORD_CNTR_MASK)

/*! @name READ_DDR_DLL_CTRL - GPMI Double Rate Read DLL Control Register Description */
#define GPMI_READ_DDR_DLL_CTRL_ENABLE_MASK       (0x1U)
#define GPMI_READ_DDR_DLL_CTRL_ENABLE_SHIFT      (0U)
#define GPMI_READ_DDR_DLL_CTRL_ENABLE(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_ENABLE_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_ENABLE_MASK)
#define GPMI_READ_DDR_DLL_CTRL_RESET_MASK        (0x2U)
#define GPMI_READ_DDR_DLL_CTRL_RESET_SHIFT       (1U)
#define GPMI_READ_DDR_DLL_CTRL_RESET(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_RESET_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_RESET_MASK)
#define GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD(x)  (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD_MASK)
#define GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK (0x78U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT (3U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK)
#define GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE_MASK  (0x80U)
#define GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE(x)    (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE_MASK)
#define GPMI_READ_DDR_DLL_CTRL_REFCLK_ON_MASK    (0x100U)
#define GPMI_READ_DDR_DLL_CTRL_REFCLK_ON_SHIFT   (8U)
#define GPMI_READ_DDR_DLL_CTRL_REFCLK_ON(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_REFCLK_ON_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_REFCLK_ON_MASK)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_MASK (0x200U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_SHIFT (9U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE(x)   (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_MASK)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0x3FC00U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (10U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define GPMI_READ_DDR_DLL_CTRL_RSVD1_MASK        (0xC0000U)
#define GPMI_READ_DDR_DLL_CTRL_RSVD1_SHIFT       (18U)
#define GPMI_READ_DDR_DLL_CTRL_RSVD1(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_RSVD1_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_RSVD1_MASK)
#define GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_MASK)

/*! @name WRITE_DDR_DLL_CTRL - GPMI Double Rate Write DLL Control Register Description */
#define GPMI_WRITE_DDR_DLL_CTRL_ENABLE_MASK      (0x1U)
#define GPMI_WRITE_DDR_DLL_CTRL_ENABLE_SHIFT     (0U)
#define GPMI_WRITE_DDR_DLL_CTRL_ENABLE(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_ENABLE_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_ENABLE_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_RESET_MASK       (0x2U)
#define GPMI_WRITE_DDR_DLL_CTRL_RESET_SHIFT      (1U)
#define GPMI_WRITE_DDR_DLL_CTRL_RESET(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_RESET_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_RESET_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK (0x78U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT (3U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE_MASK (0x80U)
#define GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE(x)   (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON_MASK   (0x100U)
#define GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON_SHIFT  (8U)
#define GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON(x)     (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_MASK (0x200U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_SHIFT (9U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE(x)  (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0x3FC00U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (10U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_RSVD1_MASK       (0xC0000U)
#define GPMI_WRITE_DDR_DLL_CTRL_RSVD1_SHIFT      (18U)
#define GPMI_WRITE_DDR_DLL_CTRL_RSVD1(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_RSVD1_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_RSVD1_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_MASK)

/*! @name READ_DDR_DLL_STS - GPMI Double Rate Read DLL Status Register Description */
#define GPMI_READ_DDR_DLL_STS_SLV_LOCK_MASK      (0x1U)
#define GPMI_READ_DDR_DLL_STS_SLV_LOCK_SHIFT     (0U)
#define GPMI_READ_DDR_DLL_STS_SLV_LOCK(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_SLV_LOCK_SHIFT)) & GPMI_READ_DDR_DLL_STS_SLV_LOCK_MASK)
#define GPMI_READ_DDR_DLL_STS_SLV_SEL_MASK       (0x1FEU)
#define GPMI_READ_DDR_DLL_STS_SLV_SEL_SHIFT      (1U)
#define GPMI_READ_DDR_DLL_STS_SLV_SEL(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_SLV_SEL_SHIFT)) & GPMI_READ_DDR_DLL_STS_SLV_SEL_MASK)
#define GPMI_READ_DDR_DLL_STS_RSVD0_MASK         (0xFE00U)
#define GPMI_READ_DDR_DLL_STS_RSVD0_SHIFT        (9U)
#define GPMI_READ_DDR_DLL_STS_RSVD0(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_RSVD0_SHIFT)) & GPMI_READ_DDR_DLL_STS_RSVD0_MASK)
#define GPMI_READ_DDR_DLL_STS_REF_LOCK_MASK      (0x10000U)
#define GPMI_READ_DDR_DLL_STS_REF_LOCK_SHIFT     (16U)
#define GPMI_READ_DDR_DLL_STS_REF_LOCK(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_REF_LOCK_SHIFT)) & GPMI_READ_DDR_DLL_STS_REF_LOCK_MASK)
#define GPMI_READ_DDR_DLL_STS_REF_SEL_MASK       (0x1FE0000U)
#define GPMI_READ_DDR_DLL_STS_REF_SEL_SHIFT      (17U)
#define GPMI_READ_DDR_DLL_STS_REF_SEL(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_REF_SEL_SHIFT)) & GPMI_READ_DDR_DLL_STS_REF_SEL_MASK)
#define GPMI_READ_DDR_DLL_STS_RSVD1_MASK         (0xFE000000U)
#define GPMI_READ_DDR_DLL_STS_RSVD1_SHIFT        (25U)
#define GPMI_READ_DDR_DLL_STS_RSVD1(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_RSVD1_SHIFT)) & GPMI_READ_DDR_DLL_STS_RSVD1_MASK)

/*! @name WRITE_DDR_DLL_STS - GPMI Double Rate Write DLL Status Register Description */
#define GPMI_WRITE_DDR_DLL_STS_SLV_LOCK_MASK     (0x1U)
#define GPMI_WRITE_DDR_DLL_STS_SLV_LOCK_SHIFT    (0U)
#define GPMI_WRITE_DDR_DLL_STS_SLV_LOCK(x)       (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_SLV_LOCK_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_SLV_LOCK_MASK)
#define GPMI_WRITE_DDR_DLL_STS_SLV_SEL_MASK      (0x1FEU)
#define GPMI_WRITE_DDR_DLL_STS_SLV_SEL_SHIFT     (1U)
#define GPMI_WRITE_DDR_DLL_STS_SLV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_SLV_SEL_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_SLV_SEL_MASK)
#define GPMI_WRITE_DDR_DLL_STS_RSVD0_MASK        (0xFE00U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD0_SHIFT       (9U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD0(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_RSVD0_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_RSVD0_MASK)
#define GPMI_WRITE_DDR_DLL_STS_REF_LOCK_MASK     (0x10000U)
#define GPMI_WRITE_DDR_DLL_STS_REF_LOCK_SHIFT    (16U)
#define GPMI_WRITE_DDR_DLL_STS_REF_LOCK(x)       (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_REF_LOCK_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_REF_LOCK_MASK)
#define GPMI_WRITE_DDR_DLL_STS_REF_SEL_MASK      (0x1FE0000U)
#define GPMI_WRITE_DDR_DLL_STS_REF_SEL_SHIFT     (17U)
#define GPMI_WRITE_DDR_DLL_STS_REF_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_REF_SEL_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_REF_SEL_MASK)
#define GPMI_WRITE_DDR_DLL_STS_RSVD1_MASK        (0xFE000000U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD1_SHIFT       (25U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD1(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_RSVD1_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_RSVD1_MASK)


/*!
 * @}
 */ /* end of group GPMI_Register_Masks */


/* GPMI - Peripheral instance base addresses */
/** Peripheral GPMI base address */
#define GPMI_BASE                                (0x33002000u)
/** Peripheral GPMI base pointer */
#define GPMI                                     ((GPMI_Type *)GPMI_BASE)
/** Array initializer of GPMI peripheral base addresses */
#define GPMI_BASE_ADDRS                          { GPMI_BASE }
/** Array initializer of GPMI peripheral base pointers */
#define GPMI_BASE_PTRS                           { GPMI }
/** Interrupt vectors for the GPMI peripheral type */
#define GPMI_IRQS                                { GPMI_IRQn }

/*!
 * @}
 */ /* end of group GPMI_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- GPT Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Peripheral_Access_Layer GPT Peripheral Access Layer
 * @{
 */

/** GPT - Register Layout Typedef */
typedef struct {
  __IO uint32_t CR;                                /**< GPT Control Register, offset: 0x0 */
  __IO uint32_t PR;                                /**< GPT Prescaler Register, offset: 0x4 */
  __IO uint32_t SR;                                /**< GPT Status Register, offset: 0x8 */
  __IO uint32_t IR;                                /**< GPT Interrupt Register, offset: 0xC */
  __IO uint32_t OCR[3];                            /**< GPT Output Compare Register 1..GPT Output Compare Register 3, array offset: 0x10, array step: 0x4 */
  __I  uint32_t ICR[2];                            /**< GPT Input Capture Register 1..GPT Input Capture Register 2, array offset: 0x1C, array step: 0x4 */
  __I  uint32_t CNT;                               /**< GPT Counter Register, offset: 0x24 */
} GPT_Type;

/* ----------------------------------------------------------------------------
   -- GPT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Masks GPT Register Masks
 * @{
 */

/*! @name CR - GPT Control Register */
#define GPT_CR_EN_MASK                           (0x1U)
#define GPT_CR_EN_SHIFT                          (0U)
#define GPT_CR_EN(x)                             (((uint32_t)(((uint32_t)(x)) << GPT_CR_EN_SHIFT)) & GPT_CR_EN_MASK)
#define GPT_CR_ENMOD_MASK                        (0x2U)
#define GPT_CR_ENMOD_SHIFT                       (1U)
#define GPT_CR_ENMOD(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_CR_ENMOD_SHIFT)) & GPT_CR_ENMOD_MASK)
#define GPT_CR_DBGEN_MASK                        (0x4U)
#define GPT_CR_DBGEN_SHIFT                       (2U)
#define GPT_CR_DBGEN(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_CR_DBGEN_SHIFT)) & GPT_CR_DBGEN_MASK)
#define GPT_CR_WAITEN_MASK                       (0x8U)
#define GPT_CR_WAITEN_SHIFT                      (3U)
#define GPT_CR_WAITEN(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CR_WAITEN_SHIFT)) & GPT_CR_WAITEN_MASK)
#define GPT_CR_DOZEEN_MASK                       (0x10U)
#define GPT_CR_DOZEEN_SHIFT                      (4U)
#define GPT_CR_DOZEEN(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CR_DOZEEN_SHIFT)) & GPT_CR_DOZEEN_MASK)
#define GPT_CR_STOPEN_MASK                       (0x20U)
#define GPT_CR_STOPEN_SHIFT                      (5U)
#define GPT_CR_STOPEN(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CR_STOPEN_SHIFT)) & GPT_CR_STOPEN_MASK)
#define GPT_CR_CLKSRC_MASK                       (0x1C0U)
#define GPT_CR_CLKSRC_SHIFT                      (6U)
#define GPT_CR_CLKSRC(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CR_CLKSRC_SHIFT)) & GPT_CR_CLKSRC_MASK)
#define GPT_CR_FRR_MASK                          (0x200U)
#define GPT_CR_FRR_SHIFT                         (9U)
#define GPT_CR_FRR(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_FRR_SHIFT)) & GPT_CR_FRR_MASK)
#define GPT_CR_EN_24M_MASK                       (0x400U)
#define GPT_CR_EN_24M_SHIFT                      (10U)
#define GPT_CR_EN_24M(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CR_EN_24M_SHIFT)) & GPT_CR_EN_24M_MASK)
#define GPT_CR_SWR_MASK                          (0x8000U)
#define GPT_CR_SWR_SHIFT                         (15U)
#define GPT_CR_SWR(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_SWR_SHIFT)) & GPT_CR_SWR_MASK)
#define GPT_CR_IM1_MASK                          (0x30000U)
#define GPT_CR_IM1_SHIFT                         (16U)
#define GPT_CR_IM1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_IM1_SHIFT)) & GPT_CR_IM1_MASK)
#define GPT_CR_IM2_MASK                          (0xC0000U)
#define GPT_CR_IM2_SHIFT                         (18U)
#define GPT_CR_IM2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_IM2_SHIFT)) & GPT_CR_IM2_MASK)
#define GPT_CR_OM1_MASK                          (0x700000U)
#define GPT_CR_OM1_SHIFT                         (20U)
#define GPT_CR_OM1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM1_SHIFT)) & GPT_CR_OM1_MASK)
#define GPT_CR_OM2_MASK                          (0x3800000U)
#define GPT_CR_OM2_SHIFT                         (23U)
#define GPT_CR_OM2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM2_SHIFT)) & GPT_CR_OM2_MASK)
#define GPT_CR_OM3_MASK                          (0x1C000000U)
#define GPT_CR_OM3_SHIFT                         (26U)
#define GPT_CR_OM3(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM3_SHIFT)) & GPT_CR_OM3_MASK)
#define GPT_CR_FO1_MASK                          (0x20000000U)
#define GPT_CR_FO1_SHIFT                         (29U)
#define GPT_CR_FO1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_FO1_SHIFT)) & GPT_CR_FO1_MASK)
#define GPT_CR_FO2_MASK                          (0x40000000U)
#define GPT_CR_FO2_SHIFT                         (30U)
#define GPT_CR_FO2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_FO2_SHIFT)) & GPT_CR_FO2_MASK)
#define GPT_CR_FO3_MASK                          (0x80000000U)
#define GPT_CR_FO3_SHIFT                         (31U)
#define GPT_CR_FO3(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_FO3_SHIFT)) & GPT_CR_FO3_MASK)

/*! @name PR - GPT Prescaler Register */
#define GPT_PR_PRESCALER_MASK                    (0xFFFU)
#define GPT_PR_PRESCALER_SHIFT                   (0U)
#define GPT_PR_PRESCALER(x)                      (((uint32_t)(((uint32_t)(x)) << GPT_PR_PRESCALER_SHIFT)) & GPT_PR_PRESCALER_MASK)
#define GPT_PR_PRESCALER24M_MASK                 (0xF000U)
#define GPT_PR_PRESCALER24M_SHIFT                (12U)
#define GPT_PR_PRESCALER24M(x)                   (((uint32_t)(((uint32_t)(x)) << GPT_PR_PRESCALER24M_SHIFT)) & GPT_PR_PRESCALER24M_MASK)

/*! @name SR - GPT Status Register */
#define GPT_SR_OF1_MASK                          (0x1U)
#define GPT_SR_OF1_SHIFT                         (0U)
#define GPT_SR_OF1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_SR_OF1_SHIFT)) & GPT_SR_OF1_MASK)
#define GPT_SR_OF2_MASK                          (0x2U)
#define GPT_SR_OF2_SHIFT                         (1U)
#define GPT_SR_OF2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_SR_OF2_SHIFT)) & GPT_SR_OF2_MASK)
#define GPT_SR_OF3_MASK                          (0x4U)
#define GPT_SR_OF3_SHIFT                         (2U)
#define GPT_SR_OF3(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_SR_OF3_SHIFT)) & GPT_SR_OF3_MASK)
#define GPT_SR_IF1_MASK                          (0x8U)
#define GPT_SR_IF1_SHIFT                         (3U)
#define GPT_SR_IF1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_SR_IF1_SHIFT)) & GPT_SR_IF1_MASK)
#define GPT_SR_IF2_MASK                          (0x10U)
#define GPT_SR_IF2_SHIFT                         (4U)
#define GPT_SR_IF2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_SR_IF2_SHIFT)) & GPT_SR_IF2_MASK)
#define GPT_SR_ROV_MASK                          (0x20U)
#define GPT_SR_ROV_SHIFT                         (5U)
#define GPT_SR_ROV(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_SR_ROV_SHIFT)) & GPT_SR_ROV_MASK)

/*! @name IR - GPT Interrupt Register */
#define GPT_IR_OF1IE_MASK                        (0x1U)
#define GPT_IR_OF1IE_SHIFT                       (0U)
#define GPT_IR_OF1IE(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_IR_OF1IE_SHIFT)) & GPT_IR_OF1IE_MASK)
#define GPT_IR_OF2IE_MASK                        (0x2U)
#define GPT_IR_OF2IE_SHIFT                       (1U)
#define GPT_IR_OF2IE(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_IR_OF2IE_SHIFT)) & GPT_IR_OF2IE_MASK)
#define GPT_IR_OF3IE_MASK                        (0x4U)
#define GPT_IR_OF3IE_SHIFT                       (2U)
#define GPT_IR_OF3IE(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_IR_OF3IE_SHIFT)) & GPT_IR_OF3IE_MASK)
#define GPT_IR_IF1IE_MASK                        (0x8U)
#define GPT_IR_IF1IE_SHIFT                       (3U)
#define GPT_IR_IF1IE(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_IR_IF1IE_SHIFT)) & GPT_IR_IF1IE_MASK)
#define GPT_IR_IF2IE_MASK                        (0x10U)
#define GPT_IR_IF2IE_SHIFT                       (4U)
#define GPT_IR_IF2IE(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_IR_IF2IE_SHIFT)) & GPT_IR_IF2IE_MASK)
#define GPT_IR_ROVIE_MASK                        (0x20U)
#define GPT_IR_ROVIE_SHIFT                       (5U)
#define GPT_IR_ROVIE(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_IR_ROVIE_SHIFT)) & GPT_IR_ROVIE_MASK)

/*! @name OCR - GPT Output Compare Register 1..GPT Output Compare Register 3 */
#define GPT_OCR_COMP_MASK                        (0xFFFFFFFFU)
#define GPT_OCR_COMP_SHIFT                       (0U)
#define GPT_OCR_COMP(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_OCR_COMP_SHIFT)) & GPT_OCR_COMP_MASK)

/* The count of GPT_OCR */
#define GPT_OCR_COUNT                            (3U)

/*! @name ICR - GPT Input Capture Register 1..GPT Input Capture Register 2 */
#define GPT_ICR_CAPT_MASK                        (0xFFFFFFFFU)
#define GPT_ICR_CAPT_SHIFT                       (0U)
#define GPT_ICR_CAPT(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_ICR_CAPT_SHIFT)) & GPT_ICR_CAPT_MASK)

/* The count of GPT_ICR */
#define GPT_ICR_COUNT                            (2U)

/*! @name CNT - GPT Counter Register */
#define GPT_CNT_COUNT_MASK                       (0xFFFFFFFFU)
#define GPT_CNT_COUNT_SHIFT                      (0U)
#define GPT_CNT_COUNT(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CNT_COUNT_SHIFT)) & GPT_CNT_COUNT_MASK)


/*!
 * @}
 */ /* end of group GPT_Register_Masks */


/* GPT - Peripheral instance base addresses */
/** Peripheral GPT1 base address */
#define GPT1_BASE                                (0x302D0000u)
/** Peripheral GPT1 base pointer */
#define GPT1                                     ((GPT_Type *)GPT1_BASE)
/** Peripheral GPT2 base address */
#define GPT2_BASE                                (0x302E0000u)
/** Peripheral GPT2 base pointer */
#define GPT2                                     ((GPT_Type *)GPT2_BASE)
/** Peripheral GPT3 base address */
#define GPT3_BASE                                (0x302F0000u)
/** Peripheral GPT3 base pointer */
#define GPT3                                     ((GPT_Type *)GPT3_BASE)
/** Peripheral GPT4 base address */
#define GPT4_BASE                                (0x30700000u)
/** Peripheral GPT4 base pointer */
#define GPT4                                     ((GPT_Type *)GPT4_BASE)
/** Peripheral GPT5 base address */
#define GPT5_BASE                                (0x306F0000u)
/** Peripheral GPT5 base pointer */
#define GPT5                                     ((GPT_Type *)GPT5_BASE)
/** Peripheral GPT6 base address */
#define GPT6_BASE                                (0x306E0000u)
/** Peripheral GPT6 base pointer */
#define GPT6                                     ((GPT_Type *)GPT6_BASE)
/** Array initializer of GPT peripheral base addresses */
#define GPT_BASE_ADDRS                           { 0u, GPT1_BASE, GPT2_BASE, GPT3_BASE, GPT4_BASE, GPT5_BASE, GPT6_BASE }
/** Array initializer of GPT peripheral base pointers */
#define GPT_BASE_PTRS                            { (GPT_Type *)0u, GPT1, GPT2, GPT3, GPT4, GPT5, GPT6 }
/** Interrupt vectors for the GPT peripheral type */
#define GPT_IRQS                                 { NotAvail_IRQn, GPT1_IRQn, GPT2_IRQn, GPT3_IRQn, GPT4_IRQn, GPT5_IRQn, GPT6_IRQn }

/*!
 * @}
 */ /* end of group GPT_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- I2C Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Peripheral_Access_Layer I2C Peripheral Access Layer
 * @{
 */

/** I2C - Register Layout Typedef */
typedef struct {
  __IO uint16_t IADR;                              /**< I2C Address Register, offset: 0x0 */
       uint8_t RESERVED_0[2];
  __IO uint16_t IFDR;                              /**< I2C Frequency Divider Register, offset: 0x4 */
       uint8_t RESERVED_1[2];
  __IO uint16_t I2CR;                              /**< I2C Control Register, offset: 0x8 */
       uint8_t RESERVED_2[2];
  __IO uint16_t I2SR;                              /**< I2C Status Register, offset: 0xC */
       uint8_t RESERVED_3[2];
  __IO uint16_t I2DR;                              /**< I2C Data I/O Register, offset: 0x10 */
} I2C_Type;

/* ----------------------------------------------------------------------------
   -- I2C Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Masks I2C Register Masks
 * @{
 */

/*! @name IADR - I2C Address Register */
#define I2C_IADR_ADR_MASK                        (0xFEU)
#define I2C_IADR_ADR_SHIFT                       (1U)
#define I2C_IADR_ADR(x)                          (((uint16_t)(((uint16_t)(x)) << I2C_IADR_ADR_SHIFT)) & I2C_IADR_ADR_MASK)

/*! @name IFDR - I2C Frequency Divider Register */
#define I2C_IFDR_IC_MASK                         (0x3FU)
#define I2C_IFDR_IC_SHIFT                        (0U)
#define I2C_IFDR_IC(x)                           (((uint16_t)(((uint16_t)(x)) << I2C_IFDR_IC_SHIFT)) & I2C_IFDR_IC_MASK)

/*! @name I2CR - I2C Control Register */
#define I2C_I2CR_RSTA_MASK                       (0x4U)
#define I2C_I2CR_RSTA_SHIFT                      (2U)
#define I2C_I2CR_RSTA(x)                         (((uint16_t)(((uint16_t)(x)) << I2C_I2CR_RSTA_SHIFT)) & I2C_I2CR_RSTA_MASK)
#define I2C_I2CR_TXAK_MASK                       (0x8U)
#define I2C_I2CR_TXAK_SHIFT                      (3U)
#define I2C_I2CR_TXAK(x)                         (((uint16_t)(((uint16_t)(x)) << I2C_I2CR_TXAK_SHIFT)) & I2C_I2CR_TXAK_MASK)
#define I2C_I2CR_MTX_MASK                        (0x10U)
#define I2C_I2CR_MTX_SHIFT                       (4U)
#define I2C_I2CR_MTX(x)                          (((uint16_t)(((uint16_t)(x)) << I2C_I2CR_MTX_SHIFT)) & I2C_I2CR_MTX_MASK)
#define I2C_I2CR_MSTA_MASK                       (0x20U)
#define I2C_I2CR_MSTA_SHIFT                      (5U)
#define I2C_I2CR_MSTA(x)                         (((uint16_t)(((uint16_t)(x)) << I2C_I2CR_MSTA_SHIFT)) & I2C_I2CR_MSTA_MASK)
#define I2C_I2CR_IIEN_MASK                       (0x40U)
#define I2C_I2CR_IIEN_SHIFT                      (6U)
#define I2C_I2CR_IIEN(x)                         (((uint16_t)(((uint16_t)(x)) << I2C_I2CR_IIEN_SHIFT)) & I2C_I2CR_IIEN_MASK)
#define I2C_I2CR_IEN_MASK                        (0x80U)
#define I2C_I2CR_IEN_SHIFT                       (7U)
#define I2C_I2CR_IEN(x)                          (((uint16_t)(((uint16_t)(x)) << I2C_I2CR_IEN_SHIFT)) & I2C_I2CR_IEN_MASK)

/*! @name I2SR - I2C Status Register */
#define I2C_I2SR_RXAK_MASK                       (0x1U)
#define I2C_I2SR_RXAK_SHIFT                      (0U)
#define I2C_I2SR_RXAK(x)                         (((uint16_t)(((uint16_t)(x)) << I2C_I2SR_RXAK_SHIFT)) & I2C_I2SR_RXAK_MASK)
#define I2C_I2SR_IIF_MASK                        (0x2U)
#define I2C_I2SR_IIF_SHIFT                       (1U)
#define I2C_I2SR_IIF(x)                          (((uint16_t)(((uint16_t)(x)) << I2C_I2SR_IIF_SHIFT)) & I2C_I2SR_IIF_MASK)
#define I2C_I2SR_SRW_MASK                        (0x4U)
#define I2C_I2SR_SRW_SHIFT                       (2U)
#define I2C_I2SR_SRW(x)                          (((uint16_t)(((uint16_t)(x)) << I2C_I2SR_SRW_SHIFT)) & I2C_I2SR_SRW_MASK)
#define I2C_I2SR_IAL_MASK                        (0x10U)
#define I2C_I2SR_IAL_SHIFT                       (4U)
#define I2C_I2SR_IAL(x)                          (((uint16_t)(((uint16_t)(x)) << I2C_I2SR_IAL_SHIFT)) & I2C_I2SR_IAL_MASK)
#define I2C_I2SR_IBB_MASK                        (0x20U)
#define I2C_I2SR_IBB_SHIFT                       (5U)
#define I2C_I2SR_IBB(x)                          (((uint16_t)(((uint16_t)(x)) << I2C_I2SR_IBB_SHIFT)) & I2C_I2SR_IBB_MASK)
#define I2C_I2SR_IAAS_MASK                       (0x40U)
#define I2C_I2SR_IAAS_SHIFT                      (6U)
#define I2C_I2SR_IAAS(x)                         (((uint16_t)(((uint16_t)(x)) << I2C_I2SR_IAAS_SHIFT)) & I2C_I2SR_IAAS_MASK)
#define I2C_I2SR_ICF_MASK                        (0x80U)
#define I2C_I2SR_ICF_SHIFT                       (7U)
#define I2C_I2SR_ICF(x)                          (((uint16_t)(((uint16_t)(x)) << I2C_I2SR_ICF_SHIFT)) & I2C_I2SR_ICF_MASK)

/*! @name I2DR - I2C Data I/O Register */
#define I2C_I2DR_DATA_MASK                       (0xFFU)
#define I2C_I2DR_DATA_SHIFT                      (0U)
#define I2C_I2DR_DATA(x)                         (((uint16_t)(((uint16_t)(x)) << I2C_I2DR_DATA_SHIFT)) & I2C_I2DR_DATA_MASK)


/*!
 * @}
 */ /* end of group I2C_Register_Masks */


/* I2C - Peripheral instance base addresses */
/** Peripheral I2C1 base address */
#define I2C1_BASE                                (0x30A20000u)
/** Peripheral I2C1 base pointer */
#define I2C1                                     ((I2C_Type *)I2C1_BASE)
/** Peripheral I2C2 base address */
#define I2C2_BASE                                (0x30A30000u)
/** Peripheral I2C2 base pointer */
#define I2C2                                     ((I2C_Type *)I2C2_BASE)
/** Peripheral I2C3 base address */
#define I2C3_BASE                                (0x30A40000u)
/** Peripheral I2C3 base pointer */
#define I2C3                                     ((I2C_Type *)I2C3_BASE)
/** Peripheral I2C4 base address */
#define I2C4_BASE                                (0x30A50000u)
/** Peripheral I2C4 base pointer */
#define I2C4                                     ((I2C_Type *)I2C4_BASE)
/** Array initializer of I2C peripheral base addresses */
#define I2C_BASE_ADDRS                           { 0u, I2C1_BASE, I2C2_BASE, I2C3_BASE, I2C4_BASE }
/** Array initializer of I2C peripheral base pointers */
#define I2C_BASE_PTRS                            { (I2C_Type *)0u, I2C1, I2C2, I2C3, I2C4 }
/** Interrupt vectors for the I2C peripheral type */
#define I2C_IRQS                                 { NotAvail_IRQn, I2C1_IRQn, I2C2_IRQn, I2C3_IRQn, I2C4_IRQn }

/*!
 * @}
 */ /* end of group I2C_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- I2S Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Peripheral_Access_Layer I2S Peripheral Access Layer
 * @{
 */

/** I2S - Register Layout Typedef */
typedef struct {
  __I  uint32_t VERID;                             /**< Version ID Register, offset: 0x0 */
  __I  uint32_t PARAM;                             /**< Parameter Register, offset: 0x4 */
  __IO uint32_t TCSR;                              /**< SAI Transmit Control Register, offset: 0x8 */
  __IO uint32_t TCR1;                              /**< SAI Transmit Configuration 1 Register, offset: 0xC */
  __IO uint32_t TCR2;                              /**< SAI Transmit Configuration 2 Register, offset: 0x10 */
  __IO uint32_t TCR3;                              /**< SAI Transmit Configuration 3 Register, offset: 0x14 */
  __IO uint32_t TCR4;                              /**< SAI Transmit Configuration 4 Register, offset: 0x18 */
  __IO uint32_t TCR5;                              /**< SAI Transmit Configuration 5 Register, offset: 0x1C */
  __O  uint32_t TDR[8];                            /**< SAI Transmit Data Register, array offset: 0x20, array step: 0x4 */
  __I  uint32_t TFR[8];                            /**< SAI Transmit FIFO Register, array offset: 0x40, array step: 0x4 */
  __IO uint32_t TMR;                               /**< SAI Transmit Mask Register, offset: 0x60 */
       uint8_t RESERVED_0[36];
  __IO uint32_t RCSR;                              /**< SAI Receive Control Register, offset: 0x88 */
  __IO uint32_t RCR1;                              /**< SAI Receive Configuration 1 Register, offset: 0x8C */
  __IO uint32_t RCR2;                              /**< SAI Receive Configuration 2 Register, offset: 0x90 */
  __IO uint32_t RCR3;                              /**< SAI Receive Configuration 3 Register, offset: 0x94 */
  __IO uint32_t RCR4;                              /**< SAI Receive Configuration 4 Register, offset: 0x98 */
  __IO uint32_t RCR5;                              /**< SAI Receive Configuration 5 Register, offset: 0x9C */
  __I  uint32_t RDR[8];                            /**< SAI Receive Data Register, array offset: 0xA0, array step: 0x4 */
  __I  uint32_t RFR[8];                            /**< SAI Receive FIFO Register, array offset: 0xC0, array step: 0x4 */
  __IO uint32_t RMR;                               /**< SAI Receive Mask Register, offset: 0xE0 */
} I2S_Type;

/* ----------------------------------------------------------------------------
   -- I2S Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Masks I2S Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
#define I2S_VERID_FEATURE_MASK                   (0xFFFFU)
#define I2S_VERID_FEATURE_SHIFT                  (0U)
#define I2S_VERID_FEATURE(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_VERID_FEATURE_SHIFT)) & I2S_VERID_FEATURE_MASK)
#define I2S_VERID_MINOR_MASK                     (0xFF0000U)
#define I2S_VERID_MINOR_SHIFT                    (16U)
#define I2S_VERID_MINOR(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_VERID_MINOR_SHIFT)) & I2S_VERID_MINOR_MASK)
#define I2S_VERID_MAJOR_MASK                     (0xFF000000U)
#define I2S_VERID_MAJOR_SHIFT                    (24U)
#define I2S_VERID_MAJOR(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_VERID_MAJOR_SHIFT)) & I2S_VERID_MAJOR_MASK)

/*! @name PARAM - Parameter Register */
#define I2S_PARAM_DATALINE_MASK                  (0xFU)
#define I2S_PARAM_DATALINE_SHIFT                 (0U)
#define I2S_PARAM_DATALINE(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_DATALINE_SHIFT)) & I2S_PARAM_DATALINE_MASK)
#define I2S_PARAM_FIFO_MASK                      (0xF00U)
#define I2S_PARAM_FIFO_SHIFT                     (8U)
#define I2S_PARAM_FIFO(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_FIFO_SHIFT)) & I2S_PARAM_FIFO_MASK)
#define I2S_PARAM_FRAME_MASK                     (0xF0000U)
#define I2S_PARAM_FRAME_SHIFT                    (16U)
#define I2S_PARAM_FRAME(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_FRAME_SHIFT)) & I2S_PARAM_FRAME_MASK)

/*! @name TCSR - SAI Transmit Control Register */
#define I2S_TCSR_FRDE_MASK                       (0x1U)
#define I2S_TCSR_FRDE_SHIFT                      (0U)
#define I2S_TCSR_FRDE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_FRDE_SHIFT)) & I2S_TCSR_FRDE_MASK)
#define I2S_TCSR_FWDE_MASK                       (0x2U)
#define I2S_TCSR_FWDE_SHIFT                      (1U)
#define I2S_TCSR_FWDE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_FWDE_SHIFT)) & I2S_TCSR_FWDE_MASK)
#define I2S_TCSR_FRIE_MASK                       (0x100U)
#define I2S_TCSR_FRIE_SHIFT                      (8U)
#define I2S_TCSR_FRIE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_FRIE_SHIFT)) & I2S_TCSR_FRIE_MASK)
#define I2S_TCSR_FWIE_MASK                       (0x200U)
#define I2S_TCSR_FWIE_SHIFT                      (9U)
#define I2S_TCSR_FWIE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_FWIE_SHIFT)) & I2S_TCSR_FWIE_MASK)
#define I2S_TCSR_FEIE_MASK                       (0x400U)
#define I2S_TCSR_FEIE_SHIFT                      (10U)
#define I2S_TCSR_FEIE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_FEIE_SHIFT)) & I2S_TCSR_FEIE_MASK)
#define I2S_TCSR_SEIE_MASK                       (0x800U)
#define I2S_TCSR_SEIE_SHIFT                      (11U)
#define I2S_TCSR_SEIE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_SEIE_SHIFT)) & I2S_TCSR_SEIE_MASK)
#define I2S_TCSR_WSIE_MASK                       (0x1000U)
#define I2S_TCSR_WSIE_SHIFT                      (12U)
#define I2S_TCSR_WSIE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_WSIE_SHIFT)) & I2S_TCSR_WSIE_MASK)
#define I2S_TCSR_FRF_MASK                        (0x10000U)
#define I2S_TCSR_FRF_SHIFT                       (16U)
#define I2S_TCSR_FRF(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_FRF_SHIFT)) & I2S_TCSR_FRF_MASK)
#define I2S_TCSR_FWF_MASK                        (0x20000U)
#define I2S_TCSR_FWF_SHIFT                       (17U)
#define I2S_TCSR_FWF(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_FWF_SHIFT)) & I2S_TCSR_FWF_MASK)
#define I2S_TCSR_FEF_MASK                        (0x40000U)
#define I2S_TCSR_FEF_SHIFT                       (18U)
#define I2S_TCSR_FEF(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_FEF_SHIFT)) & I2S_TCSR_FEF_MASK)
#define I2S_TCSR_SEF_MASK                        (0x80000U)
#define I2S_TCSR_SEF_SHIFT                       (19U)
#define I2S_TCSR_SEF(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_SEF_SHIFT)) & I2S_TCSR_SEF_MASK)
#define I2S_TCSR_WSF_MASK                        (0x100000U)
#define I2S_TCSR_WSF_SHIFT                       (20U)
#define I2S_TCSR_WSF(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_WSF_SHIFT)) & I2S_TCSR_WSF_MASK)
#define I2S_TCSR_SR_MASK                         (0x1000000U)
#define I2S_TCSR_SR_SHIFT                        (24U)
#define I2S_TCSR_SR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_SR_SHIFT)) & I2S_TCSR_SR_MASK)
#define I2S_TCSR_FR_MASK                         (0x2000000U)
#define I2S_TCSR_FR_SHIFT                        (25U)
#define I2S_TCSR_FR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_FR_SHIFT)) & I2S_TCSR_FR_MASK)
#define I2S_TCSR_BCE_MASK                        (0x10000000U)
#define I2S_TCSR_BCE_SHIFT                       (28U)
#define I2S_TCSR_BCE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_BCE_SHIFT)) & I2S_TCSR_BCE_MASK)
#define I2S_TCSR_DBGE_MASK                       (0x20000000U)
#define I2S_TCSR_DBGE_SHIFT                      (29U)
#define I2S_TCSR_DBGE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_DBGE_SHIFT)) & I2S_TCSR_DBGE_MASK)
#define I2S_TCSR_TE_MASK                         (0x80000000U)
#define I2S_TCSR_TE_SHIFT                        (31U)
#define I2S_TCSR_TE(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TCSR_TE_SHIFT)) & I2S_TCSR_TE_MASK)

/*! @name TCR1 - SAI Transmit Configuration 1 Register */
#define I2S_TCR1_TFW_MASK                        (0x7FU)
#define I2S_TCR1_TFW_SHIFT                       (0U)
#define I2S_TCR1_TFW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR1_TFW_SHIFT)) & I2S_TCR1_TFW_MASK)

/*! @name TCR2 - SAI Transmit Configuration 2 Register */
#define I2S_TCR2_DIV_MASK                        (0xFFU)
#define I2S_TCR2_DIV_SHIFT                       (0U)
#define I2S_TCR2_DIV(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_DIV_SHIFT)) & I2S_TCR2_DIV_MASK)
#define I2S_TCR2_BCD_MASK                        (0x1000000U)
#define I2S_TCR2_BCD_SHIFT                       (24U)
#define I2S_TCR2_BCD(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_BCD_SHIFT)) & I2S_TCR2_BCD_MASK)
#define I2S_TCR2_BCP_MASK                        (0x2000000U)
#define I2S_TCR2_BCP_SHIFT                       (25U)
#define I2S_TCR2_BCP(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_BCP_SHIFT)) & I2S_TCR2_BCP_MASK)
#define I2S_TCR2_MSEL_MASK                       (0xC000000U)
#define I2S_TCR2_MSEL_SHIFT                      (26U)
#define I2S_TCR2_MSEL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_MSEL_SHIFT)) & I2S_TCR2_MSEL_MASK)
#define I2S_TCR2_BCI_MASK                        (0x10000000U)
#define I2S_TCR2_BCI_SHIFT                       (28U)
#define I2S_TCR2_BCI(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_BCI_SHIFT)) & I2S_TCR2_BCI_MASK)
#define I2S_TCR2_BCS_MASK                        (0x20000000U)
#define I2S_TCR2_BCS_SHIFT                       (29U)
#define I2S_TCR2_BCS(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_BCS_SHIFT)) & I2S_TCR2_BCS_MASK)
#define I2S_TCR2_SYNC_MASK                       (0xC0000000U)
#define I2S_TCR2_SYNC_SHIFT                      (30U)
#define I2S_TCR2_SYNC(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_SYNC_SHIFT)) & I2S_TCR2_SYNC_MASK)

/*! @name TCR3 - SAI Transmit Configuration 3 Register */
#define I2S_TCR3_WDFL_MASK                       (0x1FU)
#define I2S_TCR3_WDFL_SHIFT                      (0U)
#define I2S_TCR3_WDFL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_WDFL_SHIFT)) & I2S_TCR3_WDFL_MASK)
#define I2S_TCR3_TCE_MASK                        (0xFF0000U)  /* Merged from fields with different position or width, of widths (1, 8), largest definition used */
#define I2S_TCR3_TCE_SHIFT                       (16U)
#define I2S_TCR3_TCE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_TCE_SHIFT)) & I2S_TCR3_TCE_MASK)  /* Merged from fields with different position or width, of widths (1, 8), largest definition used */
#define I2S_TCR3_CFR_MASK                        (0xFF000000U)
#define I2S_TCR3_CFR_SHIFT                       (24U)
#define I2S_TCR3_CFR(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_CFR_SHIFT)) & I2S_TCR3_CFR_MASK)

/*! @name TCR4 - SAI Transmit Configuration 4 Register */
#define I2S_TCR4_FSD_MASK                        (0x1U)
#define I2S_TCR4_FSD_SHIFT                       (0U)
#define I2S_TCR4_FSD(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FSD_SHIFT)) & I2S_TCR4_FSD_MASK)
#define I2S_TCR4_FSP_MASK                        (0x2U)
#define I2S_TCR4_FSP_SHIFT                       (1U)
#define I2S_TCR4_FSP(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FSP_SHIFT)) & I2S_TCR4_FSP_MASK)
#define I2S_TCR4_ONDEM_MASK                      (0x4U)
#define I2S_TCR4_ONDEM_SHIFT                     (2U)
#define I2S_TCR4_ONDEM(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_ONDEM_SHIFT)) & I2S_TCR4_ONDEM_MASK)
#define I2S_TCR4_FSE_MASK                        (0x8U)
#define I2S_TCR4_FSE_SHIFT                       (3U)
#define I2S_TCR4_FSE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FSE_SHIFT)) & I2S_TCR4_FSE_MASK)
#define I2S_TCR4_MF_MASK                         (0x10U)
#define I2S_TCR4_MF_SHIFT                        (4U)
#define I2S_TCR4_MF(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_MF_SHIFT)) & I2S_TCR4_MF_MASK)
#define I2S_TCR4_CHMOD_MASK                      (0x20U)
#define I2S_TCR4_CHMOD_SHIFT                     (5U)
#define I2S_TCR4_CHMOD(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_CHMOD_SHIFT)) & I2S_TCR4_CHMOD_MASK)
#define I2S_TCR4_SYWD_MASK                       (0x1F00U)
#define I2S_TCR4_SYWD_SHIFT                      (8U)
#define I2S_TCR4_SYWD(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_SYWD_SHIFT)) & I2S_TCR4_SYWD_MASK)
#define I2S_TCR4_FRSZ_MASK                       (0x1F0000U)
#define I2S_TCR4_FRSZ_SHIFT                      (16U)
#define I2S_TCR4_FRSZ(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FRSZ_SHIFT)) & I2S_TCR4_FRSZ_MASK)
#define I2S_TCR4_FPACK_MASK                      (0x3000000U)
#define I2S_TCR4_FPACK_SHIFT                     (24U)
#define I2S_TCR4_FPACK(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FPACK_SHIFT)) & I2S_TCR4_FPACK_MASK)
#define I2S_TCR4_FCOMB_MASK                      (0xC000000U)
#define I2S_TCR4_FCOMB_SHIFT                     (26U)
#define I2S_TCR4_FCOMB(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FCOMB_SHIFT)) & I2S_TCR4_FCOMB_MASK)
#define I2S_TCR4_FCONT_MASK                      (0x10000000U)
#define I2S_TCR4_FCONT_SHIFT                     (28U)
#define I2S_TCR4_FCONT(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FCONT_SHIFT)) & I2S_TCR4_FCONT_MASK)

/*! @name TCR5 - SAI Transmit Configuration 5 Register */
#define I2S_TCR5_FBT_MASK                        (0x1F00U)
#define I2S_TCR5_FBT_SHIFT                       (8U)
#define I2S_TCR5_FBT(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_FBT_SHIFT)) & I2S_TCR5_FBT_MASK)
#define I2S_TCR5_W0W_MASK                        (0x1F0000U)
#define I2S_TCR5_W0W_SHIFT                       (16U)
#define I2S_TCR5_W0W(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_W0W_SHIFT)) & I2S_TCR5_W0W_MASK)
#define I2S_TCR5_WNW_MASK                        (0x1F000000U)
#define I2S_TCR5_WNW_SHIFT                       (24U)
#define I2S_TCR5_WNW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_WNW_SHIFT)) & I2S_TCR5_WNW_MASK)

/*! @name TDR - SAI Transmit Data Register */
#define I2S_TDR_TDR_MASK                         (0xFFFFFFFFU)
#define I2S_TDR_TDR_SHIFT                        (0U)
#define I2S_TDR_TDR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TDR_TDR_SHIFT)) & I2S_TDR_TDR_MASK)

/* The count of I2S_TDR */
#define I2S_TDR_COUNT                            (8U)

/*! @name TFR - SAI Transmit FIFO Register */
#define I2S_TFR_RFP_MASK                         (0xFFU)
#define I2S_TFR_RFP_SHIFT                        (0U)
#define I2S_TFR_RFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TFR_RFP_SHIFT)) & I2S_TFR_RFP_MASK)
#define I2S_TFR_WFP_MASK                         (0xFF0000U)
#define I2S_TFR_WFP_SHIFT                        (16U)
#define I2S_TFR_WFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TFR_WFP_SHIFT)) & I2S_TFR_WFP_MASK)
#define I2S_TFR_WCP_MASK                         (0x80000000U)
#define I2S_TFR_WCP_SHIFT                        (31U)
#define I2S_TFR_WCP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TFR_WCP_SHIFT)) & I2S_TFR_WCP_MASK)

/* The count of I2S_TFR */
#define I2S_TFR_COUNT                            (8U)

/*! @name TMR - SAI Transmit Mask Register */
#define I2S_TMR_TWM_MASK                         (0xFFFFFFFFU)
#define I2S_TMR_TWM_SHIFT                        (0U)
#define I2S_TMR_TWM(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TMR_TWM_SHIFT)) & I2S_TMR_TWM_MASK)

/*! @name RCSR - SAI Receive Control Register */
#define I2S_RCSR_FRDE_MASK                       (0x1U)
#define I2S_RCSR_FRDE_SHIFT                      (0U)
#define I2S_RCSR_FRDE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_FRDE_SHIFT)) & I2S_RCSR_FRDE_MASK)
#define I2S_RCSR_FWDE_MASK                       (0x2U)
#define I2S_RCSR_FWDE_SHIFT                      (1U)
#define I2S_RCSR_FWDE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_FWDE_SHIFT)) & I2S_RCSR_FWDE_MASK)
#define I2S_RCSR_FRIE_MASK                       (0x100U)
#define I2S_RCSR_FRIE_SHIFT                      (8U)
#define I2S_RCSR_FRIE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_FRIE_SHIFT)) & I2S_RCSR_FRIE_MASK)
#define I2S_RCSR_FWIE_MASK                       (0x200U)
#define I2S_RCSR_FWIE_SHIFT                      (9U)
#define I2S_RCSR_FWIE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_FWIE_SHIFT)) & I2S_RCSR_FWIE_MASK)
#define I2S_RCSR_FEIE_MASK                       (0x400U)
#define I2S_RCSR_FEIE_SHIFT                      (10U)
#define I2S_RCSR_FEIE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_FEIE_SHIFT)) & I2S_RCSR_FEIE_MASK)
#define I2S_RCSR_SEIE_MASK                       (0x800U)
#define I2S_RCSR_SEIE_SHIFT                      (11U)
#define I2S_RCSR_SEIE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_SEIE_SHIFT)) & I2S_RCSR_SEIE_MASK)
#define I2S_RCSR_WSIE_MASK                       (0x1000U)
#define I2S_RCSR_WSIE_SHIFT                      (12U)
#define I2S_RCSR_WSIE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_WSIE_SHIFT)) & I2S_RCSR_WSIE_MASK)
#define I2S_RCSR_FRF_MASK                        (0x10000U)
#define I2S_RCSR_FRF_SHIFT                       (16U)
#define I2S_RCSR_FRF(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_FRF_SHIFT)) & I2S_RCSR_FRF_MASK)
#define I2S_RCSR_FWF_MASK                        (0x20000U)
#define I2S_RCSR_FWF_SHIFT                       (17U)
#define I2S_RCSR_FWF(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_FWF_SHIFT)) & I2S_RCSR_FWF_MASK)
#define I2S_RCSR_FEF_MASK                        (0x40000U)
#define I2S_RCSR_FEF_SHIFT                       (18U)
#define I2S_RCSR_FEF(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_FEF_SHIFT)) & I2S_RCSR_FEF_MASK)
#define I2S_RCSR_SEF_MASK                        (0x80000U)
#define I2S_RCSR_SEF_SHIFT                       (19U)
#define I2S_RCSR_SEF(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_SEF_SHIFT)) & I2S_RCSR_SEF_MASK)
#define I2S_RCSR_WSF_MASK                        (0x100000U)
#define I2S_RCSR_WSF_SHIFT                       (20U)
#define I2S_RCSR_WSF(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_WSF_SHIFT)) & I2S_RCSR_WSF_MASK)
#define I2S_RCSR_SR_MASK                         (0x1000000U)
#define I2S_RCSR_SR_SHIFT                        (24U)
#define I2S_RCSR_SR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_SR_SHIFT)) & I2S_RCSR_SR_MASK)
#define I2S_RCSR_FR_MASK                         (0x2000000U)
#define I2S_RCSR_FR_SHIFT                        (25U)
#define I2S_RCSR_FR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_FR_SHIFT)) & I2S_RCSR_FR_MASK)
#define I2S_RCSR_BCE_MASK                        (0x10000000U)
#define I2S_RCSR_BCE_SHIFT                       (28U)
#define I2S_RCSR_BCE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_BCE_SHIFT)) & I2S_RCSR_BCE_MASK)
#define I2S_RCSR_DBGE_MASK                       (0x20000000U)
#define I2S_RCSR_DBGE_SHIFT                      (29U)
#define I2S_RCSR_DBGE(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_DBGE_SHIFT)) & I2S_RCSR_DBGE_MASK)
#define I2S_RCSR_RE_MASK                         (0x80000000U)
#define I2S_RCSR_RE_SHIFT                        (31U)
#define I2S_RCSR_RE(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RCSR_RE_SHIFT)) & I2S_RCSR_RE_MASK)

/*! @name RCR1 - SAI Receive Configuration 1 Register */
#define I2S_RCR1_RFW_MASK                        (0x7FU)
#define I2S_RCR1_RFW_SHIFT                       (0U)
#define I2S_RCR1_RFW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR1_RFW_SHIFT)) & I2S_RCR1_RFW_MASK)

/*! @name RCR2 - SAI Receive Configuration 2 Register */
#define I2S_RCR2_DIV_MASK                        (0xFFU)
#define I2S_RCR2_DIV_SHIFT                       (0U)
#define I2S_RCR2_DIV(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_DIV_SHIFT)) & I2S_RCR2_DIV_MASK)
#define I2S_RCR2_BCD_MASK                        (0x1000000U)
#define I2S_RCR2_BCD_SHIFT                       (24U)
#define I2S_RCR2_BCD(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_BCD_SHIFT)) & I2S_RCR2_BCD_MASK)
#define I2S_RCR2_BCP_MASK                        (0x2000000U)
#define I2S_RCR2_BCP_SHIFT                       (25U)
#define I2S_RCR2_BCP(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_BCP_SHIFT)) & I2S_RCR2_BCP_MASK)
#define I2S_RCR2_MSEL_MASK                       (0xC000000U)
#define I2S_RCR2_MSEL_SHIFT                      (26U)
#define I2S_RCR2_MSEL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_MSEL_SHIFT)) & I2S_RCR2_MSEL_MASK)
#define I2S_RCR2_BCI_MASK                        (0x10000000U)
#define I2S_RCR2_BCI_SHIFT                       (28U)
#define I2S_RCR2_BCI(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_BCI_SHIFT)) & I2S_RCR2_BCI_MASK)
#define I2S_RCR2_BCS_MASK                        (0x20000000U)
#define I2S_RCR2_BCS_SHIFT                       (29U)
#define I2S_RCR2_BCS(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_BCS_SHIFT)) & I2S_RCR2_BCS_MASK)
#define I2S_RCR2_SYNC_MASK                       (0xC0000000U)
#define I2S_RCR2_SYNC_SHIFT                      (30U)
#define I2S_RCR2_SYNC(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_SYNC_SHIFT)) & I2S_RCR2_SYNC_MASK)

/*! @name RCR3 - SAI Receive Configuration 3 Register */
#define I2S_RCR3_WDFL_MASK                       (0x1FU)
#define I2S_RCR3_WDFL_SHIFT                      (0U)
#define I2S_RCR3_WDFL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_WDFL_SHIFT)) & I2S_RCR3_WDFL_MASK)
#define I2S_RCR3_RCE_MASK                        (0xFF0000U)  /* Merged from fields with different position or width, of widths (1, 8), largest definition used */
#define I2S_RCR3_RCE_SHIFT                       (16U)
#define I2S_RCR3_RCE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_RCE_SHIFT)) & I2S_RCR3_RCE_MASK)  /* Merged from fields with different position or width, of widths (1, 8), largest definition used */
#define I2S_RCR3_CFR_MASK                        (0xFF000000U)
#define I2S_RCR3_CFR_SHIFT                       (24U)
#define I2S_RCR3_CFR(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_CFR_SHIFT)) & I2S_RCR3_CFR_MASK)

/*! @name RCR4 - SAI Receive Configuration 4 Register */
#define I2S_RCR4_FSD_MASK                        (0x1U)
#define I2S_RCR4_FSD_SHIFT                       (0U)
#define I2S_RCR4_FSD(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FSD_SHIFT)) & I2S_RCR4_FSD_MASK)
#define I2S_RCR4_FSP_MASK                        (0x2U)
#define I2S_RCR4_FSP_SHIFT                       (1U)
#define I2S_RCR4_FSP(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FSP_SHIFT)) & I2S_RCR4_FSP_MASK)
#define I2S_RCR4_ONDEM_MASK                      (0x4U)
#define I2S_RCR4_ONDEM_SHIFT                     (2U)
#define I2S_RCR4_ONDEM(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_ONDEM_SHIFT)) & I2S_RCR4_ONDEM_MASK)
#define I2S_RCR4_FSE_MASK                        (0x8U)
#define I2S_RCR4_FSE_SHIFT                       (3U)
#define I2S_RCR4_FSE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FSE_SHIFT)) & I2S_RCR4_FSE_MASK)
#define I2S_RCR4_MF_MASK                         (0x10U)
#define I2S_RCR4_MF_SHIFT                        (4U)
#define I2S_RCR4_MF(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_MF_SHIFT)) & I2S_RCR4_MF_MASK)
#define I2S_RCR4_SYWD_MASK                       (0x1F00U)
#define I2S_RCR4_SYWD_SHIFT                      (8U)
#define I2S_RCR4_SYWD(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_SYWD_SHIFT)) & I2S_RCR4_SYWD_MASK)
#define I2S_RCR4_FRSZ_MASK                       (0x1F0000U)
#define I2S_RCR4_FRSZ_SHIFT                      (16U)
#define I2S_RCR4_FRSZ(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FRSZ_SHIFT)) & I2S_RCR4_FRSZ_MASK)
#define I2S_RCR4_FPACK_MASK                      (0x3000000U)
#define I2S_RCR4_FPACK_SHIFT                     (24U)
#define I2S_RCR4_FPACK(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FPACK_SHIFT)) & I2S_RCR4_FPACK_MASK)
#define I2S_RCR4_FCOMB_MASK                      (0xC000000U)
#define I2S_RCR4_FCOMB_SHIFT                     (26U)
#define I2S_RCR4_FCOMB(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FCOMB_SHIFT)) & I2S_RCR4_FCOMB_MASK)
#define I2S_RCR4_FCONT_MASK                      (0x10000000U)
#define I2S_RCR4_FCONT_SHIFT                     (28U)
#define I2S_RCR4_FCONT(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FCONT_SHIFT)) & I2S_RCR4_FCONT_MASK)

/*! @name RCR5 - SAI Receive Configuration 5 Register */
#define I2S_RCR5_FBT_MASK                        (0x1F00U)
#define I2S_RCR5_FBT_SHIFT                       (8U)
#define I2S_RCR5_FBT(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_FBT_SHIFT)) & I2S_RCR5_FBT_MASK)
#define I2S_RCR5_W0W_MASK                        (0x1F0000U)
#define I2S_RCR5_W0W_SHIFT                       (16U)
#define I2S_RCR5_W0W(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_W0W_SHIFT)) & I2S_RCR5_W0W_MASK)
#define I2S_RCR5_WNW_MASK                        (0x1F000000U)
#define I2S_RCR5_WNW_SHIFT                       (24U)
#define I2S_RCR5_WNW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_WNW_SHIFT)) & I2S_RCR5_WNW_MASK)

/*! @name RDR - SAI Receive Data Register */
#define I2S_RDR_RDR_MASK                         (0xFFFFFFFFU)
#define I2S_RDR_RDR_SHIFT                        (0U)
#define I2S_RDR_RDR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RDR_RDR_SHIFT)) & I2S_RDR_RDR_MASK)

/* The count of I2S_RDR */
#define I2S_RDR_COUNT                            (8U)

/*! @name RFR - SAI Receive FIFO Register */
#define I2S_RFR_RFP_MASK                         (0xFFU)
#define I2S_RFR_RFP_SHIFT                        (0U)
#define I2S_RFR_RFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RFR_RFP_SHIFT)) & I2S_RFR_RFP_MASK)
#define I2S_RFR_RCP_MASK                         (0x8000U)
#define I2S_RFR_RCP_SHIFT                        (15U)
#define I2S_RFR_RCP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RFR_RCP_SHIFT)) & I2S_RFR_RCP_MASK)
#define I2S_RFR_WFP_MASK                         (0xFF0000U)
#define I2S_RFR_WFP_SHIFT                        (16U)
#define I2S_RFR_WFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RFR_WFP_SHIFT)) & I2S_RFR_WFP_MASK)

/* The count of I2S_RFR */
#define I2S_RFR_COUNT                            (8U)

/*! @name RMR - SAI Receive Mask Register */
#define I2S_RMR_RWM_MASK                         (0xFFFFFFFFU)
#define I2S_RMR_RWM_SHIFT                        (0U)
#define I2S_RMR_RWM(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RMR_RWM_SHIFT)) & I2S_RMR_RWM_MASK)


/*!
 * @}
 */ /* end of group I2S_Register_Masks */


/* I2S - Peripheral instance base addresses */
/** Peripheral I2S1 base address */
#define I2S1_BASE                                (0x30010000u)
/** Peripheral I2S1 base pointer */
#define I2S1                                     ((I2S_Type *)I2S1_BASE)
/** Peripheral I2S2 base address */
#define I2S2_BASE                                (0x308B0000u)
/** Peripheral I2S2 base pointer */
#define I2S2                                     ((I2S_Type *)I2S2_BASE)
/** Peripheral I2S3 base address */
#define I2S3_BASE                                (0x308C0000u)
/** Peripheral I2S3 base pointer */
#define I2S3                                     ((I2S_Type *)I2S3_BASE)
/** Peripheral I2S4 base address */
#define I2S4_BASE                                (0x30050000u)
/** Peripheral I2S4 base pointer */
#define I2S4                                     ((I2S_Type *)I2S4_BASE)
/** Peripheral I2S5 base address */
#define I2S5_BASE                                (0x30040000u)
/** Peripheral I2S5 base pointer */
#define I2S5                                     ((I2S_Type *)I2S5_BASE)
/** Peripheral I2S6 base address */
#define I2S6_BASE                                (0x30030000u)
/** Peripheral I2S6 base pointer */
#define I2S6                                     ((I2S_Type *)I2S6_BASE)
/** Array initializer of I2S peripheral base addresses */
#define I2S_BASE_ADDRS                           { 0u, I2S1_BASE, I2S2_BASE, I2S3_BASE, I2S4_BASE, I2S5_BASE, I2S6_BASE }
/** Array initializer of I2S peripheral base pointers */
#define I2S_BASE_PTRS                            { (I2S_Type *)0u, I2S1, I2S2, I2S3, I2S4, I2S5, I2S6 }
/** Interrupt vectors for the I2S peripheral type */
#define I2S_RX_IRQS                              { NotAvail_IRQn, I2S1_IRQn, I2S2_IRQn, I2S3_IRQn, I2S4_IRQn, I2S5_IRQn, NotAvail_IRQn }
#define I2S_TX_IRQS                              { NotAvail_IRQn, I2S1_IRQn, I2S2_IRQn, I2S3_IRQn, I2S4_IRQn, I2S5_IRQn, NotAvail_IRQn }

/*!
 * @}
 */ /* end of group I2S_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- IOMUXC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Peripheral_Access_Layer IOMUXC Peripheral Access Layer
 * @{
 */

/** IOMUXC - Register Layout Typedef */
typedef struct {
       uint8_t RESERVED_0[20];
  __IO uint32_t SW_MUX_CTL_PAD_PMIC_STBY_REQ;      /**< Pad Mux Register, offset: 0x14 */
  __IO uint32_t SW_MUX_CTL_PAD_PMIC_ON_REQ;        /**< Pad Mux Register, offset: 0x18 */
  __IO uint32_t SW_MUX_CTL_PAD_ONOFF;              /**< Pad Mux Register, offset: 0x1C */
  __IO uint32_t SW_MUX_CTL_PAD_POR_B;              /**< Pad Mux Register, offset: 0x20 */
  __IO uint32_t SW_MUX_CTL_PAD_RTC_RESET_B;        /**< Pad Mux Register, offset: 0x24 */
  __IO uint32_t SW_MUX_CTL_PAD[139];               /**< Pad Mux Register, array offset: 0x28, array step: 0x4 */
  __IO uint32_t SW_PAD_CTL_PAD[154];               /**< Pad Control Register, array offset: 0x254, array step: 0x4 */
  __IO uint32_t SELECT_INPUT[30];                  /**< Select Input Register, array offset: 0x4BC, array step: 0x4 */
} IOMUXC_Type;

/* ----------------------------------------------------------------------------
   -- IOMUXC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Register_Masks IOMUXC Register Masks
 * @{
 */

/*! @name SW_MUX_CTL_PAD_PMIC_STBY_REQ - Pad Mux Register */
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_STBY_REQ_SION_MASK (0x40U)
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_STBY_REQ_SION_SHIFT (6U)
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_STBY_REQ_SION(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_PMIC_STBY_REQ_SION_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_PMIC_STBY_REQ_SION_MASK)

/*! @name SW_MUX_CTL_PAD_PMIC_ON_REQ - Pad Mux Register */
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_ON_REQ_SION_MASK (0x40U)
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_ON_REQ_SION_SHIFT (6U)
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_ON_REQ_SION(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_PMIC_ON_REQ_SION_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_PMIC_ON_REQ_SION_MASK)

/*! @name SW_MUX_CTL_PAD_ONOFF - Pad Mux Register */
#define IOMUXC_SW_MUX_CTL_PAD_ONOFF_SION_MASK    (0x40U)
#define IOMUXC_SW_MUX_CTL_PAD_ONOFF_SION_SHIFT   (6U)
#define IOMUXC_SW_MUX_CTL_PAD_ONOFF_SION(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_ONOFF_SION_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_ONOFF_SION_MASK)

/*! @name SW_MUX_CTL_PAD_POR_B - Pad Mux Register */
#define IOMUXC_SW_MUX_CTL_PAD_POR_B_SION_MASK    (0x40U)
#define IOMUXC_SW_MUX_CTL_PAD_POR_B_SION_SHIFT   (6U)
#define IOMUXC_SW_MUX_CTL_PAD_POR_B_SION(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_POR_B_SION_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_POR_B_SION_MASK)

/*! @name SW_MUX_CTL_PAD_RTC_RESET_B - Pad Mux Register */
#define IOMUXC_SW_MUX_CTL_PAD_RTC_RESET_B_SION_MASK (0x40U)
#define IOMUXC_SW_MUX_CTL_PAD_RTC_RESET_B_SION_SHIFT (6U)
#define IOMUXC_SW_MUX_CTL_PAD_RTC_RESET_B_SION(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_RTC_RESET_B_SION_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_RTC_RESET_B_SION_MASK)

/*! @name SW_MUX_CTL_PAD - Pad Mux Register */
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_MASK      (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_SHIFT     (0U)
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_SION_MASK          (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_SION_SHIFT         (4U)
#define IOMUXC_SW_MUX_CTL_PAD_SION(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_SION_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_SION_MASK)

/* The count of IOMUXC_SW_MUX_CTL_PAD */
#define IOMUXC_SW_MUX_CTL_PAD_COUNT              (139U)

/*! @name SW_PAD_CTL_PAD - Pad Control Register */
#define IOMUXC_SW_PAD_CTL_PAD_DSE_MASK           (0x7U)
#define IOMUXC_SW_PAD_CTL_PAD_DSE_SHIFT          (0U)
#define IOMUXC_SW_PAD_CTL_PAD_DSE(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_SRE_MASK           (0x18U)
#define IOMUXC_SW_PAD_CTL_PAD_SRE_SHIFT          (3U)
#define IOMUXC_SW_PAD_CTL_PAD_SRE(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_SRE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_SRE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_ODE_MASK           (0x20U)
#define IOMUXC_SW_PAD_CTL_PAD_ODE_SHIFT          (5U)
#define IOMUXC_SW_PAD_CTL_PAD_ODE(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_ODE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_ODE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_PUE_MASK           (0x40U)
#define IOMUXC_SW_PAD_CTL_PAD_PUE_SHIFT          (6U)
#define IOMUXC_SW_PAD_CTL_PAD_PUE(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_PUE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_PUE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_HYS_MASK           (0x80U)
#define IOMUXC_SW_PAD_CTL_PAD_HYS_SHIFT          (7U)
#define IOMUXC_SW_PAD_CTL_PAD_HYS(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_HYS_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_HYS_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_LVTTL_MASK         (0x100U)
#define IOMUXC_SW_PAD_CTL_PAD_LVTTL_SHIFT        (8U)
#define IOMUXC_SW_PAD_CTL_PAD_LVTTL(x)           (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_LVTTL_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_LVTTL_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_VSEL_MASK          (0x3800U)
#define IOMUXC_SW_PAD_CTL_PAD_VSEL_SHIFT         (11U)
#define IOMUXC_SW_PAD_CTL_PAD_VSEL(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_VSEL_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_VSEL_MASK)

/* The count of IOMUXC_SW_PAD_CTL_PAD */
#define IOMUXC_SW_PAD_CTL_PAD_COUNT              (154U)

/*! @name SELECT_INPUT - Select Input Register */
#define IOMUXC_SELECT_INPUT_DAISY_MASK           (0xFU)  /* Merged from fields with different position or width, of widths (1, 2, 3, 4), largest definition used */
#define IOMUXC_SELECT_INPUT_DAISY_SHIFT          (0U)
#define IOMUXC_SELECT_INPUT_DAISY(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_SELECT_INPUT_DAISY_MASK)  /* Merged from fields with different position or width, of widths (1, 2, 3, 4), largest definition used */

/* The count of IOMUXC_SELECT_INPUT */
#define IOMUXC_SELECT_INPUT_COUNT                (30U)


/*!
 * @}
 */ /* end of group IOMUXC_Register_Masks */


/* IOMUXC - Peripheral instance base addresses */
/** Peripheral IOMUXC base address */
#define IOMUXC_BASE                              (0x30330000u)
/** Peripheral IOMUXC base pointer */
#define IOMUXC                                   ((IOMUXC_Type *)IOMUXC_BASE)
/** Array initializer of IOMUXC peripheral base addresses */
#define IOMUXC_BASE_ADDRS                        { IOMUXC_BASE }
/** Array initializer of IOMUXC peripheral base pointers */
#define IOMUXC_BASE_PTRS                         { IOMUXC }

/*!
 * @}
 */ /* end of group IOMUXC_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- LCDIF Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Peripheral_Access_Layer LCDIF Peripheral Access Layer
 * @{
 */

/** LCDIF - Register Layout Typedef */
typedef struct {
  __IO uint32_t CTRL;                              /**< eLCDIF General Control Register, offset: 0x0 */
  __IO uint32_t CTRL_SET;                          /**< eLCDIF General Control Register, offset: 0x4 */
  __IO uint32_t CTRL_CLR;                          /**< eLCDIF General Control Register, offset: 0x8 */
  __IO uint32_t CTRL_TOG;                          /**< eLCDIF General Control Register, offset: 0xC */
  __IO uint32_t CTRL1;                             /**< eLCDIF General Control1 Register, offset: 0x10 */
  __IO uint32_t CTRL1_SET;                         /**< eLCDIF General Control1 Register, offset: 0x14 */
  __IO uint32_t CTRL1_CLR;                         /**< eLCDIF General Control1 Register, offset: 0x18 */
  __IO uint32_t CTRL1_TOG;                         /**< eLCDIF General Control1 Register, offset: 0x1C */
  __IO uint32_t CTRL2;                             /**< eLCDIF General Control2 Register, offset: 0x20 */
  __IO uint32_t CTRL2_SET;                         /**< eLCDIF General Control2 Register, offset: 0x24 */
  __IO uint32_t CTRL2_CLR;                         /**< eLCDIF General Control2 Register, offset: 0x28 */
  __IO uint32_t CTRL2_TOG;                         /**< eLCDIF General Control2 Register, offset: 0x2C */
  __IO uint32_t TRANSFER_COUNT;                    /**< eLCDIF Horizontal and Vertical Valid Data Count Register, offset: 0x30 */
       uint8_t RESERVED_0[12];
  __IO uint32_t CUR_BUF;                           /**< LCD Interface Current Buffer Address Register, offset: 0x40 */
       uint8_t RESERVED_1[12];
  __IO uint32_t NEXT_BUF;                          /**< LCD Interface Next Buffer Address Register, offset: 0x50 */
       uint8_t RESERVED_2[12];
  __IO uint32_t TIMING;                            /**< LCD Interface Timing Register, offset: 0x60 */
       uint8_t RESERVED_3[12];
  __IO uint32_t VDCTRL0;                           /**< eLCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x70 */
  __IO uint32_t VDCTRL0_SET;                       /**< eLCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x74 */
  __IO uint32_t VDCTRL0_CLR;                       /**< eLCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x78 */
  __IO uint32_t VDCTRL0_TOG;                       /**< eLCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x7C */
  __IO uint32_t VDCTRL1;                           /**< eLCDIF VSYNC Mode and Dotclk Mode Control Register1, offset: 0x80 */
       uint8_t RESERVED_4[12];
  __IO uint32_t VDCTRL2;                           /**< LCDIF VSYNC Mode and Dotclk Mode Control Register2, offset: 0x90 */
       uint8_t RESERVED_5[12];
  __IO uint32_t VDCTRL3;                           /**< eLCDIF VSYNC Mode and Dotclk Mode Control Register3, offset: 0xA0 */
       uint8_t RESERVED_6[12];
  __IO uint32_t VDCTRL4;                           /**< eLCDIF VSYNC Mode and Dotclk Mode Control Register4, offset: 0xB0 */
       uint8_t RESERVED_7[12];
  __IO uint32_t DVICTRL0;                          /**< Digital Video Interface Control0 Register, offset: 0xC0 */
       uint8_t RESERVED_8[12];
  __IO uint32_t DVICTRL1;                          /**< Digital Video Interface Control1 Register, offset: 0xD0 */
       uint8_t RESERVED_9[12];
  __IO uint32_t DVICTRL2;                          /**< Digital Video Interface Control2 Register, offset: 0xE0 */
       uint8_t RESERVED_10[12];
  __IO uint32_t DVICTRL3;                          /**< Digital Video Interface Control3 Register, offset: 0xF0 */
       uint8_t RESERVED_11[12];
  __IO uint32_t DVICTRL4;                          /**< Digital Video Interface Control4 Register, offset: 0x100 */
       uint8_t RESERVED_12[12];
  __IO uint32_t CSC_COEFF0;                        /**< RGB to YCbCr 4:2:2 CSC Coefficient0 Register, offset: 0x110 */
       uint8_t RESERVED_13[12];
  __IO uint32_t CSC_COEFF1;                        /**< RGB to YCbCr 4:2:2 CSC Coefficient1 Register, offset: 0x120 */
       uint8_t RESERVED_14[12];
  __IO uint32_t CSC_COEFF2;                        /**< RGB to YCbCr 4:2:2 CSC Coefficent2 Register, offset: 0x130 */
       uint8_t RESERVED_15[12];
  __IO uint32_t CSC_COEFF3;                        /**< RGB to YCbCr 4:2:2 CSC Coefficient3 Register, offset: 0x140 */
       uint8_t RESERVED_16[12];
  __IO uint32_t CSC_COEFF4;                        /**< RGB to YCbCr 4:2:2 CSC Coefficient4 Register, offset: 0x150 */
       uint8_t RESERVED_17[12];
  __IO uint32_t CSC_OFFSET;                        /**< RGB to YCbCr 4:2:2 CSC Offset Register, offset: 0x160 */
       uint8_t RESERVED_18[12];
  __IO uint32_t CSC_LIMIT;                         /**< RGB to YCbCr 4:2:2 CSC Limit Register, offset: 0x170 */
       uint8_t RESERVED_19[12];
  __IO uint32_t DATA;                              /**< LCD Interface Data Register, offset: 0x180 */
       uint8_t RESERVED_20[12];
  __IO uint32_t BM_ERROR_STAT;                     /**< Bus Master Error Status Register, offset: 0x190 */
       uint8_t RESERVED_21[12];
  __IO uint32_t CRC_STAT;                          /**< CRC Status Register, offset: 0x1A0 */
       uint8_t RESERVED_22[12];
  __I  uint32_t STAT;                              /**< LCD Interface Status Register, offset: 0x1B0 */
       uint8_t RESERVED_23[76];
  __IO uint32_t THRES;                             /**< eLCDIF Threshold Register, offset: 0x200 */
       uint8_t RESERVED_24[12];
  __IO uint32_t AS_CTRL;                           /**< eLCDIF AS Buffer Control Register, offset: 0x210 */
       uint8_t RESERVED_25[12];
  __IO uint32_t AS_BUF;                            /**< Alpha Surface Buffer Pointer, offset: 0x220 */
       uint8_t RESERVED_26[12];
  __IO uint32_t AS_NEXT_BUF;                       /**< , offset: 0x230 */
       uint8_t RESERVED_27[12];
  __IO uint32_t AS_CLRKEYLOW;                      /**< eLCDIF Overlay Color Key Low, offset: 0x240 */
       uint8_t RESERVED_28[12];
  __IO uint32_t AS_CLRKEYHIGH;                     /**< eLCDIF Overlay Color Key High, offset: 0x250 */
       uint8_t RESERVED_29[12];
  __IO uint32_t SYNC_DELAY;                        /**< LCD working insync mode with CSI for VSYNC delay, offset: 0x260 */
} LCDIF_Type;

/* ----------------------------------------------------------------------------
   -- LCDIF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Register_Masks LCDIF Register Masks
 * @{
 */

/*! @name CTRL - eLCDIF General Control Register */
#define LCDIF_CTRL_RUN_MASK                      (0x1U)
#define LCDIF_CTRL_RUN_SHIFT                     (0U)
#define LCDIF_CTRL_RUN(x)                        (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_RUN_SHIFT)) & LCDIF_CTRL_RUN_MASK)
#define LCDIF_CTRL_DATA_FORMAT_24_BIT_MASK       (0x2U)
#define LCDIF_CTRL_DATA_FORMAT_24_BIT_SHIFT      (1U)
#define LCDIF_CTRL_DATA_FORMAT_24_BIT(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_DATA_FORMAT_24_BIT_SHIFT)) & LCDIF_CTRL_DATA_FORMAT_24_BIT_MASK)
#define LCDIF_CTRL_DATA_FORMAT_18_BIT_MASK       (0x4U)
#define LCDIF_CTRL_DATA_FORMAT_18_BIT_SHIFT      (2U)
#define LCDIF_CTRL_DATA_FORMAT_18_BIT(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_DATA_FORMAT_18_BIT_SHIFT)) & LCDIF_CTRL_DATA_FORMAT_18_BIT_MASK)
#define LCDIF_CTRL_DATA_FORMAT_16_BIT_MASK       (0x8U)
#define LCDIF_CTRL_DATA_FORMAT_16_BIT_SHIFT      (3U)
#define LCDIF_CTRL_DATA_FORMAT_16_BIT(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_DATA_FORMAT_16_BIT_SHIFT)) & LCDIF_CTRL_DATA_FORMAT_16_BIT_MASK)
#define LCDIF_CTRL_RSRVD0_MASK                   (0x10U)
#define LCDIF_CTRL_RSRVD0_SHIFT                  (4U)
#define LCDIF_CTRL_RSRVD0(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_RSRVD0_SHIFT)) & LCDIF_CTRL_RSRVD0_MASK)
#define LCDIF_CTRL_MASTER_MASK                   (0x20U)
#define LCDIF_CTRL_MASTER_SHIFT                  (5U)
#define LCDIF_CTRL_MASTER(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_MASTER_SHIFT)) & LCDIF_CTRL_MASTER_MASK)
#define LCDIF_CTRL_ENABLE_PXP_HANDSHAKE_MASK     (0x40U)
#define LCDIF_CTRL_ENABLE_PXP_HANDSHAKE_SHIFT    (6U)
#define LCDIF_CTRL_ENABLE_PXP_HANDSHAKE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_ENABLE_PXP_HANDSHAKE_SHIFT)) & LCDIF_CTRL_ENABLE_PXP_HANDSHAKE_MASK)
#define LCDIF_CTRL_RGB_TO_YCBCR422_CSC_MASK      (0x80U)
#define LCDIF_CTRL_RGB_TO_YCBCR422_CSC_SHIFT     (7U)
#define LCDIF_CTRL_RGB_TO_YCBCR422_CSC(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_RGB_TO_YCBCR422_CSC_SHIFT)) & LCDIF_CTRL_RGB_TO_YCBCR422_CSC_MASK)
#define LCDIF_CTRL_WORD_LENGTH_MASK              (0x300U)
#define LCDIF_CTRL_WORD_LENGTH_SHIFT             (8U)
#define LCDIF_CTRL_WORD_LENGTH(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_WORD_LENGTH_MASK)
#define LCDIF_CTRL_LCD_DATABUS_WIDTH_MASK        (0xC00U)
#define LCDIF_CTRL_LCD_DATABUS_WIDTH_SHIFT       (10U)
#define LCDIF_CTRL_LCD_DATABUS_WIDTH(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_CSC_DATA_SWIZZLE_MASK         (0x3000U)
#define LCDIF_CTRL_CSC_DATA_SWIZZLE_SHIFT        (12U)
#define LCDIF_CTRL_CSC_DATA_SWIZZLE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_INPUT_DATA_SWIZZLE_MASK       (0xC000U)
#define LCDIF_CTRL_INPUT_DATA_SWIZZLE_SHIFT      (14U)
#define LCDIF_CTRL_INPUT_DATA_SWIZZLE(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_DATA_SELECT_MASK              (0x10000U)
#define LCDIF_CTRL_DATA_SELECT_SHIFT             (16U)
#define LCDIF_CTRL_DATA_SELECT(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_DATA_SELECT_SHIFT)) & LCDIF_CTRL_DATA_SELECT_MASK)
#define LCDIF_CTRL_DOTCLK_MODE_MASK              (0x20000U)
#define LCDIF_CTRL_DOTCLK_MODE_SHIFT             (17U)
#define LCDIF_CTRL_DOTCLK_MODE(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_DOTCLK_MODE_SHIFT)) & LCDIF_CTRL_DOTCLK_MODE_MASK)
#define LCDIF_CTRL_VSYNC_MODE_MASK               (0x40000U)
#define LCDIF_CTRL_VSYNC_MODE_SHIFT              (18U)
#define LCDIF_CTRL_VSYNC_MODE(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_VSYNC_MODE_SHIFT)) & LCDIF_CTRL_VSYNC_MODE_MASK)
#define LCDIF_CTRL_BYPASS_COUNT_MASK             (0x80000U)
#define LCDIF_CTRL_BYPASS_COUNT_SHIFT            (19U)
#define LCDIF_CTRL_BYPASS_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_BYPASS_COUNT_SHIFT)) & LCDIF_CTRL_BYPASS_COUNT_MASK)
#define LCDIF_CTRL_DVI_MODE_MASK                 (0x100000U)
#define LCDIF_CTRL_DVI_MODE_SHIFT                (20U)
#define LCDIF_CTRL_DVI_MODE(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_DVI_MODE_SHIFT)) & LCDIF_CTRL_DVI_MODE_MASK)
#define LCDIF_CTRL_SHIFT_NUM_BITS_MASK           (0x3E00000U)
#define LCDIF_CTRL_SHIFT_NUM_BITS_SHIFT          (21U)
#define LCDIF_CTRL_SHIFT_NUM_BITS(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_DATA_SHIFT_DIR_MASK           (0x4000000U)
#define LCDIF_CTRL_DATA_SHIFT_DIR_SHIFT          (26U)
#define LCDIF_CTRL_DATA_SHIFT_DIR(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_DATA_SHIFT_DIR_SHIFT)) & LCDIF_CTRL_DATA_SHIFT_DIR_MASK)
#define LCDIF_CTRL_WAIT_FOR_VSYNC_EDGE_MASK      (0x8000000U)
#define LCDIF_CTRL_WAIT_FOR_VSYNC_EDGE_SHIFT     (27U)
#define LCDIF_CTRL_WAIT_FOR_VSYNC_EDGE(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_WAIT_FOR_VSYNC_EDGE_SHIFT)) & LCDIF_CTRL_WAIT_FOR_VSYNC_EDGE_MASK)
#define LCDIF_CTRL_READ_WRITEB_MASK              (0x10000000U)
#define LCDIF_CTRL_READ_WRITEB_SHIFT             (28U)
#define LCDIF_CTRL_READ_WRITEB(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_READ_WRITEB_SHIFT)) & LCDIF_CTRL_READ_WRITEB_MASK)
#define LCDIF_CTRL_YCBCR422_INPUT_MASK           (0x20000000U)
#define LCDIF_CTRL_YCBCR422_INPUT_SHIFT          (29U)
#define LCDIF_CTRL_YCBCR422_INPUT(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_YCBCR422_INPUT_SHIFT)) & LCDIF_CTRL_YCBCR422_INPUT_MASK)
#define LCDIF_CTRL_CLKGATE_MASK                  (0x40000000U)
#define LCDIF_CTRL_CLKGATE_SHIFT                 (30U)
#define LCDIF_CTRL_CLKGATE(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLKGATE_SHIFT)) & LCDIF_CTRL_CLKGATE_MASK)
#define LCDIF_CTRL_SFTRST_MASK                   (0x80000000U)
#define LCDIF_CTRL_SFTRST_SHIFT                  (31U)
#define LCDIF_CTRL_SFTRST(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SFTRST_SHIFT)) & LCDIF_CTRL_SFTRST_MASK)

/*! @name CTRL_SET - eLCDIF General Control Register */
#define LCDIF_CTRL_SET_RUN_MASK                  (0x1U)
#define LCDIF_CTRL_SET_RUN_SHIFT                 (0U)
#define LCDIF_CTRL_SET_RUN(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_RUN_SHIFT)) & LCDIF_CTRL_SET_RUN_MASK)
#define LCDIF_CTRL_SET_DATA_FORMAT_24_BIT_MASK   (0x2U)
#define LCDIF_CTRL_SET_DATA_FORMAT_24_BIT_SHIFT  (1U)
#define LCDIF_CTRL_SET_DATA_FORMAT_24_BIT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_DATA_FORMAT_24_BIT_SHIFT)) & LCDIF_CTRL_SET_DATA_FORMAT_24_BIT_MASK)
#define LCDIF_CTRL_SET_DATA_FORMAT_18_BIT_MASK   (0x4U)
#define LCDIF_CTRL_SET_DATA_FORMAT_18_BIT_SHIFT  (2U)
#define LCDIF_CTRL_SET_DATA_FORMAT_18_BIT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_DATA_FORMAT_18_BIT_SHIFT)) & LCDIF_CTRL_SET_DATA_FORMAT_18_BIT_MASK)
#define LCDIF_CTRL_SET_DATA_FORMAT_16_BIT_MASK   (0x8U)
#define LCDIF_CTRL_SET_DATA_FORMAT_16_BIT_SHIFT  (3U)
#define LCDIF_CTRL_SET_DATA_FORMAT_16_BIT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_DATA_FORMAT_16_BIT_SHIFT)) & LCDIF_CTRL_SET_DATA_FORMAT_16_BIT_MASK)
#define LCDIF_CTRL_SET_RSRVD0_MASK               (0x10U)
#define LCDIF_CTRL_SET_RSRVD0_SHIFT              (4U)
#define LCDIF_CTRL_SET_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_RSRVD0_SHIFT)) & LCDIF_CTRL_SET_RSRVD0_MASK)
#define LCDIF_CTRL_SET_MASTER_MASK               (0x20U)
#define LCDIF_CTRL_SET_MASTER_SHIFT              (5U)
#define LCDIF_CTRL_SET_MASTER(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_MASTER_SHIFT)) & LCDIF_CTRL_SET_MASTER_MASK)
#define LCDIF_CTRL_SET_ENABLE_PXP_HANDSHAKE_MASK (0x40U)
#define LCDIF_CTRL_SET_ENABLE_PXP_HANDSHAKE_SHIFT (6U)
#define LCDIF_CTRL_SET_ENABLE_PXP_HANDSHAKE(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_ENABLE_PXP_HANDSHAKE_SHIFT)) & LCDIF_CTRL_SET_ENABLE_PXP_HANDSHAKE_MASK)
#define LCDIF_CTRL_SET_RGB_TO_YCBCR422_CSC_MASK  (0x80U)
#define LCDIF_CTRL_SET_RGB_TO_YCBCR422_CSC_SHIFT (7U)
#define LCDIF_CTRL_SET_RGB_TO_YCBCR422_CSC(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_RGB_TO_YCBCR422_CSC_SHIFT)) & LCDIF_CTRL_SET_RGB_TO_YCBCR422_CSC_MASK)
#define LCDIF_CTRL_SET_WORD_LENGTH_MASK          (0x300U)
#define LCDIF_CTRL_SET_WORD_LENGTH_SHIFT         (8U)
#define LCDIF_CTRL_SET_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_SET_WORD_LENGTH_MASK)
#define LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_MASK    (0xC00U)
#define LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_SHIFT   (10U)
#define LCDIF_CTRL_SET_LCD_DATABUS_WIDTH(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_MASK     (0x3000U)
#define LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_SHIFT    (12U)
#define LCDIF_CTRL_SET_CSC_DATA_SWIZZLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_MASK   (0xC000U)
#define LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_SHIFT  (14U)
#define LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_SET_DATA_SELECT_MASK          (0x10000U)
#define LCDIF_CTRL_SET_DATA_SELECT_SHIFT         (16U)
#define LCDIF_CTRL_SET_DATA_SELECT(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_DATA_SELECT_SHIFT)) & LCDIF_CTRL_SET_DATA_SELECT_MASK)
#define LCDIF_CTRL_SET_DOTCLK_MODE_MASK          (0x20000U)
#define LCDIF_CTRL_SET_DOTCLK_MODE_SHIFT         (17U)
#define LCDIF_CTRL_SET_DOTCLK_MODE(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_DOTCLK_MODE_SHIFT)) & LCDIF_CTRL_SET_DOTCLK_MODE_MASK)
#define LCDIF_CTRL_SET_VSYNC_MODE_MASK           (0x40000U)
#define LCDIF_CTRL_SET_VSYNC_MODE_SHIFT          (18U)
#define LCDIF_CTRL_SET_VSYNC_MODE(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_VSYNC_MODE_SHIFT)) & LCDIF_CTRL_SET_VSYNC_MODE_MASK)
#define LCDIF_CTRL_SET_BYPASS_COUNT_MASK         (0x80000U)
#define LCDIF_CTRL_SET_BYPASS_COUNT_SHIFT        (19U)
#define LCDIF_CTRL_SET_BYPASS_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_BYPASS_COUNT_SHIFT)) & LCDIF_CTRL_SET_BYPASS_COUNT_MASK)
#define LCDIF_CTRL_SET_DVI_MODE_MASK             (0x100000U)
#define LCDIF_CTRL_SET_DVI_MODE_SHIFT            (20U)
#define LCDIF_CTRL_SET_DVI_MODE(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_DVI_MODE_SHIFT)) & LCDIF_CTRL_SET_DVI_MODE_MASK)
#define LCDIF_CTRL_SET_SHIFT_NUM_BITS_MASK       (0x3E00000U)
#define LCDIF_CTRL_SET_SHIFT_NUM_BITS_SHIFT      (21U)
#define LCDIF_CTRL_SET_SHIFT_NUM_BITS(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_SET_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_SET_DATA_SHIFT_DIR_MASK       (0x4000000U)
#define LCDIF_CTRL_SET_DATA_SHIFT_DIR_SHIFT      (26U)
#define LCDIF_CTRL_SET_DATA_SHIFT_DIR(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_DATA_SHIFT_DIR_SHIFT)) & LCDIF_CTRL_SET_DATA_SHIFT_DIR_MASK)
#define LCDIF_CTRL_SET_WAIT_FOR_VSYNC_EDGE_MASK  (0x8000000U)
#define LCDIF_CTRL_SET_WAIT_FOR_VSYNC_EDGE_SHIFT (27U)
#define LCDIF_CTRL_SET_WAIT_FOR_VSYNC_EDGE(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_WAIT_FOR_VSYNC_EDGE_SHIFT)) & LCDIF_CTRL_SET_WAIT_FOR_VSYNC_EDGE_MASK)
#define LCDIF_CTRL_SET_READ_WRITEB_MASK          (0x10000000U)
#define LCDIF_CTRL_SET_READ_WRITEB_SHIFT         (28U)
#define LCDIF_CTRL_SET_READ_WRITEB(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_READ_WRITEB_SHIFT)) & LCDIF_CTRL_SET_READ_WRITEB_MASK)
#define LCDIF_CTRL_SET_YCBCR422_INPUT_MASK       (0x20000000U)
#define LCDIF_CTRL_SET_YCBCR422_INPUT_SHIFT      (29U)
#define LCDIF_CTRL_SET_YCBCR422_INPUT(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_YCBCR422_INPUT_SHIFT)) & LCDIF_CTRL_SET_YCBCR422_INPUT_MASK)
#define LCDIF_CTRL_SET_CLKGATE_MASK              (0x40000000U)
#define LCDIF_CTRL_SET_CLKGATE_SHIFT             (30U)
#define LCDIF_CTRL_SET_CLKGATE(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_CLKGATE_SHIFT)) & LCDIF_CTRL_SET_CLKGATE_MASK)
#define LCDIF_CTRL_SET_SFTRST_MASK               (0x80000000U)
#define LCDIF_CTRL_SET_SFTRST_SHIFT              (31U)
#define LCDIF_CTRL_SET_SFTRST(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_SFTRST_SHIFT)) & LCDIF_CTRL_SET_SFTRST_MASK)

/*! @name CTRL_CLR - eLCDIF General Control Register */
#define LCDIF_CTRL_CLR_RUN_MASK                  (0x1U)
#define LCDIF_CTRL_CLR_RUN_SHIFT                 (0U)
#define LCDIF_CTRL_CLR_RUN(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_RUN_SHIFT)) & LCDIF_CTRL_CLR_RUN_MASK)
#define LCDIF_CTRL_CLR_DATA_FORMAT_24_BIT_MASK   (0x2U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_24_BIT_SHIFT  (1U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_24_BIT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_DATA_FORMAT_24_BIT_SHIFT)) & LCDIF_CTRL_CLR_DATA_FORMAT_24_BIT_MASK)
#define LCDIF_CTRL_CLR_DATA_FORMAT_18_BIT_MASK   (0x4U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_18_BIT_SHIFT  (2U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_18_BIT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_DATA_FORMAT_18_BIT_SHIFT)) & LCDIF_CTRL_CLR_DATA_FORMAT_18_BIT_MASK)
#define LCDIF_CTRL_CLR_DATA_FORMAT_16_BIT_MASK   (0x8U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_16_BIT_SHIFT  (3U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_16_BIT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_DATA_FORMAT_16_BIT_SHIFT)) & LCDIF_CTRL_CLR_DATA_FORMAT_16_BIT_MASK)
#define LCDIF_CTRL_CLR_RSRVD0_MASK               (0x10U)
#define LCDIF_CTRL_CLR_RSRVD0_SHIFT              (4U)
#define LCDIF_CTRL_CLR_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_RSRVD0_SHIFT)) & LCDIF_CTRL_CLR_RSRVD0_MASK)
#define LCDIF_CTRL_CLR_MASTER_MASK               (0x20U)
#define LCDIF_CTRL_CLR_MASTER_SHIFT              (5U)
#define LCDIF_CTRL_CLR_MASTER(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_MASTER_SHIFT)) & LCDIF_CTRL_CLR_MASTER_MASK)
#define LCDIF_CTRL_CLR_ENABLE_PXP_HANDSHAKE_MASK (0x40U)
#define LCDIF_CTRL_CLR_ENABLE_PXP_HANDSHAKE_SHIFT (6U)
#define LCDIF_CTRL_CLR_ENABLE_PXP_HANDSHAKE(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_ENABLE_PXP_HANDSHAKE_SHIFT)) & LCDIF_CTRL_CLR_ENABLE_PXP_HANDSHAKE_MASK)
#define LCDIF_CTRL_CLR_RGB_TO_YCBCR422_CSC_MASK  (0x80U)
#define LCDIF_CTRL_CLR_RGB_TO_YCBCR422_CSC_SHIFT (7U)
#define LCDIF_CTRL_CLR_RGB_TO_YCBCR422_CSC(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_RGB_TO_YCBCR422_CSC_SHIFT)) & LCDIF_CTRL_CLR_RGB_TO_YCBCR422_CSC_MASK)
#define LCDIF_CTRL_CLR_WORD_LENGTH_MASK          (0x300U)
#define LCDIF_CTRL_CLR_WORD_LENGTH_SHIFT         (8U)
#define LCDIF_CTRL_CLR_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_CLR_WORD_LENGTH_MASK)
#define LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_MASK    (0xC00U)
#define LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_SHIFT   (10U)
#define LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_MASK     (0x3000U)
#define LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_SHIFT    (12U)
#define LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_MASK   (0xC000U)
#define LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_SHIFT  (14U)
#define LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_CLR_DATA_SELECT_MASK          (0x10000U)
#define LCDIF_CTRL_CLR_DATA_SELECT_SHIFT         (16U)
#define LCDIF_CTRL_CLR_DATA_SELECT(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_DATA_SELECT_SHIFT)) & LCDIF_CTRL_CLR_DATA_SELECT_MASK)
#define LCDIF_CTRL_CLR_DOTCLK_MODE_MASK          (0x20000U)
#define LCDIF_CTRL_CLR_DOTCLK_MODE_SHIFT         (17U)
#define LCDIF_CTRL_CLR_DOTCLK_MODE(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_DOTCLK_MODE_SHIFT)) & LCDIF_CTRL_CLR_DOTCLK_MODE_MASK)
#define LCDIF_CTRL_CLR_VSYNC_MODE_MASK           (0x40000U)
#define LCDIF_CTRL_CLR_VSYNC_MODE_SHIFT          (18U)
#define LCDIF_CTRL_CLR_VSYNC_MODE(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_VSYNC_MODE_SHIFT)) & LCDIF_CTRL_CLR_VSYNC_MODE_MASK)
#define LCDIF_CTRL_CLR_BYPASS_COUNT_MASK         (0x80000U)
#define LCDIF_CTRL_CLR_BYPASS_COUNT_SHIFT        (19U)
#define LCDIF_CTRL_CLR_BYPASS_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_BYPASS_COUNT_SHIFT)) & LCDIF_CTRL_CLR_BYPASS_COUNT_MASK)
#define LCDIF_CTRL_CLR_DVI_MODE_MASK             (0x100000U)
#define LCDIF_CTRL_CLR_DVI_MODE_SHIFT            (20U)
#define LCDIF_CTRL_CLR_DVI_MODE(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_DVI_MODE_SHIFT)) & LCDIF_CTRL_CLR_DVI_MODE_MASK)
#define LCDIF_CTRL_CLR_SHIFT_NUM_BITS_MASK       (0x3E00000U)
#define LCDIF_CTRL_CLR_SHIFT_NUM_BITS_SHIFT      (21U)
#define LCDIF_CTRL_CLR_SHIFT_NUM_BITS(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_CLR_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_CLR_DATA_SHIFT_DIR_MASK       (0x4000000U)
#define LCDIF_CTRL_CLR_DATA_SHIFT_DIR_SHIFT      (26U)
#define LCDIF_CTRL_CLR_DATA_SHIFT_DIR(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_DATA_SHIFT_DIR_SHIFT)) & LCDIF_CTRL_CLR_DATA_SHIFT_DIR_MASK)
#define LCDIF_CTRL_CLR_WAIT_FOR_VSYNC_EDGE_MASK  (0x8000000U)
#define LCDIF_CTRL_CLR_WAIT_FOR_VSYNC_EDGE_SHIFT (27U)
#define LCDIF_CTRL_CLR_WAIT_FOR_VSYNC_EDGE(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_WAIT_FOR_VSYNC_EDGE_SHIFT)) & LCDIF_CTRL_CLR_WAIT_FOR_VSYNC_EDGE_MASK)
#define LCDIF_CTRL_CLR_READ_WRITEB_MASK          (0x10000000U)
#define LCDIF_CTRL_CLR_READ_WRITEB_SHIFT         (28U)
#define LCDIF_CTRL_CLR_READ_WRITEB(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_READ_WRITEB_SHIFT)) & LCDIF_CTRL_CLR_READ_WRITEB_MASK)
#define LCDIF_CTRL_CLR_YCBCR422_INPUT_MASK       (0x20000000U)
#define LCDIF_CTRL_CLR_YCBCR422_INPUT_SHIFT      (29U)
#define LCDIF_CTRL_CLR_YCBCR422_INPUT(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_YCBCR422_INPUT_SHIFT)) & LCDIF_CTRL_CLR_YCBCR422_INPUT_MASK)
#define LCDIF_CTRL_CLR_CLKGATE_MASK              (0x40000000U)
#define LCDIF_CTRL_CLR_CLKGATE_SHIFT             (30U)
#define LCDIF_CTRL_CLR_CLKGATE(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_CLKGATE_SHIFT)) & LCDIF_CTRL_CLR_CLKGATE_MASK)
#define LCDIF_CTRL_CLR_SFTRST_MASK               (0x80000000U)
#define LCDIF_CTRL_CLR_SFTRST_SHIFT              (31U)
#define LCDIF_CTRL_CLR_SFTRST(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_SFTRST_SHIFT)) & LCDIF_CTRL_CLR_SFTRST_MASK)

/*! @name CTRL_TOG - eLCDIF General Control Register */
#define LCDIF_CTRL_TOG_RUN_MASK                  (0x1U)
#define LCDIF_CTRL_TOG_RUN_SHIFT                 (0U)
#define LCDIF_CTRL_TOG_RUN(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_RUN_SHIFT)) & LCDIF_CTRL_TOG_RUN_MASK)
#define LCDIF_CTRL_TOG_DATA_FORMAT_24_BIT_MASK   (0x2U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_24_BIT_SHIFT  (1U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_24_BIT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_DATA_FORMAT_24_BIT_SHIFT)) & LCDIF_CTRL_TOG_DATA_FORMAT_24_BIT_MASK)
#define LCDIF_CTRL_TOG_DATA_FORMAT_18_BIT_MASK   (0x4U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_18_BIT_SHIFT  (2U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_18_BIT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_DATA_FORMAT_18_BIT_SHIFT)) & LCDIF_CTRL_TOG_DATA_FORMAT_18_BIT_MASK)
#define LCDIF_CTRL_TOG_DATA_FORMAT_16_BIT_MASK   (0x8U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_16_BIT_SHIFT  (3U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_16_BIT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_DATA_FORMAT_16_BIT_SHIFT)) & LCDIF_CTRL_TOG_DATA_FORMAT_16_BIT_MASK)
#define LCDIF_CTRL_TOG_RSRVD0_MASK               (0x10U)
#define LCDIF_CTRL_TOG_RSRVD0_SHIFT              (4U)
#define LCDIF_CTRL_TOG_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_RSRVD0_SHIFT)) & LCDIF_CTRL_TOG_RSRVD0_MASK)
#define LCDIF_CTRL_TOG_MASTER_MASK               (0x20U)
#define LCDIF_CTRL_TOG_MASTER_SHIFT              (5U)
#define LCDIF_CTRL_TOG_MASTER(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_MASTER_SHIFT)) & LCDIF_CTRL_TOG_MASTER_MASK)
#define LCDIF_CTRL_TOG_ENABLE_PXP_HANDSHAKE_MASK (0x40U)
#define LCDIF_CTRL_TOG_ENABLE_PXP_HANDSHAKE_SHIFT (6U)
#define LCDIF_CTRL_TOG_ENABLE_PXP_HANDSHAKE(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_ENABLE_PXP_HANDSHAKE_SHIFT)) & LCDIF_CTRL_TOG_ENABLE_PXP_HANDSHAKE_MASK)
#define LCDIF_CTRL_TOG_RGB_TO_YCBCR422_CSC_MASK  (0x80U)
#define LCDIF_CTRL_TOG_RGB_TO_YCBCR422_CSC_SHIFT (7U)
#define LCDIF_CTRL_TOG_RGB_TO_YCBCR422_CSC(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_RGB_TO_YCBCR422_CSC_SHIFT)) & LCDIF_CTRL_TOG_RGB_TO_YCBCR422_CSC_MASK)
#define LCDIF_CTRL_TOG_WORD_LENGTH_MASK          (0x300U)
#define LCDIF_CTRL_TOG_WORD_LENGTH_SHIFT         (8U)
#define LCDIF_CTRL_TOG_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_TOG_WORD_LENGTH_MASK)
#define LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_MASK    (0xC00U)
#define LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_SHIFT   (10U)
#define LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_MASK     (0x3000U)
#define LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_SHIFT    (12U)
#define LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_MASK   (0xC000U)
#define LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_SHIFT  (14U)
#define LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_TOG_DATA_SELECT_MASK          (0x10000U)
#define LCDIF_CTRL_TOG_DATA_SELECT_SHIFT         (16U)
#define LCDIF_CTRL_TOG_DATA_SELECT(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_DATA_SELECT_SHIFT)) & LCDIF_CTRL_TOG_DATA_SELECT_MASK)
#define LCDIF_CTRL_TOG_DOTCLK_MODE_MASK          (0x20000U)
#define LCDIF_CTRL_TOG_DOTCLK_MODE_SHIFT         (17U)
#define LCDIF_CTRL_TOG_DOTCLK_MODE(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_DOTCLK_MODE_SHIFT)) & LCDIF_CTRL_TOG_DOTCLK_MODE_MASK)
#define LCDIF_CTRL_TOG_VSYNC_MODE_MASK           (0x40000U)
#define LCDIF_CTRL_TOG_VSYNC_MODE_SHIFT          (18U)
#define LCDIF_CTRL_TOG_VSYNC_MODE(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_VSYNC_MODE_SHIFT)) & LCDIF_CTRL_TOG_VSYNC_MODE_MASK)
#define LCDIF_CTRL_TOG_BYPASS_COUNT_MASK         (0x80000U)
#define LCDIF_CTRL_TOG_BYPASS_COUNT_SHIFT        (19U)
#define LCDIF_CTRL_TOG_BYPASS_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_BYPASS_COUNT_SHIFT)) & LCDIF_CTRL_TOG_BYPASS_COUNT_MASK)
#define LCDIF_CTRL_TOG_DVI_MODE_MASK             (0x100000U)
#define LCDIF_CTRL_TOG_DVI_MODE_SHIFT            (20U)
#define LCDIF_CTRL_TOG_DVI_MODE(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_DVI_MODE_SHIFT)) & LCDIF_CTRL_TOG_DVI_MODE_MASK)
#define LCDIF_CTRL_TOG_SHIFT_NUM_BITS_MASK       (0x3E00000U)
#define LCDIF_CTRL_TOG_SHIFT_NUM_BITS_SHIFT      (21U)
#define LCDIF_CTRL_TOG_SHIFT_NUM_BITS(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_TOG_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_TOG_DATA_SHIFT_DIR_MASK       (0x4000000U)
#define LCDIF_CTRL_TOG_DATA_SHIFT_DIR_SHIFT      (26U)
#define LCDIF_CTRL_TOG_DATA_SHIFT_DIR(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_DATA_SHIFT_DIR_SHIFT)) & LCDIF_CTRL_TOG_DATA_SHIFT_DIR_MASK)
#define LCDIF_CTRL_TOG_WAIT_FOR_VSYNC_EDGE_MASK  (0x8000000U)
#define LCDIF_CTRL_TOG_WAIT_FOR_VSYNC_EDGE_SHIFT (27U)
#define LCDIF_CTRL_TOG_WAIT_FOR_VSYNC_EDGE(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_WAIT_FOR_VSYNC_EDGE_SHIFT)) & LCDIF_CTRL_TOG_WAIT_FOR_VSYNC_EDGE_MASK)
#define LCDIF_CTRL_TOG_READ_WRITEB_MASK          (0x10000000U)
#define LCDIF_CTRL_TOG_READ_WRITEB_SHIFT         (28U)
#define LCDIF_CTRL_TOG_READ_WRITEB(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_READ_WRITEB_SHIFT)) & LCDIF_CTRL_TOG_READ_WRITEB_MASK)
#define LCDIF_CTRL_TOG_YCBCR422_INPUT_MASK       (0x20000000U)
#define LCDIF_CTRL_TOG_YCBCR422_INPUT_SHIFT      (29U)
#define LCDIF_CTRL_TOG_YCBCR422_INPUT(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_YCBCR422_INPUT_SHIFT)) & LCDIF_CTRL_TOG_YCBCR422_INPUT_MASK)
#define LCDIF_CTRL_TOG_CLKGATE_MASK              (0x40000000U)
#define LCDIF_CTRL_TOG_CLKGATE_SHIFT             (30U)
#define LCDIF_CTRL_TOG_CLKGATE(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_CLKGATE_SHIFT)) & LCDIF_CTRL_TOG_CLKGATE_MASK)
#define LCDIF_CTRL_TOG_SFTRST_MASK               (0x80000000U)
#define LCDIF_CTRL_TOG_SFTRST_SHIFT              (31U)
#define LCDIF_CTRL_TOG_SFTRST(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_SFTRST_SHIFT)) & LCDIF_CTRL_TOG_SFTRST_MASK)

/*! @name CTRL1 - eLCDIF General Control1 Register */
#define LCDIF_CTRL1_RESET_MASK                   (0x1U)
#define LCDIF_CTRL1_RESET_SHIFT                  (0U)
#define LCDIF_CTRL1_RESET(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_RESET_SHIFT)) & LCDIF_CTRL1_RESET_MASK)
#define LCDIF_CTRL1_MODE86_MASK                  (0x2U)
#define LCDIF_CTRL1_MODE86_SHIFT                 (1U)
#define LCDIF_CTRL1_MODE86(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_MODE86_SHIFT)) & LCDIF_CTRL1_MODE86_MASK)
#define LCDIF_CTRL1_BUSY_ENABLE_MASK             (0x4U)
#define LCDIF_CTRL1_BUSY_ENABLE_SHIFT            (2U)
#define LCDIF_CTRL1_BUSY_ENABLE(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_BUSY_ENABLE_SHIFT)) & LCDIF_CTRL1_BUSY_ENABLE_MASK)
#define LCDIF_CTRL1_RSRVD0_MASK                  (0xF8U)
#define LCDIF_CTRL1_RSRVD0_SHIFT                 (3U)
#define LCDIF_CTRL1_RSRVD0(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_RSRVD0_SHIFT)) & LCDIF_CTRL1_RSRVD0_MASK)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_MASK          (0x100U)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_SHIFT         (8U)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_VSYNC_EDGE_IRQ_SHIFT)) & LCDIF_CTRL1_VSYNC_EDGE_IRQ_MASK)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_MASK      (0x200U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_SHIFT     (9U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_SHIFT)) & LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_MASK)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_MASK           (0x400U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_SHIFT          (10U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_UNDERFLOW_IRQ_SHIFT)) & LCDIF_CTRL1_UNDERFLOW_IRQ_MASK)
#define LCDIF_CTRL1_OVERFLOW_IRQ_MASK            (0x800U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_SHIFT           (11U)
#define LCDIF_CTRL1_OVERFLOW_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_OVERFLOW_IRQ_SHIFT)) & LCDIF_CTRL1_OVERFLOW_IRQ_MASK)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN_MASK       (0x1000U)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN_SHIFT      (12U)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN_SHIFT)) & LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN_MASK)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN_MASK   (0x2000U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN_SHIFT  (13U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN_SHIFT)) & LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN_MASK)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_EN_MASK        (0x4000U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_EN_SHIFT       (14U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_EN(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_UNDERFLOW_IRQ_EN_SHIFT)) & LCDIF_CTRL1_UNDERFLOW_IRQ_EN_MASK)
#define LCDIF_CTRL1_OVERFLOW_IRQ_EN_MASK         (0x8000U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_EN_SHIFT        (15U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_EN(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_OVERFLOW_IRQ_EN_SHIFT)) & LCDIF_CTRL1_OVERFLOW_IRQ_EN_MASK)
#define LCDIF_CTRL1_BYTE_PACKING_FORMAT_MASK     (0xF0000U)
#define LCDIF_CTRL1_BYTE_PACKING_FORMAT_SHIFT    (16U)
#define LCDIF_CTRL1_BYTE_PACKING_FORMAT(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS_SHIFT)) & LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS_MASK)
#define LCDIF_CTRL1_FIFO_CLEAR_MASK              (0x200000U)
#define LCDIF_CTRL1_FIFO_CLEAR_SHIFT             (21U)
#define LCDIF_CTRL1_FIFO_CLEAR(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_FIFO_CLEAR_SHIFT)) & LCDIF_CTRL1_FIFO_CLEAR_MASK)
#define LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD_SHIFT)) & LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD_MASK)
#define LCDIF_CTRL1_INTERLACE_FIELDS_MASK        (0x800000U)
#define LCDIF_CTRL1_INTERLACE_FIELDS_SHIFT       (23U)
#define LCDIF_CTRL1_INTERLACE_FIELDS(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_INTERLACE_FIELDS_SHIFT)) & LCDIF_CTRL1_INTERLACE_FIELDS_MASK)
#define LCDIF_CTRL1_RECOVER_ON_UNDERFLOW_MASK    (0x1000000U)
#define LCDIF_CTRL1_RECOVER_ON_UNDERFLOW_SHIFT   (24U)
#define LCDIF_CTRL1_RECOVER_ON_UNDERFLOW(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_RECOVER_ON_UNDERFLOW_SHIFT)) & LCDIF_CTRL1_RECOVER_ON_UNDERFLOW_MASK)
#define LCDIF_CTRL1_BM_ERROR_IRQ_MASK            (0x2000000U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_SHIFT           (25U)
#define LCDIF_CTRL1_BM_ERROR_IRQ(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_BM_ERROR_IRQ_SHIFT)) & LCDIF_CTRL1_BM_ERROR_IRQ_MASK)
#define LCDIF_CTRL1_BM_ERROR_IRQ_EN_MASK         (0x4000000U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_EN_SHIFT        (26U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_EN(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_BM_ERROR_IRQ_EN_SHIFT)) & LCDIF_CTRL1_BM_ERROR_IRQ_EN_MASK)
#define LCDIF_CTRL1_COMBINE_MPU_WR_STRB_MASK     (0x8000000U)
#define LCDIF_CTRL1_COMBINE_MPU_WR_STRB_SHIFT    (27U)
#define LCDIF_CTRL1_COMBINE_MPU_WR_STRB(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_COMBINE_MPU_WR_STRB_SHIFT)) & LCDIF_CTRL1_COMBINE_MPU_WR_STRB_MASK)
#define LCDIF_CTRL1_RSRVD1_MASK                  (0xF0000000U)
#define LCDIF_CTRL1_RSRVD1_SHIFT                 (28U)
#define LCDIF_CTRL1_RSRVD1(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_RSRVD1_SHIFT)) & LCDIF_CTRL1_RSRVD1_MASK)

/*! @name CTRL1_SET - eLCDIF General Control1 Register */
#define LCDIF_CTRL1_SET_RESET_MASK               (0x1U)
#define LCDIF_CTRL1_SET_RESET_SHIFT              (0U)
#define LCDIF_CTRL1_SET_RESET(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_RESET_SHIFT)) & LCDIF_CTRL1_SET_RESET_MASK)
#define LCDIF_CTRL1_SET_MODE86_MASK              (0x2U)
#define LCDIF_CTRL1_SET_MODE86_SHIFT             (1U)
#define LCDIF_CTRL1_SET_MODE86(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_MODE86_SHIFT)) & LCDIF_CTRL1_SET_MODE86_MASK)
#define LCDIF_CTRL1_SET_BUSY_ENABLE_MASK         (0x4U)
#define LCDIF_CTRL1_SET_BUSY_ENABLE_SHIFT        (2U)
#define LCDIF_CTRL1_SET_BUSY_ENABLE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_BUSY_ENABLE_SHIFT)) & LCDIF_CTRL1_SET_BUSY_ENABLE_MASK)
#define LCDIF_CTRL1_SET_RSRVD0_MASK              (0xF8U)
#define LCDIF_CTRL1_SET_RSRVD0_SHIFT             (3U)
#define LCDIF_CTRL1_SET_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_RSRVD0_SHIFT)) & LCDIF_CTRL1_SET_RSRVD0_MASK)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_MASK      (0x100U)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_SHIFT     (8U)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_SHIFT)) & LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_MASK)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_MASK  (0x200U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_SHIFT (9U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_SHIFT)) & LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_MASK)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_MASK       (0x400U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_SHIFT      (10U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_UNDERFLOW_IRQ_SHIFT)) & LCDIF_CTRL1_SET_UNDERFLOW_IRQ_MASK)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_MASK        (0x800U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_SHIFT       (11U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_OVERFLOW_IRQ_SHIFT)) & LCDIF_CTRL1_SET_OVERFLOW_IRQ_MASK)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN_MASK   (0x1000U)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN_SHIFT  (12U)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN_SHIFT)) & LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN_MASK)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN_MASK (0x2000U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN_SHIFT (13U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN_SHIFT)) & LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN_MASK)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN_MASK    (0x4000U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN_SHIFT   (14U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN_SHIFT)) & LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN_MASK)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN_MASK     (0x8000U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN_SHIFT    (15U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN_SHIFT)) & LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN_MASK)
#define LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_MASK (0xF0000U)
#define LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_SHIFT (16U)
#define LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS_SHIFT)) & LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS_MASK)
#define LCDIF_CTRL1_SET_FIFO_CLEAR_MASK          (0x200000U)
#define LCDIF_CTRL1_SET_FIFO_CLEAR_SHIFT         (21U)
#define LCDIF_CTRL1_SET_FIFO_CLEAR(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_FIFO_CLEAR_SHIFT)) & LCDIF_CTRL1_SET_FIFO_CLEAR_MASK)
#define LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD_SHIFT)) & LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD_MASK)
#define LCDIF_CTRL1_SET_INTERLACE_FIELDS_MASK    (0x800000U)
#define LCDIF_CTRL1_SET_INTERLACE_FIELDS_SHIFT   (23U)
#define LCDIF_CTRL1_SET_INTERLACE_FIELDS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_INTERLACE_FIELDS_SHIFT)) & LCDIF_CTRL1_SET_INTERLACE_FIELDS_MASK)
#define LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW_MASK (0x1000000U)
#define LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW_SHIFT (24U)
#define LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW(x)  (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW_SHIFT)) & LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW_MASK)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_MASK        (0x2000000U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_SHIFT       (25U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_BM_ERROR_IRQ_SHIFT)) & LCDIF_CTRL1_SET_BM_ERROR_IRQ_MASK)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN_MASK     (0x4000000U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN_SHIFT    (26U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN_SHIFT)) & LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN_MASK)
#define LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB_MASK (0x8000000U)
#define LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB_SHIFT (27U)
#define LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB_SHIFT)) & LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB_MASK)
#define LCDIF_CTRL1_SET_RSRVD1_MASK              (0xF0000000U)
#define LCDIF_CTRL1_SET_RSRVD1_SHIFT             (28U)
#define LCDIF_CTRL1_SET_RSRVD1(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_RSRVD1_SHIFT)) & LCDIF_CTRL1_SET_RSRVD1_MASK)

/*! @name CTRL1_CLR - eLCDIF General Control1 Register */
#define LCDIF_CTRL1_CLR_RESET_MASK               (0x1U)
#define LCDIF_CTRL1_CLR_RESET_SHIFT              (0U)
#define LCDIF_CTRL1_CLR_RESET(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_RESET_SHIFT)) & LCDIF_CTRL1_CLR_RESET_MASK)
#define LCDIF_CTRL1_CLR_MODE86_MASK              (0x2U)
#define LCDIF_CTRL1_CLR_MODE86_SHIFT             (1U)
#define LCDIF_CTRL1_CLR_MODE86(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_MODE86_SHIFT)) & LCDIF_CTRL1_CLR_MODE86_MASK)
#define LCDIF_CTRL1_CLR_BUSY_ENABLE_MASK         (0x4U)
#define LCDIF_CTRL1_CLR_BUSY_ENABLE_SHIFT        (2U)
#define LCDIF_CTRL1_CLR_BUSY_ENABLE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_BUSY_ENABLE_SHIFT)) & LCDIF_CTRL1_CLR_BUSY_ENABLE_MASK)
#define LCDIF_CTRL1_CLR_RSRVD0_MASK              (0xF8U)
#define LCDIF_CTRL1_CLR_RSRVD0_SHIFT             (3U)
#define LCDIF_CTRL1_CLR_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_RSRVD0_SHIFT)) & LCDIF_CTRL1_CLR_RSRVD0_MASK)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_MASK      (0x100U)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_SHIFT     (8U)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_SHIFT)) & LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_MASK)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_MASK  (0x200U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_SHIFT (9U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_SHIFT)) & LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_MASK)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_MASK       (0x400U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_SHIFT      (10U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_SHIFT)) & LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_MASK)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_MASK        (0x800U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_SHIFT       (11U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_OVERFLOW_IRQ_SHIFT)) & LCDIF_CTRL1_CLR_OVERFLOW_IRQ_MASK)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN_MASK   (0x1000U)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN_SHIFT  (12U)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN_SHIFT)) & LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN_MASK)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN_MASK (0x2000U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN_SHIFT (13U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN_SHIFT)) & LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN_MASK)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN_MASK    (0x4000U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN_SHIFT   (14U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN_SHIFT)) & LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN_MASK)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN_MASK     (0x8000U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN_SHIFT    (15U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN_SHIFT)) & LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN_MASK)
#define LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_MASK (0xF0000U)
#define LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_SHIFT (16U)
#define LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS_SHIFT)) & LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS_MASK)
#define LCDIF_CTRL1_CLR_FIFO_CLEAR_MASK          (0x200000U)
#define LCDIF_CTRL1_CLR_FIFO_CLEAR_SHIFT         (21U)
#define LCDIF_CTRL1_CLR_FIFO_CLEAR(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_FIFO_CLEAR_SHIFT)) & LCDIF_CTRL1_CLR_FIFO_CLEAR_MASK)
#define LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD_SHIFT)) & LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD_MASK)
#define LCDIF_CTRL1_CLR_INTERLACE_FIELDS_MASK    (0x800000U)
#define LCDIF_CTRL1_CLR_INTERLACE_FIELDS_SHIFT   (23U)
#define LCDIF_CTRL1_CLR_INTERLACE_FIELDS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_INTERLACE_FIELDS_SHIFT)) & LCDIF_CTRL1_CLR_INTERLACE_FIELDS_MASK)
#define LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW_MASK (0x1000000U)
#define LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW_SHIFT (24U)
#define LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW(x)  (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW_SHIFT)) & LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW_MASK)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_MASK        (0x2000000U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_SHIFT       (25U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_BM_ERROR_IRQ_SHIFT)) & LCDIF_CTRL1_CLR_BM_ERROR_IRQ_MASK)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN_MASK     (0x4000000U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN_SHIFT    (26U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN_SHIFT)) & LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN_MASK)
#define LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB_MASK (0x8000000U)
#define LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB_SHIFT (27U)
#define LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB_SHIFT)) & LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB_MASK)
#define LCDIF_CTRL1_CLR_RSRVD1_MASK              (0xF0000000U)
#define LCDIF_CTRL1_CLR_RSRVD1_SHIFT             (28U)
#define LCDIF_CTRL1_CLR_RSRVD1(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_RSRVD1_SHIFT)) & LCDIF_CTRL1_CLR_RSRVD1_MASK)

/*! @name CTRL1_TOG - eLCDIF General Control1 Register */
#define LCDIF_CTRL1_TOG_RESET_MASK               (0x1U)
#define LCDIF_CTRL1_TOG_RESET_SHIFT              (0U)
#define LCDIF_CTRL1_TOG_RESET(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_RESET_SHIFT)) & LCDIF_CTRL1_TOG_RESET_MASK)
#define LCDIF_CTRL1_TOG_MODE86_MASK              (0x2U)
#define LCDIF_CTRL1_TOG_MODE86_SHIFT             (1U)
#define LCDIF_CTRL1_TOG_MODE86(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_MODE86_SHIFT)) & LCDIF_CTRL1_TOG_MODE86_MASK)
#define LCDIF_CTRL1_TOG_BUSY_ENABLE_MASK         (0x4U)
#define LCDIF_CTRL1_TOG_BUSY_ENABLE_SHIFT        (2U)
#define LCDIF_CTRL1_TOG_BUSY_ENABLE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_BUSY_ENABLE_SHIFT)) & LCDIF_CTRL1_TOG_BUSY_ENABLE_MASK)
#define LCDIF_CTRL1_TOG_RSRVD0_MASK              (0xF8U)
#define LCDIF_CTRL1_TOG_RSRVD0_SHIFT             (3U)
#define LCDIF_CTRL1_TOG_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_RSRVD0_SHIFT)) & LCDIF_CTRL1_TOG_RSRVD0_MASK)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_MASK      (0x100U)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_SHIFT     (8U)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_SHIFT)) & LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_MASK)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_MASK  (0x200U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_SHIFT (9U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_SHIFT)) & LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_MASK)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_MASK       (0x400U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_SHIFT      (10U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_SHIFT)) & LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_MASK)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_MASK        (0x800U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_SHIFT       (11U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_OVERFLOW_IRQ_SHIFT)) & LCDIF_CTRL1_TOG_OVERFLOW_IRQ_MASK)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN_MASK   (0x1000U)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN_SHIFT  (12U)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN_SHIFT)) & LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN_MASK)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN_MASK (0x2000U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN_SHIFT (13U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN_SHIFT)) & LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN_MASK)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN_MASK    (0x4000U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN_SHIFT   (14U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN_SHIFT)) & LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN_MASK)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN_MASK     (0x8000U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN_SHIFT    (15U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN_SHIFT)) & LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN_MASK)
#define LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_MASK (0xF0000U)
#define LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_SHIFT (16U)
#define LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS_SHIFT)) & LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS_MASK)
#define LCDIF_CTRL1_TOG_FIFO_CLEAR_MASK          (0x200000U)
#define LCDIF_CTRL1_TOG_FIFO_CLEAR_SHIFT         (21U)
#define LCDIF_CTRL1_TOG_FIFO_CLEAR(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_FIFO_CLEAR_SHIFT)) & LCDIF_CTRL1_TOG_FIFO_CLEAR_MASK)
#define LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD_SHIFT)) & LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD_MASK)
#define LCDIF_CTRL1_TOG_INTERLACE_FIELDS_MASK    (0x800000U)
#define LCDIF_CTRL1_TOG_INTERLACE_FIELDS_SHIFT   (23U)
#define LCDIF_CTRL1_TOG_INTERLACE_FIELDS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_INTERLACE_FIELDS_SHIFT)) & LCDIF_CTRL1_TOG_INTERLACE_FIELDS_MASK)
#define LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW_MASK (0x1000000U)
#define LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW_SHIFT (24U)
#define LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW(x)  (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW_SHIFT)) & LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW_MASK)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_MASK        (0x2000000U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_SHIFT       (25U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_BM_ERROR_IRQ_SHIFT)) & LCDIF_CTRL1_TOG_BM_ERROR_IRQ_MASK)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN_MASK     (0x4000000U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN_SHIFT    (26U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN_SHIFT)) & LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN_MASK)
#define LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB_MASK (0x8000000U)
#define LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB_SHIFT (27U)
#define LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB_SHIFT)) & LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB_MASK)
#define LCDIF_CTRL1_TOG_RSRVD1_MASK              (0xF0000000U)
#define LCDIF_CTRL1_TOG_RSRVD1_SHIFT             (28U)
#define LCDIF_CTRL1_TOG_RSRVD1(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_RSRVD1_SHIFT)) & LCDIF_CTRL1_TOG_RSRVD1_MASK)

/*! @name CTRL2 - eLCDIF General Control2 Register */
#define LCDIF_CTRL2_RSRVD0_MASK                  (0x1U)
#define LCDIF_CTRL2_RSRVD0_SHIFT                 (0U)
#define LCDIF_CTRL2_RSRVD0(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_RSRVD0_SHIFT)) & LCDIF_CTRL2_RSRVD0_MASK)
#define LCDIF_CTRL2_INITIAL_DUMMY_READ_MASK      (0xEU)
#define LCDIF_CTRL2_INITIAL_DUMMY_READ_SHIFT     (1U)
#define LCDIF_CTRL2_INITIAL_DUMMY_READ(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_RSRVD1_MASK                  (0x80U)
#define LCDIF_CTRL2_RSRVD1_SHIFT                 (7U)
#define LCDIF_CTRL2_RSRVD1(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_RSRVD1_SHIFT)) & LCDIF_CTRL2_RSRVD1_MASK)
#define LCDIF_CTRL2_READ_MODE_6_BIT_INPUT_MASK   (0x100U)
#define LCDIF_CTRL2_READ_MODE_6_BIT_INPUT_SHIFT  (8U)
#define LCDIF_CTRL2_READ_MODE_6_BIT_INPUT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_READ_MODE_6_BIT_INPUT_SHIFT)) & LCDIF_CTRL2_READ_MODE_6_BIT_INPUT_MASK)
#define LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT)) & LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK)
#define LCDIF_CTRL2_READ_PACK_DIR_MASK           (0x400U)
#define LCDIF_CTRL2_READ_PACK_DIR_SHIFT          (10U)
#define LCDIF_CTRL2_READ_PACK_DIR(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_READ_PACK_DIR_SHIFT)) & LCDIF_CTRL2_READ_PACK_DIR_MASK)
#define LCDIF_CTRL2_RSRVD2_MASK                  (0x800U)
#define LCDIF_CTRL2_RSRVD2_SHIFT                 (11U)
#define LCDIF_CTRL2_RSRVD2(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_RSRVD2_SHIFT)) & LCDIF_CTRL2_RSRVD2_MASK)
#define LCDIF_CTRL2_EVEN_LINE_PATTERN_MASK       (0x7000U)
#define LCDIF_CTRL2_EVEN_LINE_PATTERN_SHIFT      (12U)
#define LCDIF_CTRL2_EVEN_LINE_PATTERN(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_RSRVD3_MASK                  (0x8000U)
#define LCDIF_CTRL2_RSRVD3_SHIFT                 (15U)
#define LCDIF_CTRL2_RSRVD3(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_RSRVD3_SHIFT)) & LCDIF_CTRL2_RSRVD3_MASK)
#define LCDIF_CTRL2_ODD_LINE_PATTERN_MASK        (0x70000U)
#define LCDIF_CTRL2_ODD_LINE_PATTERN_SHIFT       (16U)
#define LCDIF_CTRL2_ODD_LINE_PATTERN(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_RSRVD4_MASK                  (0x80000U)
#define LCDIF_CTRL2_RSRVD4_SHIFT                 (19U)
#define LCDIF_CTRL2_RSRVD4(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_RSRVD4_SHIFT)) & LCDIF_CTRL2_RSRVD4_MASK)
#define LCDIF_CTRL2_BURST_LEN_8_MASK             (0x100000U)
#define LCDIF_CTRL2_BURST_LEN_8_SHIFT            (20U)
#define LCDIF_CTRL2_BURST_LEN_8(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_BURST_LEN_8_SHIFT)) & LCDIF_CTRL2_BURST_LEN_8_MASK)
#define LCDIF_CTRL2_OUTSTANDING_REQS_MASK        (0xE00000U)
#define LCDIF_CTRL2_OUTSTANDING_REQS_SHIFT       (21U)
#define LCDIF_CTRL2_OUTSTANDING_REQS(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_RSRVD5_MASK                  (0xFF000000U)
#define LCDIF_CTRL2_RSRVD5_SHIFT                 (24U)
#define LCDIF_CTRL2_RSRVD5(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_RSRVD5_SHIFT)) & LCDIF_CTRL2_RSRVD5_MASK)

/*! @name CTRL2_SET - eLCDIF General Control2 Register */
#define LCDIF_CTRL2_SET_RSRVD0_MASK              (0x1U)
#define LCDIF_CTRL2_SET_RSRVD0_SHIFT             (0U)
#define LCDIF_CTRL2_SET_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_RSRVD0_SHIFT)) & LCDIF_CTRL2_SET_RSRVD0_MASK)
#define LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_MASK  (0xEU)
#define LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_SHIFT (1U)
#define LCDIF_CTRL2_SET_INITIAL_DUMMY_READ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_SET_RSRVD1_MASK              (0x80U)
#define LCDIF_CTRL2_SET_RSRVD1_SHIFT             (7U)
#define LCDIF_CTRL2_SET_RSRVD1(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_RSRVD1_SHIFT)) & LCDIF_CTRL2_SET_RSRVD1_MASK)
#define LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT_MASK (0x100U)
#define LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT_SHIFT (8U)
#define LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT_SHIFT)) & LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT_MASK)
#define LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT)) & LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK)
#define LCDIF_CTRL2_SET_READ_PACK_DIR_MASK       (0x400U)
#define LCDIF_CTRL2_SET_READ_PACK_DIR_SHIFT      (10U)
#define LCDIF_CTRL2_SET_READ_PACK_DIR(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_READ_PACK_DIR_SHIFT)) & LCDIF_CTRL2_SET_READ_PACK_DIR_MASK)
#define LCDIF_CTRL2_SET_RSRVD2_MASK              (0x800U)
#define LCDIF_CTRL2_SET_RSRVD2_SHIFT             (11U)
#define LCDIF_CTRL2_SET_RSRVD2(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_RSRVD2_SHIFT)) & LCDIF_CTRL2_SET_RSRVD2_MASK)
#define LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_MASK   (0x7000U)
#define LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_SHIFT  (12U)
#define LCDIF_CTRL2_SET_EVEN_LINE_PATTERN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_SET_RSRVD3_MASK              (0x8000U)
#define LCDIF_CTRL2_SET_RSRVD3_SHIFT             (15U)
#define LCDIF_CTRL2_SET_RSRVD3(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_RSRVD3_SHIFT)) & LCDIF_CTRL2_SET_RSRVD3_MASK)
#define LCDIF_CTRL2_SET_ODD_LINE_PATTERN_MASK    (0x70000U)
#define LCDIF_CTRL2_SET_ODD_LINE_PATTERN_SHIFT   (16U)
#define LCDIF_CTRL2_SET_ODD_LINE_PATTERN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_SET_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_SET_RSRVD4_MASK              (0x80000U)
#define LCDIF_CTRL2_SET_RSRVD4_SHIFT             (19U)
#define LCDIF_CTRL2_SET_RSRVD4(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_RSRVD4_SHIFT)) & LCDIF_CTRL2_SET_RSRVD4_MASK)
#define LCDIF_CTRL2_SET_BURST_LEN_8_MASK         (0x100000U)
#define LCDIF_CTRL2_SET_BURST_LEN_8_SHIFT        (20U)
#define LCDIF_CTRL2_SET_BURST_LEN_8(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_BURST_LEN_8_SHIFT)) & LCDIF_CTRL2_SET_BURST_LEN_8_MASK)
#define LCDIF_CTRL2_SET_OUTSTANDING_REQS_MASK    (0xE00000U)
#define LCDIF_CTRL2_SET_OUTSTANDING_REQS_SHIFT   (21U)
#define LCDIF_CTRL2_SET_OUTSTANDING_REQS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_SET_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_SET_RSRVD5_MASK              (0xFF000000U)
#define LCDIF_CTRL2_SET_RSRVD5_SHIFT             (24U)
#define LCDIF_CTRL2_SET_RSRVD5(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_RSRVD5_SHIFT)) & LCDIF_CTRL2_SET_RSRVD5_MASK)

/*! @name CTRL2_CLR - eLCDIF General Control2 Register */
#define LCDIF_CTRL2_CLR_RSRVD0_MASK              (0x1U)
#define LCDIF_CTRL2_CLR_RSRVD0_SHIFT             (0U)
#define LCDIF_CTRL2_CLR_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_RSRVD0_SHIFT)) & LCDIF_CTRL2_CLR_RSRVD0_MASK)
#define LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_MASK  (0xEU)
#define LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_SHIFT (1U)
#define LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_CLR_RSRVD1_MASK              (0x80U)
#define LCDIF_CTRL2_CLR_RSRVD1_SHIFT             (7U)
#define LCDIF_CTRL2_CLR_RSRVD1(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_RSRVD1_SHIFT)) & LCDIF_CTRL2_CLR_RSRVD1_MASK)
#define LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT_MASK (0x100U)
#define LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT_SHIFT (8U)
#define LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT_SHIFT)) & LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT_MASK)
#define LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT)) & LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK)
#define LCDIF_CTRL2_CLR_READ_PACK_DIR_MASK       (0x400U)
#define LCDIF_CTRL2_CLR_READ_PACK_DIR_SHIFT      (10U)
#define LCDIF_CTRL2_CLR_READ_PACK_DIR(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_READ_PACK_DIR_SHIFT)) & LCDIF_CTRL2_CLR_READ_PACK_DIR_MASK)
#define LCDIF_CTRL2_CLR_RSRVD2_MASK              (0x800U)
#define LCDIF_CTRL2_CLR_RSRVD2_SHIFT             (11U)
#define LCDIF_CTRL2_CLR_RSRVD2(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_RSRVD2_SHIFT)) & LCDIF_CTRL2_CLR_RSRVD2_MASK)
#define LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_MASK   (0x7000U)
#define LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_SHIFT  (12U)
#define LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_CLR_RSRVD3_MASK              (0x8000U)
#define LCDIF_CTRL2_CLR_RSRVD3_SHIFT             (15U)
#define LCDIF_CTRL2_CLR_RSRVD3(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_RSRVD3_SHIFT)) & LCDIF_CTRL2_CLR_RSRVD3_MASK)
#define LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_MASK    (0x70000U)
#define LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_SHIFT   (16U)
#define LCDIF_CTRL2_CLR_ODD_LINE_PATTERN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_CLR_RSRVD4_MASK              (0x80000U)
#define LCDIF_CTRL2_CLR_RSRVD4_SHIFT             (19U)
#define LCDIF_CTRL2_CLR_RSRVD4(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_RSRVD4_SHIFT)) & LCDIF_CTRL2_CLR_RSRVD4_MASK)
#define LCDIF_CTRL2_CLR_BURST_LEN_8_MASK         (0x100000U)
#define LCDIF_CTRL2_CLR_BURST_LEN_8_SHIFT        (20U)
#define LCDIF_CTRL2_CLR_BURST_LEN_8(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_BURST_LEN_8_SHIFT)) & LCDIF_CTRL2_CLR_BURST_LEN_8_MASK)
#define LCDIF_CTRL2_CLR_OUTSTANDING_REQS_MASK    (0xE00000U)
#define LCDIF_CTRL2_CLR_OUTSTANDING_REQS_SHIFT   (21U)
#define LCDIF_CTRL2_CLR_OUTSTANDING_REQS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_CLR_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_CLR_RSRVD5_MASK              (0xFF000000U)
#define LCDIF_CTRL2_CLR_RSRVD5_SHIFT             (24U)
#define LCDIF_CTRL2_CLR_RSRVD5(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_RSRVD5_SHIFT)) & LCDIF_CTRL2_CLR_RSRVD5_MASK)

/*! @name CTRL2_TOG - eLCDIF General Control2 Register */
#define LCDIF_CTRL2_TOG_RSRVD0_MASK              (0x1U)
#define LCDIF_CTRL2_TOG_RSRVD0_SHIFT             (0U)
#define LCDIF_CTRL2_TOG_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_RSRVD0_SHIFT)) & LCDIF_CTRL2_TOG_RSRVD0_MASK)
#define LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_MASK  (0xEU)
#define LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_SHIFT (1U)
#define LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_TOG_RSRVD1_MASK              (0x80U)
#define LCDIF_CTRL2_TOG_RSRVD1_SHIFT             (7U)
#define LCDIF_CTRL2_TOG_RSRVD1(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_RSRVD1_SHIFT)) & LCDIF_CTRL2_TOG_RSRVD1_MASK)
#define LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT_MASK (0x100U)
#define LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT_SHIFT (8U)
#define LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT_SHIFT)) & LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT_MASK)
#define LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT)) & LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK)
#define LCDIF_CTRL2_TOG_READ_PACK_DIR_MASK       (0x400U)
#define LCDIF_CTRL2_TOG_READ_PACK_DIR_SHIFT      (10U)
#define LCDIF_CTRL2_TOG_READ_PACK_DIR(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_READ_PACK_DIR_SHIFT)) & LCDIF_CTRL2_TOG_READ_PACK_DIR_MASK)
#define LCDIF_CTRL2_TOG_RSRVD2_MASK              (0x800U)
#define LCDIF_CTRL2_TOG_RSRVD2_SHIFT             (11U)
#define LCDIF_CTRL2_TOG_RSRVD2(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_RSRVD2_SHIFT)) & LCDIF_CTRL2_TOG_RSRVD2_MASK)
#define LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_MASK   (0x7000U)
#define LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_SHIFT  (12U)
#define LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_TOG_RSRVD3_MASK              (0x8000U)
#define LCDIF_CTRL2_TOG_RSRVD3_SHIFT             (15U)
#define LCDIF_CTRL2_TOG_RSRVD3(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_RSRVD3_SHIFT)) & LCDIF_CTRL2_TOG_RSRVD3_MASK)
#define LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_MASK    (0x70000U)
#define LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_SHIFT   (16U)
#define LCDIF_CTRL2_TOG_ODD_LINE_PATTERN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_TOG_RSRVD4_MASK              (0x80000U)
#define LCDIF_CTRL2_TOG_RSRVD4_SHIFT             (19U)
#define LCDIF_CTRL2_TOG_RSRVD4(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_RSRVD4_SHIFT)) & LCDIF_CTRL2_TOG_RSRVD4_MASK)
#define LCDIF_CTRL2_TOG_BURST_LEN_8_MASK         (0x100000U)
#define LCDIF_CTRL2_TOG_BURST_LEN_8_SHIFT        (20U)
#define LCDIF_CTRL2_TOG_BURST_LEN_8(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_BURST_LEN_8_SHIFT)) & LCDIF_CTRL2_TOG_BURST_LEN_8_MASK)
#define LCDIF_CTRL2_TOG_OUTSTANDING_REQS_MASK    (0xE00000U)
#define LCDIF_CTRL2_TOG_OUTSTANDING_REQS_SHIFT   (21U)
#define LCDIF_CTRL2_TOG_OUTSTANDING_REQS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_TOG_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_TOG_RSRVD5_MASK              (0xFF000000U)
#define LCDIF_CTRL2_TOG_RSRVD5_SHIFT             (24U)
#define LCDIF_CTRL2_TOG_RSRVD5(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_RSRVD5_SHIFT)) & LCDIF_CTRL2_TOG_RSRVD5_MASK)

/*! @name TRANSFER_COUNT - eLCDIF Horizontal and Vertical Valid Data Count Register */
#define LCDIF_TRANSFER_COUNT_H_COUNT_MASK        (0xFFFFU)
#define LCDIF_TRANSFER_COUNT_H_COUNT_SHIFT       (0U)
#define LCDIF_TRANSFER_COUNT_H_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_TRANSFER_COUNT_H_COUNT_SHIFT)) & LCDIF_TRANSFER_COUNT_H_COUNT_MASK)
#define LCDIF_TRANSFER_COUNT_V_COUNT_MASK        (0xFFFF0000U)
#define LCDIF_TRANSFER_COUNT_V_COUNT_SHIFT       (16U)
#define LCDIF_TRANSFER_COUNT_V_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_TRANSFER_COUNT_V_COUNT_SHIFT)) & LCDIF_TRANSFER_COUNT_V_COUNT_MASK)

/*! @name CUR_BUF - LCD Interface Current Buffer Address Register */
#define LCDIF_CUR_BUF_ADDR_MASK                  (0xFFFFFFFFU)
#define LCDIF_CUR_BUF_ADDR_SHIFT                 (0U)
#define LCDIF_CUR_BUF_ADDR(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CUR_BUF_ADDR_SHIFT)) & LCDIF_CUR_BUF_ADDR_MASK)

/*! @name NEXT_BUF - LCD Interface Next Buffer Address Register */
#define LCDIF_NEXT_BUF_ADDR_MASK                 (0xFFFFFFFFU)
#define LCDIF_NEXT_BUF_ADDR_SHIFT                (0U)
#define LCDIF_NEXT_BUF_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_NEXT_BUF_ADDR_SHIFT)) & LCDIF_NEXT_BUF_ADDR_MASK)

/*! @name TIMING - LCD Interface Timing Register */
#define LCDIF_TIMING_DATA_SETUP_MASK             (0xFFU)
#define LCDIF_TIMING_DATA_SETUP_SHIFT            (0U)
#define LCDIF_TIMING_DATA_SETUP(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_DATA_SETUP_SHIFT)) & LCDIF_TIMING_DATA_SETUP_MASK)
#define LCDIF_TIMING_DATA_HOLD_MASK              (0xFF00U)
#define LCDIF_TIMING_DATA_HOLD_SHIFT             (8U)
#define LCDIF_TIMING_DATA_HOLD(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_DATA_HOLD_SHIFT)) & LCDIF_TIMING_DATA_HOLD_MASK)
#define LCDIF_TIMING_CMD_SETUP_MASK              (0xFF0000U)
#define LCDIF_TIMING_CMD_SETUP_SHIFT             (16U)
#define LCDIF_TIMING_CMD_SETUP(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_CMD_SETUP_SHIFT)) & LCDIF_TIMING_CMD_SETUP_MASK)
#define LCDIF_TIMING_CMD_HOLD_MASK               (0xFF000000U)
#define LCDIF_TIMING_CMD_HOLD_SHIFT              (24U)
#define LCDIF_TIMING_CMD_HOLD(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_CMD_HOLD_SHIFT)) & LCDIF_TIMING_CMD_HOLD_MASK)

/*! @name VDCTRL0 - eLCDIF VSYNC Mode and Dotclk Mode Control Register0 */
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_MASK     (0x3FFFFU)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_SHIFT    (0U)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_HALF_LINE_MODE_MASK        (0x40000U)
#define LCDIF_VDCTRL0_HALF_LINE_MODE_SHIFT       (18U)
#define LCDIF_VDCTRL0_HALF_LINE_MODE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_HALF_LINE_MODE_SHIFT)) & LCDIF_VDCTRL0_HALF_LINE_MODE_MASK)
#define LCDIF_VDCTRL0_HALF_LINE_MASK             (0x80000U)
#define LCDIF_VDCTRL0_HALF_LINE_SHIFT            (19U)
#define LCDIF_VDCTRL0_HALF_LINE(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_HALF_LINE_SHIFT)) & LCDIF_VDCTRL0_HALF_LINE_MASK)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT(x)  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT_SHIFT)) & LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT_MASK)
#define LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT_MASK     (0x200000U)
#define LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT_SHIFT    (21U)
#define LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT_SHIFT)) & LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT_MASK)
#define LCDIF_VDCTRL0_RSRVD1_MASK                (0xC00000U)
#define LCDIF_VDCTRL0_RSRVD1_SHIFT               (22U)
#define LCDIF_VDCTRL0_RSRVD1(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_RSRVD1_MASK)
#define LCDIF_VDCTRL0_ENABLE_POL_MASK            (0x1000000U)
#define LCDIF_VDCTRL0_ENABLE_POL_SHIFT           (24U)
#define LCDIF_VDCTRL0_ENABLE_POL(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_ENABLE_POL_SHIFT)) & LCDIF_VDCTRL0_ENABLE_POL_MASK)
#define LCDIF_VDCTRL0_DOTCLK_POL_MASK            (0x2000000U)
#define LCDIF_VDCTRL0_DOTCLK_POL_SHIFT           (25U)
#define LCDIF_VDCTRL0_DOTCLK_POL(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_DOTCLK_POL_SHIFT)) & LCDIF_VDCTRL0_DOTCLK_POL_MASK)
#define LCDIF_VDCTRL0_HSYNC_POL_MASK             (0x4000000U)
#define LCDIF_VDCTRL0_HSYNC_POL_SHIFT            (26U)
#define LCDIF_VDCTRL0_HSYNC_POL(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_HSYNC_POL_SHIFT)) & LCDIF_VDCTRL0_HSYNC_POL_MASK)
#define LCDIF_VDCTRL0_VSYNC_POL_MASK             (0x8000000U)
#define LCDIF_VDCTRL0_VSYNC_POL_SHIFT            (27U)
#define LCDIF_VDCTRL0_VSYNC_POL(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_VSYNC_POL_SHIFT)) & LCDIF_VDCTRL0_VSYNC_POL_MASK)
#define LCDIF_VDCTRL0_ENABLE_PRESENT_MASK        (0x10000000U)
#define LCDIF_VDCTRL0_ENABLE_PRESENT_SHIFT       (28U)
#define LCDIF_VDCTRL0_ENABLE_PRESENT(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_ENABLE_PRESENT_SHIFT)) & LCDIF_VDCTRL0_ENABLE_PRESENT_MASK)
#define LCDIF_VDCTRL0_VSYNC_OEB_MASK             (0x20000000U)
#define LCDIF_VDCTRL0_VSYNC_OEB_SHIFT            (29U)
#define LCDIF_VDCTRL0_VSYNC_OEB(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_VSYNC_OEB_SHIFT)) & LCDIF_VDCTRL0_VSYNC_OEB_MASK)
#define LCDIF_VDCTRL0_RSRVD2_MASK                (0xC0000000U)
#define LCDIF_VDCTRL0_RSRVD2_SHIFT               (30U)
#define LCDIF_VDCTRL0_RSRVD2(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_RSRVD2_MASK)

/*! @name VDCTRL0_SET - eLCDIF VSYNC Mode and Dotclk Mode Control Register0 */
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_MASK (0x3FFFFU)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_SHIFT (0U)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_SET_HALF_LINE_MODE_MASK    (0x40000U)
#define LCDIF_VDCTRL0_SET_HALF_LINE_MODE_SHIFT   (18U)
#define LCDIF_VDCTRL0_SET_HALF_LINE_MODE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_HALF_LINE_MODE_SHIFT)) & LCDIF_VDCTRL0_SET_HALF_LINE_MODE_MASK)
#define LCDIF_VDCTRL0_SET_HALF_LINE_MASK         (0x80000U)
#define LCDIF_VDCTRL0_SET_HALF_LINE_SHIFT        (19U)
#define LCDIF_VDCTRL0_SET_HALF_LINE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_HALF_LINE_SHIFT)) & LCDIF_VDCTRL0_SET_HALF_LINE_MASK)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT_SHIFT)) & LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT_MASK)
#define LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT_MASK (0x200000U)
#define LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT_SHIFT (21U)
#define LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT_SHIFT)) & LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT_MASK)
#define LCDIF_VDCTRL0_SET_RSRVD1_MASK            (0xC00000U)
#define LCDIF_VDCTRL0_SET_RSRVD1_SHIFT           (22U)
#define LCDIF_VDCTRL0_SET_RSRVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_SET_RSRVD1_MASK)
#define LCDIF_VDCTRL0_SET_ENABLE_POL_MASK        (0x1000000U)
#define LCDIF_VDCTRL0_SET_ENABLE_POL_SHIFT       (24U)
#define LCDIF_VDCTRL0_SET_ENABLE_POL(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_ENABLE_POL_SHIFT)) & LCDIF_VDCTRL0_SET_ENABLE_POL_MASK)
#define LCDIF_VDCTRL0_SET_DOTCLK_POL_MASK        (0x2000000U)
#define LCDIF_VDCTRL0_SET_DOTCLK_POL_SHIFT       (25U)
#define LCDIF_VDCTRL0_SET_DOTCLK_POL(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_DOTCLK_POL_SHIFT)) & LCDIF_VDCTRL0_SET_DOTCLK_POL_MASK)
#define LCDIF_VDCTRL0_SET_HSYNC_POL_MASK         (0x4000000U)
#define LCDIF_VDCTRL0_SET_HSYNC_POL_SHIFT        (26U)
#define LCDIF_VDCTRL0_SET_HSYNC_POL(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_HSYNC_POL_SHIFT)) & LCDIF_VDCTRL0_SET_HSYNC_POL_MASK)
#define LCDIF_VDCTRL0_SET_VSYNC_POL_MASK         (0x8000000U)
#define LCDIF_VDCTRL0_SET_VSYNC_POL_SHIFT        (27U)
#define LCDIF_VDCTRL0_SET_VSYNC_POL(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_VSYNC_POL_SHIFT)) & LCDIF_VDCTRL0_SET_VSYNC_POL_MASK)
#define LCDIF_VDCTRL0_SET_ENABLE_PRESENT_MASK    (0x10000000U)
#define LCDIF_VDCTRL0_SET_ENABLE_PRESENT_SHIFT   (28U)
#define LCDIF_VDCTRL0_SET_ENABLE_PRESENT(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_ENABLE_PRESENT_SHIFT)) & LCDIF_VDCTRL0_SET_ENABLE_PRESENT_MASK)
#define LCDIF_VDCTRL0_SET_VSYNC_OEB_MASK         (0x20000000U)
#define LCDIF_VDCTRL0_SET_VSYNC_OEB_SHIFT        (29U)
#define LCDIF_VDCTRL0_SET_VSYNC_OEB(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_VSYNC_OEB_SHIFT)) & LCDIF_VDCTRL0_SET_VSYNC_OEB_MASK)
#define LCDIF_VDCTRL0_SET_RSRVD2_MASK            (0xC0000000U)
#define LCDIF_VDCTRL0_SET_RSRVD2_SHIFT           (30U)
#define LCDIF_VDCTRL0_SET_RSRVD2(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_SET_RSRVD2_MASK)

/*! @name VDCTRL0_CLR - eLCDIF VSYNC Mode and Dotclk Mode Control Register0 */
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_MASK (0x3FFFFU)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_SHIFT (0U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_MODE_MASK    (0x40000U)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_MODE_SHIFT   (18U)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_MODE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_HALF_LINE_MODE_SHIFT)) & LCDIF_VDCTRL0_CLR_HALF_LINE_MODE_MASK)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_MASK         (0x80000U)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_SHIFT        (19U)
#define LCDIF_VDCTRL0_CLR_HALF_LINE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_HALF_LINE_SHIFT)) & LCDIF_VDCTRL0_CLR_HALF_LINE_MASK)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT_SHIFT)) & LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT_MASK)
#define LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT_MASK (0x200000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT_SHIFT (21U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT_SHIFT)) & LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT_MASK)
#define LCDIF_VDCTRL0_CLR_RSRVD1_MASK            (0xC00000U)
#define LCDIF_VDCTRL0_CLR_RSRVD1_SHIFT           (22U)
#define LCDIF_VDCTRL0_CLR_RSRVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_CLR_RSRVD1_MASK)
#define LCDIF_VDCTRL0_CLR_ENABLE_POL_MASK        (0x1000000U)
#define LCDIF_VDCTRL0_CLR_ENABLE_POL_SHIFT       (24U)
#define LCDIF_VDCTRL0_CLR_ENABLE_POL(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_ENABLE_POL_SHIFT)) & LCDIF_VDCTRL0_CLR_ENABLE_POL_MASK)
#define LCDIF_VDCTRL0_CLR_DOTCLK_POL_MASK        (0x2000000U)
#define LCDIF_VDCTRL0_CLR_DOTCLK_POL_SHIFT       (25U)
#define LCDIF_VDCTRL0_CLR_DOTCLK_POL(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_DOTCLK_POL_SHIFT)) & LCDIF_VDCTRL0_CLR_DOTCLK_POL_MASK)
#define LCDIF_VDCTRL0_CLR_HSYNC_POL_MASK         (0x4000000U)
#define LCDIF_VDCTRL0_CLR_HSYNC_POL_SHIFT        (26U)
#define LCDIF_VDCTRL0_CLR_HSYNC_POL(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_HSYNC_POL_SHIFT)) & LCDIF_VDCTRL0_CLR_HSYNC_POL_MASK)
#define LCDIF_VDCTRL0_CLR_VSYNC_POL_MASK         (0x8000000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_POL_SHIFT        (27U)
#define LCDIF_VDCTRL0_CLR_VSYNC_POL(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_VSYNC_POL_SHIFT)) & LCDIF_VDCTRL0_CLR_VSYNC_POL_MASK)
#define LCDIF_VDCTRL0_CLR_ENABLE_PRESENT_MASK    (0x10000000U)
#define LCDIF_VDCTRL0_CLR_ENABLE_PRESENT_SHIFT   (28U)
#define LCDIF_VDCTRL0_CLR_ENABLE_PRESENT(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_ENABLE_PRESENT_SHIFT)) & LCDIF_VDCTRL0_CLR_ENABLE_PRESENT_MASK)
#define LCDIF_VDCTRL0_CLR_VSYNC_OEB_MASK         (0x20000000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_OEB_SHIFT        (29U)
#define LCDIF_VDCTRL0_CLR_VSYNC_OEB(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_VSYNC_OEB_SHIFT)) & LCDIF_VDCTRL0_CLR_VSYNC_OEB_MASK)
#define LCDIF_VDCTRL0_CLR_RSRVD2_MASK            (0xC0000000U)
#define LCDIF_VDCTRL0_CLR_RSRVD2_SHIFT           (30U)
#define LCDIF_VDCTRL0_CLR_RSRVD2(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_CLR_RSRVD2_MASK)

/*! @name VDCTRL0_TOG - eLCDIF VSYNC Mode and Dotclk Mode Control Register0 */
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_MASK (0x3FFFFU)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_SHIFT (0U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_MODE_MASK    (0x40000U)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_MODE_SHIFT   (18U)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_MODE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_HALF_LINE_MODE_SHIFT)) & LCDIF_VDCTRL0_TOG_HALF_LINE_MODE_MASK)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_MASK         (0x80000U)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_SHIFT        (19U)
#define LCDIF_VDCTRL0_TOG_HALF_LINE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_HALF_LINE_SHIFT)) & LCDIF_VDCTRL0_TOG_HALF_LINE_MASK)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT_SHIFT)) & LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT_MASK)
#define LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT_MASK (0x200000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT_SHIFT (21U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT_SHIFT)) & LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT_MASK)
#define LCDIF_VDCTRL0_TOG_RSRVD1_MASK            (0xC00000U)
#define LCDIF_VDCTRL0_TOG_RSRVD1_SHIFT           (22U)
#define LCDIF_VDCTRL0_TOG_RSRVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_TOG_RSRVD1_MASK)
#define LCDIF_VDCTRL0_TOG_ENABLE_POL_MASK        (0x1000000U)
#define LCDIF_VDCTRL0_TOG_ENABLE_POL_SHIFT       (24U)
#define LCDIF_VDCTRL0_TOG_ENABLE_POL(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_ENABLE_POL_SHIFT)) & LCDIF_VDCTRL0_TOG_ENABLE_POL_MASK)
#define LCDIF_VDCTRL0_TOG_DOTCLK_POL_MASK        (0x2000000U)
#define LCDIF_VDCTRL0_TOG_DOTCLK_POL_SHIFT       (25U)
#define LCDIF_VDCTRL0_TOG_DOTCLK_POL(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_DOTCLK_POL_SHIFT)) & LCDIF_VDCTRL0_TOG_DOTCLK_POL_MASK)
#define LCDIF_VDCTRL0_TOG_HSYNC_POL_MASK         (0x4000000U)
#define LCDIF_VDCTRL0_TOG_HSYNC_POL_SHIFT        (26U)
#define LCDIF_VDCTRL0_TOG_HSYNC_POL(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_HSYNC_POL_SHIFT)) & LCDIF_VDCTRL0_TOG_HSYNC_POL_MASK)
#define LCDIF_VDCTRL0_TOG_VSYNC_POL_MASK         (0x8000000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_POL_SHIFT        (27U)
#define LCDIF_VDCTRL0_TOG_VSYNC_POL(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_VSYNC_POL_SHIFT)) & LCDIF_VDCTRL0_TOG_VSYNC_POL_MASK)
#define LCDIF_VDCTRL0_TOG_ENABLE_PRESENT_MASK    (0x10000000U)
#define LCDIF_VDCTRL0_TOG_ENABLE_PRESENT_SHIFT   (28U)
#define LCDIF_VDCTRL0_TOG_ENABLE_PRESENT(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_ENABLE_PRESENT_SHIFT)) & LCDIF_VDCTRL0_TOG_ENABLE_PRESENT_MASK)
#define LCDIF_VDCTRL0_TOG_VSYNC_OEB_MASK         (0x20000000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_OEB_SHIFT        (29U)
#define LCDIF_VDCTRL0_TOG_VSYNC_OEB(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_VSYNC_OEB_SHIFT)) & LCDIF_VDCTRL0_TOG_VSYNC_OEB_MASK)
#define LCDIF_VDCTRL0_TOG_RSRVD2_MASK            (0xC0000000U)
#define LCDIF_VDCTRL0_TOG_RSRVD2_SHIFT           (30U)
#define LCDIF_VDCTRL0_TOG_RSRVD2(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_TOG_RSRVD2_MASK)

/*! @name VDCTRL1 - eLCDIF VSYNC Mode and Dotclk Mode Control Register1 */
#define LCDIF_VDCTRL1_VSYNC_PERIOD_MASK          (0xFFFFFFFFU)
#define LCDIF_VDCTRL1_VSYNC_PERIOD_SHIFT         (0U)
#define LCDIF_VDCTRL1_VSYNC_PERIOD(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL1_VSYNC_PERIOD_SHIFT)) & LCDIF_VDCTRL1_VSYNC_PERIOD_MASK)

/*! @name VDCTRL2 - LCDIF VSYNC Mode and Dotclk Mode Control Register2 */
#define LCDIF_VDCTRL2_HSYNC_PERIOD_MASK          (0x3FFFFU)
#define LCDIF_VDCTRL2_HSYNC_PERIOD_SHIFT         (0U)
#define LCDIF_VDCTRL2_HSYNC_PERIOD(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL2_HSYNC_PERIOD_SHIFT)) & LCDIF_VDCTRL2_HSYNC_PERIOD_MASK)
#define LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_MASK     (0xFFFC0000U)
#define LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_SHIFT    (18U)
#define LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_MASK)

/*! @name VDCTRL3 - eLCDIF VSYNC Mode and Dotclk Mode Control Register3 */
#define LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_MASK     (0xFFFFU)
#define LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_SHIFT    (0U)
#define LCDIF_VDCTRL3_VERTICAL_WAIT_CNT(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_SHIFT)) & LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_MASK)
#define LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_MASK   (0xFFF0000U)
#define LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_SHIFT  (16U)
#define LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_SHIFT)) & LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_MASK)
#define LCDIF_VDCTRL3_VSYNC_ONLY_MASK            (0x10000000U)
#define LCDIF_VDCTRL3_VSYNC_ONLY_SHIFT           (28U)
#define LCDIF_VDCTRL3_VSYNC_ONLY(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_VSYNC_ONLY_SHIFT)) & LCDIF_VDCTRL3_VSYNC_ONLY_MASK)
#define LCDIF_VDCTRL3_MUX_SYNC_SIGNALS_MASK      (0x20000000U)
#define LCDIF_VDCTRL3_MUX_SYNC_SIGNALS_SHIFT     (29U)
#define LCDIF_VDCTRL3_MUX_SYNC_SIGNALS(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_MUX_SYNC_SIGNALS_SHIFT)) & LCDIF_VDCTRL3_MUX_SYNC_SIGNALS_MASK)
#define LCDIF_VDCTRL3_RSRVD0_MASK                (0xC0000000U)
#define LCDIF_VDCTRL3_RSRVD0_SHIFT               (30U)
#define LCDIF_VDCTRL3_RSRVD0(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_RSRVD0_SHIFT)) & LCDIF_VDCTRL3_RSRVD0_MASK)

/*! @name VDCTRL4 - eLCDIF VSYNC Mode and Dotclk Mode Control Register4 */
#define LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_MASK (0x3FFFFU)
#define LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_SHIFT (0U)
#define LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_SHIFT)) & LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_MASK)
#define LCDIF_VDCTRL4_SYNC_SIGNALS_ON_MASK       (0x40000U)
#define LCDIF_VDCTRL4_SYNC_SIGNALS_ON_SHIFT      (18U)
#define LCDIF_VDCTRL4_SYNC_SIGNALS_ON(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL4_SYNC_SIGNALS_ON_SHIFT)) & LCDIF_VDCTRL4_SYNC_SIGNALS_ON_MASK)
#define LCDIF_VDCTRL4_RSRVD0_MASK                (0x1FF80000U)
#define LCDIF_VDCTRL4_RSRVD0_SHIFT               (19U)
#define LCDIF_VDCTRL4_RSRVD0(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL4_RSRVD0_SHIFT)) & LCDIF_VDCTRL4_RSRVD0_MASK)
#define LCDIF_VDCTRL4_DOTCLK_DLY_SEL_MASK        (0xE0000000U)
#define LCDIF_VDCTRL4_DOTCLK_DLY_SEL_SHIFT       (29U)
#define LCDIF_VDCTRL4_DOTCLK_DLY_SEL(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL4_DOTCLK_DLY_SEL_SHIFT)) & LCDIF_VDCTRL4_DOTCLK_DLY_SEL_MASK)

/*! @name DVICTRL0 - Digital Video Interface Control0 Register */
#define LCDIF_DVICTRL0_H_BLANKING_CNT_MASK       (0xFFFU)
#define LCDIF_DVICTRL0_H_BLANKING_CNT_SHIFT      (0U)
#define LCDIF_DVICTRL0_H_BLANKING_CNT(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_H_BLANKING_CNT_SHIFT)) & LCDIF_DVICTRL0_H_BLANKING_CNT_MASK)
#define LCDIF_DVICTRL0_RSRVD0_MASK               (0xF000U)
#define LCDIF_DVICTRL0_RSRVD0_SHIFT              (12U)
#define LCDIF_DVICTRL0_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_RSRVD0_SHIFT)) & LCDIF_DVICTRL0_RSRVD0_MASK)
#define LCDIF_DVICTRL0_H_ACTIVE_CNT_MASK         (0xFFF0000U)
#define LCDIF_DVICTRL0_H_ACTIVE_CNT_SHIFT        (16U)
#define LCDIF_DVICTRL0_H_ACTIVE_CNT(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_H_ACTIVE_CNT_SHIFT)) & LCDIF_DVICTRL0_H_ACTIVE_CNT_MASK)
#define LCDIF_DVICTRL0_RSRVD1_MASK               (0xF0000000U)
#define LCDIF_DVICTRL0_RSRVD1_SHIFT              (28U)
#define LCDIF_DVICTRL0_RSRVD1(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_RSRVD1_SHIFT)) & LCDIF_DVICTRL0_RSRVD1_MASK)

/*! @name DVICTRL1 - Digital Video Interface Control1 Register */
#define LCDIF_DVICTRL1_F2_START_LINE_MASK        (0x3FFU)
#define LCDIF_DVICTRL1_F2_START_LINE_SHIFT       (0U)
#define LCDIF_DVICTRL1_F2_START_LINE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_F2_START_LINE_SHIFT)) & LCDIF_DVICTRL1_F2_START_LINE_MASK)
#define LCDIF_DVICTRL1_F1_END_LINE_MASK          (0xFFC00U)
#define LCDIF_DVICTRL1_F1_END_LINE_SHIFT         (10U)
#define LCDIF_DVICTRL1_F1_END_LINE(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_F1_END_LINE_SHIFT)) & LCDIF_DVICTRL1_F1_END_LINE_MASK)
#define LCDIF_DVICTRL1_F1_START_LINE_MASK        (0x3FF00000U)
#define LCDIF_DVICTRL1_F1_START_LINE_SHIFT       (20U)
#define LCDIF_DVICTRL1_F1_START_LINE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_F1_START_LINE_SHIFT)) & LCDIF_DVICTRL1_F1_START_LINE_MASK)
#define LCDIF_DVICTRL1_RSRVD0_MASK               (0xC0000000U)
#define LCDIF_DVICTRL1_RSRVD0_SHIFT              (30U)
#define LCDIF_DVICTRL1_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_RSRVD0_SHIFT)) & LCDIF_DVICTRL1_RSRVD0_MASK)

/*! @name DVICTRL2 - Digital Video Interface Control2 Register */
#define LCDIF_DVICTRL2_V1_BLANK_END_LINE_MASK    (0x3FFU)
#define LCDIF_DVICTRL2_V1_BLANK_END_LINE_SHIFT   (0U)
#define LCDIF_DVICTRL2_V1_BLANK_END_LINE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_V1_BLANK_END_LINE_SHIFT)) & LCDIF_DVICTRL2_V1_BLANK_END_LINE_MASK)
#define LCDIF_DVICTRL2_V1_BLANK_START_LINE_MASK  (0xFFC00U)
#define LCDIF_DVICTRL2_V1_BLANK_START_LINE_SHIFT (10U)
#define LCDIF_DVICTRL2_V1_BLANK_START_LINE(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_V1_BLANK_START_LINE_SHIFT)) & LCDIF_DVICTRL2_V1_BLANK_START_LINE_MASK)
#define LCDIF_DVICTRL2_F2_END_LINE_MASK          (0x3FF00000U)
#define LCDIF_DVICTRL2_F2_END_LINE_SHIFT         (20U)
#define LCDIF_DVICTRL2_F2_END_LINE(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_F2_END_LINE_SHIFT)) & LCDIF_DVICTRL2_F2_END_LINE_MASK)
#define LCDIF_DVICTRL2_RSRVD0_MASK               (0xC0000000U)
#define LCDIF_DVICTRL2_RSRVD0_SHIFT              (30U)
#define LCDIF_DVICTRL2_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_RSRVD0_SHIFT)) & LCDIF_DVICTRL2_RSRVD0_MASK)

/*! @name DVICTRL3 - Digital Video Interface Control3 Register */
#define LCDIF_DVICTRL3_V_LINES_CNT_MASK          (0x3FFU)
#define LCDIF_DVICTRL3_V_LINES_CNT_SHIFT         (0U)
#define LCDIF_DVICTRL3_V_LINES_CNT(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_V_LINES_CNT_SHIFT)) & LCDIF_DVICTRL3_V_LINES_CNT_MASK)
#define LCDIF_DVICTRL3_V2_BLANK_END_LINE_MASK    (0xFFC00U)
#define LCDIF_DVICTRL3_V2_BLANK_END_LINE_SHIFT   (10U)
#define LCDIF_DVICTRL3_V2_BLANK_END_LINE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_V2_BLANK_END_LINE_SHIFT)) & LCDIF_DVICTRL3_V2_BLANK_END_LINE_MASK)
#define LCDIF_DVICTRL3_V2_BLANK_START_LINE_MASK  (0x3FF00000U)
#define LCDIF_DVICTRL3_V2_BLANK_START_LINE_SHIFT (20U)
#define LCDIF_DVICTRL3_V2_BLANK_START_LINE(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_V2_BLANK_START_LINE_SHIFT)) & LCDIF_DVICTRL3_V2_BLANK_START_LINE_MASK)
#define LCDIF_DVICTRL3_RSRVD0_MASK               (0xC0000000U)
#define LCDIF_DVICTRL3_RSRVD0_SHIFT              (30U)
#define LCDIF_DVICTRL3_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_RSRVD0_SHIFT)) & LCDIF_DVICTRL3_RSRVD0_MASK)

/*! @name DVICTRL4 - Digital Video Interface Control4 Register */
#define LCDIF_DVICTRL4_H_FILL_CNT_MASK           (0xFFU)
#define LCDIF_DVICTRL4_H_FILL_CNT_SHIFT          (0U)
#define LCDIF_DVICTRL4_H_FILL_CNT(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_H_FILL_CNT_SHIFT)) & LCDIF_DVICTRL4_H_FILL_CNT_MASK)
#define LCDIF_DVICTRL4_CR_FILL_VALUE_MASK        (0xFF00U)
#define LCDIF_DVICTRL4_CR_FILL_VALUE_SHIFT       (8U)
#define LCDIF_DVICTRL4_CR_FILL_VALUE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_CR_FILL_VALUE_SHIFT)) & LCDIF_DVICTRL4_CR_FILL_VALUE_MASK)
#define LCDIF_DVICTRL4_CB_FILL_VALUE_MASK        (0xFF0000U)
#define LCDIF_DVICTRL4_CB_FILL_VALUE_SHIFT       (16U)
#define LCDIF_DVICTRL4_CB_FILL_VALUE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_CB_FILL_VALUE_SHIFT)) & LCDIF_DVICTRL4_CB_FILL_VALUE_MASK)
#define LCDIF_DVICTRL4_Y_FILL_VALUE_MASK         (0xFF000000U)
#define LCDIF_DVICTRL4_Y_FILL_VALUE_SHIFT        (24U)
#define LCDIF_DVICTRL4_Y_FILL_VALUE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_Y_FILL_VALUE_SHIFT)) & LCDIF_DVICTRL4_Y_FILL_VALUE_MASK)

/*! @name CSC_COEFF0 - RGB to YCbCr 4:2:2 CSC Coefficient0 Register */
#define LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_MASK (0x3U)
#define LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_SHIFT (0U)
#define LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_SHIFT)) & LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_MASK)
#define LCDIF_CSC_COEFF0_RSRVD0_MASK             (0xFFFCU)
#define LCDIF_CSC_COEFF0_RSRVD0_SHIFT            (2U)
#define LCDIF_CSC_COEFF0_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF0_RSRVD0_MASK)
#define LCDIF_CSC_COEFF0_C0_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF0_C0_SHIFT                (16U)
#define LCDIF_CSC_COEFF0_C0(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_C0_SHIFT)) & LCDIF_CSC_COEFF0_C0_MASK)
#define LCDIF_CSC_COEFF0_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF0_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF0_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF0_RSRVD1_MASK)

/*! @name CSC_COEFF1 - RGB to YCbCr 4:2:2 CSC Coefficient1 Register */
#define LCDIF_CSC_COEFF1_C1_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF1_C1_SHIFT                (0U)
#define LCDIF_CSC_COEFF1_C1(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_C1_SHIFT)) & LCDIF_CSC_COEFF1_C1_MASK)
#define LCDIF_CSC_COEFF1_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF1_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF1_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF1_RSRVD0_MASK)
#define LCDIF_CSC_COEFF1_C2_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF1_C2_SHIFT                (16U)
#define LCDIF_CSC_COEFF1_C2(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_C2_SHIFT)) & LCDIF_CSC_COEFF1_C2_MASK)
#define LCDIF_CSC_COEFF1_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF1_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF1_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF1_RSRVD1_MASK)

/*! @name CSC_COEFF2 - RGB to YCbCr 4:2:2 CSC Coefficent2 Register */
#define LCDIF_CSC_COEFF2_C3_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF2_C3_SHIFT                (0U)
#define LCDIF_CSC_COEFF2_C3(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_C3_SHIFT)) & LCDIF_CSC_COEFF2_C3_MASK)
#define LCDIF_CSC_COEFF2_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF2_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF2_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF2_RSRVD0_MASK)
#define LCDIF_CSC_COEFF2_C4_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF2_C4_SHIFT                (16U)
#define LCDIF_CSC_COEFF2_C4(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_C4_SHIFT)) & LCDIF_CSC_COEFF2_C4_MASK)
#define LCDIF_CSC_COEFF2_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF2_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF2_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF2_RSRVD1_MASK)

/*! @name CSC_COEFF3 - RGB to YCbCr 4:2:2 CSC Coefficient3 Register */
#define LCDIF_CSC_COEFF3_C5_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF3_C5_SHIFT                (0U)
#define LCDIF_CSC_COEFF3_C5(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_C5_SHIFT)) & LCDIF_CSC_COEFF3_C5_MASK)
#define LCDIF_CSC_COEFF3_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF3_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF3_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF3_RSRVD0_MASK)
#define LCDIF_CSC_COEFF3_C6_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF3_C6_SHIFT                (16U)
#define LCDIF_CSC_COEFF3_C6(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_C6_SHIFT)) & LCDIF_CSC_COEFF3_C6_MASK)
#define LCDIF_CSC_COEFF3_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF3_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF3_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF3_RSRVD1_MASK)

/*! @name CSC_COEFF4 - RGB to YCbCr 4:2:2 CSC Coefficient4 Register */
#define LCDIF_CSC_COEFF4_C7_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF4_C7_SHIFT                (0U)
#define LCDIF_CSC_COEFF4_C7(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_C7_SHIFT)) & LCDIF_CSC_COEFF4_C7_MASK)
#define LCDIF_CSC_COEFF4_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF4_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF4_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF4_RSRVD0_MASK)
#define LCDIF_CSC_COEFF4_C8_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF4_C8_SHIFT                (16U)
#define LCDIF_CSC_COEFF4_C8(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_C8_SHIFT)) & LCDIF_CSC_COEFF4_C8_MASK)
#define LCDIF_CSC_COEFF4_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF4_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF4_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF4_RSRVD1_MASK)

/*! @name CSC_OFFSET - RGB to YCbCr 4:2:2 CSC Offset Register */
#define LCDIF_CSC_OFFSET_Y_OFFSET_MASK           (0x1FFU)
#define LCDIF_CSC_OFFSET_Y_OFFSET_SHIFT          (0U)
#define LCDIF_CSC_OFFSET_Y_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_Y_OFFSET_SHIFT)) & LCDIF_CSC_OFFSET_Y_OFFSET_MASK)
#define LCDIF_CSC_OFFSET_RSRVD0_MASK             (0xFE00U)
#define LCDIF_CSC_OFFSET_RSRVD0_SHIFT            (9U)
#define LCDIF_CSC_OFFSET_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_RSRVD0_SHIFT)) & LCDIF_CSC_OFFSET_RSRVD0_MASK)
#define LCDIF_CSC_OFFSET_CBCR_OFFSET_MASK        (0x1FF0000U)
#define LCDIF_CSC_OFFSET_CBCR_OFFSET_SHIFT       (16U)
#define LCDIF_CSC_OFFSET_CBCR_OFFSET(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_CBCR_OFFSET_SHIFT)) & LCDIF_CSC_OFFSET_CBCR_OFFSET_MASK)
#define LCDIF_CSC_OFFSET_RSRVD1_MASK             (0xFE000000U)
#define LCDIF_CSC_OFFSET_RSRVD1_SHIFT            (25U)
#define LCDIF_CSC_OFFSET_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_RSRVD1_SHIFT)) & LCDIF_CSC_OFFSET_RSRVD1_MASK)

/*! @name CSC_LIMIT - RGB to YCbCr 4:2:2 CSC Limit Register */
#define LCDIF_CSC_LIMIT_Y_MAX_MASK               (0xFFU)
#define LCDIF_CSC_LIMIT_Y_MAX_SHIFT              (0U)
#define LCDIF_CSC_LIMIT_Y_MAX(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_Y_MAX_SHIFT)) & LCDIF_CSC_LIMIT_Y_MAX_MASK)
#define LCDIF_CSC_LIMIT_Y_MIN_MASK               (0xFF00U)
#define LCDIF_CSC_LIMIT_Y_MIN_SHIFT              (8U)
#define LCDIF_CSC_LIMIT_Y_MIN(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_Y_MIN_SHIFT)) & LCDIF_CSC_LIMIT_Y_MIN_MASK)
#define LCDIF_CSC_LIMIT_CBCR_MAX_MASK            (0xFF0000U)
#define LCDIF_CSC_LIMIT_CBCR_MAX_SHIFT           (16U)
#define LCDIF_CSC_LIMIT_CBCR_MAX(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_CBCR_MAX_SHIFT)) & LCDIF_CSC_LIMIT_CBCR_MAX_MASK)
#define LCDIF_CSC_LIMIT_CBCR_MIN_MASK            (0xFF000000U)
#define LCDIF_CSC_LIMIT_CBCR_MIN_SHIFT           (24U)
#define LCDIF_CSC_LIMIT_CBCR_MIN(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_CBCR_MIN_SHIFT)) & LCDIF_CSC_LIMIT_CBCR_MIN_MASK)

/*! @name DATA - LCD Interface Data Register */
#define LCDIF_DATA_DATA_ZERO_MASK                (0xFFU)
#define LCDIF_DATA_DATA_ZERO_SHIFT               (0U)
#define LCDIF_DATA_DATA_ZERO(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_ZERO_SHIFT)) & LCDIF_DATA_DATA_ZERO_MASK)
#define LCDIF_DATA_DATA_ONE_MASK                 (0xFF00U)
#define LCDIF_DATA_DATA_ONE_SHIFT                (8U)
#define LCDIF_DATA_DATA_ONE(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_ONE_SHIFT)) & LCDIF_DATA_DATA_ONE_MASK)
#define LCDIF_DATA_DATA_TWO_MASK                 (0xFF0000U)
#define LCDIF_DATA_DATA_TWO_SHIFT                (16U)
#define LCDIF_DATA_DATA_TWO(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_TWO_SHIFT)) & LCDIF_DATA_DATA_TWO_MASK)
#define LCDIF_DATA_DATA_THREE_MASK               (0xFF000000U)
#define LCDIF_DATA_DATA_THREE_SHIFT              (24U)
#define LCDIF_DATA_DATA_THREE(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_THREE_SHIFT)) & LCDIF_DATA_DATA_THREE_MASK)

/*! @name BM_ERROR_STAT - Bus Master Error Status Register */
#define LCDIF_BM_ERROR_STAT_ADDR_MASK            (0xFFFFFFFFU)
#define LCDIF_BM_ERROR_STAT_ADDR_SHIFT           (0U)
#define LCDIF_BM_ERROR_STAT_ADDR(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_BM_ERROR_STAT_ADDR_SHIFT)) & LCDIF_BM_ERROR_STAT_ADDR_MASK)

/*! @name CRC_STAT - CRC Status Register */
#define LCDIF_CRC_STAT_CRC_VALUE_MASK            (0xFFFFFFFFU)
#define LCDIF_CRC_STAT_CRC_VALUE_SHIFT           (0U)
#define LCDIF_CRC_STAT_CRC_VALUE(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CRC_STAT_CRC_VALUE_SHIFT)) & LCDIF_CRC_STAT_CRC_VALUE_MASK)

/*! @name STAT - LCD Interface Status Register */
#define LCDIF_STAT_LFIFO_COUNT_MASK              (0x1FFU)
#define LCDIF_STAT_LFIFO_COUNT_SHIFT             (0U)
#define LCDIF_STAT_LFIFO_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_LFIFO_COUNT_SHIFT)) & LCDIF_STAT_LFIFO_COUNT_MASK)
#define LCDIF_STAT_RSRVD0_MASK                   (0xFFFE00U)
#define LCDIF_STAT_RSRVD0_SHIFT                  (9U)
#define LCDIF_STAT_RSRVD0(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_RSRVD0_SHIFT)) & LCDIF_STAT_RSRVD0_MASK)
#define LCDIF_STAT_DVI_CURRENT_FIELD_MASK        (0x1000000U)
#define LCDIF_STAT_DVI_CURRENT_FIELD_SHIFT       (24U)
#define LCDIF_STAT_DVI_CURRENT_FIELD(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_DVI_CURRENT_FIELD_SHIFT)) & LCDIF_STAT_DVI_CURRENT_FIELD_MASK)
#define LCDIF_STAT_BUSY_MASK                     (0x2000000U)
#define LCDIF_STAT_BUSY_SHIFT                    (25U)
#define LCDIF_STAT_BUSY(x)                       (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_BUSY_SHIFT)) & LCDIF_STAT_BUSY_MASK)
#define LCDIF_STAT_TXFIFO_EMPTY_MASK             (0x4000000U)
#define LCDIF_STAT_TXFIFO_EMPTY_SHIFT            (26U)
#define LCDIF_STAT_TXFIFO_EMPTY(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_TXFIFO_EMPTY_SHIFT)) & LCDIF_STAT_TXFIFO_EMPTY_MASK)
#define LCDIF_STAT_TXFIFO_FULL_MASK              (0x8000000U)
#define LCDIF_STAT_TXFIFO_FULL_SHIFT             (27U)
#define LCDIF_STAT_TXFIFO_FULL(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_TXFIFO_FULL_SHIFT)) & LCDIF_STAT_TXFIFO_FULL_MASK)
#define LCDIF_STAT_LFIFO_EMPTY_MASK              (0x10000000U)
#define LCDIF_STAT_LFIFO_EMPTY_SHIFT             (28U)
#define LCDIF_STAT_LFIFO_EMPTY(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_LFIFO_EMPTY_SHIFT)) & LCDIF_STAT_LFIFO_EMPTY_MASK)
#define LCDIF_STAT_LFIFO_FULL_MASK               (0x20000000U)
#define LCDIF_STAT_LFIFO_FULL_SHIFT              (29U)
#define LCDIF_STAT_LFIFO_FULL(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_LFIFO_FULL_SHIFT)) & LCDIF_STAT_LFIFO_FULL_MASK)
#define LCDIF_STAT_PRESENT_MASK                  (0x80000000U)
#define LCDIF_STAT_PRESENT_SHIFT                 (31U)
#define LCDIF_STAT_PRESENT(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_PRESENT_SHIFT)) & LCDIF_STAT_PRESENT_MASK)

/*! @name THRES - eLCDIF Threshold Register */
#define LCDIF_THRES_PANIC_MASK                   (0x1FFU)
#define LCDIF_THRES_PANIC_SHIFT                  (0U)
#define LCDIF_THRES_PANIC(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_PANIC_SHIFT)) & LCDIF_THRES_PANIC_MASK)
#define LCDIF_THRES_RSRVD1_MASK                  (0xFE00U)
#define LCDIF_THRES_RSRVD1_SHIFT                 (9U)
#define LCDIF_THRES_RSRVD1(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_RSRVD1_SHIFT)) & LCDIF_THRES_RSRVD1_MASK)
#define LCDIF_THRES_FASTCLOCK_MASK               (0x1FF0000U)
#define LCDIF_THRES_FASTCLOCK_SHIFT              (16U)
#define LCDIF_THRES_FASTCLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_FASTCLOCK_SHIFT)) & LCDIF_THRES_FASTCLOCK_MASK)
#define LCDIF_THRES_RSRVD2_MASK                  (0xFE000000U)
#define LCDIF_THRES_RSRVD2_SHIFT                 (25U)
#define LCDIF_THRES_RSRVD2(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_RSRVD2_SHIFT)) & LCDIF_THRES_RSRVD2_MASK)

/*! @name AS_CTRL - eLCDIF AS Buffer Control Register */
#define LCDIF_AS_CTRL_AS_ENABLE_MASK             (0x1U)
#define LCDIF_AS_CTRL_AS_ENABLE_SHIFT            (0U)
#define LCDIF_AS_CTRL_AS_ENABLE(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_AS_ENABLE_SHIFT)) & LCDIF_AS_CTRL_AS_ENABLE_MASK)
#define LCDIF_AS_CTRL_ALPHA_CTRL_MASK            (0x6U)
#define LCDIF_AS_CTRL_ALPHA_CTRL_SHIFT           (1U)
#define LCDIF_AS_CTRL_ALPHA_CTRL(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ALPHA_CTRL_SHIFT)) & LCDIF_AS_CTRL_ALPHA_CTRL_MASK)
#define LCDIF_AS_CTRL_ENABLE_COLORKEY_MASK       (0x8U)
#define LCDIF_AS_CTRL_ENABLE_COLORKEY_SHIFT      (3U)
#define LCDIF_AS_CTRL_ENABLE_COLORKEY(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ENABLE_COLORKEY_SHIFT)) & LCDIF_AS_CTRL_ENABLE_COLORKEY_MASK)
#define LCDIF_AS_CTRL_FORMAT_MASK                (0xF0U)
#define LCDIF_AS_CTRL_FORMAT_SHIFT               (4U)
#define LCDIF_AS_CTRL_FORMAT(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_FORMAT_SHIFT)) & LCDIF_AS_CTRL_FORMAT_MASK)
#define LCDIF_AS_CTRL_ALPHA_MASK                 (0xFF00U)
#define LCDIF_AS_CTRL_ALPHA_SHIFT                (8U)
#define LCDIF_AS_CTRL_ALPHA(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ALPHA_SHIFT)) & LCDIF_AS_CTRL_ALPHA_MASK)
#define LCDIF_AS_CTRL_ROP_MASK                   (0xF0000U)
#define LCDIF_AS_CTRL_ROP_SHIFT                  (16U)
#define LCDIF_AS_CTRL_ROP(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ROP_SHIFT)) & LCDIF_AS_CTRL_ROP_MASK)
#define LCDIF_AS_CTRL_ALPHA_INVERT_MASK          (0x100000U)
#define LCDIF_AS_CTRL_ALPHA_INVERT_SHIFT         (20U)
#define LCDIF_AS_CTRL_ALPHA_INVERT(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ALPHA_INVERT_SHIFT)) & LCDIF_AS_CTRL_ALPHA_INVERT_MASK)
#define LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_MASK    (0x600000U)
#define LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_SHIFT   (21U)
#define LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_AS_CTRL_PS_DISABLE_MASK            (0x800000U)
#define LCDIF_AS_CTRL_PS_DISABLE_SHIFT           (23U)
#define LCDIF_AS_CTRL_PS_DISABLE(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_PS_DISABLE_SHIFT)) & LCDIF_AS_CTRL_PS_DISABLE_MASK)
#define LCDIF_AS_CTRL_RVDS1_MASK                 (0x7000000U)
#define LCDIF_AS_CTRL_RVDS1_SHIFT                (24U)
#define LCDIF_AS_CTRL_RVDS1(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_RVDS1_SHIFT)) & LCDIF_AS_CTRL_RVDS1_MASK)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_MASK       (0x8000000U)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_SHIFT      (27U)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_SHIFT)) & LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_MASK)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN_MASK    (0x10000000U)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN_SHIFT   (28U)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN_SHIFT)) & LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN_MASK)
#define LCDIF_AS_CTRL_CSI_VSYNC_MODE_MASK        (0x20000000U)
#define LCDIF_AS_CTRL_CSI_VSYNC_MODE_SHIFT       (29U)
#define LCDIF_AS_CTRL_CSI_VSYNC_MODE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_CSI_VSYNC_MODE_SHIFT)) & LCDIF_AS_CTRL_CSI_VSYNC_MODE_MASK)
#define LCDIF_AS_CTRL_CSI_VSYNC_POL_MASK         (0x40000000U)
#define LCDIF_AS_CTRL_CSI_VSYNC_POL_SHIFT        (30U)
#define LCDIF_AS_CTRL_CSI_VSYNC_POL(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_CSI_VSYNC_POL_SHIFT)) & LCDIF_AS_CTRL_CSI_VSYNC_POL_MASK)
#define LCDIF_AS_CTRL_CSI_VSYNC_ENABLE_MASK      (0x80000000U)
#define LCDIF_AS_CTRL_CSI_VSYNC_ENABLE_SHIFT     (31U)
#define LCDIF_AS_CTRL_CSI_VSYNC_ENABLE(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_CSI_VSYNC_ENABLE_SHIFT)) & LCDIF_AS_CTRL_CSI_VSYNC_ENABLE_MASK)

/*! @name AS_BUF - Alpha Surface Buffer Pointer */
#define LCDIF_AS_BUF_ADDR_MASK                   (0xFFFFFFFFU)
#define LCDIF_AS_BUF_ADDR_SHIFT                  (0U)
#define LCDIF_AS_BUF_ADDR(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_BUF_ADDR_SHIFT)) & LCDIF_AS_BUF_ADDR_MASK)

/*! @name AS_NEXT_BUF -  */
#define LCDIF_AS_NEXT_BUF_ADDR_MASK              (0xFFFFFFFFU)
#define LCDIF_AS_NEXT_BUF_ADDR_SHIFT             (0U)
#define LCDIF_AS_NEXT_BUF_ADDR(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_NEXT_BUF_ADDR_SHIFT)) & LCDIF_AS_NEXT_BUF_ADDR_MASK)

/*! @name AS_CLRKEYLOW - eLCDIF Overlay Color Key Low */
#define LCDIF_AS_CLRKEYLOW_PIXEL_MASK            (0xFFFFFFU)
#define LCDIF_AS_CLRKEYLOW_PIXEL_SHIFT           (0U)
#define LCDIF_AS_CLRKEYLOW_PIXEL(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYLOW_PIXEL_SHIFT)) & LCDIF_AS_CLRKEYLOW_PIXEL_MASK)
#define LCDIF_AS_CLRKEYLOW_RSVD1_MASK            (0xFF000000U)
#define LCDIF_AS_CLRKEYLOW_RSVD1_SHIFT           (24U)
#define LCDIF_AS_CLRKEYLOW_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYLOW_RSVD1_SHIFT)) & LCDIF_AS_CLRKEYLOW_RSVD1_MASK)

/*! @name AS_CLRKEYHIGH - eLCDIF Overlay Color Key High */
#define LCDIF_AS_CLRKEYHIGH_PIXEL_MASK           (0xFFFFFFU)
#define LCDIF_AS_CLRKEYHIGH_PIXEL_SHIFT          (0U)
#define LCDIF_AS_CLRKEYHIGH_PIXEL(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYHIGH_PIXEL_SHIFT)) & LCDIF_AS_CLRKEYHIGH_PIXEL_MASK)
#define LCDIF_AS_CLRKEYHIGH_RSVD1_MASK           (0xFF000000U)
#define LCDIF_AS_CLRKEYHIGH_RSVD1_SHIFT          (24U)
#define LCDIF_AS_CLRKEYHIGH_RSVD1(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYHIGH_RSVD1_SHIFT)) & LCDIF_AS_CLRKEYHIGH_RSVD1_MASK)

/*! @name SYNC_DELAY - LCD working insync mode with CSI for VSYNC delay */
#define LCDIF_SYNC_DELAY_H_COUNT_DELAY_MASK      (0xFFFFU)
#define LCDIF_SYNC_DELAY_H_COUNT_DELAY_SHIFT     (0U)
#define LCDIF_SYNC_DELAY_H_COUNT_DELAY(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_SYNC_DELAY_H_COUNT_DELAY_SHIFT)) & LCDIF_SYNC_DELAY_H_COUNT_DELAY_MASK)
#define LCDIF_SYNC_DELAY_V_COUNT_DELAY_MASK      (0xFFFF0000U)
#define LCDIF_SYNC_DELAY_V_COUNT_DELAY_SHIFT     (16U)
#define LCDIF_SYNC_DELAY_V_COUNT_DELAY(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_SYNC_DELAY_V_COUNT_DELAY_SHIFT)) & LCDIF_SYNC_DELAY_V_COUNT_DELAY_MASK)


/*!
 * @}
 */ /* end of group LCDIF_Register_Masks */


/* LCDIF - Peripheral instance base addresses */
/** Peripheral LCDIF base address */
#define LCDIF_BASE                               (0x30320000u)
/** Peripheral LCDIF base pointer */
#define LCDIF                                    ((LCDIF_Type *)LCDIF_BASE)
/** Array initializer of LCDIF peripheral base addresses */
#define LCDIF_BASE_ADDRS                         { LCDIF_BASE }
/** Array initializer of LCDIF peripheral base pointers */
#define LCDIF_BASE_PTRS                          { LCDIF }

/*!
 * @}
 */ /* end of group LCDIF_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- LMEM Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LMEM_Peripheral_Access_Layer LMEM Peripheral Access Layer
 * @{
 */

/** LMEM - Register Layout Typedef */
typedef struct {
  __IO uint32_t PCCCR;                             /**< Cache control register, offset: 0x0 */
  __IO uint32_t PCCLCR;                            /**< Cache line control register, offset: 0x4 */
  __IO uint32_t PCCSAR;                            /**< Cache search address register, offset: 0x8 */
  __IO uint32_t PCCCVR;                            /**< Cache read/write value register, offset: 0xC */
       uint8_t RESERVED_0[2032];
  __IO uint32_t PSCCR;                             /**< Cache control register, offset: 0x800 */
  __IO uint32_t PSCLCR;                            /**< Cache line control register, offset: 0x804 */
  __IO uint32_t PSCSAR;                            /**< Cache search address register, offset: 0x808 */
  __IO uint32_t PSCCVR;                            /**< Cache read/write value register, offset: 0x80C */
} LMEM_Type;

/* ----------------------------------------------------------------------------
   -- LMEM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LMEM_Register_Masks LMEM Register Masks
 * @{
 */

/*! @name PCCCR - Cache control register */
#define LMEM_PCCCR_ENCACHE_MASK                  (0x1U)
#define LMEM_PCCCR_ENCACHE_SHIFT                 (0U)
#define LMEM_PCCCR_ENCACHE(x)                    (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCR_ENCACHE_SHIFT)) & LMEM_PCCCR_ENCACHE_MASK)
#define LMEM_PCCCR_ENWRBUF_MASK                  (0x2U)
#define LMEM_PCCCR_ENWRBUF_SHIFT                 (1U)
#define LMEM_PCCCR_ENWRBUF(x)                    (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCR_ENWRBUF_SHIFT)) & LMEM_PCCCR_ENWRBUF_MASK)
#define LMEM_PCCCR_PCCR2_MASK                    (0x4U)
#define LMEM_PCCCR_PCCR2_SHIFT                   (2U)
#define LMEM_PCCCR_PCCR2(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCR_PCCR2_SHIFT)) & LMEM_PCCCR_PCCR2_MASK)
#define LMEM_PCCCR_PCCR3_MASK                    (0x8U)
#define LMEM_PCCCR_PCCR3_SHIFT                   (3U)
#define LMEM_PCCCR_PCCR3(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCR_PCCR3_SHIFT)) & LMEM_PCCCR_PCCR3_MASK)
#define LMEM_PCCCR_INVW0_MASK                    (0x1000000U)
#define LMEM_PCCCR_INVW0_SHIFT                   (24U)
#define LMEM_PCCCR_INVW0(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCR_INVW0_SHIFT)) & LMEM_PCCCR_INVW0_MASK)
#define LMEM_PCCCR_PUSHW0_MASK                   (0x2000000U)
#define LMEM_PCCCR_PUSHW0_SHIFT                  (25U)
#define LMEM_PCCCR_PUSHW0(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCR_PUSHW0_SHIFT)) & LMEM_PCCCR_PUSHW0_MASK)
#define LMEM_PCCCR_INVW1_MASK                    (0x4000000U)
#define LMEM_PCCCR_INVW1_SHIFT                   (26U)
#define LMEM_PCCCR_INVW1(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCR_INVW1_SHIFT)) & LMEM_PCCCR_INVW1_MASK)
#define LMEM_PCCCR_PUSHW1_MASK                   (0x8000000U)
#define LMEM_PCCCR_PUSHW1_SHIFT                  (27U)
#define LMEM_PCCCR_PUSHW1(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCR_PUSHW1_SHIFT)) & LMEM_PCCCR_PUSHW1_MASK)
#define LMEM_PCCCR_GO_MASK                       (0x80000000U)
#define LMEM_PCCCR_GO_SHIFT                      (31U)
#define LMEM_PCCCR_GO(x)                         (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCR_GO_SHIFT)) & LMEM_PCCCR_GO_MASK)

/*! @name PCCLCR - Cache line control register */
#define LMEM_PCCLCR_LGO_MASK                     (0x1U)
#define LMEM_PCCLCR_LGO_SHIFT                    (0U)
#define LMEM_PCCLCR_LGO(x)                       (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_LGO_SHIFT)) & LMEM_PCCLCR_LGO_MASK)
#define LMEM_PCCLCR_CACHEADDR_MASK               (0x1FFCU)
#define LMEM_PCCLCR_CACHEADDR_SHIFT              (2U)
#define LMEM_PCCLCR_CACHEADDR(x)                 (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_CACHEADDR_SHIFT)) & LMEM_PCCLCR_CACHEADDR_MASK)
#define LMEM_PCCLCR_WSEL_MASK                    (0x4000U)
#define LMEM_PCCLCR_WSEL_SHIFT                   (14U)
#define LMEM_PCCLCR_WSEL(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_WSEL_SHIFT)) & LMEM_PCCLCR_WSEL_MASK)
#define LMEM_PCCLCR_TDSEL_MASK                   (0x10000U)
#define LMEM_PCCLCR_TDSEL_SHIFT                  (16U)
#define LMEM_PCCLCR_TDSEL(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_TDSEL_SHIFT)) & LMEM_PCCLCR_TDSEL_MASK)
#define LMEM_PCCLCR_LCIVB_MASK                   (0x100000U)
#define LMEM_PCCLCR_LCIVB_SHIFT                  (20U)
#define LMEM_PCCLCR_LCIVB(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_LCIVB_SHIFT)) & LMEM_PCCLCR_LCIVB_MASK)
#define LMEM_PCCLCR_LCIMB_MASK                   (0x200000U)
#define LMEM_PCCLCR_LCIMB_SHIFT                  (21U)
#define LMEM_PCCLCR_LCIMB(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_LCIMB_SHIFT)) & LMEM_PCCLCR_LCIMB_MASK)
#define LMEM_PCCLCR_LCWAY_MASK                   (0x400000U)
#define LMEM_PCCLCR_LCWAY_SHIFT                  (22U)
#define LMEM_PCCLCR_LCWAY(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_LCWAY_SHIFT)) & LMEM_PCCLCR_LCWAY_MASK)
#define LMEM_PCCLCR_LCMD_MASK                    (0x3000000U)
#define LMEM_PCCLCR_LCMD_SHIFT                   (24U)
#define LMEM_PCCLCR_LCMD(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_LCMD_SHIFT)) & LMEM_PCCLCR_LCMD_MASK)
#define LMEM_PCCLCR_LADSEL_MASK                  (0x4000000U)
#define LMEM_PCCLCR_LADSEL_SHIFT                 (26U)
#define LMEM_PCCLCR_LADSEL(x)                    (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_LADSEL_SHIFT)) & LMEM_PCCLCR_LADSEL_MASK)
#define LMEM_PCCLCR_LACC_MASK                    (0x8000000U)
#define LMEM_PCCLCR_LACC_SHIFT                   (27U)
#define LMEM_PCCLCR_LACC(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_LACC_SHIFT)) & LMEM_PCCLCR_LACC_MASK)

/*! @name PCCSAR - Cache search address register */
#define LMEM_PCCSAR_LGO_MASK                     (0x1U)
#define LMEM_PCCSAR_LGO_SHIFT                    (0U)
#define LMEM_PCCSAR_LGO(x)                       (((uint32_t)(((uint32_t)(x)) << LMEM_PCCSAR_LGO_SHIFT)) & LMEM_PCCSAR_LGO_MASK)
#define LMEM_PCCSAR_PHYADDR_MASK                 (0xFFFFFFFCU)
#define LMEM_PCCSAR_PHYADDR_SHIFT                (2U)
#define LMEM_PCCSAR_PHYADDR(x)                   (((uint32_t)(((uint32_t)(x)) << LMEM_PCCSAR_PHYADDR_SHIFT)) & LMEM_PCCSAR_PHYADDR_MASK)

/*! @name PCCCVR - Cache read/write value register */
#define LMEM_PCCCVR_DATA_MASK                    (0xFFFFFFFFU)
#define LMEM_PCCCVR_DATA_SHIFT                   (0U)
#define LMEM_PCCCVR_DATA(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCVR_DATA_SHIFT)) & LMEM_PCCCVR_DATA_MASK)

/*! @name PSCCR - Cache control register */
#define LMEM_PSCCR_ENCACHE_MASK                  (0x1U)
#define LMEM_PSCCR_ENCACHE_SHIFT                 (0U)
#define LMEM_PSCCR_ENCACHE(x)                    (((uint32_t)(((uint32_t)(x)) << LMEM_PSCCR_ENCACHE_SHIFT)) & LMEM_PSCCR_ENCACHE_MASK)
#define LMEM_PSCCR_ENWRBUF_MASK                  (0x2U)
#define LMEM_PSCCR_ENWRBUF_SHIFT                 (1U)
#define LMEM_PSCCR_ENWRBUF(x)                    (((uint32_t)(((uint32_t)(x)) << LMEM_PSCCR_ENWRBUF_SHIFT)) & LMEM_PSCCR_ENWRBUF_MASK)
#define LMEM_PSCCR_INVW0_MASK                    (0x1000000U)
#define LMEM_PSCCR_INVW0_SHIFT                   (24U)
#define LMEM_PSCCR_INVW0(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PSCCR_INVW0_SHIFT)) & LMEM_PSCCR_INVW0_MASK)
#define LMEM_PSCCR_PUSHW0_MASK                   (0x2000000U)
#define LMEM_PSCCR_PUSHW0_SHIFT                  (25U)
#define LMEM_PSCCR_PUSHW0(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PSCCR_PUSHW0_SHIFT)) & LMEM_PSCCR_PUSHW0_MASK)
#define LMEM_PSCCR_INVW1_MASK                    (0x4000000U)
#define LMEM_PSCCR_INVW1_SHIFT                   (26U)
#define LMEM_PSCCR_INVW1(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PSCCR_INVW1_SHIFT)) & LMEM_PSCCR_INVW1_MASK)
#define LMEM_PSCCR_PUSHW1_MASK                   (0x8000000U)
#define LMEM_PSCCR_PUSHW1_SHIFT                  (27U)
#define LMEM_PSCCR_PUSHW1(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PSCCR_PUSHW1_SHIFT)) & LMEM_PSCCR_PUSHW1_MASK)
#define LMEM_PSCCR_GO_MASK                       (0x80000000U)
#define LMEM_PSCCR_GO_SHIFT                      (31U)
#define LMEM_PSCCR_GO(x)                         (((uint32_t)(((uint32_t)(x)) << LMEM_PSCCR_GO_SHIFT)) & LMEM_PSCCR_GO_MASK)

/*! @name PSCLCR - Cache line control register */
#define LMEM_PSCLCR_LGO_MASK                     (0x1U)
#define LMEM_PSCLCR_LGO_SHIFT                    (0U)
#define LMEM_PSCLCR_LGO(x)                       (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_LGO_SHIFT)) & LMEM_PSCLCR_LGO_MASK)
#define LMEM_PSCLCR_CACHEADDR_MASK               (0x1FFCU)
#define LMEM_PSCLCR_CACHEADDR_SHIFT              (2U)
#define LMEM_PSCLCR_CACHEADDR(x)                 (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_CACHEADDR_SHIFT)) & LMEM_PSCLCR_CACHEADDR_MASK)
#define LMEM_PSCLCR_WSEL_MASK                    (0x4000U)
#define LMEM_PSCLCR_WSEL_SHIFT                   (14U)
#define LMEM_PSCLCR_WSEL(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_WSEL_SHIFT)) & LMEM_PSCLCR_WSEL_MASK)
#define LMEM_PSCLCR_TDSEL_MASK                   (0x10000U)
#define LMEM_PSCLCR_TDSEL_SHIFT                  (16U)
#define LMEM_PSCLCR_TDSEL(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_TDSEL_SHIFT)) & LMEM_PSCLCR_TDSEL_MASK)
#define LMEM_PSCLCR_LCIVB_MASK                   (0x100000U)
#define LMEM_PSCLCR_LCIVB_SHIFT                  (20U)
#define LMEM_PSCLCR_LCIVB(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_LCIVB_SHIFT)) & LMEM_PSCLCR_LCIVB_MASK)
#define LMEM_PSCLCR_LCIMB_MASK                   (0x200000U)
#define LMEM_PSCLCR_LCIMB_SHIFT                  (21U)
#define LMEM_PSCLCR_LCIMB(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_LCIMB_SHIFT)) & LMEM_PSCLCR_LCIMB_MASK)
#define LMEM_PSCLCR_LCWAY_MASK                   (0x400000U)
#define LMEM_PSCLCR_LCWAY_SHIFT                  (22U)
#define LMEM_PSCLCR_LCWAY(x)                     (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_LCWAY_SHIFT)) & LMEM_PSCLCR_LCWAY_MASK)
#define LMEM_PSCLCR_LCMD_MASK                    (0x3000000U)
#define LMEM_PSCLCR_LCMD_SHIFT                   (24U)
#define LMEM_PSCLCR_LCMD(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_LCMD_SHIFT)) & LMEM_PSCLCR_LCMD_MASK)
#define LMEM_PSCLCR_LADSEL_MASK                  (0x4000000U)
#define LMEM_PSCLCR_LADSEL_SHIFT                 (26U)
#define LMEM_PSCLCR_LADSEL(x)                    (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_LADSEL_SHIFT)) & LMEM_PSCLCR_LADSEL_MASK)
#define LMEM_PSCLCR_LACC_MASK                    (0x8000000U)
#define LMEM_PSCLCR_LACC_SHIFT                   (27U)
#define LMEM_PSCLCR_LACC(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_LACC_SHIFT)) & LMEM_PSCLCR_LACC_MASK)

/*! @name PSCSAR - Cache search address register */
#define LMEM_PSCSAR_LGO_MASK                     (0x1U)
#define LMEM_PSCSAR_LGO_SHIFT                    (0U)
#define LMEM_PSCSAR_LGO(x)                       (((uint32_t)(((uint32_t)(x)) << LMEM_PSCSAR_LGO_SHIFT)) & LMEM_PSCSAR_LGO_MASK)
#define LMEM_PSCSAR_PHYADDR_MASK                 (0xFFFFFFFCU)
#define LMEM_PSCSAR_PHYADDR_SHIFT                (2U)
#define LMEM_PSCSAR_PHYADDR(x)                   (((uint32_t)(((uint32_t)(x)) << LMEM_PSCSAR_PHYADDR_SHIFT)) & LMEM_PSCSAR_PHYADDR_MASK)

/*! @name PSCCVR - Cache read/write value register */
#define LMEM_PSCCVR_DATA_MASK                    (0xFFFFFFFFU)
#define LMEM_PSCCVR_DATA_SHIFT                   (0U)
#define LMEM_PSCCVR_DATA(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PSCCVR_DATA_SHIFT)) & LMEM_PSCCVR_DATA_MASK)


/*!
 * @}
 */ /* end of group LMEM_Register_Masks */


/* LMEM - Peripheral instance base addresses */
/** Peripheral LMEM base address */
#define LMEM_BASE                                (0xE0082000u)
/** Peripheral LMEM base pointer */
#define LMEM                                     ((LMEM_Type *)LMEM_BASE)
/** Array initializer of LMEM peripheral base addresses */
#define LMEM_BASE_ADDRS                          { LMEM_BASE }
/** Array initializer of LMEM peripheral base pointers */
#define LMEM_BASE_PTRS                           { LMEM }

/*!
 * @}
 */ /* end of group LMEM_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- MCM Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MCM_Peripheral_Access_Layer MCM Peripheral Access Layer
 * @{
 */

/** MCM - Register Layout Typedef */
typedef struct {
       uint8_t RESERVED_0[8];
  __I  uint16_t PLASC;                             /**< Crossbar Switch (AXBS) Slave Configuration, offset: 0x8 */
  __I  uint16_t PLAMC;                             /**< Crossbar Switch (AXBS) Master Configuration, offset: 0xA */
       uint32_t PLACR;                             /**< Crossbar Switch (AXBS) Control Register, offset: 0xC */
       uint8_t RESERVED_1[16];
  __I  uint32_t FADR;                              /**< Fault address register, offset: 0x20 */
  __I  uint32_t FATR;                              /**< Fault attributes register, offset: 0x24 */
  __I  uint32_t FDR;                               /**< Fault data register, offset: 0x28 */
} MCM_Type;

/* ----------------------------------------------------------------------------
   -- MCM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MCM_Register_Masks MCM Register Masks
 * @{
 */

/*! @name PLASC - Crossbar Switch (AXBS) Slave Configuration */
#define MCM_PLASC_ASC_MASK                       (0xFFU)
#define MCM_PLASC_ASC_SHIFT                      (0U)
#define MCM_PLASC_ASC(x)                         (((uint16_t)(((uint16_t)(x)) << MCM_PLASC_ASC_SHIFT)) & MCM_PLASC_ASC_MASK)

/*! @name PLAMC - Crossbar Switch (AXBS) Master Configuration */
#define MCM_PLAMC_AMC_MASK                       (0xFFU)
#define MCM_PLAMC_AMC_SHIFT                      (0U)
#define MCM_PLAMC_AMC(x)                         (((uint16_t)(((uint16_t)(x)) << MCM_PLAMC_AMC_SHIFT)) & MCM_PLAMC_AMC_MASK)

/*! @name FADR - Fault address register */
#define MCM_FADR_ADDRESS_MASK                    (0xFFFFFFFFU)
#define MCM_FADR_ADDRESS_SHIFT                   (0U)
#define MCM_FADR_ADDRESS(x)                      (((uint32_t)(((uint32_t)(x)) << MCM_FADR_ADDRESS_SHIFT)) & MCM_FADR_ADDRESS_MASK)

/*! @name FATR - Fault attributes register */
#define MCM_FATR_BEDA_MASK                       (0x1U)
#define MCM_FATR_BEDA_SHIFT                      (0U)
#define MCM_FATR_BEDA(x)                         (((uint32_t)(((uint32_t)(x)) << MCM_FATR_BEDA_SHIFT)) & MCM_FATR_BEDA_MASK)
#define MCM_FATR_BEMD_MASK                       (0x2U)
#define MCM_FATR_BEMD_SHIFT                      (1U)
#define MCM_FATR_BEMD(x)                         (((uint32_t)(((uint32_t)(x)) << MCM_FATR_BEMD_SHIFT)) & MCM_FATR_BEMD_MASK)
#define MCM_FATR_BESZ_MASK                       (0x30U)
#define MCM_FATR_BESZ_SHIFT                      (4U)
#define MCM_FATR_BESZ(x)                         (((uint32_t)(((uint32_t)(x)) << MCM_FATR_BESZ_SHIFT)) & MCM_FATR_BESZ_MASK)
#define MCM_FATR_BEWT_MASK                       (0x80U)
#define MCM_FATR_BEWT_SHIFT                      (7U)
#define MCM_FATR_BEWT(x)                         (((uint32_t)(((uint32_t)(x)) << MCM_FATR_BEWT_SHIFT)) & MCM_FATR_BEWT_MASK)
#define MCM_FATR_BEMN_MASK                       (0xF00U)
#define MCM_FATR_BEMN_SHIFT                      (8U)
#define MCM_FATR_BEMN(x)                         (((uint32_t)(((uint32_t)(x)) << MCM_FATR_BEMN_SHIFT)) & MCM_FATR_BEMN_MASK)
#define MCM_FATR_BEOVR_MASK                      (0x80000000U)
#define MCM_FATR_BEOVR_SHIFT                     (31U)
#define MCM_FATR_BEOVR(x)                        (((uint32_t)(((uint32_t)(x)) << MCM_FATR_BEOVR_SHIFT)) & MCM_FATR_BEOVR_MASK)

/*! @name FDR - Fault data register */
#define MCM_FDR_DATA_MASK                        (0xFFFFFFFFU)
#define MCM_FDR_DATA_SHIFT                       (0U)
#define MCM_FDR_DATA(x)                          (((uint32_t)(((uint32_t)(x)) << MCM_FDR_DATA_SHIFT)) & MCM_FDR_DATA_MASK)


/*!
 * @}
 */ /* end of group MCM_Register_Masks */


/* MCM - Peripheral instance base addresses */
/** Peripheral MCM base address */
#define MCM_BASE                                 (0xE0080000u)
/** Peripheral MCM base pointer */
#define MCM                                      ((MCM_Type *)MCM_BASE)
/** Array initializer of MCM peripheral base addresses */
#define MCM_BASE_ADDRS                           { MCM_BASE }
/** Array initializer of MCM peripheral base pointers */
#define MCM_BASE_PTRS                            { MCM }

/*!
 * @}
 */ /* end of group MCM_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_Peripheral_Access_Layer MIPI_DSI_HOST Peripheral Access Layer
 * @{
 */

/** MIPI_DSI_HOST - Register Layout Typedef */
typedef struct {
  __IO uint32_t DSI_HOST_CFG_NUM_LANES;            /**< , offset: 0x0 */
  __IO uint32_t DSI_HOST_CFG_NONCONTINUOUS_CLK;    /**< , offset: 0x4 */
  __IO uint32_t DSI_HOST_CFG_T_PRE;                /**< , offset: 0x8 */
  __IO uint32_t DSI_HOST_CFG_T_POST;               /**< , offset: 0xC */
  __IO uint32_t DSI_HOST_CFG_TX_GAP;               /**< , offset: 0x10 */
  __IO uint32_t DSI_HOST_CFG_AUTOINSERT_EOTP;      /**< , offset: 0x14 */
  __IO uint32_t DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP; /**< , offset: 0x18 */
  __IO uint32_t DSI_HOST_CFG_HTX_TO_COUNT;         /**< , offset: 0x1C */
  __IO uint32_t DSI_HOST_CFG_LRX_H_TO_COUNT;       /**< , offset: 0x20 */
  __IO uint32_t DSI_HOST_CFG_BTA_H_TO_COUNT;       /**< , offset: 0x24 */
  __IO uint32_t DSI_HOST_CFG_TWAKEUP;              /**< , offset: 0x28 */
  __I  uint32_t DSI_HOST_CFG_STATUS_OUT;           /**< , offset: 0x2C */
  __I  uint32_t DSI_HOST_RX_ERROR_STATUS;          /**< , offset: 0x30 */
} MIPI_DSI_HOST_Type;

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_Register_Masks MIPI_DSI_HOST Register Masks
 * @{
 */

/*! @name DSI_HOST_CFG_NUM_LANES -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_MASK (0x3U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_MASK)

/*! @name DSI_HOST_CFG_NONCONTINUOUS_CLK -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_dsi_host_cfg_noncontinuous_clk_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_dsi_host_cfg_noncontinuous_clk_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_dsi_host_cfg_noncontinuous_clk(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_dsi_host_cfg_noncontinuous_clk_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_dsi_host_cfg_noncontinuous_clk_MASK)

/*! @name DSI_HOST_CFG_T_PRE -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_MASK (0x7FU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_MASK)

/*! @name DSI_HOST_CFG_T_POST -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_MASK (0x7FU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_MASK)

/*! @name DSI_HOST_CFG_TX_GAP -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_MASK (0x7FU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_MASK)

/*! @name DSI_HOST_CFG_AUTOINSERT_EOTP -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_dsi_host_cfg_autoinsert_eotp_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_dsi_host_cfg_autoinsert_eotp_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_dsi_host_cfg_autoinsert_eotp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_dsi_host_cfg_autoinsert_eotp_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_dsi_host_cfg_autoinsert_eotp_MASK)

/*! @name DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_MASK (0xFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_MASK)

/*! @name DSI_HOST_CFG_HTX_TO_COUNT -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_MASK)

/*! @name DSI_HOST_CFG_LRX_H_TO_COUNT -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_MASK)

/*! @name DSI_HOST_CFG_BTA_H_TO_COUNT -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_MASK)

/*! @name DSI_HOST_CFG_TWAKEUP -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_MASK (0x7FFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_MASK)

/*! @name DSI_HOST_CFG_STATUS_OUT -  */
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_ERROR_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_ERROR_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_ERROR(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_ERROR_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_ERROR_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_SYNC_ERROR_MASK (0x2U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_SYNC_ERROR_SHIFT (1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_SYNC_ERROR(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_SYNC_ERROR_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_SYNC_ERROR_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_EOT_SYNC_ERROR_MASK (0x4U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_EOT_SYNC_ERROR_SHIFT (2U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_EOT_SYNC_ERROR(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_EOT_SYNC_ERROR_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_EOT_SYNC_ERROR_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ESCAPE_MODE_ENTRY_CMD_ERROR_MASK (0x8U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ESCAPE_MODE_ENTRY_CMD_ERROR_SHIFT (3U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ESCAPE_MODE_ENTRY_CMD_ERROR(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ESCAPE_MODE_ENTRY_CMD_ERROR_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ESCAPE_MODE_ENTRY_CMD_ERROR_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_LP_TX_SYNC_ERROR_MASK (0x10U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_LP_TX_SYNC_ERROR_SHIFT (4U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_LP_TX_SYNC_ERROR(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_LP_TX_SYNC_ERROR_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_LP_TX_SYNC_ERROR_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_PERIPH_TIMEOUT_ERROR_MASK (0x20U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_PERIPH_TIMEOUT_ERROR_SHIFT (5U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_PERIPH_TIMEOUT_ERROR(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_PERIPH_TIMEOUT_ERROR_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_PERIPH_TIMEOUT_ERROR_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_FALSE_CONTROL_ERROR_MASK (0x40U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_FALSE_CONTROL_ERROR_SHIFT (6U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_FALSE_CONTROL_ERROR(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_FALSE_CONTROL_ERROR_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_FALSE_CONTROL_ERROR_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CONTENTION_DETECT_MASK (0x80U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CONTENTION_DETECT_SHIFT (7U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CONTENTION_DETECT(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CONTENTION_DETECT_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CONTENTION_DETECT_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_SINGLE_BIT_MASK (0x100U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_SINGLE_BIT_SHIFT (8U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_SINGLE_BIT(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_SINGLE_BIT_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_SINGLE_BIT_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_MULTI_BIT_MASK (0x200U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_MULTI_BIT_SHIFT (9U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_MULTI_BIT(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_MULTI_BIT_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_MULTI_BIT_MASK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CHECKSUM_ERROR_MASK (0x400U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CHECKSUM_ERROR_SHIFT (10U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CHECKSUM_ERROR(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CHECKSUM_ERROR_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CHECKSUM_ERROR_MASK)

/*! @name DSI_HOST_RX_ERROR_STATUS -  */
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_MASK (0x7FFU)
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_MASK)


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_Register_Masks */


/* MIPI_DSI_HOST - Peripheral instance base addresses */
/** Peripheral MIPI_DSI_HOST base address */
#define MIPI_DSI_HOST_BASE                       (0x30A10000u)
/** Peripheral MIPI_DSI_HOST base pointer */
#define MIPI_DSI_HOST                            ((MIPI_DSI_HOST_Type *)MIPI_DSI_HOST_BASE)
/** Array initializer of MIPI_DSI_HOST peripheral base addresses */
#define MIPI_DSI_HOST_BASE_ADDRS                 { MIPI_DSI_HOST_BASE }
/** Array initializer of MIPI_DSI_HOST peripheral base pointers */
#define MIPI_DSI_HOST_BASE_PTRS                  { MIPI_DSI_HOST }

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_APB_PKT_IF Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_APB_PKT_IF_Peripheral_Access_Layer MIPI_DSI_HOST_APB_PKT_IF Peripheral Access Layer
 * @{
 */

/** MIPI_DSI_HOST_APB_PKT_IF - Register Layout Typedef */
typedef struct {
  __IO uint32_t DSI_HOST_TX_PAYLOAD;               /**< , offset: 0x0 */
  __IO uint32_t DSI_HOST_PKT_CONTROL;              /**< , offset: 0x4 */
  __IO uint32_t DSI_HOST_SEND_PACKET;              /**< , offset: 0x8 */
  __I  uint32_t DSI_HOST_PKT_STATUS;               /**< , offset: 0xC */
  __I  uint32_t DSI_HOST_PKT_FIFO_WR_LEVEL;        /**< , offset: 0x10 */
  __I  uint32_t DSI_HOST_PKT_FIFO_RD_LEVEL;        /**< , offset: 0x14 */
  __I  uint32_t DSI_HOST_PKT_RX_PAYLOAD;           /**< , offset: 0x18 */
  __I  uint32_t DSI_HOST_PKT_RX_PKT_HEADER;        /**< , offset: 0x1C */
  __I  uint32_t DSI_HOST_IRQ_STATUS;               /**< , offset: 0x20 */
  __I  uint32_t DSI_HOST_IRQ_STATUS2;              /**< , offset: 0x24 */
  __IO uint32_t DSI_HOST_IRQ_MASK;                 /**< , offset: 0x28 */
  __IO uint32_t DSI_HOST_IRQ_MASK2;                /**< , offset: 0x2C */
} MIPI_DSI_HOST_APB_PKT_IF_Type;

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_APB_PKT_IF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_APB_PKT_IF_Register_Masks MIPI_DSI_HOST_APB_PKT_IF Register Masks
 * @{
 */

/*! @name DSI_HOST_TX_PAYLOAD -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_MASK)

/*! @name DSI_HOST_PKT_CONTROL -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_MASK (0x7FFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_MASK)

/*! @name DSI_HOST_SEND_PACKET -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_SEND_PACKET_dsi_host_send_packet_MASK (0x1U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_SEND_PACKET_dsi_host_send_packet_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_SEND_PACKET_dsi_host_send_packet(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_SEND_PACKET_dsi_host_send_packet_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_SEND_PACKET_dsi_host_send_packet_MASK)

/*! @name DSI_HOST_PKT_STATUS -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_MASK (0x1FFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_dsi_host_pkt_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_MASK)

/*! @name DSI_HOST_PKT_FIFO_WR_LEVEL -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_MASK (0xFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_MASK)

/*! @name DSI_HOST_PKT_FIFO_RD_LEVEL -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_MASK (0xFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_MASK)

/*! @name DSI_HOST_PKT_RX_PAYLOAD -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_MASK)

/*! @name DSI_HOST_PKT_RX_PKT_HEADER -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_MASK)

/*! @name DSI_HOST_IRQ_STATUS -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_dsi_host_irq_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_MASK)

/*! @name DSI_HOST_IRQ_STATUS2 -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_MASK (0x7U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_MASK)

/*! @name DSI_HOST_IRQ_MASK -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_dsi_host_irq_mask(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_MASK)

/*! @name DSI_HOST_IRQ_MASK2 -  */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_MASK (0x7U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_MASK)


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_APB_PKT_IF_Register_Masks */


/* MIPI_DSI_HOST_APB_PKT_IF - Peripheral instance base addresses */
/** Peripheral MIPI_DSI_HOST_APB_PKT_IF base address */
#define MIPI_DSI_HOST_APB_PKT_IF_BASE            (0x30A10280u)
/** Peripheral MIPI_DSI_HOST_APB_PKT_IF base pointer */
#define MIPI_DSI_HOST_APB_PKT_IF                 ((MIPI_DSI_HOST_APB_PKT_IF_Type *)MIPI_DSI_HOST_APB_PKT_IF_BASE)
/** Array initializer of MIPI_DSI_HOST_APB_PKT_IF peripheral base addresses */
#define MIPI_DSI_HOST_APB_PKT_IF_BASE_ADDRS      { MIPI_DSI_HOST_APB_PKT_IF_BASE }
/** Array initializer of MIPI_DSI_HOST_APB_PKT_IF peripheral base pointers */
#define MIPI_DSI_HOST_APB_PKT_IF_BASE_PTRS       { MIPI_DSI_HOST_APB_PKT_IF }

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_APB_PKT_IF_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_DPI_INTFC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_DPI_INTFC_Peripheral_Access_Layer MIPI_DSI_HOST_DPI_INTFC Peripheral Access Layer
 * @{
 */

/** MIPI_DSI_HOST_DPI_INTFC - Register Layout Typedef */
typedef struct {
  __IO uint32_t DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE; /**< , offset: 0x0 */
  __IO uint32_t DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL; /**< , offset: 0x4 */
  __IO uint32_t DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING; /**< , offset: 0x8 */
  __IO uint32_t DSI_HOST_CFG_DPI_PIXEL_FORMAT;     /**< , offset: 0xC */
  __IO uint32_t DSI_HOST_CFG_DPI_VSYNC_POLARITY;   /**< , offset: 0x10 */
  __IO uint32_t DSI_HOST_CFG_DPI_HSYNC_POLARITY;   /**< , offset: 0x14 */
  __IO uint32_t DSI_HOST_CFG_DPI_VIDEO_MODE;       /**< , offset: 0x18 */
  __IO uint32_t DSI_HOST_CFG_DPI_HFP;              /**< , offset: 0x1C */
  __IO uint32_t DSI_HOST_CFG_DPI_HBP;              /**< , offset: 0x20 */
  __IO uint32_t DSI_HOST_CFG_DPI_HSA;              /**< , offset: 0x24 */
  __IO uint32_t DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS; /**< , offset: 0x28 */
  __IO uint32_t DSI_HOST_CFG_DPI_VBP;              /**< , offset: 0x2C */
  __IO uint32_t DSI_HOST_CFG_DPI_VFP;              /**< , offset: 0x30 */
  __IO uint32_t DSI_HOST_CFG_DPI_BLLP_MODE;        /**< , offset: 0x34 */
  __IO uint32_t DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP; /**< , offset: 0x38 */
  __IO uint32_t DSI_HOST_CFG_DPI_VACTIVE;          /**< , offset: 0x3C */
  __IO uint32_t DSI_HOST_CFG_DPI_VC;               /**< , offset: 0x40 */
} MIPI_DSI_HOST_DPI_INTFC_Type;

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_DPI_INTFC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_DPI_INTFC_Register_Masks MIPI_DSI_HOST_DPI_INTFC Register Masks
 * @{
 */

/*! @name DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_MASK)

/*! @name DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_MASK)

/*! @name DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_MASK (0x7U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_MASK)

/*! @name DSI_HOST_CFG_DPI_PIXEL_FORMAT -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_MASK (0x3U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_MASK)

/*! @name DSI_HOST_CFG_DPI_VSYNC_POLARITY -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VSYNC_POLARITY_dsi_host_cfg_dpi_vsync_polarity_MASK (0x1U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VSYNC_POLARITY_dsi_host_cfg_dpi_vsync_polarity_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VSYNC_POLARITY_dsi_host_cfg_dpi_vsync_polarity(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VSYNC_POLARITY_dsi_host_cfg_dpi_vsync_polarity_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VSYNC_POLARITY_dsi_host_cfg_dpi_vsync_polarity_MASK)

/*! @name DSI_HOST_CFG_DPI_HSYNC_POLARITY -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSYNC_POLARITY_dsi_host_cfg_dpi_hsync_polarity_MASK (0x1U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSYNC_POLARITY_dsi_host_cfg_dpi_hsync_polarity_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSYNC_POLARITY_dsi_host_cfg_dpi_hsync_polarity(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSYNC_POLARITY_dsi_host_cfg_dpi_hsync_polarity_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSYNC_POLARITY_dsi_host_cfg_dpi_hsync_polarity_MASK)

/*! @name DSI_HOST_CFG_DPI_VIDEO_MODE -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_MASK (0x3U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_MASK)

/*! @name DSI_HOST_CFG_DPI_HFP -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_MASK)

/*! @name DSI_HOST_CFG_DPI_HBP -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_MASK)

/*! @name DSI_HOST_CFG_DPI_HSA -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_MASK)

/*! @name DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_dsi_host_cfg_dpi_enable_mult_pkts_MASK (0x1U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_dsi_host_cfg_dpi_enable_mult_pkts_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_dsi_host_cfg_dpi_enable_mult_pkts(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_dsi_host_cfg_dpi_enable_mult_pkts_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_dsi_host_cfg_dpi_enable_mult_pkts_MASK)

/*! @name DSI_HOST_CFG_DPI_VBP -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_MASK (0xFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_MASK)

/*! @name DSI_HOST_CFG_DPI_VFP -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_MASK (0xFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_MASK)

/*! @name DSI_HOST_CFG_DPI_BLLP_MODE -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_BLLP_MODE_dsi_host_cfg_dpi_bllp_mode_MASK (0x1U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_BLLP_MODE_dsi_host_cfg_dpi_bllp_mode_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_BLLP_MODE_dsi_host_cfg_dpi_bllp_mode(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_BLLP_MODE_dsi_host_cfg_dpi_bllp_mode_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_BLLP_MODE_dsi_host_cfg_dpi_bllp_mode_MASK)

/*! @name DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_dsi_host_cfg_dpi_use_null_pkt_bllp_MASK (0x1U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_dsi_host_cfg_dpi_use_null_pkt_bllp_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_dsi_host_cfg_dpi_use_null_pkt_bllp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_dsi_host_cfg_dpi_use_null_pkt_bllp_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_dsi_host_cfg_dpi_use_null_pkt_bllp_MASK)

/*! @name DSI_HOST_CFG_DPI_VACTIVE -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_MASK (0x3FFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_MASK)

/*! @name DSI_HOST_CFG_DPI_VC -  */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_MASK (0x3U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_MASK)


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_DPI_INTFC_Register_Masks */


/* MIPI_DSI_HOST_DPI_INTFC - Peripheral instance base addresses */
/** Peripheral MIPI_DSI_HOST_DPI_INTFC base address */
#define MIPI_DSI_HOST_DPI_INTFC_BASE             (0x30A10200u)
/** Peripheral MIPI_DSI_HOST_DPI_INTFC base pointer */
#define MIPI_DSI_HOST_DPI_INTFC                  ((MIPI_DSI_HOST_DPI_INTFC_Type *)MIPI_DSI_HOST_DPI_INTFC_BASE)
/** Array initializer of MIPI_DSI_HOST_DPI_INTFC peripheral base addresses */
#define MIPI_DSI_HOST_DPI_INTFC_BASE_ADDRS       { MIPI_DSI_HOST_DPI_INTFC_BASE }
/** Array initializer of MIPI_DSI_HOST_DPI_INTFC peripheral base pointers */
#define MIPI_DSI_HOST_DPI_INTFC_BASE_PTRS        { MIPI_DSI_HOST_DPI_INTFC }

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_DPI_INTFC_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Peripheral_Access_Layer MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC Peripheral Access Layer
 * @{
 */

/** MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC - Register Layout Typedef */
typedef struct {
  __IO uint32_t DPHY_PD_DPHY;                      /**< , offset: 0x0 */
  __IO uint32_t DPHY_M_PRG_HS_PREPARE;             /**< , offset: 0x4 */
  __IO uint32_t DPHY_MC_PRG_HS_PREPARE;            /**< , offset: 0x8 */
  __IO uint32_t DPHY_M_PRG_HS_ZERO;                /**< , offset: 0xC */
  __IO uint32_t DPHY_MC_PRG_HS_ZERO;               /**< , offset: 0x10 */
  __IO uint32_t DPHY_M_PRG_HS_TRAIL;               /**< , offset: 0x14 */
  __IO uint32_t DPHY_MC_PRG_HS_TRAIL;              /**< , offset: 0x18 */
  __IO uint32_t DPHY_PD_PLL;                       /**< , offset: 0x1C */
  __IO uint32_t DPHY_TST;                          /**< , offset: 0x20 */
  __IO uint32_t DPHY_CN;                           /**< , offset: 0x24 */
  __IO uint32_t DPHY_CM;                           /**< , offset: 0x28 */
  __IO uint32_t DPHY_CO;                           /**< , offset: 0x2C */
  __I  uint32_t DPHY_LOCK;                         /**< , offset: 0x30 */
  __IO uint32_t DPHY_LOCK_BYP;                     /**< , offset: 0x34 */
  __IO uint32_t DPHY_RTERM_SEL;                    /**< , offset: 0x38 */
  __IO uint32_t DPHY_AUTO_PD_EN;                   /**< , offset: 0x3C */
  __IO uint32_t DPHY_RXLPRP;                       /**< , offset: 0x40 */
  __IO uint32_t DPHY_RXCDRP;                       /**< , offset: 0x44 */
} MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Type;

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Register_Masks MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC Register Masks
 * @{
 */

/*! @name DPHY_PD_DPHY -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_DPHY_dphy_pd_dphy_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_DPHY_dphy_pd_dphy_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_DPHY_dphy_pd_dphy(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_DPHY_dphy_pd_dphy_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_DPHY_dphy_pd_dphy_MASK)

/*! @name DPHY_M_PRG_HS_PREPARE -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_MASK (0x3U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_MASK)

/*! @name DPHY_MC_PRG_HS_PREPARE -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_PREPARE_dphy_mc_prg_hs_prepare_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_PREPARE_dphy_mc_prg_hs_prepare_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_PREPARE_dphy_mc_prg_hs_prepare(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_PREPARE_dphy_mc_prg_hs_prepare_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_PREPARE_dphy_mc_prg_hs_prepare_MASK)

/*! @name DPHY_M_PRG_HS_ZERO -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_MASK (0x1FU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_MASK)

/*! @name DPHY_MC_PRG_HS_ZERO -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_MASK (0x3FU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_MASK)

/*! @name DPHY_M_PRG_HS_TRAIL -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_MASK (0xFU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_MASK)

/*! @name DPHY_MC_PRG_HS_TRAIL -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_MASK (0xFU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_MASK)

/*! @name DPHY_PD_PLL -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_PLL_PD_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_PLL_PD_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_PLL_PD(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_PLL_PD_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_PLL_PD_MASK)

/*! @name DPHY_TST -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_TST_MASK (0x3FU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_TST_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_TST(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_TST_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_TST_MASK)

/*! @name DPHY_CN -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_CN_MASK (0x1FU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_CN_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_CN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_CN_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_CN_MASK)

/*! @name DPHY_CM -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_CM_MASK (0xFFU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_CM_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_CM(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_CM_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_CM_MASK)

/*! @name DPHY_CO -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_CO_MASK (0x3U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_CO_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_CO(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_CO_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_CO_MASK)

/*! @name DPHY_LOCK -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_LOCK_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_LOCK_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_LOCK(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_LOCK_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_LOCK_MASK)

/*! @name DPHY_LOCK_BYP -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_BYP_dphy_lock_byp_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_BYP_dphy_lock_byp_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_BYP_dphy_lock_byp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_BYP_dphy_lock_byp_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_BYP_dphy_lock_byp_MASK)

/*! @name DPHY_RTERM_SEL -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RTERM_SEL_dphy_rterm_sel_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RTERM_SEL_dphy_rterm_sel_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RTERM_SEL_dphy_rterm_sel(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RTERM_SEL_dphy_rterm_sel_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RTERM_SEL_dphy_rterm_sel_MASK)

/*! @name DPHY_AUTO_PD_EN -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_AUTO_PD_EN_dphy_auto_pd_en_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_AUTO_PD_EN_dphy_auto_pd_en_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_AUTO_PD_EN_dphy_auto_pd_en(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_AUTO_PD_EN_dphy_auto_pd_en_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_AUTO_PD_EN_dphy_auto_pd_en_MASK)

/*! @name DPHY_RXLPRP -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_dphy_rxlprp_MASK (0x3U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_dphy_rxlprp_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_dphy_rxlprp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_dphy_rxlprp_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_dphy_rxlprp_MASK)

/*! @name DPHY_RXCDRP -  */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_dphy_rxcdrp_MASK (0x3U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_dphy_rxcdrp_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_dphy_rxcdrp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_dphy_rxcdrp_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_dphy_rxcdrp_MASK)


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Register_Masks */


/* MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC - Peripheral instance base addresses */
/** Peripheral MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC base address */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE    (0x30A10300u)
/** Peripheral MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC base pointer */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC         ((MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Type *)MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE)
/** Array initializer of MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC peripheral base
 * addresses */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_ADDRS { MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE }
/** Array initializer of MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC peripheral base
 * pointers */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTRS { MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC }

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Peripheral_Access_Layer */

/*!
 * @brief Power mode on the other side definition.
 */
typedef enum _mu_power_mode
{
    kMU_PowerModeRun  = 0x00U, /*!< Run mode.       */
    kMU_PowerModeWait = 0x01U, /*!< WAIT mode.      */
    kMU_PowerModeStop = 0x03U, /*!< STOP mode.      */
} mu_power_mode_t;


/* ----------------------------------------------------------------------------
   -- MU Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Peripheral_Access_Layer MU Peripheral Access Layer
 * @{
 */

/** MU - Register Layout Typedef */
typedef struct {
  __IO uint32_t TR[4];                             /**< Processor B Transmit Register 0..Processor B Transmit Register 3, array offset: 0x0, array step: 0x4 */
  __I  uint32_t RR[4];                             /**< Processor B Receive Register 0..Processor B Receive Register 3, array offset: 0x10, array step: 0x4 */
  __IO uint32_t SR;                                /**< Processor B Status Register, offset: 0x20 */
  __IO uint32_t CR;                                /**< Processor B Control Register, offset: 0x24 */
} MU_Type;

/* ----------------------------------------------------------------------------
   -- MU Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Register_Masks MU Register Masks
 * @{
 */

/*! @name TR - Processor B Transmit Register 0..Processor B Transmit Register 3 */
#define MU_TR_BTR0_MASK                          (0xFFFFFFFFU)
#define MU_TR_BTR0_SHIFT                         (0U)
#define MU_TR_BTR0(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_BTR0_SHIFT)) & MU_TR_BTR0_MASK)
#define MU_TR_BTR1_MASK                          (0xFFFFFFFFU)
#define MU_TR_BTR1_SHIFT                         (0U)
#define MU_TR_BTR1(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_BTR1_SHIFT)) & MU_TR_BTR1_MASK)
#define MU_TR_BTR2_MASK                          (0xFFFFFFFFU)
#define MU_TR_BTR2_SHIFT                         (0U)
#define MU_TR_BTR2(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_BTR2_SHIFT)) & MU_TR_BTR2_MASK)
#define MU_TR_BTR3_MASK                          (0xFFFFFFFFU)
#define MU_TR_BTR3_SHIFT                         (0U)
#define MU_TR_BTR3(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_BTR3_SHIFT)) & MU_TR_BTR3_MASK)

/* The count of MU_TR */
#define MU_TR_COUNT                              (4U)

/*! @name RR - Processor B Receive Register 0..Processor B Receive Register 3 */
#define MU_RR_BRR0_MASK                          (0xFFFFFFFFU)
#define MU_RR_BRR0_SHIFT                         (0U)
#define MU_RR_BRR0(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_BRR0_SHIFT)) & MU_RR_BRR0_MASK)
#define MU_RR_BRR1_MASK                          (0xFFFFFFFFU)
#define MU_RR_BRR1_SHIFT                         (0U)
#define MU_RR_BRR1(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_BRR1_SHIFT)) & MU_RR_BRR1_MASK)
#define MU_RR_BRR2_MASK                          (0xFFFFFFFFU)
#define MU_RR_BRR2_SHIFT                         (0U)
#define MU_RR_BRR2(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_BRR2_SHIFT)) & MU_RR_BRR2_MASK)
#define MU_RR_BRR3_MASK                          (0xFFFFFFFFU)
#define MU_RR_BRR3_SHIFT                         (0U)
#define MU_RR_BRR3(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_BRR3_SHIFT)) & MU_RR_BRR3_MASK)

/* The count of MU_RR */
#define MU_RR_COUNT                              (4U)

/*! @name SR - Processor B Status Register */
#define MU_SR_Fn_MASK                            (0x7U)
#define MU_SR_Fn_SHIFT                           (0U)
#define MU_SR_Fn(x)                              (((uint32_t)(((uint32_t)(x)) << MU_SR_Fn_SHIFT)) & MU_SR_Fn_MASK)
#define MU_SR_EP_MASK                            (0x10U)
#define MU_SR_EP_SHIFT                           (4U)
#define MU_SR_EP(x)                              (((uint32_t)(((uint32_t)(x)) << MU_SR_EP_SHIFT)) & MU_SR_EP_MASK)
#define MU_SR_APM_MASK                           (0x60U)
#define MU_SR_APM_SHIFT                          (5U)
#define MU_SR_APM(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_APM_SHIFT)) & MU_SR_APM_MASK)
#define MU_SR_ARS_MASK                           (0x80U)
#define MU_SR_ARS_SHIFT                          (7U)
#define MU_SR_ARS(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_ARS_SHIFT)) & MU_SR_ARS_MASK)
#define MU_SR_FUP_MASK                           (0x100U)
#define MU_SR_FUP_SHIFT                          (8U)
#define MU_SR_FUP(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_FUP_SHIFT)) & MU_SR_FUP_MASK)
#define MU_SR_TEn_MASK                           (0xF00000U)
#define MU_SR_TEn_SHIFT                          (20U)
#define MU_SR_TEn(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_TEn_SHIFT)) & MU_SR_TEn_MASK)
#define MU_SR_RFn_MASK                           (0xF000000U)
#define MU_SR_RFn_SHIFT                          (24U)
#define MU_SR_RFn(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_RFn_SHIFT)) & MU_SR_RFn_MASK)
#define MU_SR_GIPn_MASK                          (0xF0000000U)
#define MU_SR_GIPn_SHIFT                         (28U)
#define MU_SR_GIPn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_SR_GIPn_SHIFT)) & MU_SR_GIPn_MASK)

/*! @name CR - Processor B Control Register */
#define MU_CR_BAFn_MASK                          (0x7U)
#define MU_CR_BAFn_SHIFT                         (0U)
#define MU_CR_BAFn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_BAFn_SHIFT)) & MU_CR_BAFn_MASK)
#define MU_CR_HRM_MASK                           (0x10U)
#define MU_CR_HRM_SHIFT                          (4U)
#define MU_CR_HRM(x)                             (((uint32_t)(((uint32_t)(x)) << MU_CR_HRM_SHIFT)) & MU_CR_HRM_MASK)
#define MU_CR_GIRn_MASK                          (0xF0000U)
#define MU_CR_GIRn_SHIFT                         (16U)
#define MU_CR_GIRn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_GIRn_SHIFT)) & MU_CR_GIRn_MASK)
#define MU_CR_TIEn_MASK                          (0xF00000U)
#define MU_CR_TIEn_SHIFT                         (20U)
#define MU_CR_TIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_TIEn_SHIFT)) & MU_CR_TIEn_MASK)
#define MU_CR_RIEn_MASK                          (0xF000000U)
#define MU_CR_RIEn_SHIFT                         (24U)
#define MU_CR_RIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_RIEn_SHIFT)) & MU_CR_RIEn_MASK)
#define MU_CR_GIEn_MASK                          (0xF0000000U)
#define MU_CR_GIEn_SHIFT                         (28U)
#define MU_CR_GIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_GIEn_SHIFT)) & MU_CR_GIEn_MASK)


/*!
 * @}
 */ /* end of group MU_Register_Masks */


/* MU - Peripheral instance base addresses */
/** Peripheral MUB base address */
#define MUB_BASE                                 (0x30AB0000u)
/** Peripheral MUB base pointer */
#define MUB                                      ((MU_Type *)MUB_BASE)
/** Array initializer of MU peripheral base addresses */
#define MU_BASE_ADDRS                            { MUB_BASE }
/** Array initializer of MU peripheral base pointers */
#define MU_BASE_PTRS                             { MUB }
/** Interrupt vectors for the MU peripheral type */
#define MU_IRQS                                  { MU_M4_IRQn }
/* Backward compatibility */
#define MU_SR_PM_MASK                             MU_SR_APM_MASK
#define MU_SR_PM_SHIFT                            MU_SR_APM_SHIFT
#define MU_SR_PM(x)                               MU_SR_APM(x)
#define MU_SR_RS_MASK                             MU_SR_ARS_MASK
#define MU_SR_RS_SHIFT                            MU_SR_ARS_SHIFT
#define MU_SR_RS(x)                               MU_SR_ARS(x)
#define MU_CR_Fn_MASK                             MU_CR_BAFn_MASK
#define MU_CR_Fn_SHIFT                            MU_CR_BAFn_SHIFT
#define MU_CR_Fn(x)                               MU_CR_BAFn(x)


/*!
 * @}
 */ /* end of group MU_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- OCOTP Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Peripheral_Access_Layer OCOTP Peripheral Access Layer
 * @{
 */

/** OCOTP - Register Layout Typedef */
typedef struct {
  struct {                                         /* offset: 0x0 */
    __IO uint32_t RW;                                /**< OTP Controller Control Register, offset: 0x0 */
    __IO uint32_t SET;                               /**< OTP Controller Control Register, offset: 0x4 */
    __IO uint32_t CLR;                               /**< OTP Controller Control Register, offset: 0x8 */
    __IO uint32_t TOG;                               /**< OTP Controller Control Register, offset: 0xC */
  } HW_OCOTP_CTRL;
  __IO uint32_t HW_OCOTP_TIMING;                   /**< OTP Controller Timing Register, offset: 0x10 */
       uint8_t RESERVED_0[12];
  __IO uint32_t HW_OCOTP_DATA;                     /**< OTP Controller Write Data Register, offset: 0x20 */
       uint8_t RESERVED_1[12];
  __IO uint32_t HW_OCOTP_READ_CTRL;                /**< OTP Controller Write Data Register, offset: 0x30 */
       uint8_t RESERVED_2[12];
  __IO uint32_t HW_OCOTP_READ_FUSE_DATA;           /**< OTP Controller Read Data Register, offset: 0x40 */
       uint8_t RESERVED_3[12];
  __IO uint32_t HW_OCOTP_SW_STICKY;                /**< Sticky bit Register, offset: 0x50 */
       uint8_t RESERVED_4[12];
  struct {                                         /* offset: 0x60 */
    __IO uint32_t RW;                                /**< Software Controllable Signals Register, offset: 0x60 */
    __IO uint32_t SET;                               /**< Software Controllable Signals Register, offset: 0x64 */
    __IO uint32_t CLR;                               /**< Software Controllable Signals Register, offset: 0x68 */
    __IO uint32_t TOG;                               /**< Software Controllable Signals Register, offset: 0x6C */
  } HW_OCOTP_SCS;
       uint8_t RESERVED_5[32];
  __I  uint32_t HW_OCOTP_VERSION;                  /**< OTP Controller Version Register, offset: 0x90 */
       uint8_t RESERVED_6[876];
  __I  uint32_t HW_OCOTP_LOCK;                     /**< Value of OTP Bank0 Word0 (Lock controls), offset: 0x400 */
       uint8_t RESERVED_7[12];
  __IO uint32_t HW_OCOTP_TESTER0;                  /**< Value of OTP Bank0 Word1 (Tester Info.), offset: 0x410 */
       uint8_t RESERVED_8[12];
  __IO uint32_t HW_OCOTP_TESTER1;                  /**< Value of OTP Bank0 Word2 (tester Info.), offset: 0x420 */
       uint8_t RESERVED_9[12];
  __IO uint32_t HW_OCOTP_TESTER2;                  /**< Value of OTP Bank0 Word3 (Tester Info.), offset: 0x430 */
       uint8_t RESERVED_10[12];
  __IO uint32_t HW_OCOTP_TESTER3;                  /**< Value of OTP Bank1 Word0 (Tester Info.), offset: 0x440 */
       uint8_t RESERVED_11[12];
  __IO uint32_t HW_OCOTP_TESTER4;                  /**< Value of OTP Bank1 Word1 (Tester Info.), offset: 0x450 */
       uint8_t RESERVED_12[12];
  __IO uint32_t HW_OCOTP_TESTER5;                  /**< Value of OTP Bank1 Word2 (Tester Info.), offset: 0x460 */
       uint8_t RESERVED_13[12];
  __IO uint32_t HW_OCOTP_BOOT_CFG0;                /**< Value of OTP Bank1 Word3 (Boot Configuration Info.), offset: 0x470 */
       uint8_t RESERVED_14[12];
  __IO uint32_t HW_OCOTP_BOOT_CFG1;                /**< Value of OTP Bank2 Word0 (Boot Configuration Info.), offset: 0x480 */
       uint8_t RESERVED_15[12];
  __IO uint32_t HW_OCOTP_BOOT_CFG2;                /**< Value of OTP Bank2 Word1 (Boot Configuration Info.), offset: 0x490 */
       uint8_t RESERVED_16[12];
  __IO uint32_t HW_OCOTP_BOOT_CFG3;                /**< Value of OTP Bank2 Word2 (Boot Configuration Info.), offset: 0x4A0 */
       uint8_t RESERVED_17[12];
  __IO uint32_t HW_OCOTP_BOOT_CFG4;                /**< Value of OTP Bank2 Word3 (BOOT Configuration Info.), offset: 0x4B0 */
       uint8_t RESERVED_18[12];
  __IO uint32_t HW_OCOTP_MEM_TRIM0;                /**< Value of OTP Bank3 Word0 (Memory Related Info.), offset: 0x4C0 */
       uint8_t RESERVED_19[12];
  __IO uint32_t HW_OCOTP_MEM_TRIM1;                /**< Value of OTP Bank3 Word1 (Memory Related Info.), offset: 0x4D0 */
       uint8_t RESERVED_20[12];
  __IO uint32_t HW_OCOTP_ANA0;                     /**< Value of OTP Bank3 Word2 (Analog Info.), offset: 0x4E0 */
       uint8_t RESERVED_21[12];
  __IO uint32_t HW_OCOTP_ANA1;                     /**< Value of OTP Bank3 Word3 (Analog Info.), offset: 0x4F0 */
       uint8_t RESERVED_22[140];
  __IO uint32_t HW_OCOTP_SRK0;                     /**< Shadow Register for OTP Bank6 Word0 (SRK Hash), offset: 0x580 */
       uint8_t RESERVED_23[12];
  __IO uint32_t HW_OCOTP_SRK1;                     /**< Shadow Register for OTP Bank6 Word1 (SRK Hash), offset: 0x590 */
       uint8_t RESERVED_24[12];
  __IO uint32_t HW_OCOTP_SRK2;                     /**< Shadow Register for OTP Bank6 Word2 (SRK Hash), offset: 0x5A0 */
       uint8_t RESERVED_25[12];
  __IO uint32_t HW_OCOTP_SRK3;                     /**< Shadow Register for OTP Bank6 Word3 (SRK Hash), offset: 0x5B0 */
       uint8_t RESERVED_26[12];
  __IO uint32_t HW_OCOTP_SRK4;                     /**< Shadow Register for OTP Bank7 Word0 (SRK Hash), offset: 0x5C0 */
       uint8_t RESERVED_27[12];
  __IO uint32_t HW_OCOTP_SRK5;                     /**< Shadow Register for OTP Bank7 Word1 (SRK Hash), offset: 0x5D0 */
       uint8_t RESERVED_28[12];
  __IO uint32_t HW_OCOTP_SRK6;                     /**< Shadow Register for OTP Bank7 Word2 (SRK Hash), offset: 0x5E0 */
       uint8_t RESERVED_29[12];
  __IO uint32_t HW_OCOTP_SRK7;                     /**< Shadow Register for OTP Bank7 Word3 (SRK Hash), offset: 0x5F0 */
       uint8_t RESERVED_30[12];
  __IO uint32_t HW_OCOTP_SJC_RESP0;                /**< Value of OTP Bank8 Word0 (Secure JTAG Response Field), offset: 0x600 */
       uint8_t RESERVED_31[12];
  __IO uint32_t HW_OCOTP_SJC_RESP1;                /**< Value of OTP Bank8 Word1 (Secure JTAG Response Field), offset: 0x610 */
       uint8_t RESERVED_32[12];
  __IO uint32_t HW_OCOTP_USB_ID;                   /**< Value of OTP Bank8 Word2 (USB ID info), offset: 0x620 */
       uint8_t RESERVED_33[12];
  __IO uint32_t HW_OCOTP_FIELD_RETURN;             /**< Value of OTP Bank5 Word6 (Field Return), offset: 0x630 */
       uint8_t RESERVED_34[12];
  __IO uint32_t HW_OCOTP_MAC_ADDR0;                /**< Value of OTP Bank9 Word0 (MAC Address), offset: 0x640 */
       uint8_t RESERVED_35[12];
  __IO uint32_t HW_OCOTP_MAC_ADDR1;                /**< Value of OTP Bank9 Word1 (MAC Address), offset: 0x650 */
       uint8_t RESERVED_36[12];
  __IO uint32_t HW_OCOTP_MAC_ADDR2;                /**< Value of OTP Bank9 Word2 (MAC Address), offset: 0x660 */
       uint8_t RESERVED_37[12];
  __IO uint32_t HW_OCOTP_SRK_REVOKE;               /**< Value of OTP Bank9 Word3 (SRK Revoke), offset: 0x670 */
       uint8_t RESERVED_38[12];
  __IO uint32_t HW_OCOTP_MAU_KEY0;                 /**< Shadow Register for OTP Bank10 Word0 (MAU Key), offset: 0x680 */
       uint8_t RESERVED_39[12];
  __IO uint32_t HW_OCOTP_MAU_KEY1;                 /**< Shadow Register for OTP Bank10 Word1 (MAU Key), offset: 0x690 */
       uint8_t RESERVED_40[12];
  __IO uint32_t HW_OCOTP_MAU_KEY2;                 /**< Shadow Register for OTP Bank10 Word2 (MAU Key), offset: 0x6A0 */
       uint8_t RESERVED_41[12];
  __IO uint32_t HW_OCOTP_MAU_KEY3;                 /**< Shadow Register for OTP Bank10 Word3 (MAU Key), offset: 0x6B0 */
       uint8_t RESERVED_42[12];
  __IO uint32_t HW_OCOTP_MAU_KEY4;                 /**< Shadow Register for OTP Bank11 Word0 (MAU Key), offset: 0x6C0 */
       uint8_t RESERVED_43[12];
  __IO uint32_t HW_OCOTP_MAU_KEY5;                 /**< Shadow Register for OTP Bank11 Word1 (MAU Key), offset: 0x6D0 */
       uint8_t RESERVED_44[12];
  __IO uint32_t HW_OCOTP_MAU_KEY6;                 /**< Shadow Register for OTP Bank11 Word2 (MAU Key), offset: 0x6E0 */
       uint8_t RESERVED_45[12];
  __IO uint32_t HW_OCOTP_MAU_KEY7;                 /**< Shadow Register for OTP Bank11 Word3 (MAU Key), offset: 0x6F0 */
       uint8_t RESERVED_46[140];
  __IO uint32_t HW_OCOTP_GP10;                     /**< Value of OTP Bank14 Word0 (), offset: 0x780 */
       uint8_t RESERVED_47[12];
  __IO uint32_t HW_OCOTP_GP11;                     /**< Value of OTP Bank14 Word1 (), offset: 0x790 */
       uint8_t RESERVED_48[12];
  __IO uint32_t HW_OCOTP_GP20;                     /**< Value of OTP Bank14 Word2 (), offset: 0x7A0 */
       uint8_t RESERVED_49[12];
  __IO uint32_t HW_OCOTP_GP21;                     /**< Value of OTP Bank14 Word3 (), offset: 0x7B0 */
       uint8_t RESERVED_50[60];
  __IO uint32_t HW_OCOTP_GROUP_MASK;               /**< Value of OTP Bank15 Word3 (CRC Key), offset: 0x7F0 */
       uint8_t RESERVED_51[12];
  __IO uint32_t HW_OCOTP_HDMI_FW_SRK0;             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x800 */
       uint8_t RESERVED_52[12];
  __IO uint32_t HW_OCOTP_HDMI_FW_SRK1;             /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x810 */
       uint8_t RESERVED_53[12];
  __IO uint32_t HW_OCOTP_HDMI_FW_SRK2;             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x820 */
       uint8_t RESERVED_54[12];
  __IO uint32_t HW_OCOTP_HDMI_FW_SRK3;             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x830 */
       uint8_t RESERVED_55[12];
  __IO uint32_t HW_OCOTP_HDMI_FW_SRK4;             /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x840 */
       uint8_t RESERVED_56[12];
  __IO uint32_t HW_OCOTP_HDMI_FW_SRK5;             /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x850 */
       uint8_t RESERVED_57[12];
  __IO uint32_t HW_OCOTP_HDMI_FW_SRK6;             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x860 */
       uint8_t RESERVED_58[12];
  __IO uint32_t HW_OCOTP_HDMI_FW_SRK7;             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x870 */
       uint8_t RESERVED_59[12];
  __IO uint32_t HW_OCOTP_HDMI_KMEK0;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x880 */
       uint8_t RESERVED_60[12];
  __IO uint32_t HW_OCOTP_HDMI_KMEK1;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x890 */
       uint8_t RESERVED_61[12];
  __IO uint32_t HW_OCOTP_HDMI_KMEK2;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x8A0 */
       uint8_t RESERVED_62[12];
  __IO uint32_t HW_OCOTP_HDMI_KMEK3;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x8B0 */
       uint8_t RESERVED_63[76];
  __IO uint32_t HW_OCOTP_HDCP_TX_CONS0;            /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x900 */
       uint8_t RESERVED_64[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CONS1;            /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x910 */
       uint8_t RESERVED_65[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CONS2;            /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x920 */
       uint8_t RESERVED_66[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CONS3;            /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x930 */
       uint8_t RESERVED_67[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT0;            /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x940 */
       uint8_t RESERVED_68[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT1;            /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x950 */
       uint8_t RESERVED_69[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT2;            /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x960 */
       uint8_t RESERVED_70[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT3;            /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x970 */
       uint8_t RESERVED_71[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT4;            /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x980 */
       uint8_t RESERVED_72[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT5;            /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x990 */
       uint8_t RESERVED_73[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT6;            /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x9A0 */
       uint8_t RESERVED_74[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT7;            /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x9B0 */
       uint8_t RESERVED_75[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT8;            /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x9C0 */
       uint8_t RESERVED_76[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT9;            /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x9D0 */
       uint8_t RESERVED_77[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT10;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x9E0 */
       uint8_t RESERVED_78[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT11;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x9F0 */
       uint8_t RESERVED_79[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT12;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA00 */
       uint8_t RESERVED_80[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT13;           /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xA10 */
       uint8_t RESERVED_81[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT14;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA20 */
       uint8_t RESERVED_82[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT15;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA30 */
       uint8_t RESERVED_83[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT16;           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xA40 */
       uint8_t RESERVED_84[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT17;           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xA50 */
       uint8_t RESERVED_85[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT18;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA60 */
       uint8_t RESERVED_86[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT19;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA70 */
       uint8_t RESERVED_87[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT20;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA80 */
       uint8_t RESERVED_88[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT21;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA90 */
       uint8_t RESERVED_89[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT22;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xAA0 */
       uint8_t RESERVED_90[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT23;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xAB0 */
       uint8_t RESERVED_91[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT24;           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xAC0 */
       uint8_t RESERVED_92[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT25;           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xAD0 */
       uint8_t RESERVED_93[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT26;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xAE0 */
       uint8_t RESERVED_94[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT27;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xAF0 */
       uint8_t RESERVED_95[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT28;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB00 */
       uint8_t RESERVED_96[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT29;           /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xB10 */
       uint8_t RESERVED_97[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT30;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB20 */
       uint8_t RESERVED_98[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT31;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB30 */
       uint8_t RESERVED_99[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT32;           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xB40 */
       uint8_t RESERVED_100[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT33;           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xB50 */
       uint8_t RESERVED_101[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT34;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB60 */
       uint8_t RESERVED_102[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT35;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB70 */
       uint8_t RESERVED_103[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT36;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB80 */
       uint8_t RESERVED_104[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT37;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB90 */
       uint8_t RESERVED_105[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT38;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xBA0 */
       uint8_t RESERVED_106[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT39;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xBB0 */
       uint8_t RESERVED_107[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT40;           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xBC0 */
       uint8_t RESERVED_108[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT41;           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xBD0 */
       uint8_t RESERVED_109[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT42;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xBE0 */
       uint8_t RESERVED_110[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT43;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xBF0 */
       uint8_t RESERVED_111[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT44;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC00 */
       uint8_t RESERVED_112[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT45;           /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xC10 */
       uint8_t RESERVED_113[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT46;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC20 */
       uint8_t RESERVED_114[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT47;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC30 */
       uint8_t RESERVED_115[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT48;           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xC40 */
       uint8_t RESERVED_116[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT49;           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xC50 */
       uint8_t RESERVED_117[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT50;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC60 */
       uint8_t RESERVED_118[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT51;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC70 */
       uint8_t RESERVED_119[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT52;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC80 */
       uint8_t RESERVED_120[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT53;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC90 */
       uint8_t RESERVED_121[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT54;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xCA0 */
       uint8_t RESERVED_122[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT55;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xCB0 */
       uint8_t RESERVED_123[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT56;           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xCC0 */
       uint8_t RESERVED_124[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT57;           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xCD0 */
       uint8_t RESERVED_125[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT58;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xCE0 */
       uint8_t RESERVED_126[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT59;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xCF0 */
       uint8_t RESERVED_127[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT60;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD00 */
       uint8_t RESERVED_128[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT61;           /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xD10 */
       uint8_t RESERVED_129[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT62;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD20 */
       uint8_t RESERVED_130[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT63;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD30 */
       uint8_t RESERVED_131[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT64;           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xD40 */
       uint8_t RESERVED_132[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT65;           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xD50 */
       uint8_t RESERVED_133[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT66;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD60 */
       uint8_t RESERVED_134[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT67;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD70 */
       uint8_t RESERVED_135[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT68;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD80 */
       uint8_t RESERVED_136[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT69;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD90 */
       uint8_t RESERVED_137[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT70;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xDA0 */
       uint8_t RESERVED_138[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT71;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xDB0 */
       uint8_t RESERVED_139[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT72;           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xDC0 */
       uint8_t RESERVED_140[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT73;           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xDD0 */
       uint8_t RESERVED_141[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT74;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xDE0 */
       uint8_t RESERVED_142[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT75;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xDF0 */
       uint8_t RESERVED_143[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT76;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE00 */
       uint8_t RESERVED_144[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT77;           /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xE10 */
       uint8_t RESERVED_145[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT78;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE20 */
       uint8_t RESERVED_146[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT79;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE30 */
       uint8_t RESERVED_147[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT80;           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xE40 */
       uint8_t RESERVED_148[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT81;           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xE50 */
       uint8_t RESERVED_149[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT82;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE60 */
       uint8_t RESERVED_150[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT83;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE70 */
       uint8_t RESERVED_151[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT84;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE80 */
       uint8_t RESERVED_152[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT85;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE90 */
       uint8_t RESERVED_153[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT86;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xEA0 */
       uint8_t RESERVED_154[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT87;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xEB0 */
       uint8_t RESERVED_155[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT88;           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xEC0 */
       uint8_t RESERVED_156[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT89;           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xED0 */
       uint8_t RESERVED_157[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT90;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xEE0 */
       uint8_t RESERVED_158[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT91;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xEF0 */
       uint8_t RESERVED_159[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT92;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF00 */
       uint8_t RESERVED_160[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT93;           /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xF10 */
       uint8_t RESERVED_161[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT94;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF20 */
       uint8_t RESERVED_162[12];
  __IO uint32_t HW_OCOTP_HDCP_TX_CERT95;           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF30 */
       uint8_t RESERVED_163[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY0;                /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xF40 */
       uint8_t RESERVED_164[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY1;                /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xF50 */
       uint8_t RESERVED_165[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY2;                /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF60 */
       uint8_t RESERVED_166[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY3;                /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF70 */
       uint8_t RESERVED_167[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY4;                /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF80 */
       uint8_t RESERVED_168[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY5;                /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF90 */
       uint8_t RESERVED_169[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY6;                /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xFA0 */
       uint8_t RESERVED_170[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY7;                /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xFB0 */
       uint8_t RESERVED_171[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY8;                /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xFC0 */
       uint8_t RESERVED_172[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY9;                /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xFD0 */
       uint8_t RESERVED_173[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY10;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xFE0 */
       uint8_t RESERVED_174[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY11;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xFF0 */
       uint8_t RESERVED_175[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY12;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1000 */
       uint8_t RESERVED_176[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY13;               /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x1010 */
       uint8_t RESERVED_177[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY14;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1020 */
       uint8_t RESERVED_178[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY15;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1030 */
       uint8_t RESERVED_179[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY16;               /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x1040 */
       uint8_t RESERVED_180[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY17;               /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x1050 */
       uint8_t RESERVED_181[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY18;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1060 */
       uint8_t RESERVED_182[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY19;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1070 */
       uint8_t RESERVED_183[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY20;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1080 */
       uint8_t RESERVED_184[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY21;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1090 */
       uint8_t RESERVED_185[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY22;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x10A0 */
       uint8_t RESERVED_186[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY23;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x10B0 */
       uint8_t RESERVED_187[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY24;               /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x10C0 */
       uint8_t RESERVED_188[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY25;               /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x10D0 */
       uint8_t RESERVED_189[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY26;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x10E0 */
       uint8_t RESERVED_190[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY27;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x10F0 */
       uint8_t RESERVED_191[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY28;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1100 */
       uint8_t RESERVED_192[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY29;               /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x1110 */
       uint8_t RESERVED_193[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY30;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1120 */
       uint8_t RESERVED_194[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY31;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1130 */
       uint8_t RESERVED_195[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY32;               /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x1140 */
       uint8_t RESERVED_196[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY33;               /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x1150 */
       uint8_t RESERVED_197[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY34;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1160 */
       uint8_t RESERVED_198[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY35;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1170 */
       uint8_t RESERVED_199[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY36;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1180 */
       uint8_t RESERVED_200[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY37;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1190 */
       uint8_t RESERVED_201[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY38;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x11A0 */
       uint8_t RESERVED_202[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY39;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x11B0 */
       uint8_t RESERVED_203[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY40;               /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x11C0 */
       uint8_t RESERVED_204[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY41;               /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x11D0 */
       uint8_t RESERVED_205[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY42;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x11E0 */
       uint8_t RESERVED_206[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY43;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x11F0 */
       uint8_t RESERVED_207[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY44;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1200 */
       uint8_t RESERVED_208[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY45;               /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x1210 */
       uint8_t RESERVED_209[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY46;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1220 */
       uint8_t RESERVED_210[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY47;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1230 */
       uint8_t RESERVED_211[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY48;               /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x1240 */
       uint8_t RESERVED_212[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY49;               /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x1250 */
       uint8_t RESERVED_213[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY50;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1260 */
       uint8_t RESERVED_214[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY51;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1270 */
       uint8_t RESERVED_215[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY52;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1280 */
       uint8_t RESERVED_216[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY53;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1290 */
       uint8_t RESERVED_217[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY54;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x12A0 */
       uint8_t RESERVED_218[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY55;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x12B0 */
       uint8_t RESERVED_219[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY56;               /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x12C0 */
       uint8_t RESERVED_220[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY57;               /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x12D0 */
       uint8_t RESERVED_221[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY58;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x12E0 */
       uint8_t RESERVED_222[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY59;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x12F0 */
       uint8_t RESERVED_223[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY60;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1300 */
       uint8_t RESERVED_224[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY61;               /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x1310 */
       uint8_t RESERVED_225[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY62;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1320 */
       uint8_t RESERVED_226[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY63;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1330 */
       uint8_t RESERVED_227[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY64;               /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x1340 */
       uint8_t RESERVED_228[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY65;               /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x1350 */
       uint8_t RESERVED_229[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY66;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1360 */
       uint8_t RESERVED_230[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY67;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1370 */
       uint8_t RESERVED_231[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY68;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1380 */
       uint8_t RESERVED_232[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY69;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1390 */
       uint8_t RESERVED_233[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY70;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x13A0 */
       uint8_t RESERVED_234[12];
  __IO uint32_t HW_OCOTP_HDCP_KEY71;               /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x13B0 */
} OCOTP_Type;

/* ----------------------------------------------------------------------------
   -- OCOTP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Masks OCOTP Register Masks
 * @{
 */

/*! @name HW_OCOTP_CTRL - OTP Controller Control Register */
#define OCOTP_HW_OCOTP_CTRL_ADDR_MASK            (0xFFU)
#define OCOTP_HW_OCOTP_CTRL_ADDR_SHIFT           (0U)
#define OCOTP_HW_OCOTP_CTRL_ADDR(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_ADDR_SHIFT)) & OCOTP_HW_OCOTP_CTRL_ADDR_MASK)
#define OCOTP_HW_OCOTP_CTRL_BUSY_MASK            (0x100U)
#define OCOTP_HW_OCOTP_CTRL_BUSY_SHIFT           (8U)
#define OCOTP_HW_OCOTP_CTRL_BUSY(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_BUSY_SHIFT)) & OCOTP_HW_OCOTP_CTRL_BUSY_MASK)
#define OCOTP_HW_OCOTP_CTRL_ERROR_MASK           (0x200U)
#define OCOTP_HW_OCOTP_CTRL_ERROR_SHIFT          (9U)
#define OCOTP_HW_OCOTP_CTRL_ERROR(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_ERROR_SHIFT)) & OCOTP_HW_OCOTP_CTRL_ERROR_MASK)
#define OCOTP_HW_OCOTP_CTRL_RELOAD_SHADOWS_MASK  (0x400U)
#define OCOTP_HW_OCOTP_CTRL_RELOAD_SHADOWS_SHIFT (10U)
#define OCOTP_HW_OCOTP_CTRL_RELOAD_SHADOWS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_RELOAD_SHADOWS_SHIFT)) & OCOTP_HW_OCOTP_CTRL_RELOAD_SHADOWS_MASK)
#define OCOTP_HW_OCOTP_CTRL_WR_UNLOCK_MASK       (0xFFFF0000U)
#define OCOTP_HW_OCOTP_CTRL_WR_UNLOCK_SHIFT      (16U)
#define OCOTP_HW_OCOTP_CTRL_WR_UNLOCK(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_WR_UNLOCK_SHIFT)) & OCOTP_HW_OCOTP_CTRL_WR_UNLOCK_MASK)

/*! @name HW_OCOTP_TIMING - OTP Controller Timing Register */
#define OCOTP_HW_OCOTP_TIMING_STROBE_PROG_MASK   (0xFFFU)
#define OCOTP_HW_OCOTP_TIMING_STROBE_PROG_SHIFT  (0U)
#define OCOTP_HW_OCOTP_TIMING_STROBE_PROG(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TIMING_STROBE_PROG_SHIFT)) & OCOTP_HW_OCOTP_TIMING_STROBE_PROG_MASK)
#define OCOTP_HW_OCOTP_TIMING_RELAX_MASK         (0xF000U)
#define OCOTP_HW_OCOTP_TIMING_RELAX_SHIFT        (12U)
#define OCOTP_HW_OCOTP_TIMING_RELAX(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TIMING_RELAX_SHIFT)) & OCOTP_HW_OCOTP_TIMING_RELAX_MASK)
#define OCOTP_HW_OCOTP_TIMING_STROBE_READ_MASK   (0x3F0000U)
#define OCOTP_HW_OCOTP_TIMING_STROBE_READ_SHIFT  (16U)
#define OCOTP_HW_OCOTP_TIMING_STROBE_READ(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TIMING_STROBE_READ_SHIFT)) & OCOTP_HW_OCOTP_TIMING_STROBE_READ_MASK)
#define OCOTP_HW_OCOTP_TIMING_WAIT_MASK          (0xFC00000U)
#define OCOTP_HW_OCOTP_TIMING_WAIT_SHIFT         (22U)
#define OCOTP_HW_OCOTP_TIMING_WAIT(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TIMING_WAIT_SHIFT)) & OCOTP_HW_OCOTP_TIMING_WAIT_MASK)

/*! @name HW_OCOTP_DATA - OTP Controller Write Data Register */
#define OCOTP_HW_OCOTP_DATA_DATA_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_DATA_DATA_SHIFT           (0U)
#define OCOTP_HW_OCOTP_DATA_DATA(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_DATA_DATA_SHIFT)) & OCOTP_HW_OCOTP_DATA_DATA_MASK)

/*! @name HW_OCOTP_READ_CTRL - OTP Controller Write Data Register */
#define OCOTP_HW_OCOTP_READ_CTRL_READ_FUSE_MASK  (0x1U)
#define OCOTP_HW_OCOTP_READ_CTRL_READ_FUSE_SHIFT (0U)
#define OCOTP_HW_OCOTP_READ_CTRL_READ_FUSE(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_READ_CTRL_READ_FUSE_SHIFT)) & OCOTP_HW_OCOTP_READ_CTRL_READ_FUSE_MASK)

/*! @name HW_OCOTP_READ_FUSE_DATA - OTP Controller Read Data Register */
#define OCOTP_HW_OCOTP_READ_FUSE_DATA_DATA_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_READ_FUSE_DATA_DATA_SHIFT (0U)
#define OCOTP_HW_OCOTP_READ_FUSE_DATA_DATA(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_READ_FUSE_DATA_DATA_SHIFT)) & OCOTP_HW_OCOTP_READ_FUSE_DATA_DATA_MASK)

/*! @name HW_OCOTP_SW_STICKY - Sticky bit Register */
#define OCOTP_HW_OCOTP_SW_STICKY_SRK_REVOKE_LOCK_MASK (0x2U)
#define OCOTP_HW_OCOTP_SW_STICKY_SRK_REVOKE_LOCK_SHIFT (1U)
#define OCOTP_HW_OCOTP_SW_STICKY_SRK_REVOKE_LOCK(x) (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_SRK_REVOKE_LOCK_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_SRK_REVOKE_LOCK_MASK)
#define OCOTP_HW_OCOTP_SW_STICKY_FIELD_RETURN_LOCK_MASK (0x4U)
#define OCOTP_HW_OCOTP_SW_STICKY_FIELD_RETURN_LOCK_SHIFT (2U)
#define OCOTP_HW_OCOTP_SW_STICKY_FIELD_RETURN_LOCK(x) (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_FIELD_RETURN_LOCK_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_FIELD_RETURN_LOCK_MASK)
#define OCOTP_HW_OCOTP_SW_STICKY_BLOCK_ROM_PART_MASK (0x8U)
#define OCOTP_HW_OCOTP_SW_STICKY_BLOCK_ROM_PART_SHIFT (3U)
#define OCOTP_HW_OCOTP_SW_STICKY_BLOCK_ROM_PART(x) (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_BLOCK_ROM_PART_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_BLOCK_ROM_PART_MASK)
#define OCOTP_HW_OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_MASK (0x10U)
#define OCOTP_HW_OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_SHIFT (4U)
#define OCOTP_HW_OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE(x) (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_MASK)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_GROUP_MASK_MASK (0x20U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_GROUP_MASK_SHIFT (5U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_GROUP_MASK(x) (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_GROUP_MASK_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_GROUP_MASK_MASK)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_FW_SRK_MASK (0x40U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_FW_SRK_SHIFT (6U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_FW_SRK(x) (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_FW_SRK_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_FW_SRK_MASK)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_KMEK_MASK (0x80U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_KMEK_SHIFT (7U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_KMEK(x) (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_KMEK_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_KMEK_MASK)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_GLOBAL_CONSTANT_MASK (0x100U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_GLOBAL_CONSTANT_SHIFT (8U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_GLOBAL_CONSTANT(x) (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_GLOBAL_CONSTANT_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_GLOBAL_CONSTANT_MASK)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_CERT_MASK (0x200U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_CERT_SHIFT (9U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_CERT(x) (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_CERT_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_CERT_MASK)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_DEVICE_KEY_MASK (0x400U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_DEVICE_KEY_SHIFT (10U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_DEVICE_KEY(x) (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_DEVICE_KEY_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_DEVICE_KEY_MASK)

/*! @name HW_OCOTP_SCS - Software Controllable Signals Register */
#define OCOTP_HW_OCOTP_SCS_HAB_JDE_MASK          (0x1U)
#define OCOTP_HW_OCOTP_SCS_HAB_JDE_SHIFT         (0U)
#define OCOTP_HW_OCOTP_SCS_HAB_JDE(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SCS_HAB_JDE_SHIFT)) & OCOTP_HW_OCOTP_SCS_HAB_JDE_MASK)
#define OCOTP_HW_OCOTP_SCS_SPARE_MASK            (0x7FFFFFFEU)
#define OCOTP_HW_OCOTP_SCS_SPARE_SHIFT           (1U)
#define OCOTP_HW_OCOTP_SCS_SPARE(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SCS_SPARE_SHIFT)) & OCOTP_HW_OCOTP_SCS_SPARE_MASK)
#define OCOTP_HW_OCOTP_SCS_LOCK_MASK             (0x80000000U)
#define OCOTP_HW_OCOTP_SCS_LOCK_SHIFT            (31U)
#define OCOTP_HW_OCOTP_SCS_LOCK(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SCS_LOCK_SHIFT)) & OCOTP_HW_OCOTP_SCS_LOCK_MASK)

/*! @name HW_OCOTP_VERSION - OTP Controller Version Register */
#define OCOTP_HW_OCOTP_VERSION_STEP_MASK         (0xFFFFU)
#define OCOTP_HW_OCOTP_VERSION_STEP_SHIFT        (0U)
#define OCOTP_HW_OCOTP_VERSION_STEP(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_VERSION_STEP_SHIFT)) & OCOTP_HW_OCOTP_VERSION_STEP_MASK)
#define OCOTP_HW_OCOTP_VERSION_MINOR_MASK        (0xFF0000U)
#define OCOTP_HW_OCOTP_VERSION_MINOR_SHIFT       (16U)
#define OCOTP_HW_OCOTP_VERSION_MINOR(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_VERSION_MINOR_SHIFT)) & OCOTP_HW_OCOTP_VERSION_MINOR_MASK)
#define OCOTP_HW_OCOTP_VERSION_MAJOR_MASK        (0xFF000000U)
#define OCOTP_HW_OCOTP_VERSION_MAJOR_SHIFT       (24U)
#define OCOTP_HW_OCOTP_VERSION_MAJOR(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_VERSION_MAJOR_SHIFT)) & OCOTP_HW_OCOTP_VERSION_MAJOR_MASK)

/*! @name HW_OCOTP_LOCK - Value of OTP Bank0 Word0 (Lock controls) */
#define OCOTP_HW_OCOTP_LOCK_TESTER_MASK          (0x3U)
#define OCOTP_HW_OCOTP_LOCK_TESTER_SHIFT         (0U)
#define OCOTP_HW_OCOTP_LOCK_TESTER(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_TESTER_SHIFT)) & OCOTP_HW_OCOTP_LOCK_TESTER_MASK)
#define OCOTP_HW_OCOTP_LOCK_BOOT_CFG_MASK        (0xCU)
#define OCOTP_HW_OCOTP_LOCK_BOOT_CFG_SHIFT       (2U)
#define OCOTP_HW_OCOTP_LOCK_BOOT_CFG(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_BOOT_CFG_SHIFT)) & OCOTP_HW_OCOTP_LOCK_BOOT_CFG_MASK)
#define OCOTP_HW_OCOTP_LOCK_MEM_TRIM_MASK        (0x30U)
#define OCOTP_HW_OCOTP_LOCK_MEM_TRIM_SHIFT       (4U)
#define OCOTP_HW_OCOTP_LOCK_MEM_TRIM(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_MEM_TRIM_SHIFT)) & OCOTP_HW_OCOTP_LOCK_MEM_TRIM_MASK)
#define OCOTP_HW_OCOTP_LOCK_ANALOG_MASK          (0xC0U)
#define OCOTP_HW_OCOTP_LOCK_ANALOG_SHIFT         (6U)
#define OCOTP_HW_OCOTP_LOCK_ANALOG(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_ANALOG_SHIFT)) & OCOTP_HW_OCOTP_LOCK_ANALOG_MASK)
#define OCOTP_HW_OCOTP_LOCK_OTPMK_MASK           (0x100U)
#define OCOTP_HW_OCOTP_LOCK_OTPMK_SHIFT          (8U)
#define OCOTP_HW_OCOTP_LOCK_OTPMK(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_OTPMK_SHIFT)) & OCOTP_HW_OCOTP_LOCK_OTPMK_MASK)
#define OCOTP_HW_OCOTP_LOCK_SRK_MASK             (0x200U)
#define OCOTP_HW_OCOTP_LOCK_SRK_SHIFT            (9U)
#define OCOTP_HW_OCOTP_LOCK_SRK(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_SRK_SHIFT)) & OCOTP_HW_OCOTP_LOCK_SRK_MASK)
#define OCOTP_HW_OCOTP_LOCK_SJC_RESP_MASK        (0x400U)
#define OCOTP_HW_OCOTP_LOCK_SJC_RESP_SHIFT       (10U)
#define OCOTP_HW_OCOTP_LOCK_SJC_RESP(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_SJC_RESP_SHIFT)) & OCOTP_HW_OCOTP_LOCK_SJC_RESP_MASK)
#define OCOTP_HW_OCOTP_LOCK_GROUP_MASK_MASK      (0x800U)
#define OCOTP_HW_OCOTP_LOCK_GROUP_MASK_SHIFT     (11U)
#define OCOTP_HW_OCOTP_LOCK_GROUP_MASK(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_GROUP_MASK_SHIFT)) & OCOTP_HW_OCOTP_LOCK_GROUP_MASK_MASK)
#define OCOTP_HW_OCOTP_LOCK_USB_ID_MASK          (0x3000U)
#define OCOTP_HW_OCOTP_LOCK_USB_ID_SHIFT         (12U)
#define OCOTP_HW_OCOTP_LOCK_USB_ID(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_USB_ID_SHIFT)) & OCOTP_HW_OCOTP_LOCK_USB_ID_MASK)
#define OCOTP_HW_OCOTP_LOCK_MAC_ADDR_MASK        (0xC000U)
#define OCOTP_HW_OCOTP_LOCK_MAC_ADDR_SHIFT       (14U)
#define OCOTP_HW_OCOTP_LOCK_MAC_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_MAC_ADDR_SHIFT)) & OCOTP_HW_OCOTP_LOCK_MAC_ADDR_MASK)
#define OCOTP_HW_OCOTP_LOCK_MAU_KEY_MASK         (0x10000U)
#define OCOTP_HW_OCOTP_LOCK_MAU_KEY_SHIFT        (16U)
#define OCOTP_HW_OCOTP_LOCK_MAU_KEY(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_MAU_KEY_SHIFT)) & OCOTP_HW_OCOTP_LOCK_MAU_KEY_MASK)
#define OCOTP_HW_OCOTP_LOCK_ROM_PATCH_MASK       (0x20000U)
#define OCOTP_HW_OCOTP_LOCK_ROM_PATCH_SHIFT      (17U)
#define OCOTP_HW_OCOTP_LOCK_ROM_PATCH(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_ROM_PATCH_SHIFT)) & OCOTP_HW_OCOTP_LOCK_ROM_PATCH_MASK)
#define OCOTP_HW_OCOTP_LOCK_GP_CRC_MASK          (0xC0000U)
#define OCOTP_HW_OCOTP_LOCK_GP_CRC_SHIFT         (18U)
#define OCOTP_HW_OCOTP_LOCK_GP_CRC(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_GP_CRC_SHIFT)) & OCOTP_HW_OCOTP_LOCK_GP_CRC_MASK)
#define OCOTP_HW_OCOTP_LOCK_GP1_MASK             (0x300000U)
#define OCOTP_HW_OCOTP_LOCK_GP1_SHIFT            (20U)
#define OCOTP_HW_OCOTP_LOCK_GP1(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_GP1_SHIFT)) & OCOTP_HW_OCOTP_LOCK_GP1_MASK)
#define OCOTP_HW_OCOTP_LOCK_GP2_MASK             (0xC00000U)
#define OCOTP_HW_OCOTP_LOCK_GP2_SHIFT            (22U)
#define OCOTP_HW_OCOTP_LOCK_GP2(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_GP2_SHIFT)) & OCOTP_HW_OCOTP_LOCK_GP2_MASK)
#define OCOTP_HW_OCOTP_LOCK_HDMI_KEY_MASK        (0x3000000U)
#define OCOTP_HW_OCOTP_LOCK_HDMI_KEY_SHIFT       (24U)
#define OCOTP_HW_OCOTP_LOCK_HDMI_KEY(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_HDMI_KEY_SHIFT)) & OCOTP_HW_OCOTP_LOCK_HDMI_KEY_MASK)
#define OCOTP_HW_OCOTP_LOCK_HDMI_CRC_MASK        (0xC000000U)
#define OCOTP_HW_OCOTP_LOCK_HDMI_CRC_SHIFT       (26U)
#define OCOTP_HW_OCOTP_LOCK_HDMI_CRC(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_HDMI_CRC_SHIFT)) & OCOTP_HW_OCOTP_LOCK_HDMI_CRC_MASK)
#define OCOTP_HW_OCOTP_LOCK_HDCP_KEY_MASK        (0x30000000U)
#define OCOTP_HW_OCOTP_LOCK_HDCP_KEY_SHIFT       (28U)
#define OCOTP_HW_OCOTP_LOCK_HDCP_KEY(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_HDCP_KEY_SHIFT)) & OCOTP_HW_OCOTP_LOCK_HDCP_KEY_MASK)
#define OCOTP_HW_OCOTP_LOCK_HDCP_CRC_MASK        (0xC0000000U)
#define OCOTP_HW_OCOTP_LOCK_HDCP_CRC_SHIFT       (30U)
#define OCOTP_HW_OCOTP_LOCK_HDCP_CRC(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_HDCP_CRC_SHIFT)) & OCOTP_HW_OCOTP_LOCK_HDCP_CRC_MASK)

/*! @name HW_OCOTP_TESTER0 - Value of OTP Bank0 Word1 (Tester Info.) */
#define OCOTP_HW_OCOTP_TESTER0_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER0_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER0_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER0_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER0_BITS_MASK)

/*! @name HW_OCOTP_TESTER1 - Value of OTP Bank0 Word2 (tester Info.) */
#define OCOTP_HW_OCOTP_TESTER1_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER1_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER1_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER1_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER1_BITS_MASK)

/*! @name HW_OCOTP_TESTER2 - Value of OTP Bank0 Word3 (Tester Info.) */
#define OCOTP_HW_OCOTP_TESTER2_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER2_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER2_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER2_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER2_BITS_MASK)

/*! @name HW_OCOTP_TESTER3 - Value of OTP Bank1 Word0 (Tester Info.) */
#define OCOTP_HW_OCOTP_TESTER3_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER3_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER3_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER3_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER3_BITS_MASK)

/*! @name HW_OCOTP_TESTER4 - Value of OTP Bank1 Word1 (Tester Info.) */
#define OCOTP_HW_OCOTP_TESTER4_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER4_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER4_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER4_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER4_BITS_MASK)

/*! @name HW_OCOTP_TESTER5 - Value of OTP Bank1 Word2 (Tester Info.) */
#define OCOTP_HW_OCOTP_TESTER5_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER5_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER5_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER5_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER5_BITS_MASK)

/*! @name HW_OCOTP_BOOT_CFG0 - Value of OTP Bank1 Word3 (Boot Configuration Info.) */
#define OCOTP_HW_OCOTP_BOOT_CFG0_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_BOOT_CFG0_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_BOOT_CFG0_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_BOOT_CFG0_BITS_SHIFT)) & OCOTP_HW_OCOTP_BOOT_CFG0_BITS_MASK)

/*! @name HW_OCOTP_BOOT_CFG1 - Value of OTP Bank2 Word0 (Boot Configuration Info.) */
#define OCOTP_HW_OCOTP_BOOT_CFG1_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_BOOT_CFG1_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_BOOT_CFG1_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_BOOT_CFG1_BITS_SHIFT)) & OCOTP_HW_OCOTP_BOOT_CFG1_BITS_MASK)

/*! @name HW_OCOTP_BOOT_CFG2 - Value of OTP Bank2 Word1 (Boot Configuration Info.) */
#define OCOTP_HW_OCOTP_BOOT_CFG2_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_BOOT_CFG2_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_BOOT_CFG2_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_BOOT_CFG2_BITS_SHIFT)) & OCOTP_HW_OCOTP_BOOT_CFG2_BITS_MASK)

/*! @name HW_OCOTP_BOOT_CFG3 - Value of OTP Bank2 Word2 (Boot Configuration Info.) */
#define OCOTP_HW_OCOTP_BOOT_CFG3_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_BOOT_CFG3_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_BOOT_CFG3_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_BOOT_CFG3_BITS_SHIFT)) & OCOTP_HW_OCOTP_BOOT_CFG3_BITS_MASK)

/*! @name HW_OCOTP_BOOT_CFG4 - Value of OTP Bank2 Word3 (BOOT Configuration Info.) */
#define OCOTP_HW_OCOTP_BOOT_CFG4_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_BOOT_CFG4_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_BOOT_CFG4_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_BOOT_CFG4_BITS_SHIFT)) & OCOTP_HW_OCOTP_BOOT_CFG4_BITS_MASK)

/*! @name HW_OCOTP_MEM_TRIM0 - Value of OTP Bank3 Word0 (Memory Related Info.) */
#define OCOTP_HW_OCOTP_MEM_TRIM0_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MEM_TRIM0_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_MEM_TRIM0_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MEM_TRIM0_BITS_SHIFT)) & OCOTP_HW_OCOTP_MEM_TRIM0_BITS_MASK)

/*! @name HW_OCOTP_MEM_TRIM1 - Value of OTP Bank3 Word1 (Memory Related Info.) */
#define OCOTP_HW_OCOTP_MEM_TRIM1_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MEM_TRIM1_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_MEM_TRIM1_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MEM_TRIM1_BITS_SHIFT)) & OCOTP_HW_OCOTP_MEM_TRIM1_BITS_MASK)

/*! @name HW_OCOTP_ANA0 - Value of OTP Bank3 Word2 (Analog Info.) */
#define OCOTP_HW_OCOTP_ANA0_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_ANA0_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_ANA0_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_ANA0_BITS_SHIFT)) & OCOTP_HW_OCOTP_ANA0_BITS_MASK)

/*! @name HW_OCOTP_ANA1 - Value of OTP Bank3 Word3 (Analog Info.) */
#define OCOTP_HW_OCOTP_ANA1_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_ANA1_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_ANA1_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_ANA1_BITS_SHIFT)) & OCOTP_HW_OCOTP_ANA1_BITS_MASK)

/*! @name HW_OCOTP_SRK0 - Shadow Register for OTP Bank6 Word0 (SRK Hash) */
#define OCOTP_HW_OCOTP_SRK0_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK0_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK0_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK0_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK0_BITS_MASK)

/*! @name HW_OCOTP_SRK1 - Shadow Register for OTP Bank6 Word1 (SRK Hash) */
#define OCOTP_HW_OCOTP_SRK1_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK1_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK1_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK1_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK1_BITS_MASK)

/*! @name HW_OCOTP_SRK2 - Shadow Register for OTP Bank6 Word2 (SRK Hash) */
#define OCOTP_HW_OCOTP_SRK2_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK2_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK2_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK2_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK2_BITS_MASK)

/*! @name HW_OCOTP_SRK3 - Shadow Register for OTP Bank6 Word3 (SRK Hash) */
#define OCOTP_HW_OCOTP_SRK3_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK3_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK3_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK3_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK3_BITS_MASK)

/*! @name HW_OCOTP_SRK4 - Shadow Register for OTP Bank7 Word0 (SRK Hash) */
#define OCOTP_HW_OCOTP_SRK4_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK4_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK4_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK4_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK4_BITS_MASK)

/*! @name HW_OCOTP_SRK5 - Shadow Register for OTP Bank7 Word1 (SRK Hash) */
#define OCOTP_HW_OCOTP_SRK5_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK5_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK5_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK5_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK5_BITS_MASK)

/*! @name HW_OCOTP_SRK6 - Shadow Register for OTP Bank7 Word2 (SRK Hash) */
#define OCOTP_HW_OCOTP_SRK6_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK6_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK6_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK6_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK6_BITS_MASK)

/*! @name HW_OCOTP_SRK7 - Shadow Register for OTP Bank7 Word3 (SRK Hash) */
#define OCOTP_HW_OCOTP_SRK7_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK7_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK7_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK7_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK7_BITS_MASK)

/*! @name HW_OCOTP_SJC_RESP0 - Value of OTP Bank8 Word0 (Secure JTAG Response Field) */
#define OCOTP_HW_OCOTP_SJC_RESP0_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SJC_RESP0_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_SJC_RESP0_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SJC_RESP0_BITS_SHIFT)) & OCOTP_HW_OCOTP_SJC_RESP0_BITS_MASK)

/*! @name HW_OCOTP_SJC_RESP1 - Value of OTP Bank8 Word1 (Secure JTAG Response Field) */
#define OCOTP_HW_OCOTP_SJC_RESP1_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SJC_RESP1_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_SJC_RESP1_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SJC_RESP1_BITS_SHIFT)) & OCOTP_HW_OCOTP_SJC_RESP1_BITS_MASK)

/*! @name HW_OCOTP_USB_ID - Value of OTP Bank8 Word2 (USB ID info) */
#define OCOTP_HW_OCOTP_USB_ID_BITS_MASK          (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_USB_ID_BITS_SHIFT         (0U)
#define OCOTP_HW_OCOTP_USB_ID_BITS(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_USB_ID_BITS_SHIFT)) & OCOTP_HW_OCOTP_USB_ID_BITS_MASK)

/*! @name HW_OCOTP_FIELD_RETURN - Value of OTP Bank5 Word6 (Field Return) */
#define OCOTP_HW_OCOTP_FIELD_RETURN_BITS_MASK    (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_FIELD_RETURN_BITS_SHIFT   (0U)
#define OCOTP_HW_OCOTP_FIELD_RETURN_BITS(x)      (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_FIELD_RETURN_BITS_SHIFT)) & OCOTP_HW_OCOTP_FIELD_RETURN_BITS_MASK)

/*! @name HW_OCOTP_MAC_ADDR0 - Value of OTP Bank9 Word0 (MAC Address) */
#define OCOTP_HW_OCOTP_MAC_ADDR0_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAC_ADDR0_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_MAC_ADDR0_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAC_ADDR0_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAC_ADDR0_BITS_MASK)

/*! @name HW_OCOTP_MAC_ADDR1 - Value of OTP Bank9 Word1 (MAC Address) */
#define OCOTP_HW_OCOTP_MAC_ADDR1_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAC_ADDR1_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_MAC_ADDR1_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAC_ADDR1_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAC_ADDR1_BITS_MASK)

/*! @name HW_OCOTP_MAC_ADDR2 - Value of OTP Bank9 Word2 (MAC Address) */
#define OCOTP_HW_OCOTP_MAC_ADDR2_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAC_ADDR2_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_MAC_ADDR2_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAC_ADDR2_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAC_ADDR2_BITS_MASK)

/*! @name HW_OCOTP_SRK_REVOKE - Value of OTP Bank9 Word3 (SRK Revoke) */
#define OCOTP_HW_OCOTP_SRK_REVOKE_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK_REVOKE_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_SRK_REVOKE_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK_REVOKE_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK_REVOKE_BITS_MASK)

/*! @name HW_OCOTP_MAU_KEY0 - Shadow Register for OTP Bank10 Word0 (MAU Key) */
#define OCOTP_HW_OCOTP_MAU_KEY0_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY0_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY0_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY0_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY0_BITS_MASK)

/*! @name HW_OCOTP_MAU_KEY1 - Shadow Register for OTP Bank10 Word1 (MAU Key) */
#define OCOTP_HW_OCOTP_MAU_KEY1_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY1_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY1_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY1_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY1_BITS_MASK)

/*! @name HW_OCOTP_MAU_KEY2 - Shadow Register for OTP Bank10 Word2 (MAU Key) */
#define OCOTP_HW_OCOTP_MAU_KEY2_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY2_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY2_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY2_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY2_BITS_MASK)

/*! @name HW_OCOTP_MAU_KEY3 - Shadow Register for OTP Bank10 Word3 (MAU Key) */
#define OCOTP_HW_OCOTP_MAU_KEY3_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY3_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY3_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY3_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY3_BITS_MASK)

/*! @name HW_OCOTP_MAU_KEY4 - Shadow Register for OTP Bank11 Word0 (MAU Key) */
#define OCOTP_HW_OCOTP_MAU_KEY4_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY4_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY4_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY4_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY4_BITS_MASK)

/*! @name HW_OCOTP_MAU_KEY5 - Shadow Register for OTP Bank11 Word1 (MAU Key) */
#define OCOTP_HW_OCOTP_MAU_KEY5_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY5_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY5_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY5_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY5_BITS_MASK)

/*! @name HW_OCOTP_MAU_KEY6 - Shadow Register for OTP Bank11 Word2 (MAU Key) */
#define OCOTP_HW_OCOTP_MAU_KEY6_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY6_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY6_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY6_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY6_BITS_MASK)

/*! @name HW_OCOTP_MAU_KEY7 - Shadow Register for OTP Bank11 Word3 (MAU Key) */
#define OCOTP_HW_OCOTP_MAU_KEY7_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY7_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY7_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY7_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY7_BITS_MASK)

/*! @name HW_OCOTP_GP10 - Value of OTP Bank14 Word0 () */
#define OCOTP_HW_OCOTP_GP10_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_GP10_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_GP10_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_GP10_BITS_SHIFT)) & OCOTP_HW_OCOTP_GP10_BITS_MASK)

/*! @name HW_OCOTP_GP11 - Value of OTP Bank14 Word1 () */
#define OCOTP_HW_OCOTP_GP11_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_GP11_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_GP11_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_GP11_BITS_SHIFT)) & OCOTP_HW_OCOTP_GP11_BITS_MASK)

/*! @name HW_OCOTP_GP20 - Value of OTP Bank14 Word2 () */
#define OCOTP_HW_OCOTP_GP20_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_GP20_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_GP20_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_GP20_BITS_SHIFT)) & OCOTP_HW_OCOTP_GP20_BITS_MASK)

/*! @name HW_OCOTP_GP21 - Value of OTP Bank14 Word3 () */
#define OCOTP_HW_OCOTP_GP21_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_GP21_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_GP21_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_GP21_BITS_SHIFT)) & OCOTP_HW_OCOTP_GP21_BITS_MASK)

/*! @name HW_OCOTP_GROUP_MASK - Value of OTP Bank15 Word3 (CRC Key) */
#define OCOTP_HW_OCOTP_GROUP_MASK_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_GROUP_MASK_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_GROUP_MASK_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_GROUP_MASK_BITS_SHIFT)) & OCOTP_HW_OCOTP_GROUP_MASK_BITS_MASK)

/*! @name HW_OCOTP_HDMI_FW_SRK0 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_FW_SRK0_BITS_MASK    (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK0_BITS_SHIFT   (0U)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK0_BITS(x)      (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_FW_SRK0_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_FW_SRK0_BITS_MASK)

/*! @name HW_OCOTP_HDMI_FW_SRK1 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_FW_SRK1_BITS_MASK    (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK1_BITS_SHIFT   (0U)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK1_BITS(x)      (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_FW_SRK1_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_FW_SRK1_BITS_MASK)

/*! @name HW_OCOTP_HDMI_FW_SRK2 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_FW_SRK2_BITS_MASK    (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK2_BITS_SHIFT   (0U)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK2_BITS(x)      (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_FW_SRK2_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_FW_SRK2_BITS_MASK)

/*! @name HW_OCOTP_HDMI_FW_SRK3 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_FW_SRK3_BITS_MASK    (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK3_BITS_SHIFT   (0U)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK3_BITS(x)      (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_FW_SRK3_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_FW_SRK3_BITS_MASK)

/*! @name HW_OCOTP_HDMI_FW_SRK4 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_FW_SRK4_BITS_MASK    (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK4_BITS_SHIFT   (0U)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK4_BITS(x)      (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_FW_SRK4_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_FW_SRK4_BITS_MASK)

/*! @name HW_OCOTP_HDMI_FW_SRK5 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_FW_SRK5_BITS_MASK    (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK5_BITS_SHIFT   (0U)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK5_BITS(x)      (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_FW_SRK5_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_FW_SRK5_BITS_MASK)

/*! @name HW_OCOTP_HDMI_FW_SRK6 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_FW_SRK6_BITS_MASK    (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK6_BITS_SHIFT   (0U)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK6_BITS(x)      (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_FW_SRK6_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_FW_SRK6_BITS_MASK)

/*! @name HW_OCOTP_HDMI_FW_SRK7 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_FW_SRK7_BITS_MASK    (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK7_BITS_SHIFT   (0U)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK7_BITS(x)      (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_FW_SRK7_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_FW_SRK7_BITS_MASK)

/*! @name HW_OCOTP_HDMI_KMEK0 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_KMEK0_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_KMEK0_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDMI_KMEK0_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_KMEK0_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_KMEK0_BITS_MASK)

/*! @name HW_OCOTP_HDMI_KMEK1 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_KMEK1_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_KMEK1_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDMI_KMEK1_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_KMEK1_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_KMEK1_BITS_MASK)

/*! @name HW_OCOTP_HDMI_KMEK2 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_KMEK2_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_KMEK2_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDMI_KMEK2_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_KMEK2_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_KMEK2_BITS_MASK)

/*! @name HW_OCOTP_HDMI_KMEK3 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDMI_KMEK3_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDMI_KMEK3_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDMI_KMEK3_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDMI_KMEK3_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDMI_KMEK3_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CONS0 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CONS0_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS0_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS0_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CONS0_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CONS0_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CONS1 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CONS1_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS1_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS1_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CONS1_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CONS1_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CONS2 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CONS2_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS2_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS2_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CONS2_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CONS2_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CONS3 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CONS3_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS3_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS3_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CONS3_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CONS3_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT0 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT0_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT0_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT0_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT0_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT0_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT1 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT1_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT1_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT1_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT1_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT1_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT2 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT2_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT2_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT2_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT2_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT2_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT3 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT3_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT3_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT3_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT3_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT3_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT4 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT4_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT4_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT4_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT4_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT4_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT5 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT5_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT5_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT5_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT5_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT5_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT6 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT6_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT6_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT6_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT6_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT6_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT7 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT7_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT7_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT7_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT7_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT7_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT8 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT8_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT8_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT8_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT8_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT8_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT9 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT9_BITS_MASK   (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT9_BITS_SHIFT  (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT9_BITS(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT9_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT9_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT10 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT10_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT10_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT10_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT10_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT10_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT11 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT11_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT11_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT11_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT11_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT11_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT12 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT12_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT12_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT12_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT12_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT12_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT13 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT13_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT13_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT13_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT13_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT13_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT14 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT14_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT14_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT14_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT14_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT14_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT15 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT15_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT15_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT15_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT15_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT15_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT16 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT16_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT16_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT16_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT16_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT16_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT17 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT17_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT17_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT17_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT17_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT17_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT18 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT18_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT18_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT18_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT18_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT18_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT19 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT19_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT19_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT19_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT19_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT19_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT20 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT20_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT20_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT20_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT20_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT20_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT21 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT21_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT21_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT21_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT21_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT21_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT22 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT22_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT22_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT22_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT22_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT22_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT23 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT23_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT23_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT23_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT23_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT23_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT24 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT24_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT24_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT24_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT24_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT24_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT25 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT25_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT25_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT25_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT25_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT25_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT26 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT26_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT26_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT26_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT26_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT26_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT27 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT27_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT27_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT27_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT27_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT27_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT28 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT28_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT28_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT28_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT28_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT28_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT29 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT29_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT29_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT29_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT29_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT29_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT30 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT30_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT30_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT30_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT30_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT30_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT31 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT31_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT31_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT31_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT31_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT31_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT32 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT32_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT32_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT32_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT32_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT32_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT33 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT33_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT33_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT33_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT33_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT33_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT34 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT34_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT34_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT34_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT34_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT34_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT35 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT35_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT35_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT35_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT35_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT35_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT36 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT36_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT36_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT36_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT36_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT36_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT37 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT37_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT37_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT37_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT37_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT37_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT38 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT38_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT38_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT38_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT38_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT38_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT39 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT39_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT39_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT39_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT39_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT39_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT40 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT40_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT40_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT40_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT40_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT40_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT41 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT41_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT41_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT41_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT41_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT41_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT42 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT42_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT42_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT42_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT42_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT42_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT43 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT43_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT43_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT43_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT43_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT43_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT44 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT44_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT44_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT44_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT44_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT44_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT45 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT45_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT45_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT45_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT45_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT45_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT46 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT46_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT46_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT46_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT46_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT46_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT47 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT47_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT47_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT47_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT47_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT47_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT48 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT48_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT48_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT48_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT48_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT48_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT49 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT49_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT49_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT49_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT49_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT49_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT50 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT50_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT50_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT50_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT50_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT50_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT51 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT51_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT51_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT51_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT51_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT51_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT52 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT52_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT52_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT52_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT52_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT52_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT53 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT53_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT53_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT53_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT53_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT53_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT54 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT54_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT54_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT54_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT54_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT54_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT55 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT55_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT55_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT55_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT55_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT55_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT56 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT56_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT56_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT56_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT56_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT56_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT57 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT57_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT57_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT57_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT57_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT57_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT58 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT58_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT58_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT58_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT58_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT58_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT59 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT59_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT59_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT59_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT59_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT59_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT60 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT60_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT60_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT60_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT60_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT60_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT61 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT61_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT61_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT61_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT61_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT61_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT62 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT62_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT62_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT62_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT62_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT62_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT63 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT63_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT63_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT63_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT63_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT63_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT64 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT64_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT64_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT64_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT64_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT64_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT65 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT65_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT65_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT65_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT65_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT65_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT66 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT66_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT66_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT66_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT66_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT66_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT67 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT67_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT67_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT67_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT67_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT67_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT68 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT68_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT68_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT68_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT68_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT68_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT69 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT69_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT69_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT69_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT69_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT69_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT70 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT70_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT70_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT70_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT70_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT70_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT71 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT71_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT71_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT71_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT71_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT71_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT72 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT72_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT72_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT72_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT72_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT72_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT73 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT73_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT73_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT73_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT73_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT73_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT74 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT74_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT74_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT74_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT74_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT74_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT75 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT75_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT75_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT75_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT75_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT75_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT76 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT76_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT76_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT76_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT76_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT76_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT77 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT77_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT77_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT77_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT77_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT77_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT78 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT78_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT78_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT78_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT78_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT78_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT79 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT79_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT79_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT79_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT79_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT79_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT80 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT80_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT80_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT80_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT80_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT80_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT81 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT81_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT81_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT81_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT81_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT81_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT82 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT82_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT82_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT82_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT82_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT82_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT83 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT83_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT83_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT83_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT83_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT83_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT84 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT84_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT84_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT84_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT84_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT84_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT85 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT85_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT85_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT85_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT85_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT85_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT86 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT86_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT86_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT86_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT86_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT86_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT87 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT87_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT87_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT87_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT87_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT87_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT88 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT88_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT88_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT88_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT88_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT88_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT89 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT89_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT89_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT89_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT89_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT89_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT90 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT90_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT90_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT90_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT90_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT90_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT91 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT91_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT91_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT91_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT91_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT91_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT92 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT92_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT92_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT92_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT92_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT92_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT93 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT93_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT93_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT93_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT93_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT93_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT94 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT94_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT94_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT94_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT94_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT94_BITS_MASK)

/*! @name HW_OCOTP_HDCP_TX_CERT95 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_TX_CERT95_BITS_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT95_BITS_SHIFT (0U)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT95_BITS(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_TX_CERT95_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_TX_CERT95_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY0 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY0_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY0_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY0_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY0_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY0_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY1 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY1_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY1_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY1_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY1_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY1_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY2 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY2_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY2_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY2_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY2_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY2_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY3 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY3_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY3_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY3_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY3_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY3_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY4 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY4_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY4_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY4_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY4_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY4_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY5 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY5_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY5_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY5_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY5_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY5_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY6 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY6_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY6_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY6_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY6_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY6_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY7 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY7_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY7_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY7_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY7_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY7_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY8 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY8_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY8_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY8_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY8_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY8_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY9 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY9_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY9_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY9_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY9_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY9_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY10 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY10_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY10_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY10_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY10_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY10_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY11 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY11_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY11_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY11_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY11_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY11_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY12 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY12_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY12_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY12_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY12_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY12_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY13 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY13_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY13_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY13_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY13_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY13_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY14 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY14_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY14_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY14_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY14_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY14_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY15 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY15_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY15_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY15_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY15_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY15_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY16 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY16_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY16_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY16_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY16_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY16_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY17 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY17_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY17_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY17_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY17_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY17_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY18 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY18_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY18_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY18_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY18_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY18_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY19 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY19_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY19_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY19_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY19_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY19_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY20 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY20_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY20_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY20_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY20_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY20_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY21 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY21_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY21_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY21_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY21_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY21_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY22 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY22_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY22_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY22_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY22_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY22_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY23 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY23_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY23_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY23_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY23_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY23_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY24 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY24_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY24_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY24_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY24_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY24_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY25 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY25_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY25_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY25_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY25_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY25_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY26 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY26_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY26_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY26_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY26_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY26_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY27 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY27_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY27_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY27_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY27_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY27_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY28 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY28_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY28_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY28_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY28_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY28_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY29 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY29_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY29_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY29_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY29_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY29_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY30 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY30_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY30_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY30_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY30_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY30_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY31 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY31_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY31_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY31_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY31_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY31_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY32 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY32_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY32_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY32_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY32_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY32_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY33 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY33_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY33_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY33_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY33_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY33_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY34 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY34_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY34_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY34_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY34_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY34_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY35 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY35_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY35_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY35_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY35_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY35_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY36 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY36_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY36_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY36_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY36_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY36_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY37 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY37_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY37_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY37_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY37_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY37_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY38 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY38_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY38_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY38_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY38_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY38_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY39 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY39_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY39_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY39_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY39_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY39_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY40 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY40_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY40_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY40_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY40_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY40_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY41 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY41_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY41_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY41_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY41_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY41_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY42 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY42_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY42_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY42_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY42_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY42_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY43 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY43_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY43_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY43_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY43_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY43_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY44 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY44_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY44_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY44_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY44_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY44_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY45 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY45_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY45_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY45_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY45_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY45_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY46 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY46_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY46_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY46_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY46_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY46_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY47 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY47_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY47_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY47_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY47_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY47_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY48 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY48_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY48_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY48_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY48_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY48_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY49 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY49_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY49_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY49_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY49_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY49_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY50 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY50_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY50_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY50_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY50_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY50_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY51 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY51_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY51_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY51_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY51_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY51_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY52 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY52_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY52_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY52_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY52_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY52_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY53 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY53_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY53_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY53_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY53_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY53_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY54 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY54_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY54_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY54_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY54_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY54_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY55 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY55_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY55_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY55_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY55_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY55_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY56 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY56_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY56_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY56_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY56_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY56_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY57 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY57_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY57_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY57_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY57_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY57_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY58 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY58_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY58_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY58_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY58_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY58_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY59 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY59_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY59_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY59_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY59_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY59_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY60 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY60_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY60_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY60_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY60_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY60_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY61 - Value of OTP Bank16 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY61_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY61_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY61_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY61_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY61_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY62 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY62_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY62_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY62_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY62_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY62_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY63 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY63_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY63_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY63_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY63_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY63_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY64 - Value of OTP Bank17 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY64_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY64_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY64_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY64_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY64_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY65 - Value of OTP Bank17 Word1 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY65_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY65_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY65_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY65_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY65_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY66 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY66_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY66_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY66_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY66_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY66_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY67 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY67_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY67_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY67_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY67_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY67_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY68 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY68_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY68_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY68_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY68_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY68_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY69 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY69_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY69_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY69_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY69_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY69_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY70 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY70_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY70_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY70_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY70_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY70_BITS_MASK)

/*! @name HW_OCOTP_HDCP_KEY71 - Value of OTP Bank16 Word0 (HDCP Key) */
#define OCOTP_HW_OCOTP_HDCP_KEY71_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_HDCP_KEY71_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_HDCP_KEY71_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_HDCP_KEY71_BITS_SHIFT)) & OCOTP_HW_OCOTP_HDCP_KEY71_BITS_MASK)


/*!
 * @}
 */ /* end of group OCOTP_Register_Masks */


/* OCOTP - Peripheral instance base addresses */
/** Peripheral OCOTP base address */
#define OCOTP_BASE                               (0x30350000u)
/** Peripheral OCOTP base pointer */
#define OCOTP                                    ((OCOTP_Type *)OCOTP_BASE)
/** Array initializer of OCOTP peripheral base addresses */
#define OCOTP_BASE_ADDRS                         { OCOTP_BASE }
/** Array initializer of OCOTP peripheral base pointers */
#define OCOTP_BASE_PTRS                          { OCOTP }

/*!
 * @}
 */ /* end of group OCOTP_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- PWM Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Peripheral_Access_Layer PWM Peripheral Access Layer
 * @{
 */

/** PWM - Register Layout Typedef */
typedef struct {
  __IO uint32_t PWMCR;                             /**< PWM Control Register, offset: 0x0 */
  __IO uint32_t PWMSR;                             /**< PWM Status Register, offset: 0x4 */
  __IO uint32_t PWMIR;                             /**< PWM Interrupt Register, offset: 0x8 */
  __IO uint32_t PWMSAR;                            /**< PWM Sample Register, offset: 0xC */
  __IO uint32_t PWMPR;                             /**< PWM Period Register, offset: 0x10 */
  __I  uint32_t PWMCNR;                            /**< PWM Counter Register, offset: 0x14 */
} PWM_Type;

/* ----------------------------------------------------------------------------
   -- PWM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Register_Masks PWM Register Masks
 * @{
 */

/*! @name PWMCR - PWM Control Register */
#define PWM_PWMCR_EN_MASK                        (0x1U)
#define PWM_PWMCR_EN_SHIFT                       (0U)
#define PWM_PWMCR_EN(x)                          (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_EN_SHIFT)) & PWM_PWMCR_EN_MASK)
#define PWM_PWMCR_REPEAT_MASK                    (0x6U)
#define PWM_PWMCR_REPEAT_SHIFT                   (1U)
#define PWM_PWMCR_REPEAT(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_REPEAT_SHIFT)) & PWM_PWMCR_REPEAT_MASK)
#define PWM_PWMCR_SWR_MASK                       (0x8U)
#define PWM_PWMCR_SWR_SHIFT                      (3U)
#define PWM_PWMCR_SWR(x)                         (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_SWR_SHIFT)) & PWM_PWMCR_SWR_MASK)
#define PWM_PWMCR_PRESCALER_MASK                 (0xFFF0U)
#define PWM_PWMCR_PRESCALER_SHIFT                (4U)
#define PWM_PWMCR_PRESCALER(x)                   (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_PRESCALER_SHIFT)) & PWM_PWMCR_PRESCALER_MASK)
#define PWM_PWMCR_CLKSRC_MASK                    (0x30000U)
#define PWM_PWMCR_CLKSRC_SHIFT                   (16U)
#define PWM_PWMCR_CLKSRC(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_CLKSRC_SHIFT)) & PWM_PWMCR_CLKSRC_MASK)
#define PWM_PWMCR_POUTC_MASK                     (0xC0000U)
#define PWM_PWMCR_POUTC_SHIFT                    (18U)
#define PWM_PWMCR_POUTC(x)                       (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_POUTC_SHIFT)) & PWM_PWMCR_POUTC_MASK)
#define PWM_PWMCR_HCTR_MASK                      (0x100000U)
#define PWM_PWMCR_HCTR_SHIFT                     (20U)
#define PWM_PWMCR_HCTR(x)                        (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_HCTR_SHIFT)) & PWM_PWMCR_HCTR_MASK)
#define PWM_PWMCR_BCTR_MASK                      (0x200000U)
#define PWM_PWMCR_BCTR_SHIFT                     (21U)
#define PWM_PWMCR_BCTR(x)                        (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_BCTR_SHIFT)) & PWM_PWMCR_BCTR_MASK)
#define PWM_PWMCR_DBGEN_MASK                     (0x400000U)
#define PWM_PWMCR_DBGEN_SHIFT                    (22U)
#define PWM_PWMCR_DBGEN(x)                       (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_DBGEN_SHIFT)) & PWM_PWMCR_DBGEN_MASK)
#define PWM_PWMCR_WAITEN_MASK                    (0x800000U)
#define PWM_PWMCR_WAITEN_SHIFT                   (23U)
#define PWM_PWMCR_WAITEN(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_WAITEN_SHIFT)) & PWM_PWMCR_WAITEN_MASK)
#define PWM_PWMCR_DOZEN_MASK                     (0x1000000U)
#define PWM_PWMCR_DOZEN_SHIFT                    (24U)
#define PWM_PWMCR_DOZEN(x)                       (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_DOZEN_SHIFT)) & PWM_PWMCR_DOZEN_MASK)
#define PWM_PWMCR_STOPEN_MASK                    (0x2000000U)
#define PWM_PWMCR_STOPEN_SHIFT                   (25U)
#define PWM_PWMCR_STOPEN(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_STOPEN_SHIFT)) & PWM_PWMCR_STOPEN_MASK)
#define PWM_PWMCR_FWM_MASK                       (0xC000000U)
#define PWM_PWMCR_FWM_SHIFT                      (26U)
#define PWM_PWMCR_FWM(x)                         (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_FWM_SHIFT)) & PWM_PWMCR_FWM_MASK)

/*! @name PWMSR - PWM Status Register */
#define PWM_PWMSR_FIFOAV_MASK                    (0x7U)
#define PWM_PWMSR_FIFOAV_SHIFT                   (0U)
#define PWM_PWMSR_FIFOAV(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMSR_FIFOAV_SHIFT)) & PWM_PWMSR_FIFOAV_MASK)
#define PWM_PWMSR_FE_MASK                        (0x8U)
#define PWM_PWMSR_FE_SHIFT                       (3U)
#define PWM_PWMSR_FE(x)                          (((uint32_t)(((uint32_t)(x)) << PWM_PWMSR_FE_SHIFT)) & PWM_PWMSR_FE_MASK)
#define PWM_PWMSR_ROV_MASK                       (0x10U)
#define PWM_PWMSR_ROV_SHIFT                      (4U)
#define PWM_PWMSR_ROV(x)                         (((uint32_t)(((uint32_t)(x)) << PWM_PWMSR_ROV_SHIFT)) & PWM_PWMSR_ROV_MASK)
#define PWM_PWMSR_CMP_MASK                       (0x20U)
#define PWM_PWMSR_CMP_SHIFT                      (5U)
#define PWM_PWMSR_CMP(x)                         (((uint32_t)(((uint32_t)(x)) << PWM_PWMSR_CMP_SHIFT)) & PWM_PWMSR_CMP_MASK)
#define PWM_PWMSR_FWE_MASK                       (0x40U)
#define PWM_PWMSR_FWE_SHIFT                      (6U)
#define PWM_PWMSR_FWE(x)                         (((uint32_t)(((uint32_t)(x)) << PWM_PWMSR_FWE_SHIFT)) & PWM_PWMSR_FWE_MASK)

/*! @name PWMIR - PWM Interrupt Register */
#define PWM_PWMIR_FIE_MASK                       (0x1U)
#define PWM_PWMIR_FIE_SHIFT                      (0U)
#define PWM_PWMIR_FIE(x)                         (((uint32_t)(((uint32_t)(x)) << PWM_PWMIR_FIE_SHIFT)) & PWM_PWMIR_FIE_MASK)
#define PWM_PWMIR_RIE_MASK                       (0x2U)
#define PWM_PWMIR_RIE_SHIFT                      (1U)
#define PWM_PWMIR_RIE(x)                         (((uint32_t)(((uint32_t)(x)) << PWM_PWMIR_RIE_SHIFT)) & PWM_PWMIR_RIE_MASK)
#define PWM_PWMIR_CIE_MASK                       (0x4U)
#define PWM_PWMIR_CIE_SHIFT                      (2U)
#define PWM_PWMIR_CIE(x)                         (((uint32_t)(((uint32_t)(x)) << PWM_PWMIR_CIE_SHIFT)) & PWM_PWMIR_CIE_MASK)

/*! @name PWMSAR - PWM Sample Register */
#define PWM_PWMSAR_SAMPLE_MASK                   (0xFFFFU)
#define PWM_PWMSAR_SAMPLE_SHIFT                  (0U)
#define PWM_PWMSAR_SAMPLE(x)                     (((uint32_t)(((uint32_t)(x)) << PWM_PWMSAR_SAMPLE_SHIFT)) & PWM_PWMSAR_SAMPLE_MASK)

/*! @name PWMPR - PWM Period Register */
#define PWM_PWMPR_PERIOD_MASK                    (0xFFFFU)
#define PWM_PWMPR_PERIOD_SHIFT                   (0U)
#define PWM_PWMPR_PERIOD(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMPR_PERIOD_SHIFT)) & PWM_PWMPR_PERIOD_MASK)

/*! @name PWMCNR - PWM Counter Register */
#define PWM_PWMCNR_COUNT_MASK                    (0xFFFFU)
#define PWM_PWMCNR_COUNT_SHIFT                   (0U)
#define PWM_PWMCNR_COUNT(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCNR_COUNT_SHIFT)) & PWM_PWMCNR_COUNT_MASK)


/*!
 * @}
 */ /* end of group PWM_Register_Masks */


/* PWM - Peripheral instance base addresses */
/** Peripheral PWM1 base address */
#define PWM1_BASE                                (0x30660000u)
/** Peripheral PWM1 base pointer */
#define PWM1                                     ((PWM_Type *)PWM1_BASE)
/** Peripheral PWM2 base address */
#define PWM2_BASE                                (0x30670000u)
/** Peripheral PWM2 base pointer */
#define PWM2                                     ((PWM_Type *)PWM2_BASE)
/** Peripheral PWM3 base address */
#define PWM3_BASE                                (0x30680000u)
/** Peripheral PWM3 base pointer */
#define PWM3                                     ((PWM_Type *)PWM3_BASE)
/** Peripheral PWM4 base address */
#define PWM4_BASE                                (0x30690000u)
/** Peripheral PWM4 base pointer */
#define PWM4                                     ((PWM_Type *)PWM4_BASE)
/** Array initializer of PWM peripheral base addresses */
#define PWM_BASE_ADDRS                           { 0u, PWM1_BASE, PWM2_BASE, PWM3_BASE, PWM4_BASE }
/** Array initializer of PWM peripheral base pointers */
#define PWM_BASE_PTRS                            { (PWM_Type *)0u, PWM1, PWM2, PWM3, PWM4 }
/** Interrupt vectors for the PWM peripheral type */
#define PWM_IRQS                                 { NotAvail_IRQn, PWM1_IRQn, PWM2_IRQn, PWM3_IRQn, PWM4_IRQn }

/*!
 * @}
 */ /* end of group PWM_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- QuadSPI Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup QuadSPI_Peripheral_Access_Layer QuadSPI Peripheral Access Layer
 * @{
 */

/** QuadSPI - Register Layout Typedef */
typedef struct {
  __IO uint32_t MCR;                               /**< Module Configuration Register, offset: 0x0 */
       uint8_t RESERVED_0[4];
  __IO uint32_t IPCR;                              /**< IP Configuration Register, offset: 0x8 */
  __IO uint32_t FLSHCR;                            /**< Flash Configuration Register, offset: 0xC */
  __IO uint32_t BUF0CR;                            /**< Buffer0 Configuration Register, offset: 0x10 */
  __IO uint32_t BUF1CR;                            /**< Buffer1 Configuration Register, offset: 0x14 */
  __IO uint32_t BUF2CR;                            /**< Buffer2 Configuration Register, offset: 0x18 */
  __IO uint32_t BUF3CR;                            /**< Buffer3 Configuration Register, offset: 0x1C */
  __IO uint32_t BFGENCR;                           /**< Buffer Generic Configuration Register, offset: 0x20 */
       uint8_t RESERVED_1[12];
  __IO uint32_t BUF0IND;                           /**< Buffer0 Top Index Register, offset: 0x30 */
  __IO uint32_t BUF1IND;                           /**< Buffer1 Top Index Register, offset: 0x34 */
  __IO uint32_t BUF2IND;                           /**< Buffer2 Top Index Register, offset: 0x38 */
       uint8_t RESERVED_2[196];
  __IO uint32_t SFAR;                              /**< Serial Flash Address Register, offset: 0x100 */
       uint8_t RESERVED_3[4];
  __IO uint32_t SMPR;                              /**< Sampling Register, offset: 0x108 */
  __I  uint32_t RBSR;                              /**< RX Buffer Status Register, offset: 0x10C */
  __IO uint32_t RBCT;                              /**< RX Buffer Control Register, offset: 0x110 */
       uint8_t RESERVED_4[60];
  __I  uint32_t TBSR;                              /**< TX Buffer Status Register, offset: 0x150 */
  __IO uint32_t TBDR;                              /**< TX Buffer Data Register, offset: 0x154 */
       uint8_t RESERVED_5[4];
  __I  uint32_t SR;                                /**< Status Register, offset: 0x15C */
  __IO uint32_t FR;                                /**< Flag Register, offset: 0x160 */
  __IO uint32_t RSER;                              /**< Interrupt and DMA Request Select and Enable Register, offset: 0x164 */
  __I  uint32_t SPNDST;                            /**< Sequence Suspend Status Register, offset: 0x168 */
  __IO uint32_t SPTRCLR;                           /**< Sequence Pointer Clear Register, offset: 0x16C */
       uint8_t RESERVED_6[16];
  __IO uint32_t SFA1AD;                            /**< Serial Flash A1 Top Address, offset: 0x180 */
  __IO uint32_t SFA2AD;                            /**< Serial Flash A2 Top Address, offset: 0x184 */
  __IO uint32_t SFB1AD;                            /**< Serial Flash B1Top Address, offset: 0x188 */
  __IO uint32_t SFB2AD;                            /**< Serial Flash B2Top Address, offset: 0x18C */
       uint8_t RESERVED_7[112];
  __IO uint32_t RBDR[32];                          /**< RX Buffer Data Register, array offset: 0x200, array step: 0x4 */
       uint8_t RESERVED_8[128];
  __IO uint32_t LUTKEY;                            /**< LUT Key Register, offset: 0x300 */
  __IO uint32_t LCKCR;                             /**< LUT Lock Configuration Register, offset: 0x304 */
       uint8_t RESERVED_9[8];
  __IO uint32_t LUT[64];                           /**< Look-up Table register, array offset: 0x310, array step: 0x4 */
} QuadSPI_Type;

/* ----------------------------------------------------------------------------
   -- QuadSPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup QuadSPI_Register_Masks QuadSPI Register Masks
 * @{
 */

/*! @name MCR - Module Configuration Register */
#define QuadSPI_MCR_SWRSTSD_MASK                 (0x1U)
#define QuadSPI_MCR_SWRSTSD_SHIFT                (0U)
#define QuadSPI_MCR_SWRSTSD(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_SWRSTSD_SHIFT)) & QuadSPI_MCR_SWRSTSD_MASK)
#define QuadSPI_MCR_SWRSTHD_MASK                 (0x2U)
#define QuadSPI_MCR_SWRSTHD_SHIFT                (1U)
#define QuadSPI_MCR_SWRSTHD(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_SWRSTHD_SHIFT)) & QuadSPI_MCR_SWRSTHD_MASK)
#define QuadSPI_MCR_END_CFG_MASK                 (0xCU)
#define QuadSPI_MCR_END_CFG_SHIFT                (2U)
#define QuadSPI_MCR_END_CFG(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_END_CFG_SHIFT)) & QuadSPI_MCR_END_CFG_MASK)
#define QuadSPI_MCR_DQS_EN_MASK                  (0x40U)
#define QuadSPI_MCR_DQS_EN_SHIFT                 (6U)
#define QuadSPI_MCR_DQS_EN(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_DQS_EN_SHIFT)) & QuadSPI_MCR_DQS_EN_MASK)
#define QuadSPI_MCR_DDR_EN_MASK                  (0x80U)
#define QuadSPI_MCR_DDR_EN_SHIFT                 (7U)
#define QuadSPI_MCR_DDR_EN(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_DDR_EN_SHIFT)) & QuadSPI_MCR_DDR_EN_MASK)
#define QuadSPI_MCR_CLR_RXF_MASK                 (0x400U)
#define QuadSPI_MCR_CLR_RXF_SHIFT                (10U)
#define QuadSPI_MCR_CLR_RXF(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_CLR_RXF_SHIFT)) & QuadSPI_MCR_CLR_RXF_MASK)
#define QuadSPI_MCR_CLR_TXF_MASK                 (0x800U)
#define QuadSPI_MCR_CLR_TXF_SHIFT                (11U)
#define QuadSPI_MCR_CLR_TXF(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_CLR_TXF_SHIFT)) & QuadSPI_MCR_CLR_TXF_MASK)
#define QuadSPI_MCR_MDIS_MASK                    (0x4000U)
#define QuadSPI_MCR_MDIS_SHIFT                   (14U)
#define QuadSPI_MCR_MDIS(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_MDIS_SHIFT)) & QuadSPI_MCR_MDIS_MASK)
#define QuadSPI_MCR_DQS_LOOPBACK_FROM_PAD_MASK   (0x1000000U)
#define QuadSPI_MCR_DQS_LOOPBACK_FROM_PAD_SHIFT  (24U)
#define QuadSPI_MCR_DQS_LOOPBACK_FROM_PAD(x)     (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_DQS_LOOPBACK_FROM_PAD_SHIFT)) & QuadSPI_MCR_DQS_LOOPBACK_FROM_PAD_MASK)
#define QuadSPI_MCR_DQS_LOOPBACK_EN_MASK         (0x2000000U)
#define QuadSPI_MCR_DQS_LOOPBACK_EN_SHIFT        (25U)
#define QuadSPI_MCR_DQS_LOOPBACK_EN(x)           (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_DQS_LOOPBACK_EN_SHIFT)) & QuadSPI_MCR_DQS_LOOPBACK_EN_MASK)
#define QuadSPI_MCR_DQS_PHASE_EN_MASK            (0x4000000U)
#define QuadSPI_MCR_DQS_PHASE_EN_SHIFT           (26U)
#define QuadSPI_MCR_DQS_PHASE_EN(x)              (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_DQS_PHASE_EN_SHIFT)) & QuadSPI_MCR_DQS_PHASE_EN_MASK)

/*! @name IPCR - IP Configuration Register */
#define QuadSPI_IPCR_IDATSZ_MASK                 (0xFFFFU)
#define QuadSPI_IPCR_IDATSZ_SHIFT                (0U)
#define QuadSPI_IPCR_IDATSZ(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_IPCR_IDATSZ_SHIFT)) & QuadSPI_IPCR_IDATSZ_MASK)
#define QuadSPI_IPCR_PAR_EN_MASK                 (0x10000U)
#define QuadSPI_IPCR_PAR_EN_SHIFT                (16U)
#define QuadSPI_IPCR_PAR_EN(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_IPCR_PAR_EN_SHIFT)) & QuadSPI_IPCR_PAR_EN_MASK)
#define QuadSPI_IPCR_SEQID_MASK                  (0xF000000U)
#define QuadSPI_IPCR_SEQID_SHIFT                 (24U)
#define QuadSPI_IPCR_SEQID(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_IPCR_SEQID_SHIFT)) & QuadSPI_IPCR_SEQID_MASK)

/*! @name FLSHCR - Flash Configuration Register */
#define QuadSPI_FLSHCR_TCSS_MASK                 (0xFU)
#define QuadSPI_FLSHCR_TCSS_SHIFT                (0U)
#define QuadSPI_FLSHCR_TCSS(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_FLSHCR_TCSS_SHIFT)) & QuadSPI_FLSHCR_TCSS_MASK)
#define QuadSPI_FLSHCR_TCSH_MASK                 (0xF00U)
#define QuadSPI_FLSHCR_TCSH_SHIFT                (8U)
#define QuadSPI_FLSHCR_TCSH(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_FLSHCR_TCSH_SHIFT)) & QuadSPI_FLSHCR_TCSH_MASK)
#define QuadSPI_FLSHCR_TDH_MASK                  (0x30000U)
#define QuadSPI_FLSHCR_TDH_SHIFT                 (16U)
#define QuadSPI_FLSHCR_TDH(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_FLSHCR_TDH_SHIFT)) & QuadSPI_FLSHCR_TDH_MASK)

/*! @name BUF0CR - Buffer0 Configuration Register */
#define QuadSPI_BUF0CR_MSTRID_MASK               (0xFU)
#define QuadSPI_BUF0CR_MSTRID_SHIFT              (0U)
#define QuadSPI_BUF0CR_MSTRID(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF0CR_MSTRID_SHIFT)) & QuadSPI_BUF0CR_MSTRID_MASK)
#define QuadSPI_BUF0CR_ADATSZ_MASK               (0xFF00U)
#define QuadSPI_BUF0CR_ADATSZ_SHIFT              (8U)
#define QuadSPI_BUF0CR_ADATSZ(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF0CR_ADATSZ_SHIFT)) & QuadSPI_BUF0CR_ADATSZ_MASK)
#define QuadSPI_BUF0CR_HP_EN_MASK                (0x80000000U)
#define QuadSPI_BUF0CR_HP_EN_SHIFT               (31U)
#define QuadSPI_BUF0CR_HP_EN(x)                  (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF0CR_HP_EN_SHIFT)) & QuadSPI_BUF0CR_HP_EN_MASK)

/*! @name BUF1CR - Buffer1 Configuration Register */
#define QuadSPI_BUF1CR_MSTRID_MASK               (0xFU)
#define QuadSPI_BUF1CR_MSTRID_SHIFT              (0U)
#define QuadSPI_BUF1CR_MSTRID(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF1CR_MSTRID_SHIFT)) & QuadSPI_BUF1CR_MSTRID_MASK)
#define QuadSPI_BUF1CR_ADATSZ_MASK               (0xFF00U)
#define QuadSPI_BUF1CR_ADATSZ_SHIFT              (8U)
#define QuadSPI_BUF1CR_ADATSZ(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF1CR_ADATSZ_SHIFT)) & QuadSPI_BUF1CR_ADATSZ_MASK)

/*! @name BUF2CR - Buffer2 Configuration Register */
#define QuadSPI_BUF2CR_MSTRID_MASK               (0xFU)
#define QuadSPI_BUF2CR_MSTRID_SHIFT              (0U)
#define QuadSPI_BUF2CR_MSTRID(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF2CR_MSTRID_SHIFT)) & QuadSPI_BUF2CR_MSTRID_MASK)
#define QuadSPI_BUF2CR_ADATSZ_MASK               (0xFF00U)
#define QuadSPI_BUF2CR_ADATSZ_SHIFT              (8U)
#define QuadSPI_BUF2CR_ADATSZ(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF2CR_ADATSZ_SHIFT)) & QuadSPI_BUF2CR_ADATSZ_MASK)

/*! @name BUF3CR - Buffer3 Configuration Register */
#define QuadSPI_BUF3CR_MSTRID_MASK               (0xFU)
#define QuadSPI_BUF3CR_MSTRID_SHIFT              (0U)
#define QuadSPI_BUF3CR_MSTRID(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF3CR_MSTRID_SHIFT)) & QuadSPI_BUF3CR_MSTRID_MASK)
#define QuadSPI_BUF3CR_ADATSZ_MASK               (0xFF00U)
#define QuadSPI_BUF3CR_ADATSZ_SHIFT              (8U)
#define QuadSPI_BUF3CR_ADATSZ(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF3CR_ADATSZ_SHIFT)) & QuadSPI_BUF3CR_ADATSZ_MASK)
#define QuadSPI_BUF3CR_ALLMST_MASK               (0x80000000U)
#define QuadSPI_BUF3CR_ALLMST_SHIFT              (31U)
#define QuadSPI_BUF3CR_ALLMST(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF3CR_ALLMST_SHIFT)) & QuadSPI_BUF3CR_ALLMST_MASK)

/*! @name BFGENCR - Buffer Generic Configuration Register */
#define QuadSPI_BFGENCR_SEQID_MASK               (0xF000U)
#define QuadSPI_BFGENCR_SEQID_SHIFT              (12U)
#define QuadSPI_BFGENCR_SEQID(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BFGENCR_SEQID_SHIFT)) & QuadSPI_BFGENCR_SEQID_MASK)
#define QuadSPI_BFGENCR_PAR_EN_MASK              (0x10000U)
#define QuadSPI_BFGENCR_PAR_EN_SHIFT             (16U)
#define QuadSPI_BFGENCR_PAR_EN(x)                (((uint32_t)(((uint32_t)(x)) << QuadSPI_BFGENCR_PAR_EN_SHIFT)) & QuadSPI_BFGENCR_PAR_EN_MASK)

/*! @name BUF0IND - Buffer0 Top Index Register */
#define QuadSPI_BUF0IND_TPINDX0_MASK             (0xFFFFFFF8U)
#define QuadSPI_BUF0IND_TPINDX0_SHIFT            (3U)
#define QuadSPI_BUF0IND_TPINDX0(x)               (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF0IND_TPINDX0_SHIFT)) & QuadSPI_BUF0IND_TPINDX0_MASK)

/*! @name BUF1IND - Buffer1 Top Index Register */
#define QuadSPI_BUF1IND_TPINDX1_MASK             (0xFFFFFFF8U)
#define QuadSPI_BUF1IND_TPINDX1_SHIFT            (3U)
#define QuadSPI_BUF1IND_TPINDX1(x)               (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF1IND_TPINDX1_SHIFT)) & QuadSPI_BUF1IND_TPINDX1_MASK)

/*! @name BUF2IND - Buffer2 Top Index Register */
#define QuadSPI_BUF2IND_TPINDX2_MASK             (0xFFFFFFF8U)
#define QuadSPI_BUF2IND_TPINDX2_SHIFT            (3U)
#define QuadSPI_BUF2IND_TPINDX2(x)               (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF2IND_TPINDX2_SHIFT)) & QuadSPI_BUF2IND_TPINDX2_MASK)

/*! @name SFAR - Serial Flash Address Register */
#define QuadSPI_SFAR_SFADR_MASK                  (0xFFFFFFFFU)
#define QuadSPI_SFAR_SFADR_SHIFT                 (0U)
#define QuadSPI_SFAR_SFADR(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_SFAR_SFADR_SHIFT)) & QuadSPI_SFAR_SFADR_MASK)

/*! @name SMPR - Sampling Register */
#define QuadSPI_SMPR_SDRSMP_MASK                 (0x60U)
#define QuadSPI_SMPR_SDRSMP_SHIFT                (5U)
#define QuadSPI_SMPR_SDRSMP(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_SMPR_SDRSMP_SHIFT)) & QuadSPI_SMPR_SDRSMP_MASK)
#define QuadSPI_SMPR_DDRSMP_MASK                 (0x70000U)
#define QuadSPI_SMPR_DDRSMP_SHIFT                (16U)
#define QuadSPI_SMPR_DDRSMP(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_SMPR_DDRSMP_SHIFT)) & QuadSPI_SMPR_DDRSMP_MASK)

/*! @name RBSR - RX Buffer Status Register */
#define QuadSPI_RBSR_RDBFL_MASK                  (0x3F00U)
#define QuadSPI_RBSR_RDBFL_SHIFT                 (8U)
#define QuadSPI_RBSR_RDBFL(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RBSR_RDBFL_SHIFT)) & QuadSPI_RBSR_RDBFL_MASK)
#define QuadSPI_RBSR_RDCTR_MASK                  (0xFFFF0000U)
#define QuadSPI_RBSR_RDCTR_SHIFT                 (16U)
#define QuadSPI_RBSR_RDCTR(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RBSR_RDCTR_SHIFT)) & QuadSPI_RBSR_RDCTR_MASK)

/*! @name RBCT - RX Buffer Control Register */
#define QuadSPI_RBCT_WMRK_MASK                   (0x1FU)
#define QuadSPI_RBCT_WMRK_SHIFT                  (0U)
#define QuadSPI_RBCT_WMRK(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_RBCT_WMRK_SHIFT)) & QuadSPI_RBCT_WMRK_MASK)
#define QuadSPI_RBCT_RXBRD_MASK                  (0x100U)
#define QuadSPI_RBCT_RXBRD_SHIFT                 (8U)
#define QuadSPI_RBCT_RXBRD(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RBCT_RXBRD_SHIFT)) & QuadSPI_RBCT_RXBRD_MASK)

/*! @name TBSR - TX Buffer Status Register */
#define QuadSPI_TBSR_TRBFL_MASK                  (0x1F00U)
#define QuadSPI_TBSR_TRBFL_SHIFT                 (8U)
#define QuadSPI_TBSR_TRBFL(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_TBSR_TRBFL_SHIFT)) & QuadSPI_TBSR_TRBFL_MASK)
#define QuadSPI_TBSR_TRCTR_MASK                  (0xFFFF0000U)
#define QuadSPI_TBSR_TRCTR_SHIFT                 (16U)
#define QuadSPI_TBSR_TRCTR(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_TBSR_TRCTR_SHIFT)) & QuadSPI_TBSR_TRCTR_MASK)

/*! @name TBDR - TX Buffer Data Register */
#define QuadSPI_TBDR_TXDATA_MASK                 (0xFFFFFFFFU)
#define QuadSPI_TBDR_TXDATA_SHIFT                (0U)
#define QuadSPI_TBDR_TXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_TBDR_TXDATA_SHIFT)) & QuadSPI_TBDR_TXDATA_MASK)

/*! @name SR - Status Register */
#define QuadSPI_SR_BUSY_MASK                     (0x1U)
#define QuadSPI_SR_BUSY_SHIFT                    (0U)
#define QuadSPI_SR_BUSY(x)                       (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_BUSY_SHIFT)) & QuadSPI_SR_BUSY_MASK)
#define QuadSPI_SR_IP_ACC_MASK                   (0x2U)
#define QuadSPI_SR_IP_ACC_SHIFT                  (1U)
#define QuadSPI_SR_IP_ACC(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_IP_ACC_SHIFT)) & QuadSPI_SR_IP_ACC_MASK)
#define QuadSPI_SR_AHB_ACC_MASK                  (0x4U)
#define QuadSPI_SR_AHB_ACC_SHIFT                 (2U)
#define QuadSPI_SR_AHB_ACC(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHB_ACC_SHIFT)) & QuadSPI_SR_AHB_ACC_MASK)
#define QuadSPI_SR_AHBGNT_MASK                   (0x20U)
#define QuadSPI_SR_AHBGNT_SHIFT                  (5U)
#define QuadSPI_SR_AHBGNT(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHBGNT_SHIFT)) & QuadSPI_SR_AHBGNT_MASK)
#define QuadSPI_SR_AHBTRN_MASK                   (0x40U)
#define QuadSPI_SR_AHBTRN_SHIFT                  (6U)
#define QuadSPI_SR_AHBTRN(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHBTRN_SHIFT)) & QuadSPI_SR_AHBTRN_MASK)
#define QuadSPI_SR_AHB0NE_MASK                   (0x80U)
#define QuadSPI_SR_AHB0NE_SHIFT                  (7U)
#define QuadSPI_SR_AHB0NE(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHB0NE_SHIFT)) & QuadSPI_SR_AHB0NE_MASK)
#define QuadSPI_SR_AHB1NE_MASK                   (0x100U)
#define QuadSPI_SR_AHB1NE_SHIFT                  (8U)
#define QuadSPI_SR_AHB1NE(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHB1NE_SHIFT)) & QuadSPI_SR_AHB1NE_MASK)
#define QuadSPI_SR_AHB2NE_MASK                   (0x200U)
#define QuadSPI_SR_AHB2NE_SHIFT                  (9U)
#define QuadSPI_SR_AHB2NE(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHB2NE_SHIFT)) & QuadSPI_SR_AHB2NE_MASK)
#define QuadSPI_SR_AHB3NE_MASK                   (0x400U)
#define QuadSPI_SR_AHB3NE_SHIFT                  (10U)
#define QuadSPI_SR_AHB3NE(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHB3NE_SHIFT)) & QuadSPI_SR_AHB3NE_MASK)
#define QuadSPI_SR_AHB0FUL_MASK                  (0x800U)
#define QuadSPI_SR_AHB0FUL_SHIFT                 (11U)
#define QuadSPI_SR_AHB0FUL(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHB0FUL_SHIFT)) & QuadSPI_SR_AHB0FUL_MASK)
#define QuadSPI_SR_AHB1FUL_MASK                  (0x1000U)
#define QuadSPI_SR_AHB1FUL_SHIFT                 (12U)
#define QuadSPI_SR_AHB1FUL(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHB1FUL_SHIFT)) & QuadSPI_SR_AHB1FUL_MASK)
#define QuadSPI_SR_AHB2FUL_MASK                  (0x2000U)
#define QuadSPI_SR_AHB2FUL_SHIFT                 (13U)
#define QuadSPI_SR_AHB2FUL(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHB2FUL_SHIFT)) & QuadSPI_SR_AHB2FUL_MASK)
#define QuadSPI_SR_AHB3FUL_MASK                  (0x4000U)
#define QuadSPI_SR_AHB3FUL_SHIFT                 (14U)
#define QuadSPI_SR_AHB3FUL(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_AHB3FUL_SHIFT)) & QuadSPI_SR_AHB3FUL_MASK)
#define QuadSPI_SR_RXWE_MASK                     (0x10000U)
#define QuadSPI_SR_RXWE_SHIFT                    (16U)
#define QuadSPI_SR_RXWE(x)                       (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_RXWE_SHIFT)) & QuadSPI_SR_RXWE_MASK)
#define QuadSPI_SR_RXFULL_MASK                   (0x80000U)
#define QuadSPI_SR_RXFULL_SHIFT                  (19U)
#define QuadSPI_SR_RXFULL(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_RXFULL_SHIFT)) & QuadSPI_SR_RXFULL_MASK)
#define QuadSPI_SR_RXDMA_MASK                    (0x800000U)
#define QuadSPI_SR_RXDMA_SHIFT                   (23U)
#define QuadSPI_SR_RXDMA(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_RXDMA_SHIFT)) & QuadSPI_SR_RXDMA_MASK)
#define QuadSPI_SR_TXEDA_MASK                    (0x1000000U)
#define QuadSPI_SR_TXEDA_SHIFT                   (24U)
#define QuadSPI_SR_TXEDA(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_TXEDA_SHIFT)) & QuadSPI_SR_TXEDA_MASK)
#define QuadSPI_SR_TXFULL_MASK                   (0x8000000U)
#define QuadSPI_SR_TXFULL_SHIFT                  (27U)
#define QuadSPI_SR_TXFULL(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_TXFULL_SHIFT)) & QuadSPI_SR_TXFULL_MASK)
#define QuadSPI_SR_DLPSMP_MASK                   (0xE0000000U)
#define QuadSPI_SR_DLPSMP_SHIFT                  (29U)
#define QuadSPI_SR_DLPSMP(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_DLPSMP_SHIFT)) & QuadSPI_SR_DLPSMP_MASK)

/*! @name FR - Flag Register */
#define QuadSPI_FR_TFF_MASK                      (0x1U)
#define QuadSPI_FR_TFF_SHIFT                     (0U)
#define QuadSPI_FR_TFF(x)                        (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_TFF_SHIFT)) & QuadSPI_FR_TFF_MASK)
#define QuadSPI_FR_IPGEF_MASK                    (0x10U)
#define QuadSPI_FR_IPGEF_SHIFT                   (4U)
#define QuadSPI_FR_IPGEF(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_IPGEF_SHIFT)) & QuadSPI_FR_IPGEF_MASK)
#define QuadSPI_FR_IPIEF_MASK                    (0x40U)
#define QuadSPI_FR_IPIEF_SHIFT                   (6U)
#define QuadSPI_FR_IPIEF(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_IPIEF_SHIFT)) & QuadSPI_FR_IPIEF_MASK)
#define QuadSPI_FR_IPAEF_MASK                    (0x80U)
#define QuadSPI_FR_IPAEF_SHIFT                   (7U)
#define QuadSPI_FR_IPAEF(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_IPAEF_SHIFT)) & QuadSPI_FR_IPAEF_MASK)
#define QuadSPI_FR_IUEF_MASK                     (0x800U)
#define QuadSPI_FR_IUEF_SHIFT                    (11U)
#define QuadSPI_FR_IUEF(x)                       (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_IUEF_SHIFT)) & QuadSPI_FR_IUEF_MASK)
#define QuadSPI_FR_ABOF_MASK                     (0x1000U)
#define QuadSPI_FR_ABOF_SHIFT                    (12U)
#define QuadSPI_FR_ABOF(x)                       (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_ABOF_SHIFT)) & QuadSPI_FR_ABOF_MASK)
#define QuadSPI_FR_ABSEF_MASK                    (0x8000U)
#define QuadSPI_FR_ABSEF_SHIFT                   (15U)
#define QuadSPI_FR_ABSEF(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_ABSEF_SHIFT)) & QuadSPI_FR_ABSEF_MASK)
#define QuadSPI_FR_RBDF_MASK                     (0x10000U)
#define QuadSPI_FR_RBDF_SHIFT                    (16U)
#define QuadSPI_FR_RBDF(x)                       (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_RBDF_SHIFT)) & QuadSPI_FR_RBDF_MASK)
#define QuadSPI_FR_RBOF_MASK                     (0x20000U)
#define QuadSPI_FR_RBOF_SHIFT                    (17U)
#define QuadSPI_FR_RBOF(x)                       (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_RBOF_SHIFT)) & QuadSPI_FR_RBOF_MASK)
#define QuadSPI_FR_ILLINE_MASK                   (0x800000U)
#define QuadSPI_FR_ILLINE_SHIFT                  (23U)
#define QuadSPI_FR_ILLINE(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_ILLINE_SHIFT)) & QuadSPI_FR_ILLINE_MASK)
#define QuadSPI_FR_TBUF_MASK                     (0x4000000U)
#define QuadSPI_FR_TBUF_SHIFT                    (26U)
#define QuadSPI_FR_TBUF(x)                       (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_TBUF_SHIFT)) & QuadSPI_FR_TBUF_MASK)
#define QuadSPI_FR_TBFF_MASK                     (0x8000000U)
#define QuadSPI_FR_TBFF_SHIFT                    (27U)
#define QuadSPI_FR_TBFF(x)                       (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_TBFF_SHIFT)) & QuadSPI_FR_TBFF_MASK)
#define QuadSPI_FR_DLPFF_MASK                    (0x80000000U)
#define QuadSPI_FR_DLPFF_SHIFT                   (31U)
#define QuadSPI_FR_DLPFF(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_FR_DLPFF_SHIFT)) & QuadSPI_FR_DLPFF_MASK)

/*! @name RSER - Interrupt and DMA Request Select and Enable Register */
#define QuadSPI_RSER_TFIE_MASK                   (0x1U)
#define QuadSPI_RSER_TFIE_SHIFT                  (0U)
#define QuadSPI_RSER_TFIE(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_TFIE_SHIFT)) & QuadSPI_RSER_TFIE_MASK)
#define QuadSPI_RSER_IPGEIE_MASK                 (0x10U)
#define QuadSPI_RSER_IPGEIE_SHIFT                (4U)
#define QuadSPI_RSER_IPGEIE(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_IPGEIE_SHIFT)) & QuadSPI_RSER_IPGEIE_MASK)
#define QuadSPI_RSER_IPIEIE_MASK                 (0x40U)
#define QuadSPI_RSER_IPIEIE_SHIFT                (6U)
#define QuadSPI_RSER_IPIEIE(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_IPIEIE_SHIFT)) & QuadSPI_RSER_IPIEIE_MASK)
#define QuadSPI_RSER_IPAEIE_MASK                 (0x80U)
#define QuadSPI_RSER_IPAEIE_SHIFT                (7U)
#define QuadSPI_RSER_IPAEIE(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_IPAEIE_SHIFT)) & QuadSPI_RSER_IPAEIE_MASK)
#define QuadSPI_RSER_IUEIE_MASK                  (0x800U)
#define QuadSPI_RSER_IUEIE_SHIFT                 (11U)
#define QuadSPI_RSER_IUEIE(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_IUEIE_SHIFT)) & QuadSPI_RSER_IUEIE_MASK)
#define QuadSPI_RSER_ABOIE_MASK                  (0x1000U)
#define QuadSPI_RSER_ABOIE_SHIFT                 (12U)
#define QuadSPI_RSER_ABOIE(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_ABOIE_SHIFT)) & QuadSPI_RSER_ABOIE_MASK)
#define QuadSPI_RSER_ABSEIE_MASK                 (0x8000U)
#define QuadSPI_RSER_ABSEIE_SHIFT                (15U)
#define QuadSPI_RSER_ABSEIE(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_ABSEIE_SHIFT)) & QuadSPI_RSER_ABSEIE_MASK)
#define QuadSPI_RSER_RBDIE_MASK                  (0x10000U)
#define QuadSPI_RSER_RBDIE_SHIFT                 (16U)
#define QuadSPI_RSER_RBDIE(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_RBDIE_SHIFT)) & QuadSPI_RSER_RBDIE_MASK)
#define QuadSPI_RSER_RBOIE_MASK                  (0x20000U)
#define QuadSPI_RSER_RBOIE_SHIFT                 (17U)
#define QuadSPI_RSER_RBOIE(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_RBOIE_SHIFT)) & QuadSPI_RSER_RBOIE_MASK)
#define QuadSPI_RSER_RBDDE_MASK                  (0x200000U)
#define QuadSPI_RSER_RBDDE_SHIFT                 (21U)
#define QuadSPI_RSER_RBDDE(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_RBDDE_SHIFT)) & QuadSPI_RSER_RBDDE_MASK)
#define QuadSPI_RSER_ILLINIE_MASK                (0x800000U)
#define QuadSPI_RSER_ILLINIE_SHIFT               (23U)
#define QuadSPI_RSER_ILLINIE(x)                  (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_ILLINIE_SHIFT)) & QuadSPI_RSER_ILLINIE_MASK)
#define QuadSPI_RSER_TBUIE_MASK                  (0x4000000U)
#define QuadSPI_RSER_TBUIE_SHIFT                 (26U)
#define QuadSPI_RSER_TBUIE(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_TBUIE_SHIFT)) & QuadSPI_RSER_TBUIE_MASK)
#define QuadSPI_RSER_TBFIE_MASK                  (0x8000000U)
#define QuadSPI_RSER_TBFIE_SHIFT                 (27U)
#define QuadSPI_RSER_TBFIE(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_TBFIE_SHIFT)) & QuadSPI_RSER_TBFIE_MASK)
#define QuadSPI_RSER_DLPFIE_MASK                 (0x80000000U)
#define QuadSPI_RSER_DLPFIE_SHIFT                (31U)
#define QuadSPI_RSER_DLPFIE(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_RSER_DLPFIE_SHIFT)) & QuadSPI_RSER_DLPFIE_MASK)

/*! @name SPNDST - Sequence Suspend Status Register */
#define QuadSPI_SPNDST_SUSPND_MASK               (0x1U)
#define QuadSPI_SPNDST_SUSPND_SHIFT              (0U)
#define QuadSPI_SPNDST_SUSPND(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SPNDST_SUSPND_SHIFT)) & QuadSPI_SPNDST_SUSPND_MASK)
#define QuadSPI_SPNDST_SPDBUF_MASK               (0xC0U)
#define QuadSPI_SPNDST_SPDBUF_SHIFT              (6U)
#define QuadSPI_SPNDST_SPDBUF(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SPNDST_SPDBUF_SHIFT)) & QuadSPI_SPNDST_SPDBUF_MASK)
#define QuadSPI_SPNDST_DATLFT_MASK               (0xFE00U)
#define QuadSPI_SPNDST_DATLFT_SHIFT              (9U)
#define QuadSPI_SPNDST_DATLFT(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SPNDST_DATLFT_SHIFT)) & QuadSPI_SPNDST_DATLFT_MASK)

/*! @name SPTRCLR - Sequence Pointer Clear Register */
#define QuadSPI_SPTRCLR_BFPTRC_MASK              (0x1U)
#define QuadSPI_SPTRCLR_BFPTRC_SHIFT             (0U)
#define QuadSPI_SPTRCLR_BFPTRC(x)                (((uint32_t)(((uint32_t)(x)) << QuadSPI_SPTRCLR_BFPTRC_SHIFT)) & QuadSPI_SPTRCLR_BFPTRC_MASK)
#define QuadSPI_SPTRCLR_IPPTRC_MASK              (0x100U)
#define QuadSPI_SPTRCLR_IPPTRC_SHIFT             (8U)
#define QuadSPI_SPTRCLR_IPPTRC(x)                (((uint32_t)(((uint32_t)(x)) << QuadSPI_SPTRCLR_IPPTRC_SHIFT)) & QuadSPI_SPTRCLR_IPPTRC_MASK)

/*! @name SFA1AD - Serial Flash A1 Top Address */
#define QuadSPI_SFA1AD_TPADA1_MASK               (0xFFFFFC00U)
#define QuadSPI_SFA1AD_TPADA1_SHIFT              (10U)
#define QuadSPI_SFA1AD_TPADA1(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SFA1AD_TPADA1_SHIFT)) & QuadSPI_SFA1AD_TPADA1_MASK)

/*! @name SFA2AD - Serial Flash A2 Top Address */
#define QuadSPI_SFA2AD_TPADA2_MASK               (0xFFFFFC00U)
#define QuadSPI_SFA2AD_TPADA2_SHIFT              (10U)
#define QuadSPI_SFA2AD_TPADA2(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SFA2AD_TPADA2_SHIFT)) & QuadSPI_SFA2AD_TPADA2_MASK)

/*! @name SFB1AD - Serial Flash B1Top Address */
#define QuadSPI_SFB1AD_TPADB1_MASK               (0xFFFFFC00U)
#define QuadSPI_SFB1AD_TPADB1_SHIFT              (10U)
#define QuadSPI_SFB1AD_TPADB1(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SFB1AD_TPADB1_SHIFT)) & QuadSPI_SFB1AD_TPADB1_MASK)

/*! @name SFB2AD - Serial Flash B2Top Address */
#define QuadSPI_SFB2AD_TPADB2_MASK               (0xFFFFFC00U)
#define QuadSPI_SFB2AD_TPADB2_SHIFT              (10U)
#define QuadSPI_SFB2AD_TPADB2(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SFB2AD_TPADB2_SHIFT)) & QuadSPI_SFB2AD_TPADB2_MASK)

/*! @name RBDR - RX Buffer Data Register */
#define QuadSPI_RBDR_RXDATA_MASK                 (0xFFFFFFFFU)
#define QuadSPI_RBDR_RXDATA_SHIFT                (0U)
#define QuadSPI_RBDR_RXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_RBDR_RXDATA_SHIFT)) & QuadSPI_RBDR_RXDATA_MASK)

/* The count of QuadSPI_RBDR */
#define QuadSPI_RBDR_COUNT                       (32U)

/*! @name LUTKEY - LUT Key Register */
#define QuadSPI_LUTKEY_KEY_MASK                  (0xFFFFFFFFU)
#define QuadSPI_LUTKEY_KEY_SHIFT                 (0U)
#define QuadSPI_LUTKEY_KEY(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUTKEY_KEY_SHIFT)) & QuadSPI_LUTKEY_KEY_MASK)

/*! @name LCKCR - LUT Lock Configuration Register */
#define QuadSPI_LCKCR_LOCK_MASK                  (0x1U)
#define QuadSPI_LCKCR_LOCK_SHIFT                 (0U)
#define QuadSPI_LCKCR_LOCK(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LCKCR_LOCK_SHIFT)) & QuadSPI_LCKCR_LOCK_MASK)
#define QuadSPI_LCKCR_UNLOCK_MASK                (0x2U)
#define QuadSPI_LCKCR_UNLOCK_SHIFT               (1U)
#define QuadSPI_LCKCR_UNLOCK(x)                  (((uint32_t)(((uint32_t)(x)) << QuadSPI_LCKCR_UNLOCK_SHIFT)) & QuadSPI_LCKCR_UNLOCK_MASK)

/*! @name LUT - Look-up Table register */
#define QuadSPI_LUT_OPRND0_MASK                  (0xFFU)
#define QuadSPI_LUT_OPRND0_SHIFT                 (0U)
#define QuadSPI_LUT_OPRND0(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_OPRND0_SHIFT)) & QuadSPI_LUT_OPRND0_MASK)
#define QuadSPI_LUT_PAD0_MASK                    (0x300U)
#define QuadSPI_LUT_PAD0_SHIFT                   (8U)
#define QuadSPI_LUT_PAD0(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_PAD0_SHIFT)) & QuadSPI_LUT_PAD0_MASK)
#define QuadSPI_LUT_INSTR0_MASK                  (0xFC00U)
#define QuadSPI_LUT_INSTR0_SHIFT                 (10U)
#define QuadSPI_LUT_INSTR0(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_INSTR0_SHIFT)) & QuadSPI_LUT_INSTR0_MASK)
#define QuadSPI_LUT_OPRND1_MASK                  (0xFF0000U)
#define QuadSPI_LUT_OPRND1_SHIFT                 (16U)
#define QuadSPI_LUT_OPRND1(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_OPRND1_SHIFT)) & QuadSPI_LUT_OPRND1_MASK)
#define QuadSPI_LUT_PAD1_MASK                    (0x3000000U)
#define QuadSPI_LUT_PAD1_SHIFT                   (24U)
#define QuadSPI_LUT_PAD1(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_PAD1_SHIFT)) & QuadSPI_LUT_PAD1_MASK)
#define QuadSPI_LUT_INSTR1_MASK                  (0xFC000000U)
#define QuadSPI_LUT_INSTR1_SHIFT                 (26U)
#define QuadSPI_LUT_INSTR1(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_INSTR1_SHIFT)) & QuadSPI_LUT_INSTR1_MASK)

/* The count of QuadSPI_LUT */
#define QuadSPI_LUT_COUNT                        (64U)


/*!
 * @}
 */ /* end of group QuadSPI_Register_Masks */


/* QuadSPI - Peripheral instance base addresses */
/** Peripheral QuadSPI base address */
#define QuadSPI_BASE                             (0x30BB0000u)
/** Peripheral QuadSPI base pointer */
#define QuadSPI                                  ((QuadSPI_Type *)QuadSPI_BASE)
/** Array initializer of QuadSPI peripheral base addresses */
#define QuadSPI_BASE_ADDRS                       { QuadSPI_BASE }
/** Array initializer of QuadSPI peripheral base pointers */
#define QuadSPI_BASE_PTRS                        { QuadSPI }
/** Interrupt vectors for the QuadSPI peripheral type */
#define QuadSPI_IRQS                             { QSPI_IRQn }

/*!
 * @}
 */ /* end of group QuadSPI_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- RDC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_Peripheral_Access_Layer RDC Peripheral Access Layer
 * @{
 */

/** RDC - Register Layout Typedef */
typedef struct {
  __I  uint32_t VIR;                               /**< Version Information, offset: 0x0 */
       uint8_t RESERVED_0[32];
  __IO uint32_t STAT;                              /**< Status, offset: 0x24 */
  __IO uint32_t INTCTRL;                           /**< Interrupt and Control, offset: 0x28 */
  __IO uint32_t INTSTAT;                           /**< Interrupt Status, offset: 0x2C */
       uint8_t RESERVED_1[464];
  __IO uint32_t MDA[27];                           /**< Master Domain Assignment, array offset: 0x200, array step: 0x4 */
       uint8_t RESERVED_2[404];
  __IO uint32_t PDAP[118];                         /**< Peripheral Domain Access Permissions, array offset: 0x400, array step: 0x4 */
       uint8_t RESERVED_3[552];
  struct {                                         /* offset: 0x800, array step: 0x10 */
    __IO uint32_t MRSA;                              /**< Memory Region Start Address, array offset: 0x800, array step: 0x10 */
    __IO uint32_t MREA;                              /**< Memory Region End Address, array offset: 0x804, array step: 0x10 */
    __IO uint32_t MRC;                               /**< Memory Region Control, array offset: 0x808, array step: 0x10 */
    __IO uint32_t MRVS;                              /**< Memory Region Violation Status, array offset: 0x80C, array step: 0x10 */
  } MR[52];
} RDC_Type;

/* ----------------------------------------------------------------------------
   -- RDC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_Register_Masks RDC Register Masks
 * @{
 */

/*! @name VIR - Version Information */
#define RDC_VIR_NDID_MASK                        (0xFU)
#define RDC_VIR_NDID_SHIFT                       (0U)
#define RDC_VIR_NDID(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NDID_SHIFT)) & RDC_VIR_NDID_MASK)
#define RDC_VIR_NMSTR_MASK                       (0xFF0U)
#define RDC_VIR_NMSTR_SHIFT                      (4U)
#define RDC_VIR_NMSTR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NMSTR_SHIFT)) & RDC_VIR_NMSTR_MASK)
#define RDC_VIR_NPER_MASK                        (0xFF000U)
#define RDC_VIR_NPER_SHIFT                       (12U)
#define RDC_VIR_NPER(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NPER_SHIFT)) & RDC_VIR_NPER_MASK)
#define RDC_VIR_NRGN_MASK                        (0xFF00000U)
#define RDC_VIR_NRGN_SHIFT                       (20U)
#define RDC_VIR_NRGN(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NRGN_SHIFT)) & RDC_VIR_NRGN_MASK)

/*! @name STAT - Status */
#define RDC_STAT_DID_MASK                        (0xFU)
#define RDC_STAT_DID_SHIFT                       (0U)
#define RDC_STAT_DID(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_STAT_DID_SHIFT)) & RDC_STAT_DID_MASK)
#define RDC_STAT_PDS_MASK                        (0x100U)
#define RDC_STAT_PDS_SHIFT                       (8U)
#define RDC_STAT_PDS(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_STAT_PDS_SHIFT)) & RDC_STAT_PDS_MASK)

/*! @name INTCTRL - Interrupt and Control */
#define RDC_INTCTRL_RCI_EN_MASK                  (0x1U)
#define RDC_INTCTRL_RCI_EN_SHIFT                 (0U)
#define RDC_INTCTRL_RCI_EN(x)                    (((uint32_t)(((uint32_t)(x)) << RDC_INTCTRL_RCI_EN_SHIFT)) & RDC_INTCTRL_RCI_EN_MASK)

/*! @name INTSTAT - Interrupt Status */
#define RDC_INTSTAT_INT_MASK                     (0x1U)
#define RDC_INTSTAT_INT_SHIFT                    (0U)
#define RDC_INTSTAT_INT(x)                       (((uint32_t)(((uint32_t)(x)) << RDC_INTSTAT_INT_SHIFT)) & RDC_INTSTAT_INT_MASK)

/*! @name MDA - Master Domain Assignment */
#define RDC_MDA_DID_MASK                         (0x3U)
#define RDC_MDA_DID_SHIFT                        (0U)
#define RDC_MDA_DID(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MDA_DID_SHIFT)) & RDC_MDA_DID_MASK)
#define RDC_MDA_LCK_MASK                         (0x80000000U)
#define RDC_MDA_LCK_SHIFT                        (31U)
#define RDC_MDA_LCK(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MDA_LCK_SHIFT)) & RDC_MDA_LCK_MASK)

/* The count of RDC_MDA */
#define RDC_MDA_COUNT                            (27U)

/*! @name PDAP - Peripheral Domain Access Permissions */
#define RDC_PDAP_D0W_MASK                        (0x1U)
#define RDC_PDAP_D0W_SHIFT                       (0U)
#define RDC_PDAP_D0W(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_PDAP_D0W_SHIFT)) & RDC_PDAP_D0W_MASK)
#define RDC_PDAP_D0R_MASK                        (0x2U)
#define RDC_PDAP_D0R_SHIFT                       (1U)
#define RDC_PDAP_D0R(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_PDAP_D0R_SHIFT)) & RDC_PDAP_D0R_MASK)
#define RDC_PDAP_D1W_MASK                        (0x4U)
#define RDC_PDAP_D1W_SHIFT                       (2U)
#define RDC_PDAP_D1W(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_PDAP_D1W_SHIFT)) & RDC_PDAP_D1W_MASK)
#define RDC_PDAP_D1R_MASK                        (0x8U)
#define RDC_PDAP_D1R_SHIFT                       (3U)
#define RDC_PDAP_D1R(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_PDAP_D1R_SHIFT)) & RDC_PDAP_D1R_MASK)
#define RDC_PDAP_D2W_MASK                        (0x10U)
#define RDC_PDAP_D2W_SHIFT                       (4U)
#define RDC_PDAP_D2W(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_PDAP_D2W_SHIFT)) & RDC_PDAP_D2W_MASK)
#define RDC_PDAP_D2R_MASK                        (0x20U)
#define RDC_PDAP_D2R_SHIFT                       (5U)
#define RDC_PDAP_D2R(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_PDAP_D2R_SHIFT)) & RDC_PDAP_D2R_MASK)
#define RDC_PDAP_D3W_MASK                        (0x40U)
#define RDC_PDAP_D3W_SHIFT                       (6U)
#define RDC_PDAP_D3W(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_PDAP_D3W_SHIFT)) & RDC_PDAP_D3W_MASK)
#define RDC_PDAP_D3R_MASK                        (0x80U)
#define RDC_PDAP_D3R_SHIFT                       (7U)
#define RDC_PDAP_D3R(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_PDAP_D3R_SHIFT)) & RDC_PDAP_D3R_MASK)
#define RDC_PDAP_SREQ_MASK                       (0x40000000U)
#define RDC_PDAP_SREQ_SHIFT                      (30U)
#define RDC_PDAP_SREQ(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_PDAP_SREQ_SHIFT)) & RDC_PDAP_SREQ_MASK)
#define RDC_PDAP_LCK_MASK                        (0x80000000U)
#define RDC_PDAP_LCK_SHIFT                       (31U)
#define RDC_PDAP_LCK(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_PDAP_LCK_SHIFT)) & RDC_PDAP_LCK_MASK)

/* The count of RDC_PDAP */
#define RDC_PDAP_COUNT                           (118U)

/*! @name MRSA - Memory Region Start Address */
#define RDC_MRSA_SADR_MASK                       (0xFFFFFF80U)
#define RDC_MRSA_SADR_SHIFT                      (7U)
#define RDC_MRSA_SADR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MRSA_SADR_SHIFT)) & RDC_MRSA_SADR_MASK)

/* The count of RDC_MRSA */
#define RDC_MRSA_COUNT                           (52U)

/*! @name MREA - Memory Region End Address */
#define RDC_MREA_EADR_MASK                       (0xFFFFFF80U)
#define RDC_MREA_EADR_SHIFT                      (7U)
#define RDC_MREA_EADR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MREA_EADR_SHIFT)) & RDC_MREA_EADR_MASK)

/* The count of RDC_MREA */
#define RDC_MREA_COUNT                           (52U)

/*! @name MRC - Memory Region Control */
#define RDC_MRC_D0W_MASK                         (0x1U)
#define RDC_MRC_D0W_SHIFT                        (0U)
#define RDC_MRC_D0W(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRC_D0W_SHIFT)) & RDC_MRC_D0W_MASK)
#define RDC_MRC_D0R_MASK                         (0x2U)
#define RDC_MRC_D0R_SHIFT                        (1U)
#define RDC_MRC_D0R(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRC_D0R_SHIFT)) & RDC_MRC_D0R_MASK)
#define RDC_MRC_D1W_MASK                         (0x4U)
#define RDC_MRC_D1W_SHIFT                        (2U)
#define RDC_MRC_D1W(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRC_D1W_SHIFT)) & RDC_MRC_D1W_MASK)
#define RDC_MRC_D1R_MASK                         (0x8U)
#define RDC_MRC_D1R_SHIFT                        (3U)
#define RDC_MRC_D1R(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRC_D1R_SHIFT)) & RDC_MRC_D1R_MASK)
#define RDC_MRC_D2W_MASK                         (0x10U)
#define RDC_MRC_D2W_SHIFT                        (4U)
#define RDC_MRC_D2W(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRC_D2W_SHIFT)) & RDC_MRC_D2W_MASK)
#define RDC_MRC_D2R_MASK                         (0x20U)
#define RDC_MRC_D2R_SHIFT                        (5U)
#define RDC_MRC_D2R(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRC_D2R_SHIFT)) & RDC_MRC_D2R_MASK)
#define RDC_MRC_D3W_MASK                         (0x40U)
#define RDC_MRC_D3W_SHIFT                        (6U)
#define RDC_MRC_D3W(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRC_D3W_SHIFT)) & RDC_MRC_D3W_MASK)
#define RDC_MRC_D3R_MASK                         (0x80U)
#define RDC_MRC_D3R_SHIFT                        (7U)
#define RDC_MRC_D3R(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRC_D3R_SHIFT)) & RDC_MRC_D3R_MASK)
#define RDC_MRC_ENA_MASK                         (0x40000000U)
#define RDC_MRC_ENA_SHIFT                        (30U)
#define RDC_MRC_ENA(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRC_ENA_SHIFT)) & RDC_MRC_ENA_MASK)
#define RDC_MRC_LCK_MASK                         (0x80000000U)
#define RDC_MRC_LCK_SHIFT                        (31U)
#define RDC_MRC_LCK(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRC_LCK_SHIFT)) & RDC_MRC_LCK_MASK)

/* The count of RDC_MRC */
#define RDC_MRC_COUNT                            (52U)

/*! @name MRVS - Memory Region Violation Status */
#define RDC_MRVS_VDID_MASK                       (0x3U)
#define RDC_MRVS_VDID_SHIFT                      (0U)
#define RDC_MRVS_VDID(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MRVS_VDID_SHIFT)) & RDC_MRVS_VDID_MASK)
#define RDC_MRVS_AD_MASK                         (0x10U)
#define RDC_MRVS_AD_SHIFT                        (4U)
#define RDC_MRVS_AD(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MRVS_AD_SHIFT)) & RDC_MRVS_AD_MASK)
#define RDC_MRVS_VADR_MASK                       (0xFFFFFFE0U)
#define RDC_MRVS_VADR_SHIFT                      (5U)
#define RDC_MRVS_VADR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MRVS_VADR_SHIFT)) & RDC_MRVS_VADR_MASK)

/* The count of RDC_MRVS */
#define RDC_MRVS_COUNT                           (52U)


/*!
 * @}
 */ /* end of group RDC_Register_Masks */


/* RDC - Peripheral instance base addresses */
/** Peripheral RDC base address */
#define RDC_BASE                                 (0x303D0000u)
/** Peripheral RDC base pointer */
#define RDC                                      ((RDC_Type *)RDC_BASE)
/** Array initializer of RDC peripheral base addresses */
#define RDC_BASE_ADDRS                           { RDC_BASE }
/** Array initializer of RDC peripheral base pointers */
#define RDC_BASE_PTRS                            { RDC }
/** Interrupt vectors for the RDC peripheral type */
#define RDC_IRQS                                 { RDC_IRQn }

/*!
 * @}
 */ /* end of group RDC_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- RDC_SEMAPHORE Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_SEMAPHORE_Peripheral_Access_Layer RDC_SEMAPHORE Peripheral Access Layer
 * @{
 */

/** RDC_SEMAPHORE - Register Layout Typedef */
typedef struct {
  __IO uint8_t GATE0;                              /**< Gate Register, offset: 0x0 */
  __IO uint8_t GATE1;                              /**< Gate Register, offset: 0x1 */
  __IO uint8_t GATE2;                              /**< Gate Register, offset: 0x2 */
  __IO uint8_t GATE3;                              /**< Gate Register, offset: 0x3 */
  __IO uint8_t GATE4;                              /**< Gate Register, offset: 0x4 */
  __IO uint8_t GATE5;                              /**< Gate Register, offset: 0x5 */
  __IO uint8_t GATE6;                              /**< Gate Register, offset: 0x6 */
  __IO uint8_t GATE7;                              /**< Gate Register, offset: 0x7 */
  __IO uint8_t GATE8;                              /**< Gate Register, offset: 0x8 */
  __IO uint8_t GATE9;                              /**< Gate Register, offset: 0x9 */
  __IO uint8_t GATE10;                             /**< Gate Register, offset: 0xA */
  __IO uint8_t GATE11;                             /**< Gate Register, offset: 0xB */
  __IO uint8_t GATE12;                             /**< Gate Register, offset: 0xC */
  __IO uint8_t GATE13;                             /**< Gate Register, offset: 0xD */
  __IO uint8_t GATE14;                             /**< Gate Register, offset: 0xE */
  __IO uint8_t GATE15;                             /**< Gate Register, offset: 0xF */
  __IO uint8_t GATE16;                             /**< Gate Register, offset: 0x10 */
  __IO uint8_t GATE17;                             /**< Gate Register, offset: 0x11 */
  __IO uint8_t GATE18;                             /**< Gate Register, offset: 0x12 */
  __IO uint8_t GATE19;                             /**< Gate Register, offset: 0x13 */
  __IO uint8_t GATE20;                             /**< Gate Register, offset: 0x14 */
  __IO uint8_t GATE21;                             /**< Gate Register, offset: 0x15 */
  __IO uint8_t GATE22;                             /**< Gate Register, offset: 0x16 */
  __IO uint8_t GATE23;                             /**< Gate Register, offset: 0x17 */
  __IO uint8_t GATE24;                             /**< Gate Register, offset: 0x18 */
  __IO uint8_t GATE25;                             /**< Gate Register, offset: 0x19 */
  __IO uint8_t GATE26;                             /**< Gate Register, offset: 0x1A */
  __IO uint8_t GATE27;                             /**< Gate Register, offset: 0x1B */
  __IO uint8_t GATE28;                             /**< Gate Register, offset: 0x1C */
  __IO uint8_t GATE29;                             /**< Gate Register, offset: 0x1D */
  __IO uint8_t GATE30;                             /**< Gate Register, offset: 0x1E */
  __IO uint8_t GATE31;                             /**< Gate Register, offset: 0x1F */
  __IO uint8_t GATE32;                             /**< Gate Register, offset: 0x20 */
  __IO uint8_t GATE33;                             /**< Gate Register, offset: 0x21 */
  __IO uint8_t GATE34;                             /**< Gate Register, offset: 0x22 */
  __IO uint8_t GATE35;                             /**< Gate Register, offset: 0x23 */
  __IO uint8_t GATE36;                             /**< Gate Register, offset: 0x24 */
  __IO uint8_t GATE37;                             /**< Gate Register, offset: 0x25 */
  __IO uint8_t GATE38;                             /**< Gate Register, offset: 0x26 */
  __IO uint8_t GATE39;                             /**< Gate Register, offset: 0x27 */
  __IO uint8_t GATE40;                             /**< Gate Register, offset: 0x28 */
  __IO uint8_t GATE41;                             /**< Gate Register, offset: 0x29 */
  __IO uint8_t GATE42;                             /**< Gate Register, offset: 0x2A */
  __IO uint8_t GATE43;                             /**< Gate Register, offset: 0x2B */
  __IO uint8_t GATE44;                             /**< Gate Register, offset: 0x2C */
  __IO uint8_t GATE45;                             /**< Gate Register, offset: 0x2D */
  __IO uint8_t GATE46;                             /**< Gate Register, offset: 0x2E */
  __IO uint8_t GATE47;                             /**< Gate Register, offset: 0x2F */
  __IO uint8_t GATE48;                             /**< Gate Register, offset: 0x30 */
  __IO uint8_t GATE49;                             /**< Gate Register, offset: 0x31 */
  __IO uint8_t GATE50;                             /**< Gate Register, offset: 0x32 */
  __IO uint8_t GATE51;                             /**< Gate Register, offset: 0x33 */
  __IO uint8_t GATE52;                             /**< Gate Register, offset: 0x34 */
  __IO uint8_t GATE53;                             /**< Gate Register, offset: 0x35 */
  __IO uint8_t GATE54;                             /**< Gate Register, offset: 0x36 */
  __IO uint8_t GATE55;                             /**< Gate Register, offset: 0x37 */
  __IO uint8_t GATE56;                             /**< Gate Register, offset: 0x38 */
  __IO uint8_t GATE57;                             /**< Gate Register, offset: 0x39 */
  __IO uint8_t GATE58;                             /**< Gate Register, offset: 0x3A */
  __IO uint8_t GATE59;                             /**< Gate Register, offset: 0x3B */
  __IO uint8_t GATE60;                             /**< Gate Register, offset: 0x3C */
  __IO uint8_t GATE61;                             /**< Gate Register, offset: 0x3D */
  __IO uint8_t GATE62;                             /**< Gate Register, offset: 0x3E */
  __IO uint8_t GATE63;                             /**< Gate Register, offset: 0x3F */
  union {                                          /* offset: 0x40 */
    __IO uint16_t RSTGT_R;                           /**< Reset Gate Read, offset: 0x40 */
    __IO uint16_t RSTGT_W;                           /**< Reset Gate Write, offset: 0x40 */
  };
} RDC_SEMAPHORE_Type;

/* ----------------------------------------------------------------------------
   -- RDC_SEMAPHORE Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_SEMAPHORE_Register_Masks RDC_SEMAPHORE Register Masks
 * @{
 */

/*! @name GATE0 - Gate Register */
#define RDC_SEMAPHORE_GATE0_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE0_GTFSM_SHIFT          (0U)
#define RDC_SEMAPHORE_GATE0_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE0_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE0_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE0_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE0_LDOM_SHIFT           (4U)
#define RDC_SEMAPHORE_GATE0_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE0_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE0_LDOM_MASK)

/*! @name GATE1 - Gate Register */
#define RDC_SEMAPHORE_GATE1_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE1_GTFSM_SHIFT          (0U)
#define RDC_SEMAPHORE_GATE1_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE1_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE1_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE1_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE1_LDOM_SHIFT           (4U)
#define RDC_SEMAPHORE_GATE1_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE1_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE1_LDOM_MASK)

/*! @name GATE2 - Gate Register */
#define RDC_SEMAPHORE_GATE2_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE2_GTFSM_SHIFT          (0U)
#define RDC_SEMAPHORE_GATE2_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE2_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE2_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE2_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE2_LDOM_SHIFT           (4U)
#define RDC_SEMAPHORE_GATE2_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE2_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE2_LDOM_MASK)

/*! @name GATE3 - Gate Register */
#define RDC_SEMAPHORE_GATE3_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE3_GTFSM_SHIFT          (0U)
#define RDC_SEMAPHORE_GATE3_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE3_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE3_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE3_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE3_LDOM_SHIFT           (4U)
#define RDC_SEMAPHORE_GATE3_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE3_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE3_LDOM_MASK)

/*! @name GATE4 - Gate Register */
#define RDC_SEMAPHORE_GATE4_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE4_GTFSM_SHIFT          (0U)
#define RDC_SEMAPHORE_GATE4_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE4_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE4_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE4_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE4_LDOM_SHIFT           (4U)
#define RDC_SEMAPHORE_GATE4_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE4_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE4_LDOM_MASK)

/*! @name GATE5 - Gate Register */
#define RDC_SEMAPHORE_GATE5_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE5_GTFSM_SHIFT          (0U)
#define RDC_SEMAPHORE_GATE5_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE5_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE5_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE5_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE5_LDOM_SHIFT           (4U)
#define RDC_SEMAPHORE_GATE5_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE5_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE5_LDOM_MASK)

/*! @name GATE6 - Gate Register */
#define RDC_SEMAPHORE_GATE6_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE6_GTFSM_SHIFT          (0U)
#define RDC_SEMAPHORE_GATE6_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE6_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE6_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE6_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE6_LDOM_SHIFT           (4U)
#define RDC_SEMAPHORE_GATE6_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE6_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE6_LDOM_MASK)

/*! @name GATE7 - Gate Register */
#define RDC_SEMAPHORE_GATE7_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE7_GTFSM_SHIFT          (0U)
#define RDC_SEMAPHORE_GATE7_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE7_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE7_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE7_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE7_LDOM_SHIFT           (4U)
#define RDC_SEMAPHORE_GATE7_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE7_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE7_LDOM_MASK)

/*! @name GATE8 - Gate Register */
#define RDC_SEMAPHORE_GATE8_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE8_GTFSM_SHIFT          (0U)
#define RDC_SEMAPHORE_GATE8_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE8_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE8_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE8_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE8_LDOM_SHIFT           (4U)
#define RDC_SEMAPHORE_GATE8_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE8_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE8_LDOM_MASK)

/*! @name GATE9 - Gate Register */
#define RDC_SEMAPHORE_GATE9_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE9_GTFSM_SHIFT          (0U)
#define RDC_SEMAPHORE_GATE9_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE9_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE9_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE9_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE9_LDOM_SHIFT           (4U)
#define RDC_SEMAPHORE_GATE9_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE9_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE9_LDOM_MASK)

/*! @name GATE10 - Gate Register */
#define RDC_SEMAPHORE_GATE10_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE10_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE10_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE10_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE10_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE10_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE10_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE10_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE10_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE10_LDOM_MASK)

/*! @name GATE11 - Gate Register */
#define RDC_SEMAPHORE_GATE11_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE11_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE11_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE11_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE11_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE11_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE11_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE11_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE11_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE11_LDOM_MASK)

/*! @name GATE12 - Gate Register */
#define RDC_SEMAPHORE_GATE12_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE12_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE12_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE12_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE12_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE12_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE12_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE12_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE12_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE12_LDOM_MASK)

/*! @name GATE13 - Gate Register */
#define RDC_SEMAPHORE_GATE13_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE13_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE13_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE13_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE13_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE13_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE13_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE13_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE13_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE13_LDOM_MASK)

/*! @name GATE14 - Gate Register */
#define RDC_SEMAPHORE_GATE14_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE14_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE14_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE14_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE14_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE14_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE14_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE14_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE14_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE14_LDOM_MASK)

/*! @name GATE15 - Gate Register */
#define RDC_SEMAPHORE_GATE15_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE15_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE15_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE15_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE15_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE15_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE15_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE15_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE15_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE15_LDOM_MASK)

/*! @name GATE16 - Gate Register */
#define RDC_SEMAPHORE_GATE16_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE16_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE16_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE16_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE16_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE16_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE16_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE16_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE16_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE16_LDOM_MASK)

/*! @name GATE17 - Gate Register */
#define RDC_SEMAPHORE_GATE17_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE17_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE17_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE17_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE17_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE17_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE17_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE17_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE17_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE17_LDOM_MASK)

/*! @name GATE18 - Gate Register */
#define RDC_SEMAPHORE_GATE18_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE18_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE18_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE18_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE18_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE18_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE18_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE18_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE18_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE18_LDOM_MASK)

/*! @name GATE19 - Gate Register */
#define RDC_SEMAPHORE_GATE19_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE19_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE19_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE19_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE19_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE19_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE19_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE19_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE19_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE19_LDOM_MASK)

/*! @name GATE20 - Gate Register */
#define RDC_SEMAPHORE_GATE20_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE20_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE20_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE20_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE20_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE20_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE20_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE20_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE20_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE20_LDOM_MASK)

/*! @name GATE21 - Gate Register */
#define RDC_SEMAPHORE_GATE21_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE21_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE21_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE21_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE21_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE21_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE21_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE21_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE21_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE21_LDOM_MASK)

/*! @name GATE22 - Gate Register */
#define RDC_SEMAPHORE_GATE22_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE22_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE22_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE22_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE22_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE22_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE22_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE22_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE22_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE22_LDOM_MASK)

/*! @name GATE23 - Gate Register */
#define RDC_SEMAPHORE_GATE23_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE23_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE23_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE23_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE23_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE23_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE23_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE23_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE23_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE23_LDOM_MASK)

/*! @name GATE24 - Gate Register */
#define RDC_SEMAPHORE_GATE24_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE24_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE24_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE24_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE24_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE24_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE24_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE24_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE24_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE24_LDOM_MASK)

/*! @name GATE25 - Gate Register */
#define RDC_SEMAPHORE_GATE25_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE25_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE25_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE25_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE25_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE25_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE25_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE25_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE25_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE25_LDOM_MASK)

/*! @name GATE26 - Gate Register */
#define RDC_SEMAPHORE_GATE26_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE26_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE26_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE26_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE26_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE26_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE26_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE26_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE26_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE26_LDOM_MASK)

/*! @name GATE27 - Gate Register */
#define RDC_SEMAPHORE_GATE27_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE27_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE27_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE27_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE27_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE27_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE27_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE27_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE27_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE27_LDOM_MASK)

/*! @name GATE28 - Gate Register */
#define RDC_SEMAPHORE_GATE28_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE28_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE28_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE28_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE28_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE28_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE28_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE28_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE28_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE28_LDOM_MASK)

/*! @name GATE29 - Gate Register */
#define RDC_SEMAPHORE_GATE29_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE29_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE29_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE29_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE29_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE29_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE29_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE29_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE29_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE29_LDOM_MASK)

/*! @name GATE30 - Gate Register */
#define RDC_SEMAPHORE_GATE30_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE30_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE30_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE30_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE30_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE30_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE30_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE30_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE30_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE30_LDOM_MASK)

/*! @name GATE31 - Gate Register */
#define RDC_SEMAPHORE_GATE31_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE31_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE31_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE31_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE31_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE31_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE31_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE31_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE31_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE31_LDOM_MASK)

/*! @name GATE32 - Gate Register */
#define RDC_SEMAPHORE_GATE32_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE32_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE32_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE32_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE32_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE32_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE32_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE32_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE32_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE32_LDOM_MASK)

/*! @name GATE33 - Gate Register */
#define RDC_SEMAPHORE_GATE33_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE33_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE33_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE33_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE33_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE33_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE33_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE33_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE33_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE33_LDOM_MASK)

/*! @name GATE34 - Gate Register */
#define RDC_SEMAPHORE_GATE34_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE34_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE34_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE34_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE34_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE34_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE34_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE34_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE34_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE34_LDOM_MASK)

/*! @name GATE35 - Gate Register */
#define RDC_SEMAPHORE_GATE35_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE35_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE35_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE35_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE35_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE35_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE35_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE35_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE35_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE35_LDOM_MASK)

/*! @name GATE36 - Gate Register */
#define RDC_SEMAPHORE_GATE36_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE36_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE36_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE36_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE36_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE36_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE36_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE36_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE36_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE36_LDOM_MASK)

/*! @name GATE37 - Gate Register */
#define RDC_SEMAPHORE_GATE37_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE37_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE37_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE37_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE37_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE37_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE37_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE37_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE37_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE37_LDOM_MASK)

/*! @name GATE38 - Gate Register */
#define RDC_SEMAPHORE_GATE38_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE38_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE38_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE38_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE38_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE38_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE38_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE38_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE38_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE38_LDOM_MASK)

/*! @name GATE39 - Gate Register */
#define RDC_SEMAPHORE_GATE39_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE39_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE39_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE39_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE39_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE39_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE39_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE39_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE39_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE39_LDOM_MASK)

/*! @name GATE40 - Gate Register */
#define RDC_SEMAPHORE_GATE40_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE40_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE40_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE40_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE40_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE40_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE40_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE40_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE40_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE40_LDOM_MASK)

/*! @name GATE41 - Gate Register */
#define RDC_SEMAPHORE_GATE41_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE41_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE41_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE41_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE41_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE41_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE41_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE41_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE41_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE41_LDOM_MASK)

/*! @name GATE42 - Gate Register */
#define RDC_SEMAPHORE_GATE42_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE42_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE42_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE42_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE42_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE42_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE42_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE42_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE42_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE42_LDOM_MASK)

/*! @name GATE43 - Gate Register */
#define RDC_SEMAPHORE_GATE43_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE43_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE43_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE43_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE43_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE43_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE43_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE43_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE43_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE43_LDOM_MASK)

/*! @name GATE44 - Gate Register */
#define RDC_SEMAPHORE_GATE44_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE44_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE44_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE44_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE44_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE44_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE44_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE44_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE44_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE44_LDOM_MASK)

/*! @name GATE45 - Gate Register */
#define RDC_SEMAPHORE_GATE45_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE45_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE45_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE45_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE45_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE45_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE45_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE45_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE45_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE45_LDOM_MASK)

/*! @name GATE46 - Gate Register */
#define RDC_SEMAPHORE_GATE46_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE46_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE46_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE46_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE46_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE46_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE46_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE46_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE46_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE46_LDOM_MASK)

/*! @name GATE47 - Gate Register */
#define RDC_SEMAPHORE_GATE47_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE47_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE47_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE47_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE47_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE47_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE47_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE47_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE47_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE47_LDOM_MASK)

/*! @name GATE48 - Gate Register */
#define RDC_SEMAPHORE_GATE48_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE48_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE48_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE48_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE48_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE48_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE48_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE48_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE48_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE48_LDOM_MASK)

/*! @name GATE49 - Gate Register */
#define RDC_SEMAPHORE_GATE49_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE49_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE49_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE49_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE49_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE49_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE49_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE49_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE49_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE49_LDOM_MASK)

/*! @name GATE50 - Gate Register */
#define RDC_SEMAPHORE_GATE50_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE50_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE50_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE50_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE50_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE50_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE50_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE50_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE50_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE50_LDOM_MASK)

/*! @name GATE51 - Gate Register */
#define RDC_SEMAPHORE_GATE51_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE51_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE51_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE51_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE51_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE51_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE51_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE51_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE51_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE51_LDOM_MASK)

/*! @name GATE52 - Gate Register */
#define RDC_SEMAPHORE_GATE52_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE52_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE52_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE52_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE52_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE52_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE52_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE52_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE52_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE52_LDOM_MASK)

/*! @name GATE53 - Gate Register */
#define RDC_SEMAPHORE_GATE53_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE53_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE53_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE53_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE53_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE53_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE53_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE53_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE53_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE53_LDOM_MASK)

/*! @name GATE54 - Gate Register */
#define RDC_SEMAPHORE_GATE54_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE54_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE54_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE54_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE54_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE54_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE54_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE54_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE54_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE54_LDOM_MASK)

/*! @name GATE55 - Gate Register */
#define RDC_SEMAPHORE_GATE55_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE55_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE55_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE55_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE55_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE55_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE55_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE55_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE55_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE55_LDOM_MASK)

/*! @name GATE56 - Gate Register */
#define RDC_SEMAPHORE_GATE56_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE56_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE56_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE56_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE56_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE56_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE56_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE56_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE56_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE56_LDOM_MASK)

/*! @name GATE57 - Gate Register */
#define RDC_SEMAPHORE_GATE57_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE57_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE57_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE57_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE57_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE57_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE57_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE57_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE57_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE57_LDOM_MASK)

/*! @name GATE58 - Gate Register */
#define RDC_SEMAPHORE_GATE58_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE58_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE58_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE58_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE58_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE58_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE58_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE58_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE58_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE58_LDOM_MASK)

/*! @name GATE59 - Gate Register */
#define RDC_SEMAPHORE_GATE59_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE59_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE59_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE59_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE59_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE59_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE59_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE59_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE59_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE59_LDOM_MASK)

/*! @name GATE60 - Gate Register */
#define RDC_SEMAPHORE_GATE60_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE60_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE60_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE60_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE60_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE60_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE60_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE60_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE60_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE60_LDOM_MASK)

/*! @name GATE61 - Gate Register */
#define RDC_SEMAPHORE_GATE61_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE61_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE61_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE61_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE61_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE61_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE61_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE61_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE61_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE61_LDOM_MASK)

/*! @name GATE62 - Gate Register */
#define RDC_SEMAPHORE_GATE62_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE62_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE62_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE62_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE62_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE62_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE62_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE62_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE62_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE62_LDOM_MASK)

/*! @name GATE63 - Gate Register */
#define RDC_SEMAPHORE_GATE63_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE63_GTFSM_SHIFT         (0U)
#define RDC_SEMAPHORE_GATE63_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE63_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE63_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE63_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE63_LDOM_SHIFT          (4U)
#define RDC_SEMAPHORE_GATE63_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE63_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE63_LDOM_MASK)

/*! @name RSTGT_R - Reset Gate Read */
#define RDC_SEMAPHORE_RSTGT_R_RSTGMS_MASK        (0xFU)
#define RDC_SEMAPHORE_RSTGT_R_RSTGMS_SHIFT       (0U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGMS(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_R_RSTGMS_SHIFT)) & RDC_SEMAPHORE_RSTGT_R_RSTGMS_MASK)
#define RDC_SEMAPHORE_RSTGT_R_RSTGSM_MASK        (0x30U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGSM_SHIFT       (4U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGSM(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_R_RSTGSM_SHIFT)) & RDC_SEMAPHORE_RSTGT_R_RSTGSM_MASK)
#define RDC_SEMAPHORE_RSTGT_R_RSTGTN_MASK        (0xFF00U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGTN_SHIFT       (8U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGTN(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_R_RSTGTN_SHIFT)) & RDC_SEMAPHORE_RSTGT_R_RSTGTN_MASK)

/*! @name RSTGT_W - Reset Gate Write */
#define RDC_SEMAPHORE_RSTGT_W_RSTGDP_MASK        (0xFFU)
#define RDC_SEMAPHORE_RSTGT_W_RSTGDP_SHIFT       (0U)
#define RDC_SEMAPHORE_RSTGT_W_RSTGDP(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_W_RSTGDP_SHIFT)) & RDC_SEMAPHORE_RSTGT_W_RSTGDP_MASK)
#define RDC_SEMAPHORE_RSTGT_W_RSTGTN_MASK        (0xFF00U)
#define RDC_SEMAPHORE_RSTGT_W_RSTGTN_SHIFT       (8U)
#define RDC_SEMAPHORE_RSTGT_W_RSTGTN(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_W_RSTGTN_SHIFT)) & RDC_SEMAPHORE_RSTGT_W_RSTGTN_MASK)


/*!
 * @}
 */ /* end of group RDC_SEMAPHORE_Register_Masks */


/* RDC_SEMAPHORE - Peripheral instance base addresses */
/** Peripheral RDC_SEMAPHORE1 base address */
#define RDC_SEMAPHORE1_BASE                      (0x303B0000u)
/** Peripheral RDC_SEMAPHORE1 base pointer */
#define RDC_SEMAPHORE1                           ((RDC_SEMAPHORE_Type *)RDC_SEMAPHORE1_BASE)
/** Peripheral RDC_SEMAPHORE2 base address */
#define RDC_SEMAPHORE2_BASE                      (0x303C0000u)
/** Peripheral RDC_SEMAPHORE2 base pointer */
#define RDC_SEMAPHORE2                           ((RDC_SEMAPHORE_Type *)RDC_SEMAPHORE2_BASE)
/** Array initializer of RDC_SEMAPHORE peripheral base addresses */
#define RDC_SEMAPHORE_BASE_ADDRS                 { 0u, RDC_SEMAPHORE1_BASE, RDC_SEMAPHORE2_BASE }
/** Array initializer of RDC_SEMAPHORE peripheral base pointers */
#define RDC_SEMAPHORE_BASE_PTRS                  { (RDC_SEMAPHORE_Type *)0u, RDC_SEMAPHORE1, RDC_SEMAPHORE2 }

/*!
 * @}
 */ /* end of group RDC_SEMAPHORE_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- ROMC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ROMC_Peripheral_Access_Layer ROMC Peripheral Access Layer
 * @{
 */

/** ROMC - Register Layout Typedef */
typedef struct {
       uint8_t RESERVED_0[212];
  __IO uint32_t ROMPATCHD[8];                      /**< ROMC Data Registers, array offset: 0xD4, array step: 0x4 */
  __IO uint32_t ROMPATCHCNTL;                      /**< ROMC Control Register, offset: 0xF4 */
       uint32_t ROMPATCHENH;                       /**< ROMC Enable Register High, offset: 0xF8 */
  __IO uint32_t ROMPATCHENL;                       /**< ROMC Enable Register Low, offset: 0xFC */
  __IO uint32_t ROMPATCHA[16];                     /**< ROMC Address Registers, array offset: 0x100, array step: 0x4 */
       uint8_t RESERVED_1[200];
  __IO uint32_t ROMPATCHSR;                        /**< ROMC Status Register, offset: 0x208 */
} ROMC_Type;

/* ----------------------------------------------------------------------------
   -- ROMC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ROMC_Register_Masks ROMC Register Masks
 * @{
 */

/*! @name ROMPATCHD - ROMC Data Registers */
#define ROMC_ROMPATCHD_DATAX_MASK                (0xFFFFFFFFU)
#define ROMC_ROMPATCHD_DATAX_SHIFT               (0U)
#define ROMC_ROMPATCHD_DATAX(x)                  (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHD_DATAX_SHIFT)) & ROMC_ROMPATCHD_DATAX_MASK)

/* The count of ROMC_ROMPATCHD */
#define ROMC_ROMPATCHD_COUNT                     (8U)

/*! @name ROMPATCHCNTL - ROMC Control Register */
#define ROMC_ROMPATCHCNTL_DATAFIX_MASK           (0xFFU)
#define ROMC_ROMPATCHCNTL_DATAFIX_SHIFT          (0U)
#define ROMC_ROMPATCHCNTL_DATAFIX(x)             (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHCNTL_DATAFIX_SHIFT)) & ROMC_ROMPATCHCNTL_DATAFIX_MASK)
#define ROMC_ROMPATCHCNTL_DIS_MASK               (0x20000000U)
#define ROMC_ROMPATCHCNTL_DIS_SHIFT              (29U)
#define ROMC_ROMPATCHCNTL_DIS(x)                 (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHCNTL_DIS_SHIFT)) & ROMC_ROMPATCHCNTL_DIS_MASK)

/*! @name ROMPATCHENL - ROMC Enable Register Low */
#define ROMC_ROMPATCHENL_ENABLE_MASK             (0xFFFFU)
#define ROMC_ROMPATCHENL_ENABLE_SHIFT            (0U)
#define ROMC_ROMPATCHENL_ENABLE(x)               (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHENL_ENABLE_SHIFT)) & ROMC_ROMPATCHENL_ENABLE_MASK)

/*! @name ROMPATCHA - ROMC Address Registers */
#define ROMC_ROMPATCHA_THUMBX_MASK               (0x1U)
#define ROMC_ROMPATCHA_THUMBX_SHIFT              (0U)
#define ROMC_ROMPATCHA_THUMBX(x)                 (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHA_THUMBX_SHIFT)) & ROMC_ROMPATCHA_THUMBX_MASK)
#define ROMC_ROMPATCHA_ADDRX_MASK                (0x7FFFFEU)
#define ROMC_ROMPATCHA_ADDRX_SHIFT               (1U)
#define ROMC_ROMPATCHA_ADDRX(x)                  (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHA_ADDRX_SHIFT)) & ROMC_ROMPATCHA_ADDRX_MASK)

/* The count of ROMC_ROMPATCHA */
#define ROMC_ROMPATCHA_COUNT                     (16U)

/*! @name ROMPATCHSR - ROMC Status Register */
#define ROMC_ROMPATCHSR_SOURCE_MASK              (0x3FU)
#define ROMC_ROMPATCHSR_SOURCE_SHIFT             (0U)
#define ROMC_ROMPATCHSR_SOURCE(x)                (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHSR_SOURCE_SHIFT)) & ROMC_ROMPATCHSR_SOURCE_MASK)
#define ROMC_ROMPATCHSR_SW_MASK                  (0x20000U)
#define ROMC_ROMPATCHSR_SW_SHIFT                 (17U)
#define ROMC_ROMPATCHSR_SW(x)                    (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHSR_SW_SHIFT)) & ROMC_ROMPATCHSR_SW_MASK)


/*!
 * @}
 */ /* end of group ROMC_Register_Masks */


/* ROMC - Peripheral instance base addresses */
/** Peripheral ROMC base address */
#define ROMC_BASE                                (0x30310000u)
/** Peripheral ROMC base pointer */
#define ROMC                                     ((ROMC_Type *)ROMC_BASE)
/** Array initializer of ROMC peripheral base addresses */
#define ROMC_BASE_ADDRS                          { ROMC_BASE }
/** Array initializer of ROMC peripheral base pointers */
#define ROMC_BASE_PTRS                           { ROMC }

/*!
 * @}
 */ /* end of group ROMC_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- SDMAARM Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDMAARM_Peripheral_Access_Layer SDMAARM Peripheral Access Layer
 * @{
 */

/** SDMAARM - Register Layout Typedef */
typedef struct {
  __IO uint32_t MC0PTR;                            /**< ARM platform Channel 0 Pointer, offset: 0x0 */
  __IO uint32_t INTR;                              /**< Channel Interrupts, offset: 0x4 */
  __IO uint32_t STOP_STAT;                         /**< Channel Stop/Channel Status, offset: 0x8 */
  __IO uint32_t HSTART;                            /**< Channel Start, offset: 0xC */
  __IO uint32_t EVTOVR;                            /**< Channel Event Override, offset: 0x10 */
  __IO uint32_t DSPOVR;                            /**< Channel BP Override, offset: 0x14 */
  __IO uint32_t HOSTOVR;                           /**< Channel ARM platform Override, offset: 0x18 */
  __IO uint32_t EVTPEND;                           /**< Channel Event Pending, offset: 0x1C */
       uint8_t RESERVED_0[4];
  __I  uint32_t RESET;                             /**< Reset Register, offset: 0x24 */
  __I  uint32_t EVTERR;                            /**< DMA Request Error Register, offset: 0x28 */
  __IO uint32_t INTRMASK;                          /**< Channel ARM platform Interrupt Mask, offset: 0x2C */
  __I  uint32_t PSW;                               /**< Schedule Status, offset: 0x30 */
  __I  uint32_t EVTERRDBG;                         /**< DMA Request Error Register, offset: 0x34 */
  __IO uint32_t CONFIG;                            /**< Configuration Register, offset: 0x38 */
  __IO uint32_t SDMA_LOCK;                         /**< SDMA LOCK, offset: 0x3C */
  __IO uint32_t ONCE_ENB;                          /**< OnCE Enable, offset: 0x40 */
  __IO uint32_t ONCE_DATA;                         /**< OnCE Data Register, offset: 0x44 */
  __IO uint32_t ONCE_INSTR;                        /**< OnCE Instruction Register, offset: 0x48 */
  __I  uint32_t ONCE_STAT;                         /**< OnCE Status Register, offset: 0x4C */
  __IO uint32_t ONCE_CMD;                          /**< OnCE Command Register, offset: 0x50 */
       uint8_t RESERVED_1[4];
  __IO uint32_t ILLINSTADDR;                       /**< Illegal Instruction Trap Address, offset: 0x58 */
  __IO uint32_t CHN0ADDR;                          /**< Channel 0 Boot Address, offset: 0x5C */
  __I  uint32_t EVT_MIRROR;                        /**< DMA Requests, offset: 0x60 */
  __I  uint32_t EVT_MIRROR2;                       /**< DMA Requests 2, offset: 0x64 */
       uint8_t RESERVED_2[8];
  __IO uint32_t XTRIG_CONF1;                       /**< Cross-Trigger Events Configuration Register 1, offset: 0x70 */
  __IO uint32_t XTRIG_CONF2;                       /**< Cross-Trigger Events Configuration Register 2, offset: 0x74 */
       uint8_t RESERVED_3[136];
  __IO uint32_t SDMA_CHNPRI[32];                   /**< Channel Priority Registers, array offset: 0x100, array step: 0x4 */
       uint8_t RESERVED_4[128];
  __IO uint32_t CHNENBL[48];                       /**< Channel Enable RAM, array offset: 0x200, array step: 0x4 */
} SDMAARM_Type;

/* ----------------------------------------------------------------------------
   -- SDMAARM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDMAARM_Register_Masks SDMAARM Register Masks
 * @{
 */

/*! @name MC0PTR - ARM platform Channel 0 Pointer */
#define SDMAARM_MC0PTR_MC0PTR_MASK               (0xFFFFFFFFU)
#define SDMAARM_MC0PTR_MC0PTR_SHIFT              (0U)
#define SDMAARM_MC0PTR_MC0PTR(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_MC0PTR_MC0PTR_SHIFT)) & SDMAARM_MC0PTR_MC0PTR_MASK)

/*! @name INTR - Channel Interrupts */
#define SDMAARM_INTR_HI_MASK                     (0xFFFFFFFFU)
#define SDMAARM_INTR_HI_SHIFT                    (0U)
#define SDMAARM_INTR_HI(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_INTR_HI_SHIFT)) & SDMAARM_INTR_HI_MASK)

/*! @name STOP_STAT - Channel Stop/Channel Status */
#define SDMAARM_STOP_STAT_HE_MASK                (0xFFFFFFFFU)
#define SDMAARM_STOP_STAT_HE_SHIFT               (0U)
#define SDMAARM_STOP_STAT_HE(x)                  (((uint32_t)(((uint32_t)(x)) << SDMAARM_STOP_STAT_HE_SHIFT)) & SDMAARM_STOP_STAT_HE_MASK)

/*! @name HSTART - Channel Start */
#define SDMAARM_HSTART_HSTART_HE_MASK            (0xFFFFFFFFU)
#define SDMAARM_HSTART_HSTART_HE_SHIFT           (0U)
#define SDMAARM_HSTART_HSTART_HE(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_HSTART_HSTART_HE_SHIFT)) & SDMAARM_HSTART_HSTART_HE_MASK)

/*! @name EVTOVR - Channel Event Override */
#define SDMAARM_EVTOVR_EO_MASK                   (0xFFFFFFFFU)
#define SDMAARM_EVTOVR_EO_SHIFT                  (0U)
#define SDMAARM_EVTOVR_EO(x)                     (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTOVR_EO_SHIFT)) & SDMAARM_EVTOVR_EO_MASK)

/*! @name DSPOVR - Channel BP Override */
#define SDMAARM_DSPOVR_DO_MASK                   (0xFFFFFFFFU)
#define SDMAARM_DSPOVR_DO_SHIFT                  (0U)
#define SDMAARM_DSPOVR_DO(x)                     (((uint32_t)(((uint32_t)(x)) << SDMAARM_DSPOVR_DO_SHIFT)) & SDMAARM_DSPOVR_DO_MASK)

/*! @name HOSTOVR - Channel ARM platform Override */
#define SDMAARM_HOSTOVR_HO_MASK                  (0xFFFFFFFFU)
#define SDMAARM_HOSTOVR_HO_SHIFT                 (0U)
#define SDMAARM_HOSTOVR_HO(x)                    (((uint32_t)(((uint32_t)(x)) << SDMAARM_HOSTOVR_HO_SHIFT)) & SDMAARM_HOSTOVR_HO_MASK)

/*! @name EVTPEND - Channel Event Pending */
#define SDMAARM_EVTPEND_EP_MASK                  (0xFFFFFFFFU)
#define SDMAARM_EVTPEND_EP_SHIFT                 (0U)
#define SDMAARM_EVTPEND_EP(x)                    (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTPEND_EP_SHIFT)) & SDMAARM_EVTPEND_EP_MASK)

/*! @name RESET - Reset Register */
#define SDMAARM_RESET_RESET_MASK                 (0x1U)
#define SDMAARM_RESET_RESET_SHIFT                (0U)
#define SDMAARM_RESET_RESET(x)                   (((uint32_t)(((uint32_t)(x)) << SDMAARM_RESET_RESET_SHIFT)) & SDMAARM_RESET_RESET_MASK)
#define SDMAARM_RESET_RESCHED_MASK               (0x2U)
#define SDMAARM_RESET_RESCHED_SHIFT              (1U)
#define SDMAARM_RESET_RESCHED(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_RESET_RESCHED_SHIFT)) & SDMAARM_RESET_RESCHED_MASK)

/*! @name EVTERR - DMA Request Error Register */
#define SDMAARM_EVTERR_CHNERR_MASK               (0xFFFFFFFFU)
#define SDMAARM_EVTERR_CHNERR_SHIFT              (0U)
#define SDMAARM_EVTERR_CHNERR(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTERR_CHNERR_SHIFT)) & SDMAARM_EVTERR_CHNERR_MASK)

/*! @name INTRMASK - Channel ARM platform Interrupt Mask */
#define SDMAARM_INTRMASK_HIMASK_MASK             (0xFFFFFFFFU)
#define SDMAARM_INTRMASK_HIMASK_SHIFT            (0U)
#define SDMAARM_INTRMASK_HIMASK(x)               (((uint32_t)(((uint32_t)(x)) << SDMAARM_INTRMASK_HIMASK_SHIFT)) & SDMAARM_INTRMASK_HIMASK_MASK)

/*! @name PSW - Schedule Status */
#define SDMAARM_PSW_CCR_MASK                     (0xFU)
#define SDMAARM_PSW_CCR_SHIFT                    (0U)
#define SDMAARM_PSW_CCR(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_CCR_SHIFT)) & SDMAARM_PSW_CCR_MASK)
#define SDMAARM_PSW_CCP_MASK                     (0xF0U)
#define SDMAARM_PSW_CCP_SHIFT                    (4U)
#define SDMAARM_PSW_CCP(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_CCP_SHIFT)) & SDMAARM_PSW_CCP_MASK)
#define SDMAARM_PSW_NCR_MASK                     (0x1F00U)
#define SDMAARM_PSW_NCR_SHIFT                    (8U)
#define SDMAARM_PSW_NCR(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_NCR_SHIFT)) & SDMAARM_PSW_NCR_MASK)
#define SDMAARM_PSW_NCP_MASK                     (0xE000U)
#define SDMAARM_PSW_NCP_SHIFT                    (13U)
#define SDMAARM_PSW_NCP(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_NCP_SHIFT)) & SDMAARM_PSW_NCP_MASK)

/*! @name EVTERRDBG - DMA Request Error Register */
#define SDMAARM_EVTERRDBG_CHNERR_MASK            (0xFFFFFFFFU)
#define SDMAARM_EVTERRDBG_CHNERR_SHIFT           (0U)
#define SDMAARM_EVTERRDBG_CHNERR(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTERRDBG_CHNERR_SHIFT)) & SDMAARM_EVTERRDBG_CHNERR_MASK)

/*! @name CONFIG - Configuration Register */
#define SDMAARM_CONFIG_CSM_MASK                  (0x3U)
#define SDMAARM_CONFIG_CSM_SHIFT                 (0U)
#define SDMAARM_CONFIG_CSM(x)                    (((uint32_t)(((uint32_t)(x)) << SDMAARM_CONFIG_CSM_SHIFT)) & SDMAARM_CONFIG_CSM_MASK)
#define SDMAARM_CONFIG_ACR_MASK                  (0x10U)
#define SDMAARM_CONFIG_ACR_SHIFT                 (4U)
#define SDMAARM_CONFIG_ACR(x)                    (((uint32_t)(((uint32_t)(x)) << SDMAARM_CONFIG_ACR_SHIFT)) & SDMAARM_CONFIG_ACR_MASK)
#define SDMAARM_CONFIG_RTDOBS_MASK               (0x800U)
#define SDMAARM_CONFIG_RTDOBS_SHIFT              (11U)
#define SDMAARM_CONFIG_RTDOBS(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_CONFIG_RTDOBS_SHIFT)) & SDMAARM_CONFIG_RTDOBS_MASK)
#define SDMAARM_CONFIG_DSPDMA_MASK               (0x1000U)
#define SDMAARM_CONFIG_DSPDMA_SHIFT              (12U)
#define SDMAARM_CONFIG_DSPDMA(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_CONFIG_DSPDMA_SHIFT)) & SDMAARM_CONFIG_DSPDMA_MASK)

/*! @name SDMA_LOCK - SDMA LOCK */
#define SDMAARM_SDMA_LOCK_LOCK_MASK              (0x1U)
#define SDMAARM_SDMA_LOCK_LOCK_SHIFT             (0U)
#define SDMAARM_SDMA_LOCK_LOCK(x)                (((uint32_t)(((uint32_t)(x)) << SDMAARM_SDMA_LOCK_LOCK_SHIFT)) & SDMAARM_SDMA_LOCK_LOCK_MASK)
#define SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR_MASK   (0x2U)
#define SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR_SHIFT  (1U)
#define SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR(x)     (((uint32_t)(((uint32_t)(x)) << SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR_SHIFT)) & SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR_MASK)

/*! @name ONCE_ENB - OnCE Enable */
#define SDMAARM_ONCE_ENB_ENB_MASK                (0x1U)
#define SDMAARM_ONCE_ENB_ENB_SHIFT               (0U)
#define SDMAARM_ONCE_ENB_ENB(x)                  (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_ENB_ENB_SHIFT)) & SDMAARM_ONCE_ENB_ENB_MASK)

/*! @name ONCE_DATA - OnCE Data Register */
#define SDMAARM_ONCE_DATA_DATA_MASK              (0xFFFFFFFFU)
#define SDMAARM_ONCE_DATA_DATA_SHIFT             (0U)
#define SDMAARM_ONCE_DATA_DATA(x)                (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_DATA_DATA_SHIFT)) & SDMAARM_ONCE_DATA_DATA_MASK)

/*! @name ONCE_INSTR - OnCE Instruction Register */
#define SDMAARM_ONCE_INSTR_INSTR_MASK            (0xFFFFU)
#define SDMAARM_ONCE_INSTR_INSTR_SHIFT           (0U)
#define SDMAARM_ONCE_INSTR_INSTR(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_INSTR_INSTR_SHIFT)) & SDMAARM_ONCE_INSTR_INSTR_MASK)

/*! @name ONCE_STAT - OnCE Status Register */
#define SDMAARM_ONCE_STAT_ECDR_MASK              (0x7U)
#define SDMAARM_ONCE_STAT_ECDR_SHIFT             (0U)
#define SDMAARM_ONCE_STAT_ECDR(x)                (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_ECDR_SHIFT)) & SDMAARM_ONCE_STAT_ECDR_MASK)
#define SDMAARM_ONCE_STAT_MST_MASK               (0x80U)
#define SDMAARM_ONCE_STAT_MST_SHIFT              (7U)
#define SDMAARM_ONCE_STAT_MST(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_MST_SHIFT)) & SDMAARM_ONCE_STAT_MST_MASK)
#define SDMAARM_ONCE_STAT_SWB_MASK               (0x100U)
#define SDMAARM_ONCE_STAT_SWB_SHIFT              (8U)
#define SDMAARM_ONCE_STAT_SWB(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_SWB_SHIFT)) & SDMAARM_ONCE_STAT_SWB_MASK)
#define SDMAARM_ONCE_STAT_ODR_MASK               (0x200U)
#define SDMAARM_ONCE_STAT_ODR_SHIFT              (9U)
#define SDMAARM_ONCE_STAT_ODR(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_ODR_SHIFT)) & SDMAARM_ONCE_STAT_ODR_MASK)
#define SDMAARM_ONCE_STAT_EDR_MASK               (0x400U)
#define SDMAARM_ONCE_STAT_EDR_SHIFT              (10U)
#define SDMAARM_ONCE_STAT_EDR(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_EDR_SHIFT)) & SDMAARM_ONCE_STAT_EDR_MASK)
#define SDMAARM_ONCE_STAT_RCV_MASK               (0x800U)
#define SDMAARM_ONCE_STAT_RCV_SHIFT              (11U)
#define SDMAARM_ONCE_STAT_RCV(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_RCV_SHIFT)) & SDMAARM_ONCE_STAT_RCV_MASK)
#define SDMAARM_ONCE_STAT_PST_MASK               (0xF000U)
#define SDMAARM_ONCE_STAT_PST_SHIFT              (12U)
#define SDMAARM_ONCE_STAT_PST(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_PST_SHIFT)) & SDMAARM_ONCE_STAT_PST_MASK)

/*! @name ONCE_CMD - OnCE Command Register */
#define SDMAARM_ONCE_CMD_CMD_MASK                (0xFU)
#define SDMAARM_ONCE_CMD_CMD_SHIFT               (0U)
#define SDMAARM_ONCE_CMD_CMD(x)                  (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_CMD_CMD_SHIFT)) & SDMAARM_ONCE_CMD_CMD_MASK)

/*! @name ILLINSTADDR - Illegal Instruction Trap Address */
#define SDMAARM_ILLINSTADDR_ILLINSTADDR_MASK     (0x3FFFU)
#define SDMAARM_ILLINSTADDR_ILLINSTADDR_SHIFT    (0U)
#define SDMAARM_ILLINSTADDR_ILLINSTADDR(x)       (((uint32_t)(((uint32_t)(x)) << SDMAARM_ILLINSTADDR_ILLINSTADDR_SHIFT)) & SDMAARM_ILLINSTADDR_ILLINSTADDR_MASK)

/*! @name CHN0ADDR - Channel 0 Boot Address */
#define SDMAARM_CHN0ADDR_CHN0ADDR_MASK           (0x3FFFU)
#define SDMAARM_CHN0ADDR_CHN0ADDR_SHIFT          (0U)
#define SDMAARM_CHN0ADDR_CHN0ADDR(x)             (((uint32_t)(((uint32_t)(x)) << SDMAARM_CHN0ADDR_CHN0ADDR_SHIFT)) & SDMAARM_CHN0ADDR_CHN0ADDR_MASK)
#define SDMAARM_CHN0ADDR_SMSZ_MASK               (0x4000U)
#define SDMAARM_CHN0ADDR_SMSZ_SHIFT              (14U)
#define SDMAARM_CHN0ADDR_SMSZ(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_CHN0ADDR_SMSZ_SHIFT)) & SDMAARM_CHN0ADDR_SMSZ_MASK)

/*! @name EVT_MIRROR - DMA Requests */
#define SDMAARM_EVT_MIRROR_EVENTS_MASK           (0xFFFFFFFFU)
#define SDMAARM_EVT_MIRROR_EVENTS_SHIFT          (0U)
#define SDMAARM_EVT_MIRROR_EVENTS(x)             (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVT_MIRROR_EVENTS_SHIFT)) & SDMAARM_EVT_MIRROR_EVENTS_MASK)

/*! @name EVT_MIRROR2 - DMA Requests 2 */
#define SDMAARM_EVT_MIRROR2_EVENTS_MASK          (0xFFFFU)
#define SDMAARM_EVT_MIRROR2_EVENTS_SHIFT         (0U)
#define SDMAARM_EVT_MIRROR2_EVENTS(x)            (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVT_MIRROR2_EVENTS_SHIFT)) & SDMAARM_EVT_MIRROR2_EVENTS_MASK)

/*! @name XTRIG_CONF1 - Cross-Trigger Events Configuration Register 1 */
#define SDMAARM_XTRIG_CONF1_NUM0_MASK            (0x3FU)
#define SDMAARM_XTRIG_CONF1_NUM0_SHIFT           (0U)
#define SDMAARM_XTRIG_CONF1_NUM0(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM0_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM0_MASK)
#define SDMAARM_XTRIG_CONF1_CNF0_MASK            (0x40U)
#define SDMAARM_XTRIG_CONF1_CNF0_SHIFT           (6U)
#define SDMAARM_XTRIG_CONF1_CNF0(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_CNF0_SHIFT)) & SDMAARM_XTRIG_CONF1_CNF0_MASK)
#define SDMAARM_XTRIG_CONF1_NUM1_MASK            (0x3F00U)
#define SDMAARM_XTRIG_CONF1_NUM1_SHIFT           (8U)
#define SDMAARM_XTRIG_CONF1_NUM1(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM1_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM1_MASK)
#define SDMAARM_XTRIG_CONF1_CNF1_MASK            (0x4000U)
#define SDMAARM_XTRIG_CONF1_CNF1_SHIFT           (14U)
#define SDMAARM_XTRIG_CONF1_CNF1(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_CNF1_SHIFT)) & SDMAARM_XTRIG_CONF1_CNF1_MASK)
#define SDMAARM_XTRIG_CONF1_NUM2_MASK            (0x3F0000U)
#define SDMAARM_XTRIG_CONF1_NUM2_SHIFT           (16U)
#define SDMAARM_XTRIG_CONF1_NUM2(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM2_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM2_MASK)
#define SDMAARM_XTRIG_CONF1_CNF2_MASK            (0x400000U)
#define SDMAARM_XTRIG_CONF1_CNF2_SHIFT           (22U)
#define SDMAARM_XTRIG_CONF1_CNF2(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_CNF2_SHIFT)) & SDMAARM_XTRIG_CONF1_CNF2_MASK)
#define SDMAARM_XTRIG_CONF1_NUM3_MASK            (0x3F000000U)
#define SDMAARM_XTRIG_CONF1_NUM3_SHIFT           (24U)
#define SDMAARM_XTRIG_CONF1_NUM3(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM3_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM3_MASK)
#define SDMAARM_XTRIG_CONF1_CNF3_MASK            (0x40000000U)
#define SDMAARM_XTRIG_CONF1_CNF3_SHIFT           (30U)
#define SDMAARM_XTRIG_CONF1_CNF3(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_CNF3_SHIFT)) & SDMAARM_XTRIG_CONF1_CNF3_MASK)

/*! @name XTRIG_CONF2 - Cross-Trigger Events Configuration Register 2 */
#define SDMAARM_XTRIG_CONF2_NUM4_MASK            (0x3FU)
#define SDMAARM_XTRIG_CONF2_NUM4_SHIFT           (0U)
#define SDMAARM_XTRIG_CONF2_NUM4(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM4_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM4_MASK)
#define SDMAARM_XTRIG_CONF2_CNF4_MASK            (0x40U)
#define SDMAARM_XTRIG_CONF2_CNF4_SHIFT           (6U)
#define SDMAARM_XTRIG_CONF2_CNF4(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_CNF4_SHIFT)) & SDMAARM_XTRIG_CONF2_CNF4_MASK)
#define SDMAARM_XTRIG_CONF2_NUM5_MASK            (0x3F00U)
#define SDMAARM_XTRIG_CONF2_NUM5_SHIFT           (8U)
#define SDMAARM_XTRIG_CONF2_NUM5(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM5_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM5_MASK)
#define SDMAARM_XTRIG_CONF2_CNF5_MASK            (0x4000U)
#define SDMAARM_XTRIG_CONF2_CNF5_SHIFT           (14U)
#define SDMAARM_XTRIG_CONF2_CNF5(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_CNF5_SHIFT)) & SDMAARM_XTRIG_CONF2_CNF5_MASK)
#define SDMAARM_XTRIG_CONF2_NUM6_MASK            (0x3F0000U)
#define SDMAARM_XTRIG_CONF2_NUM6_SHIFT           (16U)
#define SDMAARM_XTRIG_CONF2_NUM6(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM6_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM6_MASK)
#define SDMAARM_XTRIG_CONF2_CNF6_MASK            (0x400000U)
#define SDMAARM_XTRIG_CONF2_CNF6_SHIFT           (22U)
#define SDMAARM_XTRIG_CONF2_CNF6(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_CNF6_SHIFT)) & SDMAARM_XTRIG_CONF2_CNF6_MASK)
#define SDMAARM_XTRIG_CONF2_NUM7_MASK            (0x3F000000U)
#define SDMAARM_XTRIG_CONF2_NUM7_SHIFT           (24U)
#define SDMAARM_XTRIG_CONF2_NUM7(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM7_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM7_MASK)
#define SDMAARM_XTRIG_CONF2_CNF7_MASK            (0x40000000U)
#define SDMAARM_XTRIG_CONF2_CNF7_SHIFT           (30U)
#define SDMAARM_XTRIG_CONF2_CNF7(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_CNF7_SHIFT)) & SDMAARM_XTRIG_CONF2_CNF7_MASK)

/*! @name SDMA_CHNPRI - Channel Priority Registers */
#define SDMAARM_SDMA_CHNPRI_CHNPRIn_MASK         (0x7U)
#define SDMAARM_SDMA_CHNPRI_CHNPRIn_SHIFT        (0U)
#define SDMAARM_SDMA_CHNPRI_CHNPRIn(x)           (((uint32_t)(((uint32_t)(x)) << SDMAARM_SDMA_CHNPRI_CHNPRIn_SHIFT)) & SDMAARM_SDMA_CHNPRI_CHNPRIn_MASK)

/* The count of SDMAARM_SDMA_CHNPRI */
#define SDMAARM_SDMA_CHNPRI_COUNT                (32U)

/*! @name CHNENBL - Channel Enable RAM */
#define SDMAARM_CHNENBL_ENBLn_MASK               (0xFFFFFFFFU)
#define SDMAARM_CHNENBL_ENBLn_SHIFT              (0U)
#define SDMAARM_CHNENBL_ENBLn(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_CHNENBL_ENBLn_SHIFT)) & SDMAARM_CHNENBL_ENBLn_MASK)

/* The count of SDMAARM_CHNENBL */
#define SDMAARM_CHNENBL_COUNT                    (48U)


/*!
 * @}
 */ /* end of group SDMAARM_Register_Masks */


/* SDMAARM - Peripheral instance base addresses */
/** Peripheral SDMAARM1 base address */
#define SDMAARM1_BASE                            (0x30BD0000u)
/** Peripheral SDMAARM1 base pointer */
#define SDMAARM1                                 ((SDMAARM_Type *)SDMAARM1_BASE)
/** Peripheral SDMAARM2 base address */
#define SDMAARM2_BASE                            (0x302C0000u)
/** Peripheral SDMAARM2 base pointer */
#define SDMAARM2                                 ((SDMAARM_Type *)SDMAARM2_BASE)
/** Array initializer of SDMAARM peripheral base addresses */
#define SDMAARM_BASE_ADDRS                       { SDMAARM1_BASE, SDMAARM2_BASE }
/** Array initializer of SDMAARM peripheral base pointers */
#define SDMAARM_BASE_PTRS                        { SDMAARM1, SDMAARM2 }
/** Interrupt vectors for the SDMAARM peripheral type */
#define SDMAARM_IRQS                             { SDMA1_IRQn, SDMA2_IRQn }

/*!
 * @}
 */ /* end of group SDMAARM_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- SEMA4 Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA4_Peripheral_Access_Layer SEMA4 Peripheral Access Layer
 * @{
 */

/** SEMA4 - Register Layout Typedef */
typedef struct {
  __IO uint8_t Gate00;                             /**< Semaphores Gate 0 Register, offset: 0x0 */
  __IO uint8_t Gate01;                             /**< Semaphores Gate 1 Register, offset: 0x1 */
  __IO uint8_t Gate02;                             /**< Semaphores Gate 2 Register, offset: 0x2 */
  __IO uint8_t Gate03;                             /**< Semaphores Gate 3 Register, offset: 0x3 */
  __IO uint8_t Gate04;                             /**< Semaphores Gate 4 Register, offset: 0x4 */
  __IO uint8_t Gate05;                             /**< Semaphores Gate 5 Register, offset: 0x5 */
  __IO uint8_t Gate06;                             /**< Semaphores Gate 6 Register, offset: 0x6 */
  __IO uint8_t Gate07;                             /**< Semaphores Gate 7 Register, offset: 0x7 */
  __IO uint8_t Gate08;                             /**< Semaphores Gate 8 Register, offset: 0x8 */
  __IO uint8_t Gate09;                             /**< Semaphores Gate 9 Register, offset: 0x9 */
  __IO uint8_t Gate10;                             /**< Semaphores Gate 10 Register, offset: 0xA */
  __IO uint8_t Gate11;                             /**< Semaphores Gate 11 Register, offset: 0xB */
  __IO uint8_t Gate12;                             /**< Semaphores Gate 12 Register, offset: 0xC */
  __IO uint8_t Gate13;                             /**< Semaphores Gate 13 Register, offset: 0xD */
  __IO uint8_t Gate14;                             /**< Semaphores Gate 14 Register, offset: 0xE */
  __IO uint8_t Gate15;                             /**< Semaphores Gate 15 Register, offset: 0xF */
       uint8_t RESERVED_0[48];
  struct {                                         /* offset: 0x40, array step: 0x8 */
    __IO uint16_t CPINE;                             /**< Semaphores Processor n IRQ Notification Enable, array offset: 0x40, array step: 0x8 */
         uint8_t RESERVED_0[6];
  } CPINE[2];
       uint8_t RESERVED_1[48];
  struct {                                         /* offset: 0x80, array step: 0x8 */
    __IO uint16_t CPNTF;                             /**< Semaphores Processor n IRQ Notification, array offset: 0x80, array step: 0x8 */
         uint8_t RESERVED_0[6];
  } CPNTF[2];
       uint8_t RESERVED_2[112];
  __IO uint16_t RSTGT;                             /**< Semaphores (Secure) Reset Gate n, offset: 0x100 */
       uint8_t RESERVED_3[2];
  __IO uint16_t RSTNTF;                            /**< Semaphores (Secure) Reset IRQ Notification, offset: 0x104 */
} SEMA4_Type;

/* ----------------------------------------------------------------------------
   -- SEMA4 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA4_Register_Masks SEMA4 Register Masks
 * @{
 */

/*! @name Gate00 - Semaphores Gate 0 Register */
#define SEMA4_Gate00_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate00_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate00_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate00_GTFSM_SHIFT)) & SEMA4_Gate00_GTFSM_MASK)

/*! @name Gate01 - Semaphores Gate 1 Register */
#define SEMA4_Gate01_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate01_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate01_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate01_GTFSM_SHIFT)) & SEMA4_Gate01_GTFSM_MASK)

/*! @name Gate02 - Semaphores Gate 2 Register */
#define SEMA4_Gate02_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate02_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate02_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate02_GTFSM_SHIFT)) & SEMA4_Gate02_GTFSM_MASK)

/*! @name Gate03 - Semaphores Gate 3 Register */
#define SEMA4_Gate03_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate03_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate03_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate03_GTFSM_SHIFT)) & SEMA4_Gate03_GTFSM_MASK)

/*! @name Gate04 - Semaphores Gate 4 Register */
#define SEMA4_Gate04_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate04_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate04_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate04_GTFSM_SHIFT)) & SEMA4_Gate04_GTFSM_MASK)

/*! @name Gate05 - Semaphores Gate 5 Register */
#define SEMA4_Gate05_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate05_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate05_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate05_GTFSM_SHIFT)) & SEMA4_Gate05_GTFSM_MASK)

/*! @name Gate06 - Semaphores Gate 6 Register */
#define SEMA4_Gate06_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate06_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate06_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate06_GTFSM_SHIFT)) & SEMA4_Gate06_GTFSM_MASK)

/*! @name Gate07 - Semaphores Gate 7 Register */
#define SEMA4_Gate07_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate07_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate07_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate07_GTFSM_SHIFT)) & SEMA4_Gate07_GTFSM_MASK)

/*! @name Gate08 - Semaphores Gate 8 Register */
#define SEMA4_Gate08_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate08_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate08_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate08_GTFSM_SHIFT)) & SEMA4_Gate08_GTFSM_MASK)

/*! @name Gate09 - Semaphores Gate 9 Register */
#define SEMA4_Gate09_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate09_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate09_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate09_GTFSM_SHIFT)) & SEMA4_Gate09_GTFSM_MASK)

/*! @name Gate10 - Semaphores Gate 10 Register */
#define SEMA4_Gate10_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate10_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate10_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate10_GTFSM_SHIFT)) & SEMA4_Gate10_GTFSM_MASK)

/*! @name Gate11 - Semaphores Gate 11 Register */
#define SEMA4_Gate11_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate11_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate11_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate11_GTFSM_SHIFT)) & SEMA4_Gate11_GTFSM_MASK)

/*! @name Gate12 - Semaphores Gate 12 Register */
#define SEMA4_Gate12_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate12_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate12_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate12_GTFSM_SHIFT)) & SEMA4_Gate12_GTFSM_MASK)

/*! @name Gate13 - Semaphores Gate 13 Register */
#define SEMA4_Gate13_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate13_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate13_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate13_GTFSM_SHIFT)) & SEMA4_Gate13_GTFSM_MASK)

/*! @name Gate14 - Semaphores Gate 14 Register */
#define SEMA4_Gate14_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate14_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate14_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate14_GTFSM_SHIFT)) & SEMA4_Gate14_GTFSM_MASK)

/*! @name Gate15 - Semaphores Gate 15 Register */
#define SEMA4_Gate15_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate15_GTFSM_SHIFT                 (0U)
#define SEMA4_Gate15_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate15_GTFSM_SHIFT)) & SEMA4_Gate15_GTFSM_MASK)

/*! @name CPINE - Semaphores Processor n IRQ Notification Enable */
#define SEMA4_CPINE_INE7_MASK                    (0x1U)
#define SEMA4_CPINE_INE7_SHIFT                   (0U)
#define SEMA4_CPINE_INE7(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE7_SHIFT)) & SEMA4_CPINE_INE7_MASK)
#define SEMA4_CPINE_INE6_MASK                    (0x2U)
#define SEMA4_CPINE_INE6_SHIFT                   (1U)
#define SEMA4_CPINE_INE6(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE6_SHIFT)) & SEMA4_CPINE_INE6_MASK)
#define SEMA4_CPINE_INE5_MASK                    (0x4U)
#define SEMA4_CPINE_INE5_SHIFT                   (2U)
#define SEMA4_CPINE_INE5(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE5_SHIFT)) & SEMA4_CPINE_INE5_MASK)
#define SEMA4_CPINE_INE4_MASK                    (0x8U)
#define SEMA4_CPINE_INE4_SHIFT                   (3U)
#define SEMA4_CPINE_INE4(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE4_SHIFT)) & SEMA4_CPINE_INE4_MASK)
#define SEMA4_CPINE_INE3_MASK                    (0x10U)
#define SEMA4_CPINE_INE3_SHIFT                   (4U)
#define SEMA4_CPINE_INE3(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE3_SHIFT)) & SEMA4_CPINE_INE3_MASK)
#define SEMA4_CPINE_INE2_MASK                    (0x20U)
#define SEMA4_CPINE_INE2_SHIFT                   (5U)
#define SEMA4_CPINE_INE2(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE2_SHIFT)) & SEMA4_CPINE_INE2_MASK)
#define SEMA4_CPINE_INE1_MASK                    (0x40U)
#define SEMA4_CPINE_INE1_SHIFT                   (6U)
#define SEMA4_CPINE_INE1(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE1_SHIFT)) & SEMA4_CPINE_INE1_MASK)
#define SEMA4_CPINE_INE0_MASK                    (0x80U)
#define SEMA4_CPINE_INE0_SHIFT                   (7U)
#define SEMA4_CPINE_INE0(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE0_SHIFT)) & SEMA4_CPINE_INE0_MASK)
#define SEMA4_CPINE_INE15_MASK                   (0x100U)
#define SEMA4_CPINE_INE15_SHIFT                  (8U)
#define SEMA4_CPINE_INE15(x)                     (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE15_SHIFT)) & SEMA4_CPINE_INE15_MASK)
#define SEMA4_CPINE_INE14_MASK                   (0x200U)
#define SEMA4_CPINE_INE14_SHIFT                  (9U)
#define SEMA4_CPINE_INE14(x)                     (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE14_SHIFT)) & SEMA4_CPINE_INE14_MASK)
#define SEMA4_CPINE_INE13_MASK                   (0x400U)
#define SEMA4_CPINE_INE13_SHIFT                  (10U)
#define SEMA4_CPINE_INE13(x)                     (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE13_SHIFT)) & SEMA4_CPINE_INE13_MASK)
#define SEMA4_CPINE_INE12_MASK                   (0x800U)
#define SEMA4_CPINE_INE12_SHIFT                  (11U)
#define SEMA4_CPINE_INE12(x)                     (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE12_SHIFT)) & SEMA4_CPINE_INE12_MASK)
#define SEMA4_CPINE_INE11_MASK                   (0x1000U)
#define SEMA4_CPINE_INE11_SHIFT                  (12U)
#define SEMA4_CPINE_INE11(x)                     (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE11_SHIFT)) & SEMA4_CPINE_INE11_MASK)
#define SEMA4_CPINE_INE10_MASK                   (0x2000U)
#define SEMA4_CPINE_INE10_SHIFT                  (13U)
#define SEMA4_CPINE_INE10(x)                     (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE10_SHIFT)) & SEMA4_CPINE_INE10_MASK)
#define SEMA4_CPINE_INE9_MASK                    (0x4000U)
#define SEMA4_CPINE_INE9_SHIFT                   (14U)
#define SEMA4_CPINE_INE9(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE9_SHIFT)) & SEMA4_CPINE_INE9_MASK)
#define SEMA4_CPINE_INE8_MASK                    (0x8000U)
#define SEMA4_CPINE_INE8_SHIFT                   (15U)
#define SEMA4_CPINE_INE8(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPINE_INE8_SHIFT)) & SEMA4_CPINE_INE8_MASK)

/* The count of SEMA4_CPINE */
#define SEMA4_CPINE_COUNT                        (2U)

/*! @name CPNTF - Semaphores Processor n IRQ Notification */
#define SEMA4_CPNTF_GN7_MASK                     (0x1U)
#define SEMA4_CPNTF_GN7_SHIFT                    (0U)
#define SEMA4_CPNTF_GN7(x)                       (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN7_SHIFT)) & SEMA4_CPNTF_GN7_MASK)
#define SEMA4_CPNTF_GN6_MASK                     (0x2U)
#define SEMA4_CPNTF_GN6_SHIFT                    (1U)
#define SEMA4_CPNTF_GN6(x)                       (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN6_SHIFT)) & SEMA4_CPNTF_GN6_MASK)
#define SEMA4_CPNTF_GN5_MASK                     (0x4U)
#define SEMA4_CPNTF_GN5_SHIFT                    (2U)
#define SEMA4_CPNTF_GN5(x)                       (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN5_SHIFT)) & SEMA4_CPNTF_GN5_MASK)
#define SEMA4_CPNTF_GN4_MASK                     (0x8U)
#define SEMA4_CPNTF_GN4_SHIFT                    (3U)
#define SEMA4_CPNTF_GN4(x)                       (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN4_SHIFT)) & SEMA4_CPNTF_GN4_MASK)
#define SEMA4_CPNTF_GN3_MASK                     (0x10U)
#define SEMA4_CPNTF_GN3_SHIFT                    (4U)
#define SEMA4_CPNTF_GN3(x)                       (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN3_SHIFT)) & SEMA4_CPNTF_GN3_MASK)
#define SEMA4_CPNTF_GN2_MASK                     (0x20U)
#define SEMA4_CPNTF_GN2_SHIFT                    (5U)
#define SEMA4_CPNTF_GN2(x)                       (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN2_SHIFT)) & SEMA4_CPNTF_GN2_MASK)
#define SEMA4_CPNTF_GN1_MASK                     (0x40U)
#define SEMA4_CPNTF_GN1_SHIFT                    (6U)
#define SEMA4_CPNTF_GN1(x)                       (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN1_SHIFT)) & SEMA4_CPNTF_GN1_MASK)
#define SEMA4_CPNTF_GN0_MASK                     (0x80U)
#define SEMA4_CPNTF_GN0_SHIFT                    (7U)
#define SEMA4_CPNTF_GN0(x)                       (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN0_SHIFT)) & SEMA4_CPNTF_GN0_MASK)
#define SEMA4_CPNTF_GN15_MASK                    (0x100U)
#define SEMA4_CPNTF_GN15_SHIFT                   (8U)
#define SEMA4_CPNTF_GN15(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN15_SHIFT)) & SEMA4_CPNTF_GN15_MASK)
#define SEMA4_CPNTF_GN14_MASK                    (0x200U)
#define SEMA4_CPNTF_GN14_SHIFT                   (9U)
#define SEMA4_CPNTF_GN14(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN14_SHIFT)) & SEMA4_CPNTF_GN14_MASK)
#define SEMA4_CPNTF_GN13_MASK                    (0x400U)
#define SEMA4_CPNTF_GN13_SHIFT                   (10U)
#define SEMA4_CPNTF_GN13(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN13_SHIFT)) & SEMA4_CPNTF_GN13_MASK)
#define SEMA4_CPNTF_GN12_MASK                    (0x800U)
#define SEMA4_CPNTF_GN12_SHIFT                   (11U)
#define SEMA4_CPNTF_GN12(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN12_SHIFT)) & SEMA4_CPNTF_GN12_MASK)
#define SEMA4_CPNTF_GN11_MASK                    (0x1000U)
#define SEMA4_CPNTF_GN11_SHIFT                   (12U)
#define SEMA4_CPNTF_GN11(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN11_SHIFT)) & SEMA4_CPNTF_GN11_MASK)
#define SEMA4_CPNTF_GN10_MASK                    (0x2000U)
#define SEMA4_CPNTF_GN10_SHIFT                   (13U)
#define SEMA4_CPNTF_GN10(x)                      (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN10_SHIFT)) & SEMA4_CPNTF_GN10_MASK)
#define SEMA4_CPNTF_GN9_MASK                     (0x4000U)
#define SEMA4_CPNTF_GN9_SHIFT                    (14U)
#define SEMA4_CPNTF_GN9(x)                       (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN9_SHIFT)) & SEMA4_CPNTF_GN9_MASK)
#define SEMA4_CPNTF_GN8_MASK                     (0x8000U)
#define SEMA4_CPNTF_GN8_SHIFT                    (15U)
#define SEMA4_CPNTF_GN8(x)                       (((uint16_t)(((uint16_t)(x)) << SEMA4_CPNTF_GN8_SHIFT)) & SEMA4_CPNTF_GN8_MASK)

/* The count of SEMA4_CPNTF */
#define SEMA4_CPNTF_COUNT                        (2U)

/*! @name RSTGT - Semaphores (Secure) Reset Gate n */
#define SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_MASK    (0xFFU)
#define SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_SHIFT   (0U)
#define SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP(x)      (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_SHIFT)) & SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_MASK)
#define SEMA4_RSTGT_RSTGTN_MASK                  (0xFF00U)
#define SEMA4_RSTGT_RSTGTN_SHIFT                 (8U)
#define SEMA4_RSTGT_RSTGTN(x)                    (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTGT_RSTGTN_SHIFT)) & SEMA4_RSTGT_RSTGTN_MASK)

/*! @name RSTNTF - Semaphores (Secure) Reset IRQ Notification */
#define SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_MASK   (0xFFU)
#define SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_SHIFT  (0U)
#define SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP(x)     (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_SHIFT)) & SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_MASK)
#define SEMA4_RSTNTF_RSTNTN_MASK                 (0xFF00U)
#define SEMA4_RSTNTF_RSTNTN_SHIFT                (8U)
#define SEMA4_RSTNTF_RSTNTN(x)                   (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTNTF_RSTNTN_SHIFT)) & SEMA4_RSTNTF_RSTNTN_MASK)


/*!
 * @}
 */ /* end of group SEMA4_Register_Masks */


/* SEMA4 - Peripheral instance base addresses */
/** Peripheral SEMA4 base address */
#define SEMA4_BASE                               (0x30AC0000u)
/** Peripheral SEMA4 base pointer */
#define SEMA4                                    ((SEMA4_Type *)SEMA4_BASE)
/** Array initializer of SEMA4 peripheral base addresses */
#define SEMA4_BASE_ADDRS                         { SEMA4_BASE }
/** Array initializer of SEMA4 peripheral base pointers */
#define SEMA4_BASE_PTRS                          { SEMA4 }

/*!
 * @}
 */ /* end of group SEMA4_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- SNVS Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Peripheral_Access_Layer SNVS Peripheral Access Layer
 * @{
 */

/** SNVS - Register Layout Typedef */
typedef struct {
  __IO uint32_t HPLR;                              /**< SNVS_HP Lock register, offset: 0x0 */
  __IO uint32_t HPCOMR;                            /**< SNVS_HP Command register, offset: 0x4 */
  __IO uint32_t HPCR;                              /**< SNVS_HP Control register, offset: 0x8 */
       uint8_t RESERVED_0[8];
  __IO uint32_t HPSR;                              /**< SNVS_HP Status register, offset: 0x14 */
       uint8_t RESERVED_1[12];
  __IO uint32_t HPRTCMR;                           /**< SNVS_HP Real-Time Counter MSB Register, offset: 0x24 */
  __IO uint32_t HPRTCLR;                           /**< SNVS_HP Real-Time Counter LSB Register, offset: 0x28 */
  __IO uint32_t HPTAMR;                            /**< SNVS_HP Time Alarm MSB Register, offset: 0x2C */
  __IO uint32_t HPTALR;                            /**< SNVS_HP Time Alarm LSB Register, offset: 0x30 */
  __IO uint32_t LPLR;                              /**< SNVS_LP Lock Register, offset: 0x34 */
  __IO uint32_t LPCR;                              /**< SNVS_LP Control Register, offset: 0x38 */
       uint8_t RESERVED_2[16];
  __IO uint32_t LPSR;                              /**< SNVS_LP Status Register, offset: 0x4C */
       uint8_t RESERVED_3[12];
  __IO uint32_t LPSMCMR;                           /**< SNVS_LP Secure Monotonic Counter MSB Register, offset: 0x5C */
  __IO uint32_t LPSMCLR;                           /**< SNVS_LP Secure Monotonic Counter LSB Register, offset: 0x60 */
       uint8_t RESERVED_4[4];
  __IO uint32_t LPGPR;                             /**< SNVS_LP General-Purpose Register, offset: 0x68 */
       uint8_t RESERVED_5[2956];
  __I  uint32_t HPVIDR1;                           /**< SNVS_HP Version ID Register 1, offset: 0xBF8 */
  __I  uint32_t HPVIDR2;                           /**< SNVS_HP Version ID Register 2, offset: 0xBFC */
} SNVS_Type;

/* ----------------------------------------------------------------------------
   -- SNVS Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Register_Masks SNVS Register Masks
 * @{
 */

/*! @name HPLR - SNVS_HP Lock register */
#define SNVS_HPLR_MC_SL_MASK                     (0x10U)
#define SNVS_HPLR_MC_SL_SHIFT                    (4U)
#define SNVS_HPLR_MC_SL(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_HPLR_MC_SL_SHIFT)) & SNVS_HPLR_MC_SL_MASK)
#define SNVS_HPLR_GPR_SL_MASK                    (0x20U)
#define SNVS_HPLR_GPR_SL_SHIFT                   (5U)
#define SNVS_HPLR_GPR_SL(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPLR_GPR_SL_SHIFT)) & SNVS_HPLR_GPR_SL_MASK)

/*! @name HPCOMR - SNVS_HP Command register */
#define SNVS_HPCOMR_LP_SWR_MASK                  (0x10U)
#define SNVS_HPCOMR_LP_SWR_SHIFT                 (4U)
#define SNVS_HPCOMR_LP_SWR(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_HPCOMR_LP_SWR_SHIFT)) & SNVS_HPCOMR_LP_SWR_MASK)
#define SNVS_HPCOMR_LP_SWR_DIS_MASK              (0x20U)
#define SNVS_HPCOMR_LP_SWR_DIS_SHIFT             (5U)
#define SNVS_HPCOMR_LP_SWR_DIS(x)                (((uint32_t)(((uint32_t)(x)) << SNVS_HPCOMR_LP_SWR_DIS_SHIFT)) & SNVS_HPCOMR_LP_SWR_DIS_MASK)
#define SNVS_HPCOMR_NPSWA_EN_MASK                (0x80000000U)
#define SNVS_HPCOMR_NPSWA_EN_SHIFT               (31U)
#define SNVS_HPCOMR_NPSWA_EN(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPCOMR_NPSWA_EN_SHIFT)) & SNVS_HPCOMR_NPSWA_EN_MASK)

/*! @name HPCR - SNVS_HP Control register */
#define SNVS_HPCR_RTC_EN_MASK                    (0x1U)
#define SNVS_HPCR_RTC_EN_SHIFT                   (0U)
#define SNVS_HPCR_RTC_EN(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_RTC_EN_SHIFT)) & SNVS_HPCR_RTC_EN_MASK)
#define SNVS_HPCR_HPTA_EN_MASK                   (0x2U)
#define SNVS_HPCR_HPTA_EN_SHIFT                  (1U)
#define SNVS_HPCR_HPTA_EN(x)                     (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_HPTA_EN_SHIFT)) & SNVS_HPCR_HPTA_EN_MASK)
#define SNVS_HPCR_PI_EN_MASK                     (0x8U)
#define SNVS_HPCR_PI_EN_SHIFT                    (3U)
#define SNVS_HPCR_PI_EN(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_PI_EN_SHIFT)) & SNVS_HPCR_PI_EN_MASK)
#define SNVS_HPCR_PI_FREQ_MASK                   (0xF0U)
#define SNVS_HPCR_PI_FREQ_SHIFT                  (4U)
#define SNVS_HPCR_PI_FREQ(x)                     (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_PI_FREQ_SHIFT)) & SNVS_HPCR_PI_FREQ_MASK)
#define SNVS_HPCR_HPCALB_EN_MASK                 (0x100U)
#define SNVS_HPCR_HPCALB_EN_SHIFT                (8U)
#define SNVS_HPCR_HPCALB_EN(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_HPCALB_EN_SHIFT)) & SNVS_HPCR_HPCALB_EN_MASK)
#define SNVS_HPCR_HPCALB_VAL_MASK                (0x7C00U)
#define SNVS_HPCR_HPCALB_VAL_SHIFT               (10U)
#define SNVS_HPCR_HPCALB_VAL(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_HPCALB_VAL_SHIFT)) & SNVS_HPCR_HPCALB_VAL_MASK)
#define SNVS_HPCR_BTN_CONFIG_MASK                (0x7000000U)
#define SNVS_HPCR_BTN_CONFIG_SHIFT               (24U)
#define SNVS_HPCR_BTN_CONFIG(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_BTN_CONFIG_SHIFT)) & SNVS_HPCR_BTN_CONFIG_MASK)
#define SNVS_HPCR_BTN_MASK_MASK                  (0x8000000U)
#define SNVS_HPCR_BTN_MASK_SHIFT                 (27U)
#define SNVS_HPCR_BTN_MASK(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_BTN_MASK_SHIFT)) & SNVS_HPCR_BTN_MASK_MASK)

/*! @name HPSR - SNVS_HP Status register */
#define SNVS_HPSR_BTN_MASK                       (0x40U)
#define SNVS_HPSR_BTN_SHIFT                      (6U)
#define SNVS_HPSR_BTN(x)                         (((uint32_t)(((uint32_t)(x)) << SNVS_HPSR_BTN_SHIFT)) & SNVS_HPSR_BTN_MASK)
#define SNVS_HPSR_BI_MASK                        (0x80U)
#define SNVS_HPSR_BI_SHIFT                       (7U)
#define SNVS_HPSR_BI(x)                          (((uint32_t)(((uint32_t)(x)) << SNVS_HPSR_BI_SHIFT)) & SNVS_HPSR_BI_MASK)

/*! @name HPRTCMR - SNVS_HP Real-Time Counter MSB Register */
#define SNVS_HPRTCMR_RTC_MASK                    (0xFFFFFFFFU)
#define SNVS_HPRTCMR_RTC_SHIFT                   (0U)
#define SNVS_HPRTCMR_RTC(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPRTCMR_RTC_SHIFT)) & SNVS_HPRTCMR_RTC_MASK)

/*! @name HPRTCLR - SNVS_HP Real-Time Counter LSB Register */
#define SNVS_HPRTCLR_RTC_MASK                    (0xFFFFFFFFU)
#define SNVS_HPRTCLR_RTC_SHIFT                   (0U)
#define SNVS_HPRTCLR_RTC(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPRTCLR_RTC_SHIFT)) & SNVS_HPRTCLR_RTC_MASK)

/*! @name HPTAMR - SNVS_HP Time Alarm MSB Register */
#define SNVS_HPTAMR_HPTA_MASK                    (0x7FFFU)
#define SNVS_HPTAMR_HPTA_SHIFT                   (0U)
#define SNVS_HPTAMR_HPTA(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPTAMR_HPTA_SHIFT)) & SNVS_HPTAMR_HPTA_MASK)

/*! @name HPTALR - SNVS_HP Time Alarm LSB Register */
#define SNVS_HPTALR_HPTA_MASK                    (0xFFFFFFFFU)
#define SNVS_HPTALR_HPTA_SHIFT                   (0U)
#define SNVS_HPTALR_HPTA(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPTALR_HPTA_SHIFT)) & SNVS_HPTALR_HPTA_MASK)

/*! @name LPLR - SNVS_LP Lock Register */
#define SNVS_LPLR_MC_HL_MASK                     (0x10U)
#define SNVS_LPLR_MC_HL_SHIFT                    (4U)
#define SNVS_LPLR_MC_HL(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPLR_MC_HL_SHIFT)) & SNVS_LPLR_MC_HL_MASK)
#define SNVS_LPLR_GPR_HL_MASK                    (0x20U)
#define SNVS_LPLR_GPR_HL_SHIFT                   (5U)
#define SNVS_LPLR_GPR_HL(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_LPLR_GPR_HL_SHIFT)) & SNVS_LPLR_GPR_HL_MASK)

/*! @name LPCR - SNVS_LP Control Register */
#define SNVS_LPCR_MC_ENV_MASK                    (0x4U)
#define SNVS_LPCR_MC_ENV_SHIFT                   (2U)
#define SNVS_LPCR_MC_ENV(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_MC_ENV_SHIFT)) & SNVS_LPCR_MC_ENV_MASK)
#define SNVS_LPCR_DP_EN_MASK                     (0x20U)
#define SNVS_LPCR_DP_EN_SHIFT                    (5U)
#define SNVS_LPCR_DP_EN(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_DP_EN_SHIFT)) & SNVS_LPCR_DP_EN_MASK)
#define SNVS_LPCR_TOP_MASK                       (0x40U)
#define SNVS_LPCR_TOP_SHIFT                      (6U)
#define SNVS_LPCR_TOP(x)                         (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_TOP_SHIFT)) & SNVS_LPCR_TOP_MASK)
#define SNVS_LPCR_PWR_GLITCH_EN_MASK             (0x80U)
#define SNVS_LPCR_PWR_GLITCH_EN_SHIFT            (7U)
#define SNVS_LPCR_PWR_GLITCH_EN(x)               (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_PWR_GLITCH_EN_SHIFT)) & SNVS_LPCR_PWR_GLITCH_EN_MASK)
#define SNVS_LPCR_BTN_PRESS_TIME_MASK            (0x30000U)
#define SNVS_LPCR_BTN_PRESS_TIME_SHIFT           (16U)
#define SNVS_LPCR_BTN_PRESS_TIME(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_BTN_PRESS_TIME_SHIFT)) & SNVS_LPCR_BTN_PRESS_TIME_MASK)
#define SNVS_LPCR_DEBOUNCE_MASK                  (0xC0000U)
#define SNVS_LPCR_DEBOUNCE_SHIFT                 (18U)
#define SNVS_LPCR_DEBOUNCE(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_DEBOUNCE_SHIFT)) & SNVS_LPCR_DEBOUNCE_MASK)
#define SNVS_LPCR_ON_TIME_MASK                   (0x300000U)
#define SNVS_LPCR_ON_TIME_SHIFT                  (20U)
#define SNVS_LPCR_ON_TIME(x)                     (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_ON_TIME_SHIFT)) & SNVS_LPCR_ON_TIME_MASK)
#define SNVS_LPCR_PK_EN_MASK                     (0x400000U)
#define SNVS_LPCR_PK_EN_SHIFT                    (22U)
#define SNVS_LPCR_PK_EN(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_PK_EN_SHIFT)) & SNVS_LPCR_PK_EN_MASK)
#define SNVS_LPCR_PK_OVERRIDE_MASK               (0x800000U)
#define SNVS_LPCR_PK_OVERRIDE_SHIFT              (23U)
#define SNVS_LPCR_PK_OVERRIDE(x)                 (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_PK_OVERRIDE_SHIFT)) & SNVS_LPCR_PK_OVERRIDE_MASK)

/*! @name LPSR - SNVS_LP Status Register */
#define SNVS_LPSR_MCR_MASK                       (0x4U)
#define SNVS_LPSR_MCR_SHIFT                      (2U)
#define SNVS_LPSR_MCR(x)                         (((uint32_t)(((uint32_t)(x)) << SNVS_LPSR_MCR_SHIFT)) & SNVS_LPSR_MCR_MASK)
#define SNVS_LPSR_EO_MASK                        (0x20000U)
#define SNVS_LPSR_EO_SHIFT                       (17U)
#define SNVS_LPSR_EO(x)                          (((uint32_t)(((uint32_t)(x)) << SNVS_LPSR_EO_SHIFT)) & SNVS_LPSR_EO_MASK)
#define SNVS_LPSR_SPO_MASK                       (0x40000U)
#define SNVS_LPSR_SPO_SHIFT                      (18U)
#define SNVS_LPSR_SPO(x)                         (((uint32_t)(((uint32_t)(x)) << SNVS_LPSR_SPO_SHIFT)) & SNVS_LPSR_SPO_MASK)

/*! @name LPSMCMR - SNVS_LP Secure Monotonic Counter MSB Register */
#define SNVS_LPSMCMR_MON_COUNTER_MASK            (0xFFFFU)
#define SNVS_LPSMCMR_MON_COUNTER_SHIFT           (0U)
#define SNVS_LPSMCMR_MON_COUNTER(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCMR_MON_COUNTER_SHIFT)) & SNVS_LPSMCMR_MON_COUNTER_MASK)
#define SNVS_LPSMCMR_MC_ERA_BITS_MASK            (0xFFFF0000U)
#define SNVS_LPSMCMR_MC_ERA_BITS_SHIFT           (16U)
#define SNVS_LPSMCMR_MC_ERA_BITS(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCMR_MC_ERA_BITS_SHIFT)) & SNVS_LPSMCMR_MC_ERA_BITS_MASK)

/*! @name LPSMCLR - SNVS_LP Secure Monotonic Counter LSB Register */
#define SNVS_LPSMCLR_MON_COUNTER_MASK            (0xFFFFFFFFU)
#define SNVS_LPSMCLR_MON_COUNTER_SHIFT           (0U)
#define SNVS_LPSMCLR_MON_COUNTER(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCLR_MON_COUNTER_SHIFT)) & SNVS_LPSMCLR_MON_COUNTER_MASK)

/*! @name LPGPR - SNVS_LP General-Purpose Register */
#define SNVS_LPGPR_GPR_MASK                      (0xFFFFFFFFU)
#define SNVS_LPGPR_GPR_SHIFT                     (0U)
#define SNVS_LPGPR_GPR(x)                        (((uint32_t)(((uint32_t)(x)) << SNVS_LPGPR_GPR_SHIFT)) & SNVS_LPGPR_GPR_MASK)

/*! @name HPVIDR1 - SNVS_HP Version ID Register 1 */
#define SNVS_HPVIDR1_MINOR_REV_MASK              (0xFFU)
#define SNVS_HPVIDR1_MINOR_REV_SHIFT             (0U)
#define SNVS_HPVIDR1_MINOR_REV(x)                (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_MINOR_REV_SHIFT)) & SNVS_HPVIDR1_MINOR_REV_MASK)
#define SNVS_HPVIDR1_MAJOR_REV_MASK              (0xFF00U)
#define SNVS_HPVIDR1_MAJOR_REV_SHIFT             (8U)
#define SNVS_HPVIDR1_MAJOR_REV(x)                (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_MAJOR_REV_SHIFT)) & SNVS_HPVIDR1_MAJOR_REV_MASK)
#define SNVS_HPVIDR1_IP_ID_MASK                  (0xFFFF0000U)
#define SNVS_HPVIDR1_IP_ID_SHIFT                 (16U)
#define SNVS_HPVIDR1_IP_ID(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_IP_ID_SHIFT)) & SNVS_HPVIDR1_IP_ID_MASK)

/*! @name HPVIDR2 - SNVS_HP Version ID Register 2 */
#define SNVS_HPVIDR2_CONFIG_OPT_MASK             (0xFFU)
#define SNVS_HPVIDR2_CONFIG_OPT_SHIFT            (0U)
#define SNVS_HPVIDR2_CONFIG_OPT(x)               (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_CONFIG_OPT_SHIFT)) & SNVS_HPVIDR2_CONFIG_OPT_MASK)
#define SNVS_HPVIDR2_ECO_REV_MASK                (0xFF00U)
#define SNVS_HPVIDR2_ECO_REV_SHIFT               (8U)
#define SNVS_HPVIDR2_ECO_REV(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_ECO_REV_SHIFT)) & SNVS_HPVIDR2_ECO_REV_MASK)
#define SNVS_HPVIDR2_INTG_OPT_MASK               (0xFF0000U)
#define SNVS_HPVIDR2_INTG_OPT_SHIFT              (16U)
#define SNVS_HPVIDR2_INTG_OPT(x)                 (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_INTG_OPT_SHIFT)) & SNVS_HPVIDR2_INTG_OPT_MASK)
#define SNVS_HPVIDR2_IP_ERA_MASK                 (0xFF000000U)
#define SNVS_HPVIDR2_IP_ERA_SHIFT                (24U)
#define SNVS_HPVIDR2_IP_ERA(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_IP_ERA_SHIFT)) & SNVS_HPVIDR2_IP_ERA_MASK)


/*!
 * @}
 */ /* end of group SNVS_Register_Masks */


/* SNVS - Peripheral instance base addresses */
/** Peripheral SNVS base address */
#define SNVS_BASE                                (0x30370000u)
/** Peripheral SNVS base pointer */
#define SNVS                                     ((SNVS_Type *)SNVS_BASE)
/** Array initializer of SNVS peripheral base addresses */
#define SNVS_BASE_ADDRS                          { SNVS_BASE }
/** Array initializer of SNVS peripheral base pointers */
#define SNVS_BASE_PTRS                           { SNVS }
/** Interrupt vectors for the SNVS peripheral type */
#define SNVS_IRQS                                { SNVS_IRQn }
#define SNVS_CONSOLIDATED_IRQS                   { SNVS_Consolidated_IRQn }
#define SNVS_SECURITY_IRQS                       { SNVS_Security_IRQn }

/*!
 * @}
 */ /* end of group SNVS_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- SPBA Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPBA_Peripheral_Access_Layer SPBA Peripheral Access Layer
 * @{
 */

/** SPBA - Register Layout Typedef */
typedef struct {
  __IO uint32_t PRR[32];                           /**< Peripheral Rights Register, array offset: 0x0, array step: 0x4 */
} SPBA_Type;

/* ----------------------------------------------------------------------------
   -- SPBA Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPBA_Register_Masks SPBA Register Masks
 * @{
 */

/*! @name PRR - Peripheral Rights Register */
#define SPBA_PRR_RARA_MASK                       (0x1U)
#define SPBA_PRR_RARA_SHIFT                      (0U)
#define SPBA_PRR_RARA(x)                         (((uint32_t)(((uint32_t)(x)) << SPBA_PRR_RARA_SHIFT)) & SPBA_PRR_RARA_MASK)
#define SPBA_PRR_RARB_MASK                       (0x2U)
#define SPBA_PRR_RARB_SHIFT                      (1U)
#define SPBA_PRR_RARB(x)                         (((uint32_t)(((uint32_t)(x)) << SPBA_PRR_RARB_SHIFT)) & SPBA_PRR_RARB_MASK)
#define SPBA_PRR_RARC_MASK                       (0x4U)
#define SPBA_PRR_RARC_SHIFT                      (2U)
#define SPBA_PRR_RARC(x)                         (((uint32_t)(((uint32_t)(x)) << SPBA_PRR_RARC_SHIFT)) & SPBA_PRR_RARC_MASK)
#define SPBA_PRR_ROI_MASK                        (0x30000U)
#define SPBA_PRR_ROI_SHIFT                       (16U)
#define SPBA_PRR_ROI(x)                          (((uint32_t)(((uint32_t)(x)) << SPBA_PRR_ROI_SHIFT)) & SPBA_PRR_ROI_MASK)
#define SPBA_PRR_RMO_MASK                        (0xC0000000U)
#define SPBA_PRR_RMO_SHIFT                       (30U)
#define SPBA_PRR_RMO(x)                          (((uint32_t)(((uint32_t)(x)) << SPBA_PRR_RMO_SHIFT)) & SPBA_PRR_RMO_MASK)

/* The count of SPBA_PRR */
#define SPBA_PRR_COUNT                           (32U)


/*!
 * @}
 */ /* end of group SPBA_Register_Masks */


/* SPBA - Peripheral instance base addresses */
/** Peripheral SPBA1 base address */
#define SPBA1_BASE                               (0x308F0000u)
/** Peripheral SPBA1 base pointer */
#define SPBA1                                    ((SPBA_Type *)SPBA1_BASE)
/** Peripheral SPBA2 base address */
#define SPBA2_BASE                               (0x300F0000u)
/** Peripheral SPBA2 base pointer */
#define SPBA2                                    ((SPBA_Type *)SPBA2_BASE)
/** Array initializer of SPBA peripheral base addresses */
#define SPBA_BASE_ADDRS                          { SPBA1_BASE, SPBA2_BASE }
/** Array initializer of SPBA peripheral base pointers */
#define SPBA_BASE_PTRS                           { SPBA1, SPBA2 }

/*!
 * @}
 */ /* end of group SPBA_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- SPDIF Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Peripheral_Access_Layer SPDIF Peripheral Access Layer
 * @{
 */

/** SPDIF - Register Layout Typedef */
typedef struct {
  __IO uint32_t SCR;                               /**< SPDIF Configuration Register, offset: 0x0 */
  __IO uint32_t SRCD;                              /**< CDText Control Register, offset: 0x4 */
  __IO uint32_t SRPC;                              /**< PhaseConfig Register, offset: 0x8 */
  __IO uint32_t SIE;                               /**< InterruptEn Register, offset: 0xC */
  union {                                          /* offset: 0x10 */
    __O  uint32_t SIC;                               /**< InterruptClear Register, offset: 0x10 */
    __I  uint32_t SIS;                               /**< InterruptStat Register, offset: 0x10 */
  };
  __I  uint32_t SRL;                               /**< SPDIFRxLeft Register, offset: 0x14 */
  __I  uint32_t SRR;                               /**< SPDIFRxRight Register, offset: 0x18 */
  __I  uint32_t SRCSH;                             /**< SPDIFRxCChannel_h Register, offset: 0x1C */
  __I  uint32_t SRCSL;                             /**< SPDIFRxCChannel_l Register, offset: 0x20 */
  __I  uint32_t SRU;                               /**< UchannelRx Register, offset: 0x24 */
  __I  uint32_t SRQ;                               /**< QchannelRx Register, offset: 0x28 */
  __O  uint32_t STL;                               /**< SPDIFTxLeft Register, offset: 0x2C */
  __O  uint32_t STR;                               /**< SPDIFTxRight Register, offset: 0x30 */
  __IO uint32_t STCSCH;                            /**< SPDIFTxCChannelCons_h Register, offset: 0x34 */
  __IO uint32_t STCSCL;                            /**< SPDIFTxCChannelCons_l Register, offset: 0x38 */
       uint8_t RESERVED_0[8];
  __I  uint32_t SRFM;                              /**< FreqMeas Register, offset: 0x44 */
       uint8_t RESERVED_1[8];
  __IO uint32_t STC;                               /**< SPDIFTxClk Register, offset: 0x50 */
} SPDIF_Type;

/* ----------------------------------------------------------------------------
   -- SPDIF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Register_Masks SPDIF Register Masks
 * @{
 */

/*! @name SCR - SPDIF Configuration Register */
#define SPDIF_SCR_USRC_SEL_MASK                  (0x3U)
#define SPDIF_SCR_USRC_SEL_SHIFT                 (0U)
#define SPDIF_SCR_USRC_SEL(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_USRC_SEL_SHIFT)) & SPDIF_SCR_USRC_SEL_MASK)
#define SPDIF_SCR_TXSEL_MASK                     (0x1CU)
#define SPDIF_SCR_TXSEL_SHIFT                    (2U)
#define SPDIF_SCR_TXSEL(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TXSEL_SHIFT)) & SPDIF_SCR_TXSEL_MASK)
#define SPDIF_SCR_VALCTRL_MASK                   (0x20U)
#define SPDIF_SCR_VALCTRL_SHIFT                  (5U)
#define SPDIF_SCR_VALCTRL(x)                     (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_VALCTRL_SHIFT)) & SPDIF_SCR_VALCTRL_MASK)
#define SPDIF_SCR_DMA_TX_EN_MASK                 (0x100U)
#define SPDIF_SCR_DMA_TX_EN_SHIFT                (8U)
#define SPDIF_SCR_DMA_TX_EN(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_DMA_TX_EN_SHIFT)) & SPDIF_SCR_DMA_TX_EN_MASK)
#define SPDIF_SCR_DMA_RX_EN_MASK                 (0x200U)
#define SPDIF_SCR_DMA_RX_EN_SHIFT                (9U)
#define SPDIF_SCR_DMA_RX_EN(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_DMA_RX_EN_SHIFT)) & SPDIF_SCR_DMA_RX_EN_MASK)
#define SPDIF_SCR_TXFIFO_CTRL_MASK               (0xC00U)
#define SPDIF_SCR_TXFIFO_CTRL_SHIFT              (10U)
#define SPDIF_SCR_TXFIFO_CTRL(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TXFIFO_CTRL_SHIFT)) & SPDIF_SCR_TXFIFO_CTRL_MASK)
#define SPDIF_SCR_SOFT_RESET_MASK                (0x1000U)
#define SPDIF_SCR_SOFT_RESET_SHIFT               (12U)
#define SPDIF_SCR_SOFT_RESET(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_SOFT_RESET_SHIFT)) & SPDIF_SCR_SOFT_RESET_MASK)
#define SPDIF_SCR_LOW_POWER_MASK                 (0x2000U)
#define SPDIF_SCR_LOW_POWER_SHIFT                (13U)
#define SPDIF_SCR_LOW_POWER(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_LOW_POWER_SHIFT)) & SPDIF_SCR_LOW_POWER_MASK)
#define SPDIF_SCR_TXFIFOEMPTY_SEL_MASK           (0x18000U)
#define SPDIF_SCR_TXFIFOEMPTY_SEL_SHIFT          (15U)
#define SPDIF_SCR_TXFIFOEMPTY_SEL(x)             (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TXFIFOEMPTY_SEL_SHIFT)) & SPDIF_SCR_TXFIFOEMPTY_SEL_MASK)
#define SPDIF_SCR_TXAUTOSYNC_MASK                (0x20000U)
#define SPDIF_SCR_TXAUTOSYNC_SHIFT               (17U)
#define SPDIF_SCR_TXAUTOSYNC(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TXAUTOSYNC_SHIFT)) & SPDIF_SCR_TXAUTOSYNC_MASK)
#define SPDIF_SCR_RXAUTOSYNC_MASK                (0x40000U)
#define SPDIF_SCR_RXAUTOSYNC_SHIFT               (18U)
#define SPDIF_SCR_RXAUTOSYNC(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_RXAUTOSYNC_SHIFT)) & SPDIF_SCR_RXAUTOSYNC_MASK)
#define SPDIF_SCR_RXFIFOFULL_SEL_MASK            (0x180000U)
#define SPDIF_SCR_RXFIFOFULL_SEL_SHIFT           (19U)
#define SPDIF_SCR_RXFIFOFULL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_RXFIFOFULL_SEL_SHIFT)) & SPDIF_SCR_RXFIFOFULL_SEL_MASK)
#define SPDIF_SCR_RXFIFO_RST_MASK                (0x200000U)
#define SPDIF_SCR_RXFIFO_RST_SHIFT               (21U)
#define SPDIF_SCR_RXFIFO_RST(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_RXFIFO_RST_SHIFT)) & SPDIF_SCR_RXFIFO_RST_MASK)
#define SPDIF_SCR_RXFIFO_OFF_ON_MASK             (0x400000U)
#define SPDIF_SCR_RXFIFO_OFF_ON_SHIFT            (22U)
#define SPDIF_SCR_RXFIFO_OFF_ON(x)               (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_RXFIFO_OFF_ON_SHIFT)) & SPDIF_SCR_RXFIFO_OFF_ON_MASK)
#define SPDIF_SCR_RXFIFO_CTRL_MASK               (0x800000U)
#define SPDIF_SCR_RXFIFO_CTRL_SHIFT              (23U)
#define SPDIF_SCR_RXFIFO_CTRL(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_RXFIFO_CTRL_SHIFT)) & SPDIF_SCR_RXFIFO_CTRL_MASK)

/*! @name SRCD - CDText Control Register */
#define SPDIF_SRCD_USYNCMODE_MASK                (0x2U)
#define SPDIF_SRCD_USYNCMODE_SHIFT               (1U)
#define SPDIF_SRCD_USYNCMODE(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRCD_USYNCMODE_SHIFT)) & SPDIF_SRCD_USYNCMODE_MASK)

/*! @name SRPC - PhaseConfig Register */
#define SPDIF_SRPC_GAINSEL_MASK                  (0x38U)
#define SPDIF_SRPC_GAINSEL_SHIFT                 (3U)
#define SPDIF_SRPC_GAINSEL(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SRPC_GAINSEL_SHIFT)) & SPDIF_SRPC_GAINSEL_MASK)
#define SPDIF_SRPC_LOCK_MASK                     (0x40U)
#define SPDIF_SRPC_LOCK_SHIFT                    (6U)
#define SPDIF_SRPC_LOCK(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SRPC_LOCK_SHIFT)) & SPDIF_SRPC_LOCK_MASK)
#define SPDIF_SRPC_CLKSRC_SEL_MASK               (0x780U)
#define SPDIF_SRPC_CLKSRC_SEL_SHIFT              (7U)
#define SPDIF_SRPC_CLKSRC_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SRPC_CLKSRC_SEL_SHIFT)) & SPDIF_SRPC_CLKSRC_SEL_MASK)

/*! @name SIE - InterruptEn Register */
#define SPDIF_SIE_RXFIFOFUL_MASK                 (0x1U)
#define SPDIF_SIE_RXFIFOFUL_SHIFT                (0U)
#define SPDIF_SIE_RXFIFOFUL(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_RXFIFOFUL_SHIFT)) & SPDIF_SIE_RXFIFOFUL_MASK)
#define SPDIF_SIE_TXEM_MASK                      (0x2U)
#define SPDIF_SIE_TXEM_SHIFT                     (1U)
#define SPDIF_SIE_TXEM(x)                        (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_TXEM_SHIFT)) & SPDIF_SIE_TXEM_MASK)
#define SPDIF_SIE_LOCKLOSS_MASK                  (0x4U)
#define SPDIF_SIE_LOCKLOSS_SHIFT                 (2U)
#define SPDIF_SIE_LOCKLOSS(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_LOCKLOSS_SHIFT)) & SPDIF_SIE_LOCKLOSS_MASK)
#define SPDIF_SIE_RXFIFORESYN_MASK               (0x8U)
#define SPDIF_SIE_RXFIFORESYN_SHIFT              (3U)
#define SPDIF_SIE_RXFIFORESYN(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_RXFIFORESYN_SHIFT)) & SPDIF_SIE_RXFIFORESYN_MASK)
#define SPDIF_SIE_RXFIFOUNOV_MASK                (0x10U)
#define SPDIF_SIE_RXFIFOUNOV_SHIFT               (4U)
#define SPDIF_SIE_RXFIFOUNOV(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_RXFIFOUNOV_SHIFT)) & SPDIF_SIE_RXFIFOUNOV_MASK)
#define SPDIF_SIE_UQERR_MASK                     (0x20U)
#define SPDIF_SIE_UQERR_SHIFT                    (5U)
#define SPDIF_SIE_UQERR(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_UQERR_SHIFT)) & SPDIF_SIE_UQERR_MASK)
#define SPDIF_SIE_UQSYNC_MASK                    (0x40U)
#define SPDIF_SIE_UQSYNC_SHIFT                   (6U)
#define SPDIF_SIE_UQSYNC(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_UQSYNC_SHIFT)) & SPDIF_SIE_UQSYNC_MASK)
#define SPDIF_SIE_QRXOV_MASK                     (0x80U)
#define SPDIF_SIE_QRXOV_SHIFT                    (7U)
#define SPDIF_SIE_QRXOV(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_QRXOV_SHIFT)) & SPDIF_SIE_QRXOV_MASK)
#define SPDIF_SIE_QRXFUL_MASK                    (0x100U)
#define SPDIF_SIE_QRXFUL_SHIFT                   (8U)
#define SPDIF_SIE_QRXFUL(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_QRXFUL_SHIFT)) & SPDIF_SIE_QRXFUL_MASK)
#define SPDIF_SIE_URXOV_MASK                     (0x200U)
#define SPDIF_SIE_URXOV_SHIFT                    (9U)
#define SPDIF_SIE_URXOV(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_URXOV_SHIFT)) & SPDIF_SIE_URXOV_MASK)
#define SPDIF_SIE_URXFUL_MASK                    (0x400U)
#define SPDIF_SIE_URXFUL_SHIFT                   (10U)
#define SPDIF_SIE_URXFUL(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_URXFUL_SHIFT)) & SPDIF_SIE_URXFUL_MASK)
#define SPDIF_SIE_BITERR_MASK                    (0x4000U)
#define SPDIF_SIE_BITERR_SHIFT                   (14U)
#define SPDIF_SIE_BITERR(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_BITERR_SHIFT)) & SPDIF_SIE_BITERR_MASK)
#define SPDIF_SIE_SYMERR_MASK                    (0x8000U)
#define SPDIF_SIE_SYMERR_SHIFT                   (15U)
#define SPDIF_SIE_SYMERR(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_SYMERR_SHIFT)) & SPDIF_SIE_SYMERR_MASK)
#define SPDIF_SIE_VALNOGOOD_MASK                 (0x10000U)
#define SPDIF_SIE_VALNOGOOD_SHIFT                (16U)
#define SPDIF_SIE_VALNOGOOD(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_VALNOGOOD_SHIFT)) & SPDIF_SIE_VALNOGOOD_MASK)
#define SPDIF_SIE_CNEW_MASK                      (0x20000U)
#define SPDIF_SIE_CNEW_SHIFT                     (17U)
#define SPDIF_SIE_CNEW(x)                        (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_CNEW_SHIFT)) & SPDIF_SIE_CNEW_MASK)
#define SPDIF_SIE_TXRESYN_MASK                   (0x40000U)
#define SPDIF_SIE_TXRESYN_SHIFT                  (18U)
#define SPDIF_SIE_TXRESYN(x)                     (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_TXRESYN_SHIFT)) & SPDIF_SIE_TXRESYN_MASK)
#define SPDIF_SIE_TXUNOV_MASK                    (0x80000U)
#define SPDIF_SIE_TXUNOV_SHIFT                   (19U)
#define SPDIF_SIE_TXUNOV(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_TXUNOV_SHIFT)) & SPDIF_SIE_TXUNOV_MASK)
#define SPDIF_SIE_LOCK_MASK                      (0x100000U)
#define SPDIF_SIE_LOCK_SHIFT                     (20U)
#define SPDIF_SIE_LOCK(x)                        (((uint32_t)(((uint32_t)(x)) << SPDIF_SIE_LOCK_SHIFT)) & SPDIF_SIE_LOCK_MASK)

/*! @name SIC - InterruptClear Register */
#define SPDIF_SIC_LOCKLOSS_MASK                  (0x4U)
#define SPDIF_SIC_LOCKLOSS_SHIFT                 (2U)
#define SPDIF_SIC_LOCKLOSS(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_LOCKLOSS_SHIFT)) & SPDIF_SIC_LOCKLOSS_MASK)
#define SPDIF_SIC_RXFIFORESYN_MASK               (0x8U)
#define SPDIF_SIC_RXFIFORESYN_SHIFT              (3U)
#define SPDIF_SIC_RXFIFORESYN(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_RXFIFORESYN_SHIFT)) & SPDIF_SIC_RXFIFORESYN_MASK)
#define SPDIF_SIC_RXFIFOUNOV_MASK                (0x10U)
#define SPDIF_SIC_RXFIFOUNOV_SHIFT               (4U)
#define SPDIF_SIC_RXFIFOUNOV(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_RXFIFOUNOV_SHIFT)) & SPDIF_SIC_RXFIFOUNOV_MASK)
#define SPDIF_SIC_UQERR_MASK                     (0x20U)
#define SPDIF_SIC_UQERR_SHIFT                    (5U)
#define SPDIF_SIC_UQERR(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_UQERR_SHIFT)) & SPDIF_SIC_UQERR_MASK)
#define SPDIF_SIC_UQSYNC_MASK                    (0x40U)
#define SPDIF_SIC_UQSYNC_SHIFT                   (6U)
#define SPDIF_SIC_UQSYNC(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_UQSYNC_SHIFT)) & SPDIF_SIC_UQSYNC_MASK)
#define SPDIF_SIC_QRXOV_MASK                     (0x80U)
#define SPDIF_SIC_QRXOV_SHIFT                    (7U)
#define SPDIF_SIC_QRXOV(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_QRXOV_SHIFT)) & SPDIF_SIC_QRXOV_MASK)
#define SPDIF_SIC_URXOV_MASK                     (0x200U)
#define SPDIF_SIC_URXOV_SHIFT                    (9U)
#define SPDIF_SIC_URXOV(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_URXOV_SHIFT)) & SPDIF_SIC_URXOV_MASK)
#define SPDIF_SIC_BITERR_MASK                    (0x4000U)
#define SPDIF_SIC_BITERR_SHIFT                   (14U)
#define SPDIF_SIC_BITERR(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_BITERR_SHIFT)) & SPDIF_SIC_BITERR_MASK)
#define SPDIF_SIC_SYMERR_MASK                    (0x8000U)
#define SPDIF_SIC_SYMERR_SHIFT                   (15U)
#define SPDIF_SIC_SYMERR(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_SYMERR_SHIFT)) & SPDIF_SIC_SYMERR_MASK)
#define SPDIF_SIC_VALNOGOOD_MASK                 (0x10000U)
#define SPDIF_SIC_VALNOGOOD_SHIFT                (16U)
#define SPDIF_SIC_VALNOGOOD(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_VALNOGOOD_SHIFT)) & SPDIF_SIC_VALNOGOOD_MASK)
#define SPDIF_SIC_CNEW_MASK                      (0x20000U)
#define SPDIF_SIC_CNEW_SHIFT                     (17U)
#define SPDIF_SIC_CNEW(x)                        (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_CNEW_SHIFT)) & SPDIF_SIC_CNEW_MASK)
#define SPDIF_SIC_TXRESYN_MASK                   (0x40000U)
#define SPDIF_SIC_TXRESYN_SHIFT                  (18U)
#define SPDIF_SIC_TXRESYN(x)                     (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_TXRESYN_SHIFT)) & SPDIF_SIC_TXRESYN_MASK)
#define SPDIF_SIC_TXUNOV_MASK                    (0x80000U)
#define SPDIF_SIC_TXUNOV_SHIFT                   (19U)
#define SPDIF_SIC_TXUNOV(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_TXUNOV_SHIFT)) & SPDIF_SIC_TXUNOV_MASK)
#define SPDIF_SIC_LOCK_MASK                      (0x100000U)
#define SPDIF_SIC_LOCK_SHIFT                     (20U)
#define SPDIF_SIC_LOCK(x)                        (((uint32_t)(((uint32_t)(x)) << SPDIF_SIC_LOCK_SHIFT)) & SPDIF_SIC_LOCK_MASK)

/*! @name SIS - InterruptStat Register */
#define SPDIF_SIS_RXFIFOFUL_MASK                 (0x1U)
#define SPDIF_SIS_RXFIFOFUL_SHIFT                (0U)
#define SPDIF_SIS_RXFIFOFUL(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_RXFIFOFUL_SHIFT)) & SPDIF_SIS_RXFIFOFUL_MASK)
#define SPDIF_SIS_TXEM_MASK                      (0x2U)
#define SPDIF_SIS_TXEM_SHIFT                     (1U)
#define SPDIF_SIS_TXEM(x)                        (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_TXEM_SHIFT)) & SPDIF_SIS_TXEM_MASK)
#define SPDIF_SIS_LOCKLOSS_MASK                  (0x4U)
#define SPDIF_SIS_LOCKLOSS_SHIFT                 (2U)
#define SPDIF_SIS_LOCKLOSS(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_LOCKLOSS_SHIFT)) & SPDIF_SIS_LOCKLOSS_MASK)
#define SPDIF_SIS_RXFIFORESYN_MASK               (0x8U)
#define SPDIF_SIS_RXFIFORESYN_SHIFT              (3U)
#define SPDIF_SIS_RXFIFORESYN(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_RXFIFORESYN_SHIFT)) & SPDIF_SIS_RXFIFORESYN_MASK)
#define SPDIF_SIS_RXFIFOUNOV_MASK                (0x10U)
#define SPDIF_SIS_RXFIFOUNOV_SHIFT               (4U)
#define SPDIF_SIS_RXFIFOUNOV(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_RXFIFOUNOV_SHIFT)) & SPDIF_SIS_RXFIFOUNOV_MASK)
#define SPDIF_SIS_UQERR_MASK                     (0x20U)
#define SPDIF_SIS_UQERR_SHIFT                    (5U)
#define SPDIF_SIS_UQERR(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_UQERR_SHIFT)) & SPDIF_SIS_UQERR_MASK)
#define SPDIF_SIS_UQSYNC_MASK                    (0x40U)
#define SPDIF_SIS_UQSYNC_SHIFT                   (6U)
#define SPDIF_SIS_UQSYNC(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_UQSYNC_SHIFT)) & SPDIF_SIS_UQSYNC_MASK)
#define SPDIF_SIS_QRXOV_MASK                     (0x80U)
#define SPDIF_SIS_QRXOV_SHIFT                    (7U)
#define SPDIF_SIS_QRXOV(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_QRXOV_SHIFT)) & SPDIF_SIS_QRXOV_MASK)
#define SPDIF_SIS_QRXFUL_MASK                    (0x100U)
#define SPDIF_SIS_QRXFUL_SHIFT                   (8U)
#define SPDIF_SIS_QRXFUL(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_QRXFUL_SHIFT)) & SPDIF_SIS_QRXFUL_MASK)
#define SPDIF_SIS_URXOV_MASK                     (0x200U)
#define SPDIF_SIS_URXOV_SHIFT                    (9U)
#define SPDIF_SIS_URXOV(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_URXOV_SHIFT)) & SPDIF_SIS_URXOV_MASK)
#define SPDIF_SIS_URXFUL_MASK                    (0x400U)
#define SPDIF_SIS_URXFUL_SHIFT                   (10U)
#define SPDIF_SIS_URXFUL(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_URXFUL_SHIFT)) & SPDIF_SIS_URXFUL_MASK)
#define SPDIF_SIS_BITERR_MASK                    (0x4000U)
#define SPDIF_SIS_BITERR_SHIFT                   (14U)
#define SPDIF_SIS_BITERR(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_BITERR_SHIFT)) & SPDIF_SIS_BITERR_MASK)
#define SPDIF_SIS_SYMERR_MASK                    (0x8000U)
#define SPDIF_SIS_SYMERR_SHIFT                   (15U)
#define SPDIF_SIS_SYMERR(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_SYMERR_SHIFT)) & SPDIF_SIS_SYMERR_MASK)
#define SPDIF_SIS_VALNOGOOD_MASK                 (0x10000U)
#define SPDIF_SIS_VALNOGOOD_SHIFT                (16U)
#define SPDIF_SIS_VALNOGOOD(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_VALNOGOOD_SHIFT)) & SPDIF_SIS_VALNOGOOD_MASK)
#define SPDIF_SIS_CNEW_MASK                      (0x20000U)
#define SPDIF_SIS_CNEW_SHIFT                     (17U)
#define SPDIF_SIS_CNEW(x)                        (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_CNEW_SHIFT)) & SPDIF_SIS_CNEW_MASK)
#define SPDIF_SIS_TXRESYN_MASK                   (0x40000U)
#define SPDIF_SIS_TXRESYN_SHIFT                  (18U)
#define SPDIF_SIS_TXRESYN(x)                     (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_TXRESYN_SHIFT)) & SPDIF_SIS_TXRESYN_MASK)
#define SPDIF_SIS_TXUNOV_MASK                    (0x80000U)
#define SPDIF_SIS_TXUNOV_SHIFT                   (19U)
#define SPDIF_SIS_TXUNOV(x)                      (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_TXUNOV_SHIFT)) & SPDIF_SIS_TXUNOV_MASK)
#define SPDIF_SIS_LOCK_MASK                      (0x100000U)
#define SPDIF_SIS_LOCK_SHIFT                     (20U)
#define SPDIF_SIS_LOCK(x)                        (((uint32_t)(((uint32_t)(x)) << SPDIF_SIS_LOCK_SHIFT)) & SPDIF_SIS_LOCK_MASK)

/*! @name SRL - SPDIFRxLeft Register */
#define SPDIF_SRL_RXDATALEFT_MASK                (0xFFFFFFU)
#define SPDIF_SRL_RXDATALEFT_SHIFT               (0U)
#define SPDIF_SRL_RXDATALEFT(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRL_RXDATALEFT_SHIFT)) & SPDIF_SRL_RXDATALEFT_MASK)

/*! @name SRR - SPDIFRxRight Register */
#define SPDIF_SRR_RXDATARIGHT_MASK               (0xFFFFFFU)
#define SPDIF_SRR_RXDATARIGHT_SHIFT              (0U)
#define SPDIF_SRR_RXDATARIGHT(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SRR_RXDATARIGHT_SHIFT)) & SPDIF_SRR_RXDATARIGHT_MASK)

/*! @name SRCSH - SPDIFRxCChannel_h Register */
#define SPDIF_SRCSH_RXCCHANNEL_H_MASK            (0xFFFFFFU)
#define SPDIF_SRCSH_RXCCHANNEL_H_SHIFT           (0U)
#define SPDIF_SRCSH_RXCCHANNEL_H(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SRCSH_RXCCHANNEL_H_SHIFT)) & SPDIF_SRCSH_RXCCHANNEL_H_MASK)

/*! @name SRCSL - SPDIFRxCChannel_l Register */
#define SPDIF_SRCSL_RXCCHANNEL_L_MASK            (0xFFFFFFU)
#define SPDIF_SRCSL_RXCCHANNEL_L_SHIFT           (0U)
#define SPDIF_SRCSL_RXCCHANNEL_L(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SRCSL_RXCCHANNEL_L_SHIFT)) & SPDIF_SRCSL_RXCCHANNEL_L_MASK)

/*! @name SRU - UchannelRx Register */
#define SPDIF_SRU_RXUCHANNEL_MASK                (0xFFFFFFU)
#define SPDIF_SRU_RXUCHANNEL_SHIFT               (0U)
#define SPDIF_SRU_RXUCHANNEL(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRU_RXUCHANNEL_SHIFT)) & SPDIF_SRU_RXUCHANNEL_MASK)

/*! @name SRQ - QchannelRx Register */
#define SPDIF_SRQ_RXQCHANNEL_MASK                (0xFFFFFFU)
#define SPDIF_SRQ_RXQCHANNEL_SHIFT               (0U)
#define SPDIF_SRQ_RXQCHANNEL(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRQ_RXQCHANNEL_SHIFT)) & SPDIF_SRQ_RXQCHANNEL_MASK)

/*! @name STL - SPDIFTxLeft Register */
#define SPDIF_STL_TXDATALEFT_MASK                (0xFFFFFFU)
#define SPDIF_STL_TXDATALEFT_SHIFT               (0U)
#define SPDIF_STL_TXDATALEFT(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_STL_TXDATALEFT_SHIFT)) & SPDIF_STL_TXDATALEFT_MASK)

/*! @name STR - SPDIFTxRight Register */
#define SPDIF_STR_TXDATARIGHT_MASK               (0xFFFFFFU)
#define SPDIF_STR_TXDATARIGHT_SHIFT              (0U)
#define SPDIF_STR_TXDATARIGHT(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_STR_TXDATARIGHT_SHIFT)) & SPDIF_STR_TXDATARIGHT_MASK)

/*! @name STCSCH - SPDIFTxCChannelCons_h Register */
#define SPDIF_STCSCH_TXCCHANNELCONS_H_MASK       (0xFFFFFFU)
#define SPDIF_STCSCH_TXCCHANNELCONS_H_SHIFT      (0U)
#define SPDIF_STCSCH_TXCCHANNELCONS_H(x)         (((uint32_t)(((uint32_t)(x)) << SPDIF_STCSCH_TXCCHANNELCONS_H_SHIFT)) & SPDIF_STCSCH_TXCCHANNELCONS_H_MASK)

/*! @name STCSCL - SPDIFTxCChannelCons_l Register */
#define SPDIF_STCSCL_TXCCHANNELCONS_L_MASK       (0xFFFFFFU)
#define SPDIF_STCSCL_TXCCHANNELCONS_L_SHIFT      (0U)
#define SPDIF_STCSCL_TXCCHANNELCONS_L(x)         (((uint32_t)(((uint32_t)(x)) << SPDIF_STCSCL_TXCCHANNELCONS_L_SHIFT)) & SPDIF_STCSCL_TXCCHANNELCONS_L_MASK)

/*! @name SRFM - FreqMeas Register */
#define SPDIF_SRFM_FREQMEAS_MASK                 (0xFFFFFFU)
#define SPDIF_SRFM_FREQMEAS_SHIFT                (0U)
#define SPDIF_SRFM_FREQMEAS(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SRFM_FREQMEAS_SHIFT)) & SPDIF_SRFM_FREQMEAS_MASK)

/*! @name STC - SPDIFTxClk Register */
#define SPDIF_STC_TXCLK_DF_MASK                  (0x7FU)
#define SPDIF_STC_TXCLK_DF_SHIFT                 (0U)
#define SPDIF_STC_TXCLK_DF(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_TXCLK_DF_SHIFT)) & SPDIF_STC_TXCLK_DF_MASK)
#define SPDIF_STC_TX_ALL_CLK_EN_MASK             (0x80U)
#define SPDIF_STC_TX_ALL_CLK_EN_SHIFT            (7U)
#define SPDIF_STC_TX_ALL_CLK_EN(x)               (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_TX_ALL_CLK_EN_SHIFT)) & SPDIF_STC_TX_ALL_CLK_EN_MASK)
#define SPDIF_STC_TXCLK_SOURCE_MASK              (0x700U)
#define SPDIF_STC_TXCLK_SOURCE_SHIFT             (8U)
#define SPDIF_STC_TXCLK_SOURCE(x)                (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_TXCLK_SOURCE_SHIFT)) & SPDIF_STC_TXCLK_SOURCE_MASK)
#define SPDIF_STC_SYSCLK_DF_MASK                 (0xFF800U)
#define SPDIF_STC_SYSCLK_DF_SHIFT                (11U)
#define SPDIF_STC_SYSCLK_DF(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_SYSCLK_DF_SHIFT)) & SPDIF_STC_SYSCLK_DF_MASK)


/*!
 * @}
 */ /* end of group SPDIF_Register_Masks */


/* SPDIF - Peripheral instance base addresses */
/** Peripheral SPDIF1 base address */
#define SPDIF1_BASE                              (0x30810000u)
/** Peripheral SPDIF1 base pointer */
#define SPDIF1                                   ((SPDIF_Type *)SPDIF1_BASE)
/** Peripheral SPDIF2 base address */
#define SPDIF2_BASE                              (0x308A0000u)
/** Peripheral SPDIF2 base pointer */
#define SPDIF2                                   ((SPDIF_Type *)SPDIF2_BASE)
/** Array initializer of SPDIF peripheral base addresses */
#define SPDIF_BASE_ADDRS                         { 0u, SPDIF1_BASE, SPDIF2_BASE }
/** Array initializer of SPDIF peripheral base pointers */
#define SPDIF_BASE_PTRS                          { (SPDIF_Type *)0u, SPDIF1, SPDIF2 }
/** Interrupt vectors for the SPDIF peripheral type */
#define SPDIF_IRQS                               { NotAvail_IRQn, SPDIF1_IRQn, SPDIF2_IRQn }

/*!
 * @}
 */ /* end of group SPDIF_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- SRC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Peripheral_Access_Layer SRC Peripheral Access Layer
 * @{
 */

/** SRC - Register Layout Typedef */
typedef struct {
  __IO uint32_t SCR;                               /**< SRC Reset Control Register, offset: 0x0 */
  __IO uint32_t A53RCR0;                           /**< A53 Reset Control Register, offset: 0x4 */
  __IO uint32_t A53RCR1;                           /**< A53 Reset Control Register, offset: 0x8 */
  __IO uint32_t M4RCR;                             /**< M4 Reset Control Register, offset: 0xC */
       uint8_t RESERVED_0[16];
  __IO uint32_t USBOPHY1_RCR;                      /**< USB OTG PHY1 Reset Control Register, offset: 0x20 */
  __IO uint32_t USBOPHY2_RCR;                      /**< USB OTG PHY2 Reset Control Register, offset: 0x24 */
  __IO uint32_t MIPIPHY_RCR;                       /**< MIPI PHY Reset Control Register, offset: 0x28 */
  __IO uint32_t PCIEPHY_RCR;                       /**< PCIE PHY Reset Control Register, offset: 0x2C */
  __IO uint32_t HDMI_RCR;                          /**< HDMI Reset Control Register, offset: 0x30 */
  __IO uint32_t DISP_RCR;                          /**< DISP Reset Control Register, offset: 0x34 */
       uint8_t RESERVED_1[8];
  __IO uint32_t GPU_RCR;                           /**< GPU Reset Control Register, offset: 0x40 */
  __IO uint32_t VPU_RCR;                           /**< VPU Reset Control Register, offset: 0x44 */
  __IO uint32_t PCIE2_RCR;                         /**< PCIE2 Reset Control Register, offset: 0x48 */
  __IO uint32_t MIPIPHY1_RCR;                      /**< MIPI CSI1 PHY Reset Control Register, offset: 0x4C */
  __IO uint32_t MIPIPHY2_RCR;                      /**< MIPI CSI2 PHY Reset Control Register, offset: 0x50 */
       uint8_t RESERVED_2[4];
  __I  uint32_t SBMR1;                             /**< SRC Boot Mode Register 1, offset: 0x58 */
  __IO uint32_t SRSR;                              /**< SRC Reset Status Register, offset: 0x5C */
       uint8_t RESERVED_3[8];
  __I  uint32_t SISR;                              /**< SRC Interrupt Status Register, offset: 0x68 */
  __I  uint32_t SIMR;                              /**< SRC Interrupt Mask Register, offset: 0x6C */
  __I  uint32_t SBMR2;                             /**< SRC Boot Mode Register 2, offset: 0x70 */
  __IO uint32_t GPR[10];                           /**< SRC General Purpose Register 1..SRC General Purpose Register 10, array offset: 0x74, array step: 0x4 */
       uint8_t RESERVED_4[3940];
  __IO uint32_t DDRC_RCR;                          /**< SRC DDR Controller Reset Control Register, offset: 0x1000 */
  __IO uint32_t DDRC2_RCR;                         /**< SRC DDRC2 Controller Reset Control Register, offset: 0x1004 */
} SRC_Type;

/* ----------------------------------------------------------------------------
   -- SRC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Register_Masks SRC Register Masks
 * @{
 */

/*! @name SCR - SRC Reset Control Register */
#define SRC_SCR_MASK_TEMPSENSE_RESET_MASK        (0xF0U)
#define SRC_SCR_MASK_TEMPSENSE_RESET_SHIFT       (4U)
#define SRC_SCR_MASK_TEMPSENSE_RESET(x)          (((uint32_t)(((uint32_t)(x)) << SRC_SCR_MASK_TEMPSENSE_RESET_SHIFT)) & SRC_SCR_MASK_TEMPSENSE_RESET_MASK)
#define SRC_SCR_DOMAIN0_MASK                     (0x1000000U)
#define SRC_SCR_DOMAIN0_SHIFT                    (24U)
#define SRC_SCR_DOMAIN0(x)                       (((uint32_t)(((uint32_t)(x)) << SRC_SCR_DOMAIN0_SHIFT)) & SRC_SCR_DOMAIN0_MASK)
#define SRC_SCR_DOMAIN1_MASK                     (0x2000000U)
#define SRC_SCR_DOMAIN1_SHIFT                    (25U)
#define SRC_SCR_DOMAIN1(x)                       (((uint32_t)(((uint32_t)(x)) << SRC_SCR_DOMAIN1_SHIFT)) & SRC_SCR_DOMAIN1_MASK)
#define SRC_SCR_DOMAIN2_MASK                     (0x4000000U)
#define SRC_SCR_DOMAIN2_SHIFT                    (26U)
#define SRC_SCR_DOMAIN2(x)                       (((uint32_t)(((uint32_t)(x)) << SRC_SCR_DOMAIN2_SHIFT)) & SRC_SCR_DOMAIN2_MASK)
#define SRC_SCR_DOMAIN3_MASK                     (0x8000000U)
#define SRC_SCR_DOMAIN3_SHIFT                    (27U)
#define SRC_SCR_DOMAIN3(x)                       (((uint32_t)(((uint32_t)(x)) << SRC_SCR_DOMAIN3_SHIFT)) & SRC_SCR_DOMAIN3_MASK)
#define SRC_SCR_LOCK_MASK                        (0x40000000U)
#define SRC_SCR_LOCK_SHIFT                       (30U)
#define SRC_SCR_LOCK(x)                          (((uint32_t)(((uint32_t)(x)) << SRC_SCR_LOCK_SHIFT)) & SRC_SCR_LOCK_MASK)
#define SRC_SCR_DOM_EN_MASK                      (0x80000000U)
#define SRC_SCR_DOM_EN_SHIFT                     (31U)
#define SRC_SCR_DOM_EN(x)                        (((uint32_t)(((uint32_t)(x)) << SRC_SCR_DOM_EN_SHIFT)) & SRC_SCR_DOM_EN_MASK)

/*! @name A53RCR0 - A53 Reset Control Register */
#define SRC_A53RCR0_A53_CORE_POR_RESET0_MASK     (0x1U)
#define SRC_A53RCR0_A53_CORE_POR_RESET0_SHIFT    (0U)
#define SRC_A53RCR0_A53_CORE_POR_RESET0(x)       (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_CORE_POR_RESET0_SHIFT)) & SRC_A53RCR0_A53_CORE_POR_RESET0_MASK)
#define SRC_A53RCR0_A53_CORE_POR_RESET1_MASK     (0x2U)
#define SRC_A53RCR0_A53_CORE_POR_RESET1_SHIFT    (1U)
#define SRC_A53RCR0_A53_CORE_POR_RESET1(x)       (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_CORE_POR_RESET1_SHIFT)) & SRC_A53RCR0_A53_CORE_POR_RESET1_MASK)
#define SRC_A53RCR0_A53_CORE_POR_RESET2_MASK     (0x4U)
#define SRC_A53RCR0_A53_CORE_POR_RESET2_SHIFT    (2U)
#define SRC_A53RCR0_A53_CORE_POR_RESET2(x)       (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_CORE_POR_RESET2_SHIFT)) & SRC_A53RCR0_A53_CORE_POR_RESET2_MASK)
#define SRC_A53RCR0_A53_CORE_POR_RESET3_MASK     (0x8U)
#define SRC_A53RCR0_A53_CORE_POR_RESET3_SHIFT    (3U)
#define SRC_A53RCR0_A53_CORE_POR_RESET3(x)       (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_CORE_POR_RESET3_SHIFT)) & SRC_A53RCR0_A53_CORE_POR_RESET3_MASK)
#define SRC_A53RCR0_A53_CORE_RESET0_MASK         (0x10U)
#define SRC_A53RCR0_A53_CORE_RESET0_SHIFT        (4U)
#define SRC_A53RCR0_A53_CORE_RESET0(x)           (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_CORE_RESET0_SHIFT)) & SRC_A53RCR0_A53_CORE_RESET0_MASK)
#define SRC_A53RCR0_A53_CORE_RESET1_MASK         (0x20U)
#define SRC_A53RCR0_A53_CORE_RESET1_SHIFT        (5U)
#define SRC_A53RCR0_A53_CORE_RESET1(x)           (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_CORE_RESET1_SHIFT)) & SRC_A53RCR0_A53_CORE_RESET1_MASK)
#define SRC_A53RCR0_A53_CORE_RESET2_MASK         (0x40U)
#define SRC_A53RCR0_A53_CORE_RESET2_SHIFT        (6U)
#define SRC_A53RCR0_A53_CORE_RESET2(x)           (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_CORE_RESET2_SHIFT)) & SRC_A53RCR0_A53_CORE_RESET2_MASK)
#define SRC_A53RCR0_A53_CORE_RESET3_MASK         (0x80U)
#define SRC_A53RCR0_A53_CORE_RESET3_SHIFT        (7U)
#define SRC_A53RCR0_A53_CORE_RESET3(x)           (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_CORE_RESET3_SHIFT)) & SRC_A53RCR0_A53_CORE_RESET3_MASK)
#define SRC_A53RCR0_A53_DBG_RESET0_MASK          (0x100U)
#define SRC_A53RCR0_A53_DBG_RESET0_SHIFT         (8U)
#define SRC_A53RCR0_A53_DBG_RESET0(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_DBG_RESET0_SHIFT)) & SRC_A53RCR0_A53_DBG_RESET0_MASK)
#define SRC_A53RCR0_A53_DBG_RESET1_MASK          (0x200U)
#define SRC_A53RCR0_A53_DBG_RESET1_SHIFT         (9U)
#define SRC_A53RCR0_A53_DBG_RESET1(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_DBG_RESET1_SHIFT)) & SRC_A53RCR0_A53_DBG_RESET1_MASK)
#define SRC_A53RCR0_A53_DBG_RESET2_MASK          (0x400U)
#define SRC_A53RCR0_A53_DBG_RESET2_SHIFT         (10U)
#define SRC_A53RCR0_A53_DBG_RESET2(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_DBG_RESET2_SHIFT)) & SRC_A53RCR0_A53_DBG_RESET2_MASK)
#define SRC_A53RCR0_A53_DBG_RESET3_MASK          (0x800U)
#define SRC_A53RCR0_A53_DBG_RESET3_SHIFT         (11U)
#define SRC_A53RCR0_A53_DBG_RESET3(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_DBG_RESET3_SHIFT)) & SRC_A53RCR0_A53_DBG_RESET3_MASK)
#define SRC_A53RCR0_A53_ETM_RESET0_MASK          (0x1000U)
#define SRC_A53RCR0_A53_ETM_RESET0_SHIFT         (12U)
#define SRC_A53RCR0_A53_ETM_RESET0(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_ETM_RESET0_SHIFT)) & SRC_A53RCR0_A53_ETM_RESET0_MASK)
#define SRC_A53RCR0_A53_ETM_RESET1_MASK          (0x2000U)
#define SRC_A53RCR0_A53_ETM_RESET1_SHIFT         (13U)
#define SRC_A53RCR0_A53_ETM_RESET1(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_ETM_RESET1_SHIFT)) & SRC_A53RCR0_A53_ETM_RESET1_MASK)
#define SRC_A53RCR0_A53_ETM_RESET2_MASK          (0x4000U)
#define SRC_A53RCR0_A53_ETM_RESET2_SHIFT         (14U)
#define SRC_A53RCR0_A53_ETM_RESET2(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_ETM_RESET2_SHIFT)) & SRC_A53RCR0_A53_ETM_RESET2_MASK)
#define SRC_A53RCR0_A53_ETM_RESET3_MASK          (0x8000U)
#define SRC_A53RCR0_A53_ETM_RESET3_SHIFT         (15U)
#define SRC_A53RCR0_A53_ETM_RESET3(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_ETM_RESET3_SHIFT)) & SRC_A53RCR0_A53_ETM_RESET3_MASK)
#define SRC_A53RCR0_MASK_WDOG1_RST_MASK          (0xF0000U)
#define SRC_A53RCR0_MASK_WDOG1_RST_SHIFT         (16U)
#define SRC_A53RCR0_MASK_WDOG1_RST(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_MASK_WDOG1_RST_SHIFT)) & SRC_A53RCR0_MASK_WDOG1_RST_MASK)
#define SRC_A53RCR0_A53_SOC_DBG_RESET_MASK       (0x100000U)
#define SRC_A53RCR0_A53_SOC_DBG_RESET_SHIFT      (20U)
#define SRC_A53RCR0_A53_SOC_DBG_RESET(x)         (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_SOC_DBG_RESET_SHIFT)) & SRC_A53RCR0_A53_SOC_DBG_RESET_MASK)
#define SRC_A53RCR0_A53_L2RESET_MASK             (0x200000U)
#define SRC_A53RCR0_A53_L2RESET_SHIFT            (21U)
#define SRC_A53RCR0_A53_L2RESET(x)               (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_A53_L2RESET_SHIFT)) & SRC_A53RCR0_A53_L2RESET_MASK)
#define SRC_A53RCR0_DOMAIN0_MASK                 (0x1000000U)
#define SRC_A53RCR0_DOMAIN0_SHIFT                (24U)
#define SRC_A53RCR0_DOMAIN0(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_DOMAIN0_SHIFT)) & SRC_A53RCR0_DOMAIN0_MASK)
#define SRC_A53RCR0_DOMAIN1_MASK                 (0x2000000U)
#define SRC_A53RCR0_DOMAIN1_SHIFT                (25U)
#define SRC_A53RCR0_DOMAIN1(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_DOMAIN1_SHIFT)) & SRC_A53RCR0_DOMAIN1_MASK)
#define SRC_A53RCR0_DOMAIN2_MASK                 (0x4000000U)
#define SRC_A53RCR0_DOMAIN2_SHIFT                (26U)
#define SRC_A53RCR0_DOMAIN2(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_DOMAIN2_SHIFT)) & SRC_A53RCR0_DOMAIN2_MASK)
#define SRC_A53RCR0_DOMAIN3_MASK                 (0x8000000U)
#define SRC_A53RCR0_DOMAIN3_SHIFT                (27U)
#define SRC_A53RCR0_DOMAIN3(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_DOMAIN3_SHIFT)) & SRC_A53RCR0_DOMAIN3_MASK)
#define SRC_A53RCR0_LOCK_MASK                    (0x40000000U)
#define SRC_A53RCR0_LOCK_SHIFT                   (30U)
#define SRC_A53RCR0_LOCK(x)                      (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_LOCK_SHIFT)) & SRC_A53RCR0_LOCK_MASK)
#define SRC_A53RCR0_DOM_EN_MASK                  (0x80000000U)
#define SRC_A53RCR0_DOM_EN_SHIFT                 (31U)
#define SRC_A53RCR0_DOM_EN(x)                    (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_DOM_EN_SHIFT)) & SRC_A53RCR0_DOM_EN_MASK)

/*! @name A53RCR1 - A53 Reset Control Register */
#define SRC_A53RCR1_A53_CORE0_ENABLE_MASK        (0x1U)
#define SRC_A53RCR1_A53_CORE0_ENABLE_SHIFT       (0U)
#define SRC_A53RCR1_A53_CORE0_ENABLE(x)          (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_A53_CORE0_ENABLE_SHIFT)) & SRC_A53RCR1_A53_CORE0_ENABLE_MASK)
#define SRC_A53RCR1_A53_CORE1_ENABLE_MASK        (0x2U)
#define SRC_A53RCR1_A53_CORE1_ENABLE_SHIFT       (1U)
#define SRC_A53RCR1_A53_CORE1_ENABLE(x)          (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_A53_CORE1_ENABLE_SHIFT)) & SRC_A53RCR1_A53_CORE1_ENABLE_MASK)
#define SRC_A53RCR1_A53_CORE2_ENABLE_MASK        (0x4U)
#define SRC_A53RCR1_A53_CORE2_ENABLE_SHIFT       (2U)
#define SRC_A53RCR1_A53_CORE2_ENABLE(x)          (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_A53_CORE2_ENABLE_SHIFT)) & SRC_A53RCR1_A53_CORE2_ENABLE_MASK)
#define SRC_A53RCR1_A53_CORE3_ENABLE_MASK        (0x8U)
#define SRC_A53RCR1_A53_CORE3_ENABLE_SHIFT       (3U)
#define SRC_A53RCR1_A53_CORE3_ENABLE(x)          (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_A53_CORE3_ENABLE_SHIFT)) & SRC_A53RCR1_A53_CORE3_ENABLE_MASK)
#define SRC_A53RCR1_A53_RST_SLOW_MASK            (0x70U)
#define SRC_A53RCR1_A53_RST_SLOW_SHIFT           (4U)
#define SRC_A53RCR1_A53_RST_SLOW(x)              (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_A53_RST_SLOW_SHIFT)) & SRC_A53RCR1_A53_RST_SLOW_MASK)
#define SRC_A53RCR1_DOMAIN0_MASK                 (0x1000000U)
#define SRC_A53RCR1_DOMAIN0_SHIFT                (24U)
#define SRC_A53RCR1_DOMAIN0(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_DOMAIN0_SHIFT)) & SRC_A53RCR1_DOMAIN0_MASK)
#define SRC_A53RCR1_DOMAIN1_MASK                 (0x2000000U)
#define SRC_A53RCR1_DOMAIN1_SHIFT                (25U)
#define SRC_A53RCR1_DOMAIN1(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_DOMAIN1_SHIFT)) & SRC_A53RCR1_DOMAIN1_MASK)
#define SRC_A53RCR1_DOMAIN2_MASK                 (0x4000000U)
#define SRC_A53RCR1_DOMAIN2_SHIFT                (26U)
#define SRC_A53RCR1_DOMAIN2(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_DOMAIN2_SHIFT)) & SRC_A53RCR1_DOMAIN2_MASK)
#define SRC_A53RCR1_DOMAIN3_MASK                 (0x8000000U)
#define SRC_A53RCR1_DOMAIN3_SHIFT                (27U)
#define SRC_A53RCR1_DOMAIN3(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_DOMAIN3_SHIFT)) & SRC_A53RCR1_DOMAIN3_MASK)
#define SRC_A53RCR1_LOCK_MASK                    (0x40000000U)
#define SRC_A53RCR1_LOCK_SHIFT                   (30U)
#define SRC_A53RCR1_LOCK(x)                      (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_LOCK_SHIFT)) & SRC_A53RCR1_LOCK_MASK)
#define SRC_A53RCR1_DOM_EN_MASK                  (0x80000000U)
#define SRC_A53RCR1_DOM_EN_SHIFT                 (31U)
#define SRC_A53RCR1_DOM_EN(x)                    (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_DOM_EN_SHIFT)) & SRC_A53RCR1_DOM_EN_MASK)

/*! @name M4RCR - M4 Reset Control Register */
#define SRC_M4RCR_SW_M4C_NON_SCLR_RST_MASK       (0x1U)
#define SRC_M4RCR_SW_M4C_NON_SCLR_RST_SHIFT      (0U)
#define SRC_M4RCR_SW_M4C_NON_SCLR_RST(x)         (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_SW_M4C_NON_SCLR_RST_SHIFT)) & SRC_M4RCR_SW_M4C_NON_SCLR_RST_MASK)
#define SRC_M4RCR_SW_M4C_RST_MASK                (0x2U)
#define SRC_M4RCR_SW_M4C_RST_SHIFT               (1U)
#define SRC_M4RCR_SW_M4C_RST(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_SW_M4C_RST_SHIFT)) & SRC_M4RCR_SW_M4C_RST_MASK)
#define SRC_M4RCR_SW_M4P_RST_MASK                (0x4U)
#define SRC_M4RCR_SW_M4P_RST_SHIFT               (2U)
#define SRC_M4RCR_SW_M4P_RST(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_SW_M4P_RST_SHIFT)) & SRC_M4RCR_SW_M4P_RST_MASK)
#define SRC_M4RCR_ENABLE_M4_MASK                 (0x8U)
#define SRC_M4RCR_ENABLE_M4_SHIFT                (3U)
#define SRC_M4RCR_ENABLE_M4(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_ENABLE_M4_SHIFT)) & SRC_M4RCR_ENABLE_M4_MASK)
#define SRC_M4RCR_MASK_WDOG3_RST_MASK            (0xF0U)
#define SRC_M4RCR_MASK_WDOG3_RST_SHIFT           (4U)
#define SRC_M4RCR_MASK_WDOG3_RST(x)              (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_MASK_WDOG3_RST_SHIFT)) & SRC_M4RCR_MASK_WDOG3_RST_MASK)
#define SRC_M4RCR_WDOG3_RST_OPTION_M4_MASK       (0x100U)
#define SRC_M4RCR_WDOG3_RST_OPTION_M4_SHIFT      (8U)
#define SRC_M4RCR_WDOG3_RST_OPTION_M4(x)         (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_WDOG3_RST_OPTION_M4_SHIFT)) & SRC_M4RCR_WDOG3_RST_OPTION_M4_MASK)
#define SRC_M4RCR_WDOG3_RST_OPTION_MASK          (0x200U)
#define SRC_M4RCR_WDOG3_RST_OPTION_SHIFT         (9U)
#define SRC_M4RCR_WDOG3_RST_OPTION(x)            (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_WDOG3_RST_OPTION_SHIFT)) & SRC_M4RCR_WDOG3_RST_OPTION_MASK)
#define SRC_M4RCR_DOMAIN0_MASK                   (0x1000000U)
#define SRC_M4RCR_DOMAIN0_SHIFT                  (24U)
#define SRC_M4RCR_DOMAIN0(x)                     (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_DOMAIN0_SHIFT)) & SRC_M4RCR_DOMAIN0_MASK)
#define SRC_M4RCR_DOMAIN1_MASK                   (0x2000000U)
#define SRC_M4RCR_DOMAIN1_SHIFT                  (25U)
#define SRC_M4RCR_DOMAIN1(x)                     (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_DOMAIN1_SHIFT)) & SRC_M4RCR_DOMAIN1_MASK)
#define SRC_M4RCR_DOMAIN2_MASK                   (0x4000000U)
#define SRC_M4RCR_DOMAIN2_SHIFT                  (26U)
#define SRC_M4RCR_DOMAIN2(x)                     (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_DOMAIN2_SHIFT)) & SRC_M4RCR_DOMAIN2_MASK)
#define SRC_M4RCR_DOMAIN3_MASK                   (0x8000000U)
#define SRC_M4RCR_DOMAIN3_SHIFT                  (27U)
#define SRC_M4RCR_DOMAIN3(x)                     (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_DOMAIN3_SHIFT)) & SRC_M4RCR_DOMAIN3_MASK)
#define SRC_M4RCR_LOCK_MASK                      (0x40000000U)
#define SRC_M4RCR_LOCK_SHIFT                     (30U)
#define SRC_M4RCR_LOCK(x)                        (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_LOCK_SHIFT)) & SRC_M4RCR_LOCK_MASK)
#define SRC_M4RCR_DOM_EN_MASK                    (0x80000000U)
#define SRC_M4RCR_DOM_EN_SHIFT                   (31U)
#define SRC_M4RCR_DOM_EN(x)                      (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_DOM_EN_SHIFT)) & SRC_M4RCR_DOM_EN_MASK)

/*! @name USBOPHY1_RCR - USB OTG PHY1 Reset Control Register */
#define SRC_USBOPHY1_RCR_OTG1_PHY_RESET_MASK     (0x1U)
#define SRC_USBOPHY1_RCR_OTG1_PHY_RESET_SHIFT    (0U)
#define SRC_USBOPHY1_RCR_OTG1_PHY_RESET(x)       (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY1_RCR_OTG1_PHY_RESET_SHIFT)) & SRC_USBOPHY1_RCR_OTG1_PHY_RESET_MASK)
#define SRC_USBOPHY1_RCR_DOMAIN0_MASK            (0x1000000U)
#define SRC_USBOPHY1_RCR_DOMAIN0_SHIFT           (24U)
#define SRC_USBOPHY1_RCR_DOMAIN0(x)              (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY1_RCR_DOMAIN0_SHIFT)) & SRC_USBOPHY1_RCR_DOMAIN0_MASK)
#define SRC_USBOPHY1_RCR_DOMAIN1_MASK            (0x2000000U)
#define SRC_USBOPHY1_RCR_DOMAIN1_SHIFT           (25U)
#define SRC_USBOPHY1_RCR_DOMAIN1(x)              (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY1_RCR_DOMAIN1_SHIFT)) & SRC_USBOPHY1_RCR_DOMAIN1_MASK)
#define SRC_USBOPHY1_RCR_DOMAIN2_MASK            (0x4000000U)
#define SRC_USBOPHY1_RCR_DOMAIN2_SHIFT           (26U)
#define SRC_USBOPHY1_RCR_DOMAIN2(x)              (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY1_RCR_DOMAIN2_SHIFT)) & SRC_USBOPHY1_RCR_DOMAIN2_MASK)
#define SRC_USBOPHY1_RCR_DOMAIN3_MASK            (0x8000000U)
#define SRC_USBOPHY1_RCR_DOMAIN3_SHIFT           (27U)
#define SRC_USBOPHY1_RCR_DOMAIN3(x)              (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY1_RCR_DOMAIN3_SHIFT)) & SRC_USBOPHY1_RCR_DOMAIN3_MASK)
#define SRC_USBOPHY1_RCR_LOCK_MASK               (0x40000000U)
#define SRC_USBOPHY1_RCR_LOCK_SHIFT              (30U)
#define SRC_USBOPHY1_RCR_LOCK(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY1_RCR_LOCK_SHIFT)) & SRC_USBOPHY1_RCR_LOCK_MASK)
#define SRC_USBOPHY1_RCR_DOM_EN_MASK             (0x80000000U)
#define SRC_USBOPHY1_RCR_DOM_EN_SHIFT            (31U)
#define SRC_USBOPHY1_RCR_DOM_EN(x)               (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY1_RCR_DOM_EN_SHIFT)) & SRC_USBOPHY1_RCR_DOM_EN_MASK)

/*! @name USBOPHY2_RCR - USB OTG PHY2 Reset Control Register */
#define SRC_USBOPHY2_RCR_OTG2_PHY_RESET_MASK     (0x1U)
#define SRC_USBOPHY2_RCR_OTG2_PHY_RESET_SHIFT    (0U)
#define SRC_USBOPHY2_RCR_OTG2_PHY_RESET(x)       (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY2_RCR_OTG2_PHY_RESET_SHIFT)) & SRC_USBOPHY2_RCR_OTG2_PHY_RESET_MASK)
#define SRC_USBOPHY2_RCR_DOMAIN0_MASK            (0x1000000U)
#define SRC_USBOPHY2_RCR_DOMAIN0_SHIFT           (24U)
#define SRC_USBOPHY2_RCR_DOMAIN0(x)              (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY2_RCR_DOMAIN0_SHIFT)) & SRC_USBOPHY2_RCR_DOMAIN0_MASK)
#define SRC_USBOPHY2_RCR_DOMAIN1_MASK            (0x2000000U)
#define SRC_USBOPHY2_RCR_DOMAIN1_SHIFT           (25U)
#define SRC_USBOPHY2_RCR_DOMAIN1(x)              (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY2_RCR_DOMAIN1_SHIFT)) & SRC_USBOPHY2_RCR_DOMAIN1_MASK)
#define SRC_USBOPHY2_RCR_DOMAIN2_MASK            (0x4000000U)
#define SRC_USBOPHY2_RCR_DOMAIN2_SHIFT           (26U)
#define SRC_USBOPHY2_RCR_DOMAIN2(x)              (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY2_RCR_DOMAIN2_SHIFT)) & SRC_USBOPHY2_RCR_DOMAIN2_MASK)
#define SRC_USBOPHY2_RCR_DOMAIN3_MASK            (0x8000000U)
#define SRC_USBOPHY2_RCR_DOMAIN3_SHIFT           (27U)
#define SRC_USBOPHY2_RCR_DOMAIN3(x)              (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY2_RCR_DOMAIN3_SHIFT)) & SRC_USBOPHY2_RCR_DOMAIN3_MASK)
#define SRC_USBOPHY2_RCR_LOCK_MASK               (0x40000000U)
#define SRC_USBOPHY2_RCR_LOCK_SHIFT              (30U)
#define SRC_USBOPHY2_RCR_LOCK(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY2_RCR_LOCK_SHIFT)) & SRC_USBOPHY2_RCR_LOCK_MASK)
#define SRC_USBOPHY2_RCR_DOM_EN_MASK             (0x80000000U)
#define SRC_USBOPHY2_RCR_DOM_EN_SHIFT            (31U)
#define SRC_USBOPHY2_RCR_DOM_EN(x)               (((uint32_t)(((uint32_t)(x)) << SRC_USBOPHY2_RCR_DOM_EN_SHIFT)) & SRC_USBOPHY2_RCR_DOM_EN_MASK)

/*! @name MIPIPHY_RCR - MIPI PHY Reset Control Register */
#define SRC_MIPIPHY_RCR_MIPI_DSI_RESET_BYTE_N_MASK (0x2U)
#define SRC_MIPIPHY_RCR_MIPI_DSI_RESET_BYTE_N_SHIFT (1U)
#define SRC_MIPIPHY_RCR_MIPI_DSI_RESET_BYTE_N(x) (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_MIPI_DSI_RESET_BYTE_N_SHIFT)) & SRC_MIPIPHY_RCR_MIPI_DSI_RESET_BYTE_N_MASK)
#define SRC_MIPIPHY_RCR_MIPI_DSI_RESET_N_MASK    (0x4U)
#define SRC_MIPIPHY_RCR_MIPI_DSI_RESET_N_SHIFT   (2U)
#define SRC_MIPIPHY_RCR_MIPI_DSI_RESET_N(x)      (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_MIPI_DSI_RESET_N_SHIFT)) & SRC_MIPIPHY_RCR_MIPI_DSI_RESET_N_MASK)
#define SRC_MIPIPHY_RCR_MIPI_DIS_DPI_RESET_N_MASK (0x8U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_DPI_RESET_N_SHIFT (3U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_DPI_RESET_N(x)  (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_MIPI_DIS_DPI_RESET_N_SHIFT)) & SRC_MIPIPHY_RCR_MIPI_DIS_DPI_RESET_N_MASK)
#define SRC_MIPIPHY_RCR_MIPI_DIS_ESC_RESET_N_MASK (0x10U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_ESC_RESET_N_SHIFT (4U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_ESC_RESET_N(x)  (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_MIPI_DIS_ESC_RESET_N_SHIFT)) & SRC_MIPIPHY_RCR_MIPI_DIS_ESC_RESET_N_MASK)
#define SRC_MIPIPHY_RCR_MIPI_DIS_PCLK_RESET_N_MASK (0x20U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_PCLK_RESET_N_SHIFT (5U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_PCLK_RESET_N(x) (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_MIPI_DIS_PCLK_RESET_N_SHIFT)) & SRC_MIPIPHY_RCR_MIPI_DIS_PCLK_RESET_N_MASK)
#define SRC_MIPIPHY_RCR_DOMAIN0_MASK             (0x1000000U)
#define SRC_MIPIPHY_RCR_DOMAIN0_SHIFT            (24U)
#define SRC_MIPIPHY_RCR_DOMAIN0(x)               (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_DOMAIN0_SHIFT)) & SRC_MIPIPHY_RCR_DOMAIN0_MASK)
#define SRC_MIPIPHY_RCR_DOMAIN1_MASK             (0x2000000U)
#define SRC_MIPIPHY_RCR_DOMAIN1_SHIFT            (25U)
#define SRC_MIPIPHY_RCR_DOMAIN1(x)               (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_DOMAIN1_SHIFT)) & SRC_MIPIPHY_RCR_DOMAIN1_MASK)
#define SRC_MIPIPHY_RCR_DOMAIN2_MASK             (0x4000000U)
#define SRC_MIPIPHY_RCR_DOMAIN2_SHIFT            (26U)
#define SRC_MIPIPHY_RCR_DOMAIN2(x)               (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_DOMAIN2_SHIFT)) & SRC_MIPIPHY_RCR_DOMAIN2_MASK)
#define SRC_MIPIPHY_RCR_DOMAIN3_MASK             (0x8000000U)
#define SRC_MIPIPHY_RCR_DOMAIN3_SHIFT            (27U)
#define SRC_MIPIPHY_RCR_DOMAIN3(x)               (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_DOMAIN3_SHIFT)) & SRC_MIPIPHY_RCR_DOMAIN3_MASK)
#define SRC_MIPIPHY_RCR_LOCK_MASK                (0x40000000U)
#define SRC_MIPIPHY_RCR_LOCK_SHIFT               (30U)
#define SRC_MIPIPHY_RCR_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_LOCK_SHIFT)) & SRC_MIPIPHY_RCR_LOCK_MASK)
#define SRC_MIPIPHY_RCR_DOM_EN_MASK              (0x80000000U)
#define SRC_MIPIPHY_RCR_DOM_EN_SHIFT             (31U)
#define SRC_MIPIPHY_RCR_DOM_EN(x)                (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY_RCR_DOM_EN_SHIFT)) & SRC_MIPIPHY_RCR_DOM_EN_MASK)

/*! @name PCIEPHY_RCR - PCIE PHY Reset Control Register */
#define SRC_PCIEPHY_RCR_PCIE_PHY_POWER_ON_RESET_N_MASK (0x1U)
#define SRC_PCIEPHY_RCR_PCIE_PHY_POWER_ON_RESET_N_SHIFT (0U)
#define SRC_PCIEPHY_RCR_PCIE_PHY_POWER_ON_RESET_N(x) (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_PHY_POWER_ON_RESET_N_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_PHY_POWER_ON_RESET_N_MASK)
#define SRC_PCIEPHY_RCR_PCIEPHY_G_RST_MASK       (0x2U)
#define SRC_PCIEPHY_RCR_PCIEPHY_G_RST_SHIFT      (1U)
#define SRC_PCIEPHY_RCR_PCIEPHY_G_RST(x)         (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIEPHY_G_RST_SHIFT)) & SRC_PCIEPHY_RCR_PCIEPHY_G_RST_MASK)
#define SRC_PCIEPHY_RCR_PCIEPHY_BTN_MASK         (0x4U)
#define SRC_PCIEPHY_RCR_PCIEPHY_BTN_SHIFT        (2U)
#define SRC_PCIEPHY_RCR_PCIEPHY_BTN(x)           (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIEPHY_BTN_SHIFT)) & SRC_PCIEPHY_RCR_PCIEPHY_BTN_MASK)
#define SRC_PCIEPHY_RCR_PCIEPHY_PERST_MASK       (0x8U)
#define SRC_PCIEPHY_RCR_PCIEPHY_PERST_SHIFT      (3U)
#define SRC_PCIEPHY_RCR_PCIEPHY_PERST(x)         (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIEPHY_PERST_SHIFT)) & SRC_PCIEPHY_RCR_PCIEPHY_PERST_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_CLK_REQ_MASK (0x10U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_CLK_REQ_SHIFT (4U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_CLK_REQ(x) (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_CLK_REQ_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_CLK_REQ_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_RST_MASK  (0x20U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_RST_SHIFT (5U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_RST(x)    (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_RST_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_RST_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EN_MASK   (0x40U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EN_SHIFT  (6U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EN(x)     (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EN_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EN_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_READY_MASK (0x80U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_READY_SHIFT (7U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_READY(x)  (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_READY_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_READY_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_ENTER_MASK (0x100U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_ENTER_SHIFT (8U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_ENTER(x)  (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_ENTER_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_ENTER_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EXIT_MASK (0x200U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EXIT_SHIFT (9U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EXIT(x)   (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EXIT_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EXIT_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_PME_MASK  (0x400U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_PME_SHIFT (10U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_PME(x)    (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_PME_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_PME_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_TURNOFF_MASK (0x800U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_TURNOFF_SHIFT (11U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_TURNOFF(x) (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_TURNOFF_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_TURNOFF_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_CFG_L1_AUX_MASK (0x1000U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_CFG_L1_AUX_SHIFT (12U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_CFG_L1_AUX(x)  (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_CFG_L1_AUX_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_CFG_L1_AUX_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_SYS_INT_MASK   (0x4000U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_SYS_INT_SHIFT  (14U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_SYS_INT(x)     (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_SYS_INT_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_SYS_INT_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APP_UNLOCK_MSG_MASK (0x8000U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APP_UNLOCK_MSG_SHIFT (15U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APP_UNLOCK_MSG(x) (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_APP_UNLOCK_MSG_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_APP_UNLOCK_MSG_MASK)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APP_XFER_PENDING_MASK (0x10000U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APP_XFER_PENDING_SHIFT (16U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APP_XFER_PENDING(x) (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_PCIE_CTRL_APP_XFER_PENDING_SHIFT)) & SRC_PCIEPHY_RCR_PCIE_CTRL_APP_XFER_PENDING_MASK)
#define SRC_PCIEPHY_RCR_DOMAIN0_MASK             (0x1000000U)
#define SRC_PCIEPHY_RCR_DOMAIN0_SHIFT            (24U)
#define SRC_PCIEPHY_RCR_DOMAIN0(x)               (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_DOMAIN0_SHIFT)) & SRC_PCIEPHY_RCR_DOMAIN0_MASK)
#define SRC_PCIEPHY_RCR_DOMAIN1_MASK             (0x2000000U)
#define SRC_PCIEPHY_RCR_DOMAIN1_SHIFT            (25U)
#define SRC_PCIEPHY_RCR_DOMAIN1(x)               (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_DOMAIN1_SHIFT)) & SRC_PCIEPHY_RCR_DOMAIN1_MASK)
#define SRC_PCIEPHY_RCR_DOMAIN2_MASK             (0x4000000U)
#define SRC_PCIEPHY_RCR_DOMAIN2_SHIFT            (26U)
#define SRC_PCIEPHY_RCR_DOMAIN2(x)               (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_DOMAIN2_SHIFT)) & SRC_PCIEPHY_RCR_DOMAIN2_MASK)
#define SRC_PCIEPHY_RCR_DOMAIN3_MASK             (0x8000000U)
#define SRC_PCIEPHY_RCR_DOMAIN3_SHIFT            (27U)
#define SRC_PCIEPHY_RCR_DOMAIN3(x)               (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_DOMAIN3_SHIFT)) & SRC_PCIEPHY_RCR_DOMAIN3_MASK)
#define SRC_PCIEPHY_RCR_LOCK_MASK                (0x40000000U)
#define SRC_PCIEPHY_RCR_LOCK_SHIFT               (30U)
#define SRC_PCIEPHY_RCR_LOCK(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_LOCK_SHIFT)) & SRC_PCIEPHY_RCR_LOCK_MASK)
#define SRC_PCIEPHY_RCR_DOM_EN_MASK              (0x80000000U)
#define SRC_PCIEPHY_RCR_DOM_EN_SHIFT             (31U)
#define SRC_PCIEPHY_RCR_DOM_EN(x)                (((uint32_t)(((uint32_t)(x)) << SRC_PCIEPHY_RCR_DOM_EN_SHIFT)) & SRC_PCIEPHY_RCR_DOM_EN_MASK)

/*! @name HDMI_RCR - HDMI Reset Control Register */
#define SRC_HDMI_RCR_HDMI_PHY_APB_RESET_MASK     (0x1U)
#define SRC_HDMI_RCR_HDMI_PHY_APB_RESET_SHIFT    (0U)
#define SRC_HDMI_RCR_HDMI_PHY_APB_RESET(x)       (((uint32_t)(((uint32_t)(x)) << SRC_HDMI_RCR_HDMI_PHY_APB_RESET_SHIFT)) & SRC_HDMI_RCR_HDMI_PHY_APB_RESET_MASK)
#define SRC_HDMI_RCR_DOMAIN0_MASK                (0x1000000U)
#define SRC_HDMI_RCR_DOMAIN0_SHIFT               (24U)
#define SRC_HDMI_RCR_DOMAIN0(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_HDMI_RCR_DOMAIN0_SHIFT)) & SRC_HDMI_RCR_DOMAIN0_MASK)
#define SRC_HDMI_RCR_DOMAIN1_MASK                (0x2000000U)
#define SRC_HDMI_RCR_DOMAIN1_SHIFT               (25U)
#define SRC_HDMI_RCR_DOMAIN1(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_HDMI_RCR_DOMAIN1_SHIFT)) & SRC_HDMI_RCR_DOMAIN1_MASK)
#define SRC_HDMI_RCR_DOMAIN2_MASK                (0x4000000U)
#define SRC_HDMI_RCR_DOMAIN2_SHIFT               (26U)
#define SRC_HDMI_RCR_DOMAIN2(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_HDMI_RCR_DOMAIN2_SHIFT)) & SRC_HDMI_RCR_DOMAIN2_MASK)
#define SRC_HDMI_RCR_DOMAIN3_MASK                (0x8000000U)
#define SRC_HDMI_RCR_DOMAIN3_SHIFT               (27U)
#define SRC_HDMI_RCR_DOMAIN3(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_HDMI_RCR_DOMAIN3_SHIFT)) & SRC_HDMI_RCR_DOMAIN3_MASK)
#define SRC_HDMI_RCR_LOCK_MASK                   (0x40000000U)
#define SRC_HDMI_RCR_LOCK_SHIFT                  (30U)
#define SRC_HDMI_RCR_LOCK(x)                     (((uint32_t)(((uint32_t)(x)) << SRC_HDMI_RCR_LOCK_SHIFT)) & SRC_HDMI_RCR_LOCK_MASK)
#define SRC_HDMI_RCR_DOM_EN_MASK                 (0x80000000U)
#define SRC_HDMI_RCR_DOM_EN_SHIFT                (31U)
#define SRC_HDMI_RCR_DOM_EN(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_HDMI_RCR_DOM_EN_SHIFT)) & SRC_HDMI_RCR_DOM_EN_MASK)

/*! @name DISP_RCR - DISP Reset Control Register */
#define SRC_DISP_RCR_DISP_RESET_MASK             (0x1U)
#define SRC_DISP_RCR_DISP_RESET_SHIFT            (0U)
#define SRC_DISP_RCR_DISP_RESET(x)               (((uint32_t)(((uint32_t)(x)) << SRC_DISP_RCR_DISP_RESET_SHIFT)) & SRC_DISP_RCR_DISP_RESET_MASK)
#define SRC_DISP_RCR_DOMAIN0_MASK                (0x1000000U)
#define SRC_DISP_RCR_DOMAIN0_SHIFT               (24U)
#define SRC_DISP_RCR_DOMAIN0(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_DISP_RCR_DOMAIN0_SHIFT)) & SRC_DISP_RCR_DOMAIN0_MASK)
#define SRC_DISP_RCR_DOMAIN1_MASK                (0x2000000U)
#define SRC_DISP_RCR_DOMAIN1_SHIFT               (25U)
#define SRC_DISP_RCR_DOMAIN1(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_DISP_RCR_DOMAIN1_SHIFT)) & SRC_DISP_RCR_DOMAIN1_MASK)
#define SRC_DISP_RCR_DOMAIN2_MASK                (0x4000000U)
#define SRC_DISP_RCR_DOMAIN2_SHIFT               (26U)
#define SRC_DISP_RCR_DOMAIN2(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_DISP_RCR_DOMAIN2_SHIFT)) & SRC_DISP_RCR_DOMAIN2_MASK)
#define SRC_DISP_RCR_DOMAIN3_MASK                (0x8000000U)
#define SRC_DISP_RCR_DOMAIN3_SHIFT               (27U)
#define SRC_DISP_RCR_DOMAIN3(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_DISP_RCR_DOMAIN3_SHIFT)) & SRC_DISP_RCR_DOMAIN3_MASK)
#define SRC_DISP_RCR_LOCK_MASK                   (0x40000000U)
#define SRC_DISP_RCR_LOCK_SHIFT                  (30U)
#define SRC_DISP_RCR_LOCK(x)                     (((uint32_t)(((uint32_t)(x)) << SRC_DISP_RCR_LOCK_SHIFT)) & SRC_DISP_RCR_LOCK_MASK)
#define SRC_DISP_RCR_DOM_EN_MASK                 (0x80000000U)
#define SRC_DISP_RCR_DOM_EN_SHIFT                (31U)
#define SRC_DISP_RCR_DOM_EN(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_DISP_RCR_DOM_EN_SHIFT)) & SRC_DISP_RCR_DOM_EN_MASK)

/*! @name GPU_RCR - GPU Reset Control Register */
#define SRC_GPU_RCR_GPU_RESET_MASK               (0x1U)
#define SRC_GPU_RCR_GPU_RESET_SHIFT              (0U)
#define SRC_GPU_RCR_GPU_RESET(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_GPU_RCR_GPU_RESET_SHIFT)) & SRC_GPU_RCR_GPU_RESET_MASK)
#define SRC_GPU_RCR_DOMAIN0_MASK                 (0x1000000U)
#define SRC_GPU_RCR_DOMAIN0_SHIFT                (24U)
#define SRC_GPU_RCR_DOMAIN0(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_GPU_RCR_DOMAIN0_SHIFT)) & SRC_GPU_RCR_DOMAIN0_MASK)
#define SRC_GPU_RCR_DOMAIN1_MASK                 (0x2000000U)
#define SRC_GPU_RCR_DOMAIN1_SHIFT                (25U)
#define SRC_GPU_RCR_DOMAIN1(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_GPU_RCR_DOMAIN1_SHIFT)) & SRC_GPU_RCR_DOMAIN1_MASK)
#define SRC_GPU_RCR_DOMAIN2_MASK                 (0x4000000U)
#define SRC_GPU_RCR_DOMAIN2_SHIFT                (26U)
#define SRC_GPU_RCR_DOMAIN2(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_GPU_RCR_DOMAIN2_SHIFT)) & SRC_GPU_RCR_DOMAIN2_MASK)
#define SRC_GPU_RCR_DOMAIN3_MASK                 (0x8000000U)
#define SRC_GPU_RCR_DOMAIN3_SHIFT                (27U)
#define SRC_GPU_RCR_DOMAIN3(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_GPU_RCR_DOMAIN3_SHIFT)) & SRC_GPU_RCR_DOMAIN3_MASK)
#define SRC_GPU_RCR_LOCK_MASK                    (0x40000000U)
#define SRC_GPU_RCR_LOCK_SHIFT                   (30U)
#define SRC_GPU_RCR_LOCK(x)                      (((uint32_t)(((uint32_t)(x)) << SRC_GPU_RCR_LOCK_SHIFT)) & SRC_GPU_RCR_LOCK_MASK)
#define SRC_GPU_RCR_DOM_EN_MASK                  (0x80000000U)
#define SRC_GPU_RCR_DOM_EN_SHIFT                 (31U)
#define SRC_GPU_RCR_DOM_EN(x)                    (((uint32_t)(((uint32_t)(x)) << SRC_GPU_RCR_DOM_EN_SHIFT)) & SRC_GPU_RCR_DOM_EN_MASK)

/*! @name VPU_RCR - VPU Reset Control Register */
#define SRC_VPU_RCR_VPU_RESET_MASK               (0x1U)
#define SRC_VPU_RCR_VPU_RESET_SHIFT              (0U)
#define SRC_VPU_RCR_VPU_RESET(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_VPU_RCR_VPU_RESET_SHIFT)) & SRC_VPU_RCR_VPU_RESET_MASK)
#define SRC_VPU_RCR_DOMAIN0_MASK                 (0x1000000U)
#define SRC_VPU_RCR_DOMAIN0_SHIFT                (24U)
#define SRC_VPU_RCR_DOMAIN0(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_VPU_RCR_DOMAIN0_SHIFT)) & SRC_VPU_RCR_DOMAIN0_MASK)
#define SRC_VPU_RCR_DOMAIN1_MASK                 (0x2000000U)
#define SRC_VPU_RCR_DOMAIN1_SHIFT                (25U)
#define SRC_VPU_RCR_DOMAIN1(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_VPU_RCR_DOMAIN1_SHIFT)) & SRC_VPU_RCR_DOMAIN1_MASK)
#define SRC_VPU_RCR_DOMAIN2_MASK                 (0x4000000U)
#define SRC_VPU_RCR_DOMAIN2_SHIFT                (26U)
#define SRC_VPU_RCR_DOMAIN2(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_VPU_RCR_DOMAIN2_SHIFT)) & SRC_VPU_RCR_DOMAIN2_MASK)
#define SRC_VPU_RCR_DOMAIN3_MASK                 (0x8000000U)
#define SRC_VPU_RCR_DOMAIN3_SHIFT                (27U)
#define SRC_VPU_RCR_DOMAIN3(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_VPU_RCR_DOMAIN3_SHIFT)) & SRC_VPU_RCR_DOMAIN3_MASK)
#define SRC_VPU_RCR_LOCK_MASK                    (0x40000000U)
#define SRC_VPU_RCR_LOCK_SHIFT                   (30U)
#define SRC_VPU_RCR_LOCK(x)                      (((uint32_t)(((uint32_t)(x)) << SRC_VPU_RCR_LOCK_SHIFT)) & SRC_VPU_RCR_LOCK_MASK)
#define SRC_VPU_RCR_DOM_EN_MASK                  (0x80000000U)
#define SRC_VPU_RCR_DOM_EN_SHIFT                 (31U)
#define SRC_VPU_RCR_DOM_EN(x)                    (((uint32_t)(((uint32_t)(x)) << SRC_VPU_RCR_DOM_EN_SHIFT)) & SRC_VPU_RCR_DOM_EN_MASK)

/*! @name PCIE2_RCR - PCIE2 Reset Control Register */
#define SRC_PCIE2_RCR_PCIE_PHY_POWER_ON_RESET_N_MASK (0x1U)
#define SRC_PCIE2_RCR_PCIE_PHY_POWER_ON_RESET_N_SHIFT (0U)
#define SRC_PCIE2_RCR_PCIE_PHY_POWER_ON_RESET_N(x) (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_PHY_POWER_ON_RESET_N_SHIFT)) & SRC_PCIE2_RCR_PCIE_PHY_POWER_ON_RESET_N_MASK)
#define SRC_PCIE2_RCR_PCIE_G_RST_MASK            (0x2U)
#define SRC_PCIE2_RCR_PCIE_G_RST_SHIFT           (1U)
#define SRC_PCIE2_RCR_PCIE_G_RST(x)              (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_G_RST_SHIFT)) & SRC_PCIE2_RCR_PCIE_G_RST_MASK)
#define SRC_PCIE2_RCR_PCIE_BTN_MASK              (0x4U)
#define SRC_PCIE2_RCR_PCIE_BTN_SHIFT             (2U)
#define SRC_PCIE2_RCR_PCIE_BTN(x)                (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_BTN_SHIFT)) & SRC_PCIE2_RCR_PCIE_BTN_MASK)
#define SRC_PCIE2_RCR_PCIE_PERST_MASK            (0x8U)
#define SRC_PCIE2_RCR_PCIE_PERST_SHIFT           (3U)
#define SRC_PCIE2_RCR_PCIE_PERST(x)              (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_PERST_SHIFT)) & SRC_PCIE2_RCR_PCIE_PERST_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_CLK_REQ_MASK (0x10U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_CLK_REQ_SHIFT (4U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_CLK_REQ(x)  (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_APPS_CLK_REQ_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_APPS_CLK_REQ_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_RST_MASK    (0x20U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_RST_SHIFT   (5U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_RST(x)      (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_APPS_RST_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_APPS_RST_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_EN_MASK     (0x40U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_EN_SHIFT    (6U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_EN(x)       (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_APPS_EN_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_APPS_EN_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_READY_MASK  (0x80U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_READY_SHIFT (7U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_READY(x)    (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_APPS_READY_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_APPS_READY_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_ENTER_MASK  (0x100U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_ENTER_SHIFT (8U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_ENTER(x)    (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_APPS_ENTER_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_APPS_ENTER_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_EXIT_MASK   (0x200U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_EXIT_SHIFT  (9U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_EXIT(x)     (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_APPS_EXIT_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_APPS_EXIT_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_PME_MASK    (0x400U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_PME_SHIFT   (10U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_PME(x)      (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_APPS_PME_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_APPS_PME_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_TURNOFF_MASK (0x800U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_TURNOFF_SHIFT (11U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_TURNOFF(x)  (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_APPS_TURNOFF_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_APPS_TURNOFF_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_CFG_L1_AUX_MASK  (0x1000U)
#define SRC_PCIE2_RCR_PCIE_CTRL_CFG_L1_AUX_SHIFT (12U)
#define SRC_PCIE2_RCR_PCIE_CTRL_CFG_L1_AUX(x)    (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_CFG_L1_AUX_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_CFG_L1_AUX_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_SYS_INT_MASK     (0x4000U)
#define SRC_PCIE2_RCR_PCIE_CTRL_SYS_INT_SHIFT    (14U)
#define SRC_PCIE2_RCR_PCIE_CTRL_SYS_INT(x)       (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_SYS_INT_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_SYS_INT_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_APP_UNLOCK_MSG_MASK (0x8000U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APP_UNLOCK_MSG_SHIFT (15U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APP_UNLOCK_MSG(x) (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_APP_UNLOCK_MSG_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_APP_UNLOCK_MSG_MASK)
#define SRC_PCIE2_RCR_PCIE_CTRL_APP_XFER_PENDING_MASK (0x10000U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APP_XFER_PENDING_SHIFT (16U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APP_XFER_PENDING(x) (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_PCIE_CTRL_APP_XFER_PENDING_SHIFT)) & SRC_PCIE2_RCR_PCIE_CTRL_APP_XFER_PENDING_MASK)
#define SRC_PCIE2_RCR_DOMAIN0_MASK               (0x1000000U)
#define SRC_PCIE2_RCR_DOMAIN0_SHIFT              (24U)
#define SRC_PCIE2_RCR_DOMAIN0(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_DOMAIN0_SHIFT)) & SRC_PCIE2_RCR_DOMAIN0_MASK)
#define SRC_PCIE2_RCR_DOMAIN1_MASK               (0x2000000U)
#define SRC_PCIE2_RCR_DOMAIN1_SHIFT              (25U)
#define SRC_PCIE2_RCR_DOMAIN1(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_DOMAIN1_SHIFT)) & SRC_PCIE2_RCR_DOMAIN1_MASK)
#define SRC_PCIE2_RCR_DOMAIN2_MASK               (0x4000000U)
#define SRC_PCIE2_RCR_DOMAIN2_SHIFT              (26U)
#define SRC_PCIE2_RCR_DOMAIN2(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_DOMAIN2_SHIFT)) & SRC_PCIE2_RCR_DOMAIN2_MASK)
#define SRC_PCIE2_RCR_DOMAIN3_MASK               (0x8000000U)
#define SRC_PCIE2_RCR_DOMAIN3_SHIFT              (27U)
#define SRC_PCIE2_RCR_DOMAIN3(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_DOMAIN3_SHIFT)) & SRC_PCIE2_RCR_DOMAIN3_MASK)
#define SRC_PCIE2_RCR_LOCK_MASK                  (0x40000000U)
#define SRC_PCIE2_RCR_LOCK_SHIFT                 (30U)
#define SRC_PCIE2_RCR_LOCK(x)                    (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_LOCK_SHIFT)) & SRC_PCIE2_RCR_LOCK_MASK)
#define SRC_PCIE2_RCR_DOM_EN_MASK                (0x80000000U)
#define SRC_PCIE2_RCR_DOM_EN_SHIFT               (31U)
#define SRC_PCIE2_RCR_DOM_EN(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_PCIE2_RCR_DOM_EN_SHIFT)) & SRC_PCIE2_RCR_DOM_EN_MASK)

/*! @name MIPIPHY1_RCR - MIPI CSI1 PHY Reset Control Register */
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_CORE_RESET_MASK (0x1U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_CORE_RESET_SHIFT (0U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_CORE_RESET(x) (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY1_RCR_MIPI_CSI1_CORE_RESET_SHIFT)) & SRC_MIPIPHY1_RCR_MIPI_CSI1_CORE_RESET_MASK)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_PHY_REF_RESET_MASK (0x2U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_PHY_REF_RESET_SHIFT (1U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_PHY_REF_RESET(x) (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY1_RCR_MIPI_CSI1_PHY_REF_RESET_SHIFT)) & SRC_MIPIPHY1_RCR_MIPI_CSI1_PHY_REF_RESET_MASK)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_ESC_RESET_MASK (0x4U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_ESC_RESET_SHIFT (2U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_ESC_RESET(x)  (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY1_RCR_MIPI_CSI1_ESC_RESET_SHIFT)) & SRC_MIPIPHY1_RCR_MIPI_CSI1_ESC_RESET_MASK)
#define SRC_MIPIPHY1_RCR_DOMAIN0_MASK            (0x1000000U)
#define SRC_MIPIPHY1_RCR_DOMAIN0_SHIFT           (24U)
#define SRC_MIPIPHY1_RCR_DOMAIN0(x)              (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY1_RCR_DOMAIN0_SHIFT)) & SRC_MIPIPHY1_RCR_DOMAIN0_MASK)
#define SRC_MIPIPHY1_RCR_DOMAIN1_MASK            (0x2000000U)
#define SRC_MIPIPHY1_RCR_DOMAIN1_SHIFT           (25U)
#define SRC_MIPIPHY1_RCR_DOMAIN1(x)              (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY1_RCR_DOMAIN1_SHIFT)) & SRC_MIPIPHY1_RCR_DOMAIN1_MASK)
#define SRC_MIPIPHY1_RCR_DOMAIN2_MASK            (0x4000000U)
#define SRC_MIPIPHY1_RCR_DOMAIN2_SHIFT           (26U)
#define SRC_MIPIPHY1_RCR_DOMAIN2(x)              (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY1_RCR_DOMAIN2_SHIFT)) & SRC_MIPIPHY1_RCR_DOMAIN2_MASK)
#define SRC_MIPIPHY1_RCR_DOMAIN3_MASK            (0x8000000U)
#define SRC_MIPIPHY1_RCR_DOMAIN3_SHIFT           (27U)
#define SRC_MIPIPHY1_RCR_DOMAIN3(x)              (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY1_RCR_DOMAIN3_SHIFT)) & SRC_MIPIPHY1_RCR_DOMAIN3_MASK)
#define SRC_MIPIPHY1_RCR_LOCK_MASK               (0x40000000U)
#define SRC_MIPIPHY1_RCR_LOCK_SHIFT              (30U)
#define SRC_MIPIPHY1_RCR_LOCK(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY1_RCR_LOCK_SHIFT)) & SRC_MIPIPHY1_RCR_LOCK_MASK)
#define SRC_MIPIPHY1_RCR_DOM_EN_MASK             (0x80000000U)
#define SRC_MIPIPHY1_RCR_DOM_EN_SHIFT            (31U)
#define SRC_MIPIPHY1_RCR_DOM_EN(x)               (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY1_RCR_DOM_EN_SHIFT)) & SRC_MIPIPHY1_RCR_DOM_EN_MASK)

/*! @name MIPIPHY2_RCR - MIPI CSI2 PHY Reset Control Register */
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_CORE_RESET_MASK (0x1U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_CORE_RESET_SHIFT (0U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_CORE_RESET(x) (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY2_RCR_MIPI_CSI2_CORE_RESET_SHIFT)) & SRC_MIPIPHY2_RCR_MIPI_CSI2_CORE_RESET_MASK)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_PHY_REF_RESET_MASK (0x2U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_PHY_REF_RESET_SHIFT (1U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_PHY_REF_RESET(x) (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY2_RCR_MIPI_CSI2_PHY_REF_RESET_SHIFT)) & SRC_MIPIPHY2_RCR_MIPI_CSI2_PHY_REF_RESET_MASK)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_ESC_RESET_MASK (0x4U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_ESC_RESET_SHIFT (2U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_ESC_RESET(x)  (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY2_RCR_MIPI_CSI2_ESC_RESET_SHIFT)) & SRC_MIPIPHY2_RCR_MIPI_CSI2_ESC_RESET_MASK)
#define SRC_MIPIPHY2_RCR_DOMAIN0_MASK            (0x1000000U)
#define SRC_MIPIPHY2_RCR_DOMAIN0_SHIFT           (24U)
#define SRC_MIPIPHY2_RCR_DOMAIN0(x)              (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY2_RCR_DOMAIN0_SHIFT)) & SRC_MIPIPHY2_RCR_DOMAIN0_MASK)
#define SRC_MIPIPHY2_RCR_DOMAIN1_MASK            (0x2000000U)
#define SRC_MIPIPHY2_RCR_DOMAIN1_SHIFT           (25U)
#define SRC_MIPIPHY2_RCR_DOMAIN1(x)              (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY2_RCR_DOMAIN1_SHIFT)) & SRC_MIPIPHY2_RCR_DOMAIN1_MASK)
#define SRC_MIPIPHY2_RCR_DOMAIN2_MASK            (0x4000000U)
#define SRC_MIPIPHY2_RCR_DOMAIN2_SHIFT           (26U)
#define SRC_MIPIPHY2_RCR_DOMAIN2(x)              (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY2_RCR_DOMAIN2_SHIFT)) & SRC_MIPIPHY2_RCR_DOMAIN2_MASK)
#define SRC_MIPIPHY2_RCR_DOMAIN3_MASK            (0x8000000U)
#define SRC_MIPIPHY2_RCR_DOMAIN3_SHIFT           (27U)
#define SRC_MIPIPHY2_RCR_DOMAIN3(x)              (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY2_RCR_DOMAIN3_SHIFT)) & SRC_MIPIPHY2_RCR_DOMAIN3_MASK)
#define SRC_MIPIPHY2_RCR_LOCK_MASK               (0x40000000U)
#define SRC_MIPIPHY2_RCR_LOCK_SHIFT              (30U)
#define SRC_MIPIPHY2_RCR_LOCK(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY2_RCR_LOCK_SHIFT)) & SRC_MIPIPHY2_RCR_LOCK_MASK)
#define SRC_MIPIPHY2_RCR_DOM_EN_MASK             (0x80000000U)
#define SRC_MIPIPHY2_RCR_DOM_EN_SHIFT            (31U)
#define SRC_MIPIPHY2_RCR_DOM_EN(x)               (((uint32_t)(((uint32_t)(x)) << SRC_MIPIPHY2_RCR_DOM_EN_SHIFT)) & SRC_MIPIPHY2_RCR_DOM_EN_MASK)

/*! @name SBMR1 - SRC Boot Mode Register 1 */
#define SRC_SBMR1_BOOT_CFG_MASK                  (0xFFFFFFFFU)
#define SRC_SBMR1_BOOT_CFG_SHIFT                 (0U)
#define SRC_SBMR1_BOOT_CFG(x)                    (((uint32_t)(((uint32_t)(x)) << SRC_SBMR1_BOOT_CFG_SHIFT)) & SRC_SBMR1_BOOT_CFG_MASK)

/*! @name SRSR - SRC Reset Status Register */
#define SRC_SRSR_CSU_RESET_B_MASK                (0x4U)
#define SRC_SRSR_CSU_RESET_B_SHIFT               (2U)
#define SRC_SRSR_CSU_RESET_B(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_SRSR_CSU_RESET_B_SHIFT)) & SRC_SRSR_CSU_RESET_B_MASK)
#define SRC_SRSR_IPP_USER_RESET_B_MASK           (0x8U)
#define SRC_SRSR_IPP_USER_RESET_B_SHIFT          (3U)
#define SRC_SRSR_IPP_USER_RESET_B(x)             (((uint32_t)(((uint32_t)(x)) << SRC_SRSR_IPP_USER_RESET_B_SHIFT)) & SRC_SRSR_IPP_USER_RESET_B_MASK)
#define SRC_SRSR_WDOG1_RST_B_MASK                (0x10U)
#define SRC_SRSR_WDOG1_RST_B_SHIFT               (4U)
#define SRC_SRSR_WDOG1_RST_B(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_SRSR_WDOG1_RST_B_SHIFT)) & SRC_SRSR_WDOG1_RST_B_MASK)
#define SRC_SRSR_JTAG_RST_B_MASK                 (0x20U)
#define SRC_SRSR_JTAG_RST_B_SHIFT                (5U)
#define SRC_SRSR_JTAG_RST_B(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_SRSR_JTAG_RST_B_SHIFT)) & SRC_SRSR_JTAG_RST_B_MASK)
#define SRC_SRSR_JTAG_SW_RST_MASK                (0x40U)
#define SRC_SRSR_JTAG_SW_RST_SHIFT               (6U)
#define SRC_SRSR_JTAG_SW_RST(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_SRSR_JTAG_SW_RST_SHIFT)) & SRC_SRSR_JTAG_SW_RST_MASK)
#define SRC_SRSR_WDOG3_RST_B_MASK                (0x80U)
#define SRC_SRSR_WDOG3_RST_B_SHIFT               (7U)
#define SRC_SRSR_WDOG3_RST_B(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_SRSR_WDOG3_RST_B_SHIFT)) & SRC_SRSR_WDOG3_RST_B_MASK)
#define SRC_SRSR_WDOG4_RST_B_MASK                (0x100U)
#define SRC_SRSR_WDOG4_RST_B_SHIFT               (8U)
#define SRC_SRSR_WDOG4_RST_B(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_SRSR_WDOG4_RST_B_SHIFT)) & SRC_SRSR_WDOG4_RST_B_MASK)
#define SRC_SRSR_TEMPSENSE_RST_B_MASK            (0x200U)
#define SRC_SRSR_TEMPSENSE_RST_B_SHIFT           (9U)
#define SRC_SRSR_TEMPSENSE_RST_B(x)              (((uint32_t)(((uint32_t)(x)) << SRC_SRSR_TEMPSENSE_RST_B_SHIFT)) & SRC_SRSR_TEMPSENSE_RST_B_MASK)

/*! @name SISR - SRC Interrupt Status Register */
#define SRC_SISR_HSICPHY_PASSED_RESET_MASK       (0x2U)
#define SRC_SISR_HSICPHY_PASSED_RESET_SHIFT      (1U)
#define SRC_SISR_HSICPHY_PASSED_RESET(x)         (((uint32_t)(((uint32_t)(x)) << SRC_SISR_HSICPHY_PASSED_RESET_SHIFT)) & SRC_SISR_HSICPHY_PASSED_RESET_MASK)
#define SRC_SISR_OTGPHY1_PASSED_RESET_MASK       (0x4U)
#define SRC_SISR_OTGPHY1_PASSED_RESET_SHIFT      (2U)
#define SRC_SISR_OTGPHY1_PASSED_RESET(x)         (((uint32_t)(((uint32_t)(x)) << SRC_SISR_OTGPHY1_PASSED_RESET_SHIFT)) & SRC_SISR_OTGPHY1_PASSED_RESET_MASK)
#define SRC_SISR_OTGPHY2_PASSED_RESET_MASK       (0x8U)
#define SRC_SISR_OTGPHY2_PASSED_RESET_SHIFT      (3U)
#define SRC_SISR_OTGPHY2_PASSED_RESET(x)         (((uint32_t)(((uint32_t)(x)) << SRC_SISR_OTGPHY2_PASSED_RESET_SHIFT)) & SRC_SISR_OTGPHY2_PASSED_RESET_MASK)
#define SRC_SISR_MIPIPHY_PASSED_RESET_MASK       (0x10U)
#define SRC_SISR_MIPIPHY_PASSED_RESET_SHIFT      (4U)
#define SRC_SISR_MIPIPHY_PASSED_RESET(x)         (((uint32_t)(((uint32_t)(x)) << SRC_SISR_MIPIPHY_PASSED_RESET_SHIFT)) & SRC_SISR_MIPIPHY_PASSED_RESET_MASK)
#define SRC_SISR_PCIE1_PHY_PASSED_RESET_MASK     (0x20U)
#define SRC_SISR_PCIE1_PHY_PASSED_RESET_SHIFT    (5U)
#define SRC_SISR_PCIE1_PHY_PASSED_RESET(x)       (((uint32_t)(((uint32_t)(x)) << SRC_SISR_PCIE1_PHY_PASSED_RESET_SHIFT)) & SRC_SISR_PCIE1_PHY_PASSED_RESET_MASK)
#define SRC_SISR_HDMI_PASSED_RESET_MASK          (0x40U)
#define SRC_SISR_HDMI_PASSED_RESET_SHIFT         (6U)
#define SRC_SISR_HDMI_PASSED_RESET(x)            (((uint32_t)(((uint32_t)(x)) << SRC_SISR_HDMI_PASSED_RESET_SHIFT)) & SRC_SISR_HDMI_PASSED_RESET_MASK)
#define SRC_SISR_DISPLAY_PASSED_RESET_MASK       (0x80U)
#define SRC_SISR_DISPLAY_PASSED_RESET_SHIFT      (7U)
#define SRC_SISR_DISPLAY_PASSED_RESET(x)         (((uint32_t)(((uint32_t)(x)) << SRC_SISR_DISPLAY_PASSED_RESET_SHIFT)) & SRC_SISR_DISPLAY_PASSED_RESET_MASK)
#define SRC_SISR_M4C_PASSED_RESET_MASK           (0x100U)
#define SRC_SISR_M4C_PASSED_RESET_SHIFT          (8U)
#define SRC_SISR_M4C_PASSED_RESET(x)             (((uint32_t)(((uint32_t)(x)) << SRC_SISR_M4C_PASSED_RESET_SHIFT)) & SRC_SISR_M4C_PASSED_RESET_MASK)
#define SRC_SISR_M4P_PASSED_RESET_MASK           (0x200U)
#define SRC_SISR_M4P_PASSED_RESET_SHIFT          (9U)
#define SRC_SISR_M4P_PASSED_RESET(x)             (((uint32_t)(((uint32_t)(x)) << SRC_SISR_M4P_PASSED_RESET_SHIFT)) & SRC_SISR_M4P_PASSED_RESET_MASK)
#define SRC_SISR_GPU_PASSED_RESET_MASK           (0x400U)
#define SRC_SISR_GPU_PASSED_RESET_SHIFT          (10U)
#define SRC_SISR_GPU_PASSED_RESET(x)             (((uint32_t)(((uint32_t)(x)) << SRC_SISR_GPU_PASSED_RESET_SHIFT)) & SRC_SISR_GPU_PASSED_RESET_MASK)
#define SRC_SISR_VPU_PASSED_RESET_MASK           (0x800U)
#define SRC_SISR_VPU_PASSED_RESET_SHIFT          (11U)
#define SRC_SISR_VPU_PASSED_RESET(x)             (((uint32_t)(((uint32_t)(x)) << SRC_SISR_VPU_PASSED_RESET_SHIFT)) & SRC_SISR_VPU_PASSED_RESET_MASK)
#define SRC_SISR_PCIE2_PHY_PASSED_RESET_MASK     (0x1000U)
#define SRC_SISR_PCIE2_PHY_PASSED_RESET_SHIFT    (12U)
#define SRC_SISR_PCIE2_PHY_PASSED_RESET(x)       (((uint32_t)(((uint32_t)(x)) << SRC_SISR_PCIE2_PHY_PASSED_RESET_SHIFT)) & SRC_SISR_PCIE2_PHY_PASSED_RESET_MASK)
#define SRC_SISR_MIPI_CSI1_PHY_PASSED_RESET_MASK (0x2000U)
#define SRC_SISR_MIPI_CSI1_PHY_PASSED_RESET_SHIFT (13U)
#define SRC_SISR_MIPI_CSI1_PHY_PASSED_RESET(x)   (((uint32_t)(((uint32_t)(x)) << SRC_SISR_MIPI_CSI1_PHY_PASSED_RESET_SHIFT)) & SRC_SISR_MIPI_CSI1_PHY_PASSED_RESET_MASK)
#define SRC_SISR_MIPI_CSI2_PHY_PASSED_RESET_MASK (0x4000U)
#define SRC_SISR_MIPI_CSI2_PHY_PASSED_RESET_SHIFT (14U)
#define SRC_SISR_MIPI_CSI2_PHY_PASSED_RESET(x)   (((uint32_t)(((uint32_t)(x)) << SRC_SISR_MIPI_CSI2_PHY_PASSED_RESET_SHIFT)) & SRC_SISR_MIPI_CSI2_PHY_PASSED_RESET_MASK)

/*! @name SIMR - SRC Interrupt Mask Register */
#define SRC_SIMR_MASK_HSICPHY_PASSED_RESET_MASK  (0x2U)
#define SRC_SIMR_MASK_HSICPHY_PASSED_RESET_SHIFT (1U)
#define SRC_SIMR_MASK_HSICPHY_PASSED_RESET(x)    (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_HSICPHY_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_HSICPHY_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_OTGPHY1_PASSED_RESET_MASK  (0x4U)
#define SRC_SIMR_MASK_OTGPHY1_PASSED_RESET_SHIFT (2U)
#define SRC_SIMR_MASK_OTGPHY1_PASSED_RESET(x)    (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_OTGPHY1_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_OTGPHY1_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_OTGPHY2_PASSED_RESET_MASK  (0x8U)
#define SRC_SIMR_MASK_OTGPHY2_PASSED_RESET_SHIFT (3U)
#define SRC_SIMR_MASK_OTGPHY2_PASSED_RESET(x)    (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_OTGPHY2_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_OTGPHY2_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_MIPIPHY_PASSED_RESET_MASK  (0x10U)
#define SRC_SIMR_MASK_MIPIPHY_PASSED_RESET_SHIFT (4U)
#define SRC_SIMR_MASK_MIPIPHY_PASSED_RESET(x)    (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_MIPIPHY_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_MIPIPHY_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_PCIE1_PHY_PASSED_RESET_MASK (0x20U)
#define SRC_SIMR_MASK_PCIE1_PHY_PASSED_RESET_SHIFT (5U)
#define SRC_SIMR_MASK_PCIE1_PHY_PASSED_RESET(x)  (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_PCIE1_PHY_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_PCIE1_PHY_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_HDMI_PASSED_RESET_MASK     (0x40U)
#define SRC_SIMR_MASK_HDMI_PASSED_RESET_SHIFT    (6U)
#define SRC_SIMR_MASK_HDMI_PASSED_RESET(x)       (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_HDMI_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_HDMI_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_DISPLAY_PASSED_RESET_MASK  (0x80U)
#define SRC_SIMR_MASK_DISPLAY_PASSED_RESET_SHIFT (7U)
#define SRC_SIMR_MASK_DISPLAY_PASSED_RESET(x)    (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_DISPLAY_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_DISPLAY_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_M4C_PASSED_RESET_MASK      (0x100U)
#define SRC_SIMR_MASK_M4C_PASSED_RESET_SHIFT     (8U)
#define SRC_SIMR_MASK_M4C_PASSED_RESET(x)        (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_M4C_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_M4C_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_M4P_PASSED_RESET_MASK      (0x200U)
#define SRC_SIMR_MASK_M4P_PASSED_RESET_SHIFT     (9U)
#define SRC_SIMR_MASK_M4P_PASSED_RESET(x)        (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_M4P_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_M4P_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_GPU_PASSED_RESET_MASK      (0x400U)
#define SRC_SIMR_MASK_GPU_PASSED_RESET_SHIFT     (10U)
#define SRC_SIMR_MASK_GPU_PASSED_RESET(x)        (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_GPU_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_GPU_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_VPU_PASSED_RESET_MASK      (0x800U)
#define SRC_SIMR_MASK_VPU_PASSED_RESET_SHIFT     (11U)
#define SRC_SIMR_MASK_VPU_PASSED_RESET(x)        (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_VPU_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_VPU_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_PCIE2_PHY_PASSED_RESET_MASK (0x1000U)
#define SRC_SIMR_MASK_PCIE2_PHY_PASSED_RESET_SHIFT (12U)
#define SRC_SIMR_MASK_PCIE2_PHY_PASSED_RESET(x)  (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_PCIE2_PHY_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_PCIE2_PHY_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_MIPI_CSI1_PHY_PASSED_RESET_MASK (0x2000U)
#define SRC_SIMR_MASK_MIPI_CSI1_PHY_PASSED_RESET_SHIFT (13U)
#define SRC_SIMR_MASK_MIPI_CSI1_PHY_PASSED_RESET(x) (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_MIPI_CSI1_PHY_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_MIPI_CSI1_PHY_PASSED_RESET_MASK)
#define SRC_SIMR_MASK_MIPI_CSI2_PHY_PASSED_RESET_MASK (0x4000U)
#define SRC_SIMR_MASK_MIPI_CSI2_PHY_PASSED_RESET_SHIFT (14U)
#define SRC_SIMR_MASK_MIPI_CSI2_PHY_PASSED_RESET(x) (((uint32_t)(((uint32_t)(x)) << SRC_SIMR_MASK_MIPI_CSI2_PHY_PASSED_RESET_SHIFT)) & SRC_SIMR_MASK_MIPI_CSI2_PHY_PASSED_RESET_MASK)

/*! @name SBMR2 - SRC Boot Mode Register 2 */
#define SRC_SBMR2_SEC_CONFIG_MASK                (0x3U)
#define SRC_SBMR2_SEC_CONFIG_SHIFT               (0U)
#define SRC_SBMR2_SEC_CONFIG(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_SEC_CONFIG_SHIFT)) & SRC_SBMR2_SEC_CONFIG_MASK)
#define SRC_SBMR2_DIR_BT_DIS_MASK                (0x8U)
#define SRC_SBMR2_DIR_BT_DIS_SHIFT               (3U)
#define SRC_SBMR2_DIR_BT_DIS(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_DIR_BT_DIS_SHIFT)) & SRC_SBMR2_DIR_BT_DIS_MASK)
#define SRC_SBMR2_BT_FUSE_SEL_MASK               (0x10U)
#define SRC_SBMR2_BT_FUSE_SEL_SHIFT              (4U)
#define SRC_SBMR2_BT_FUSE_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_BT_FUSE_SEL_SHIFT)) & SRC_SBMR2_BT_FUSE_SEL_MASK)
#define SRC_SBMR2_BMOD_MASK                      (0x3000000U)
#define SRC_SBMR2_BMOD_SHIFT                     (24U)
#define SRC_SBMR2_BMOD(x)                        (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_BMOD_SHIFT)) & SRC_SBMR2_BMOD_MASK)

/*! @name GPR - SRC General Purpose Register 1..SRC General Purpose Register 10 */
#define SRC_GPR_PERSISTENT_ENTRY0_MASK           (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ENTRY0_SHIFT          (0U)
#define SRC_GPR_PERSISTENT_ENTRY0(x)             (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ENTRY0_SHIFT)) & SRC_GPR_PERSISTENT_ENTRY0_MASK)
#define SRC_GPR_PERSISTENT_ARG0_MASK             (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ARG0_SHIFT            (0U)
#define SRC_GPR_PERSISTENT_ARG0(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ARG0_SHIFT)) & SRC_GPR_PERSISTENT_ARG0_MASK)
#define SRC_GPR_PERSISTENT_ENTRY1_MASK           (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ENTRY1_SHIFT          (0U)
#define SRC_GPR_PERSISTENT_ENTRY1(x)             (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ENTRY1_SHIFT)) & SRC_GPR_PERSISTENT_ENTRY1_MASK)
#define SRC_GPR_PERSISTENT_ARG1_MASK             (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ARG1_SHIFT            (0U)
#define SRC_GPR_PERSISTENT_ARG1(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ARG1_SHIFT)) & SRC_GPR_PERSISTENT_ARG1_MASK)
#define SRC_GPR_PERSISTENT_ENTRY2_MASK           (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ENTRY2_SHIFT          (0U)
#define SRC_GPR_PERSISTENT_ENTRY2(x)             (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ENTRY2_SHIFT)) & SRC_GPR_PERSISTENT_ENTRY2_MASK)
#define SRC_GPR_PERSISTENT_ARG2_MASK             (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ARG2_SHIFT            (0U)
#define SRC_GPR_PERSISTENT_ARG2(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ARG2_SHIFT)) & SRC_GPR_PERSISTENT_ARG2_MASK)
#define SRC_GPR_PERSISTENT_ENTRY3_MASK           (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ENTRY3_SHIFT          (0U)
#define SRC_GPR_PERSISTENT_ENTRY3(x)             (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ENTRY3_SHIFT)) & SRC_GPR_PERSISTENT_ENTRY3_MASK)
#define SRC_GPR_PERSISTENT_ARG3_MASK             (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ARG3_SHIFT            (0U)
#define SRC_GPR_PERSISTENT_ARG3(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ARG3_SHIFT)) & SRC_GPR_PERSISTENT_ARG3_MASK)

/* The count of SRC_GPR */
#define SRC_GPR_COUNT                            (10U)

/*! @name DDRC_RCR - SRC DDR Controller Reset Control Register */
#define SRC_DDRC_RCR_DDRC1_PRST_MASK             (0x1U)
#define SRC_DDRC_RCR_DDRC1_PRST_SHIFT            (0U)
#define SRC_DDRC_RCR_DDRC1_PRST(x)               (((uint32_t)(((uint32_t)(x)) << SRC_DDRC_RCR_DDRC1_PRST_SHIFT)) & SRC_DDRC_RCR_DDRC1_PRST_MASK)
#define SRC_DDRC_RCR_DDRC1_CORE_RST_MASK         (0x2U)
#define SRC_DDRC_RCR_DDRC1_CORE_RST_SHIFT        (1U)
#define SRC_DDRC_RCR_DDRC1_CORE_RST(x)           (((uint32_t)(((uint32_t)(x)) << SRC_DDRC_RCR_DDRC1_CORE_RST_SHIFT)) & SRC_DDRC_RCR_DDRC1_CORE_RST_MASK)
#define SRC_DDRC_RCR_DDRC1_PHY_RESET_MASK        (0x4U)
#define SRC_DDRC_RCR_DDRC1_PHY_RESET_SHIFT       (2U)
#define SRC_DDRC_RCR_DDRC1_PHY_RESET(x)          (((uint32_t)(((uint32_t)(x)) << SRC_DDRC_RCR_DDRC1_PHY_RESET_SHIFT)) & SRC_DDRC_RCR_DDRC1_PHY_RESET_MASK)
#define SRC_DDRC_RCR_DDRC1_PHY_PWROKIN_MASK      (0x8U)
#define SRC_DDRC_RCR_DDRC1_PHY_PWROKIN_SHIFT     (3U)
#define SRC_DDRC_RCR_DDRC1_PHY_PWROKIN(x)        (((uint32_t)(((uint32_t)(x)) << SRC_DDRC_RCR_DDRC1_PHY_PWROKIN_SHIFT)) & SRC_DDRC_RCR_DDRC1_PHY_PWROKIN_MASK)
#define SRC_DDRC_RCR_DOMAIN0_MASK                (0x1000000U)
#define SRC_DDRC_RCR_DOMAIN0_SHIFT               (24U)
#define SRC_DDRC_RCR_DOMAIN0(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_DDRC_RCR_DOMAIN0_SHIFT)) & SRC_DDRC_RCR_DOMAIN0_MASK)
#define SRC_DDRC_RCR_DOMAIN1_MASK                (0x2000000U)
#define SRC_DDRC_RCR_DOMAIN1_SHIFT               (25U)
#define SRC_DDRC_RCR_DOMAIN1(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_DDRC_RCR_DOMAIN1_SHIFT)) & SRC_DDRC_RCR_DOMAIN1_MASK)
#define SRC_DDRC_RCR_DOMAIN2_MASK                (0x4000000U)
#define SRC_DDRC_RCR_DOMAIN2_SHIFT               (26U)
#define SRC_DDRC_RCR_DOMAIN2(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_DDRC_RCR_DOMAIN2_SHIFT)) & SRC_DDRC_RCR_DOMAIN2_MASK)
#define SRC_DDRC_RCR_DOMAIN3_MASK                (0x8000000U)
#define SRC_DDRC_RCR_DOMAIN3_SHIFT               (27U)
#define SRC_DDRC_RCR_DOMAIN3(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_DDRC_RCR_DOMAIN3_SHIFT)) & SRC_DDRC_RCR_DOMAIN3_MASK)
#define SRC_DDRC_RCR_LOCK_MASK                   (0x40000000U)
#define SRC_DDRC_RCR_LOCK_SHIFT                  (30U)
#define SRC_DDRC_RCR_LOCK(x)                     (((uint32_t)(((uint32_t)(x)) << SRC_DDRC_RCR_LOCK_SHIFT)) & SRC_DDRC_RCR_LOCK_MASK)
#define SRC_DDRC_RCR_DOM_EN_MASK                 (0x80000000U)
#define SRC_DDRC_RCR_DOM_EN_SHIFT                (31U)
#define SRC_DDRC_RCR_DOM_EN(x)                   (((uint32_t)(((uint32_t)(x)) << SRC_DDRC_RCR_DOM_EN_SHIFT)) & SRC_DDRC_RCR_DOM_EN_MASK)

/*! @name DDRC2_RCR - SRC DDRC2 Controller Reset Control Register */
#define SRC_DDRC2_RCR_DDRC2_PRST_MASK            (0x1U)
#define SRC_DDRC2_RCR_DDRC2_PRST_SHIFT           (0U)
#define SRC_DDRC2_RCR_DDRC2_PRST(x)              (((uint32_t)(((uint32_t)(x)) << SRC_DDRC2_RCR_DDRC2_PRST_SHIFT)) & SRC_DDRC2_RCR_DDRC2_PRST_MASK)
#define SRC_DDRC2_RCR_DDRC2_CORE_RST_MASK        (0x2U)
#define SRC_DDRC2_RCR_DDRC2_CORE_RST_SHIFT       (1U)
#define SRC_DDRC2_RCR_DDRC2_CORE_RST(x)          (((uint32_t)(((uint32_t)(x)) << SRC_DDRC2_RCR_DDRC2_CORE_RST_SHIFT)) & SRC_DDRC2_RCR_DDRC2_CORE_RST_MASK)
#define SRC_DDRC2_RCR_DDRC1_PHY_RESET_MASK       (0x4U)
#define SRC_DDRC2_RCR_DDRC1_PHY_RESET_SHIFT      (2U)
#define SRC_DDRC2_RCR_DDRC1_PHY_RESET(x)         (((uint32_t)(((uint32_t)(x)) << SRC_DDRC2_RCR_DDRC1_PHY_RESET_SHIFT)) & SRC_DDRC2_RCR_DDRC1_PHY_RESET_MASK)
#define SRC_DDRC2_RCR_DDRC1_PHY_PWROKIN_MASK     (0x8U)
#define SRC_DDRC2_RCR_DDRC1_PHY_PWROKIN_SHIFT    (3U)
#define SRC_DDRC2_RCR_DDRC1_PHY_PWROKIN(x)       (((uint32_t)(((uint32_t)(x)) << SRC_DDRC2_RCR_DDRC1_PHY_PWROKIN_SHIFT)) & SRC_DDRC2_RCR_DDRC1_PHY_PWROKIN_MASK)
#define SRC_DDRC2_RCR_DOMAIN0_MASK               (0x1000000U)
#define SRC_DDRC2_RCR_DOMAIN0_SHIFT              (24U)
#define SRC_DDRC2_RCR_DOMAIN0(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_DDRC2_RCR_DOMAIN0_SHIFT)) & SRC_DDRC2_RCR_DOMAIN0_MASK)
#define SRC_DDRC2_RCR_DOMAIN1_MASK               (0x2000000U)
#define SRC_DDRC2_RCR_DOMAIN1_SHIFT              (25U)
#define SRC_DDRC2_RCR_DOMAIN1(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_DDRC2_RCR_DOMAIN1_SHIFT)) & SRC_DDRC2_RCR_DOMAIN1_MASK)
#define SRC_DDRC2_RCR_DOMAIN2_MASK               (0x4000000U)
#define SRC_DDRC2_RCR_DOMAIN2_SHIFT              (26U)
#define SRC_DDRC2_RCR_DOMAIN2(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_DDRC2_RCR_DOMAIN2_SHIFT)) & SRC_DDRC2_RCR_DOMAIN2_MASK)
#define SRC_DDRC2_RCR_DOMAIN3_MASK               (0x8000000U)
#define SRC_DDRC2_RCR_DOMAIN3_SHIFT              (27U)
#define SRC_DDRC2_RCR_DOMAIN3(x)                 (((uint32_t)(((uint32_t)(x)) << SRC_DDRC2_RCR_DOMAIN3_SHIFT)) & SRC_DDRC2_RCR_DOMAIN3_MASK)
#define SRC_DDRC2_RCR_LOCK_MASK                  (0x40000000U)
#define SRC_DDRC2_RCR_LOCK_SHIFT                 (30U)
#define SRC_DDRC2_RCR_LOCK(x)                    (((uint32_t)(((uint32_t)(x)) << SRC_DDRC2_RCR_LOCK_SHIFT)) & SRC_DDRC2_RCR_LOCK_MASK)
#define SRC_DDRC2_RCR_DOM_EN_MASK                (0x80000000U)
#define SRC_DDRC2_RCR_DOM_EN_SHIFT               (31U)
#define SRC_DDRC2_RCR_DOM_EN(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_DDRC2_RCR_DOM_EN_SHIFT)) & SRC_DDRC2_RCR_DOM_EN_MASK)


/*!
 * @}
 */ /* end of group SRC_Register_Masks */


/* SRC - Peripheral instance base addresses */
/** Peripheral SRC base address */
#define SRC_BASE                                 (0x30390000u)
/** Peripheral SRC base pointer */
#define SRC                                      ((SRC_Type *)SRC_BASE)
/** Array initializer of SRC peripheral base addresses */
#define SRC_BASE_ADDRS                           { SRC_BASE }
/** Array initializer of SRC peripheral base pointers */
#define SRC_BASE_PTRS                            { SRC }
/** Interrupt vectors for the SRC peripheral type */
#define SRC_IRQS                                 { SRC_IRQn }
#define SRC_COMBINED_IRQS                        { SRC_Combined_IRQn }

/*!
 * @}
 */ /* end of group SRC_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- TMU Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMU_Peripheral_Access_Layer TMU Peripheral Access Layer
 * @{
 */

/** TMU - Register Layout Typedef */
typedef struct {
  __IO uint32_t TMR;                               /**< TMU Mode register, offset: 0x0 */
  __I  uint32_t TSR;                               /**< TMU Status register, offset: 0x4 */
  __IO uint32_t TMTMIR;                            /**< TMU Monitor Temperature Measurement Interval register, offset: 0x8 */
       uint8_t RESERVED_0[20];
  __IO uint32_t TIER;                              /**< TMU Interrupt Enable register, offset: 0x20 */
  __IO uint32_t TIDR;                              /**< TMU Interrupt Detect register, offset: 0x24 */
  __IO uint32_t TISCR;                             /**< TMU Interrupt Site Capture register, offset: 0x28 */
  __IO uint32_t TICSCR;                            /**< TMU Interrupt Critical Site Capture register, offset: 0x2C */
       uint8_t RESERVED_1[16];
  __I  uint32_t TMHTCRH;                           /**< TMU Monitor High Temperature Capture register, offset: 0x40 */
  __I  uint32_t TMHTCRL;                           /**< TMU Monitor Low Temperature Capture register, offset: 0x44 */
       uint8_t RESERVED_2[8];
  __IO uint32_t TMHTITR;                           /**< TMU Monitor High Temperature Immediate Threshold register, offset: 0x50 */
  __IO uint32_t TMHTATR;                           /**< TMU Monitor High Temperature Average threshold register, offset: 0x54 */
  __IO uint32_t TMHTACTR;                          /**< TMU Monitor High Temperature Average Critical Threshold register, offset: 0x58 */
       uint8_t RESERVED_3[36];
  __IO uint32_t TTCFGR;                            /**< TMU Temperature Configuration register, offset: 0x80 */
  __IO uint32_t TSCFGR;                            /**< TMU Sensor Configuration register, offset: 0x84 */
       uint8_t RESERVED_4[120];
  struct {                                         /* offset: 0x100, array step: 0x10 */
    __I  uint32_t TRITSR;                            /**< TMU Report Immediate Temperature Site register n, array offset: 0x100, array step: 0x10 */
    __I  uint32_t TRATSR;                            /**< TMU Report Average Temperature Site register n, array offset: 0x104, array step: 0x10 */
         uint8_t RESERVED_0[8];
  } TRTSR[16];
       uint8_t RESERVED_5[2552];
  __I  uint32_t IPBRR0;                            /**< IP Block Revision register 0, offset: 0xBF8 */
       uint8_t RESERVED_6[788];
  __IO uint32_t TTRCR[4];                          /**< TMU Temperature Range n Control register, array offset: 0xF10, array step: 0x4 */
} TMU_Type;

/* ----------------------------------------------------------------------------
   -- TMU Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMU_Register_Masks TMU Register Masks
 * @{
 */

/*! @name TMR - TMU Mode register */
#define TMU_TMR_MSITE_MASK                       (0xFFFFU)
#define TMU_TMR_MSITE_SHIFT                      (0U)
#define TMU_TMR_MSITE(x)                         (((uint32_t)(((uint32_t)(x)) << TMU_TMR_MSITE_SHIFT)) & TMU_TMR_MSITE_MASK)
#define TMU_TMR_ALPF_MASK                        (0xC000000U)
#define TMU_TMR_ALPF_SHIFT                       (26U)
#define TMU_TMR_ALPF(x)                          (((uint32_t)(((uint32_t)(x)) << TMU_TMR_ALPF_SHIFT)) & TMU_TMR_ALPF_MASK)
#define TMU_TMR_ME_MASK                          (0x80000000U)
#define TMU_TMR_ME_SHIFT                         (31U)
#define TMU_TMR_ME(x)                            (((uint32_t)(((uint32_t)(x)) << TMU_TMR_ME_SHIFT)) & TMU_TMR_ME_MASK)

/*! @name TSR - TMU Status register */
#define TMU_TSR_ORH_MASK                         (0x10000000U)
#define TMU_TSR_ORH_SHIFT                        (28U)
#define TMU_TSR_ORH(x)                           (((uint32_t)(((uint32_t)(x)) << TMU_TSR_ORH_SHIFT)) & TMU_TSR_ORH_MASK)
#define TMU_TSR_ORL_MASK                         (0x20000000U)
#define TMU_TSR_ORL_SHIFT                        (29U)
#define TMU_TSR_ORL(x)                           (((uint32_t)(((uint32_t)(x)) << TMU_TSR_ORL_SHIFT)) & TMU_TSR_ORL_MASK)
#define TMU_TSR_MIE_MASK                         (0x40000000U)
#define TMU_TSR_MIE_SHIFT                        (30U)
#define TMU_TSR_MIE(x)                           (((uint32_t)(((uint32_t)(x)) << TMU_TSR_MIE_SHIFT)) & TMU_TSR_MIE_MASK)

/*! @name TMTMIR - TMU Monitor Temperature Measurement Interval register */
#define TMU_TMTMIR_TMI_MASK                      (0xFU)
#define TMU_TMTMIR_TMI_SHIFT                     (0U)
#define TMU_TMTMIR_TMI(x)                        (((uint32_t)(((uint32_t)(x)) << TMU_TMTMIR_TMI_SHIFT)) & TMU_TMTMIR_TMI_MASK)

/*! @name TIER - TMU Interrupt Enable register */
#define TMU_TIER_ATCTEIE_MASK                    (0x20000000U)
#define TMU_TIER_ATCTEIE_SHIFT                   (29U)
#define TMU_TIER_ATCTEIE(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TIER_ATCTEIE_SHIFT)) & TMU_TIER_ATCTEIE_MASK)
#define TMU_TIER_ATTEIE_MASK                     (0x40000000U)
#define TMU_TIER_ATTEIE_SHIFT                    (30U)
#define TMU_TIER_ATTEIE(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TIER_ATTEIE_SHIFT)) & TMU_TIER_ATTEIE_MASK)
#define TMU_TIER_ITTEIE_MASK                     (0x80000000U)
#define TMU_TIER_ITTEIE_SHIFT                    (31U)
#define TMU_TIER_ITTEIE(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TIER_ITTEIE_SHIFT)) & TMU_TIER_ITTEIE_MASK)

/*! @name TIDR - TMU Interrupt Detect register */
#define TMU_TIDR_ATCTE_MASK                      (0x20000000U)
#define TMU_TIDR_ATCTE_SHIFT                     (29U)
#define TMU_TIDR_ATCTE(x)                        (((uint32_t)(((uint32_t)(x)) << TMU_TIDR_ATCTE_SHIFT)) & TMU_TIDR_ATCTE_MASK)
#define TMU_TIDR_ATTE_MASK                       (0x40000000U)
#define TMU_TIDR_ATTE_SHIFT                      (30U)
#define TMU_TIDR_ATTE(x)                         (((uint32_t)(((uint32_t)(x)) << TMU_TIDR_ATTE_SHIFT)) & TMU_TIDR_ATTE_MASK)
#define TMU_TIDR_ITTE_MASK                       (0x80000000U)
#define TMU_TIDR_ITTE_SHIFT                      (31U)
#define TMU_TIDR_ITTE(x)                         (((uint32_t)(((uint32_t)(x)) << TMU_TIDR_ITTE_SHIFT)) & TMU_TIDR_ITTE_MASK)

/*! @name TISCR - TMU Interrupt Site Capture register */
#define TMU_TISCR_ASITE_MASK                     (0xFFFFU)
#define TMU_TISCR_ASITE_SHIFT                    (0U)
#define TMU_TISCR_ASITE(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TISCR_ASITE_SHIFT)) & TMU_TISCR_ASITE_MASK)
#define TMU_TISCR_ISITE_MASK                     (0xFFFF0000U)
#define TMU_TISCR_ISITE_SHIFT                    (16U)
#define TMU_TISCR_ISITE(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TISCR_ISITE_SHIFT)) & TMU_TISCR_ISITE_MASK)

/*! @name TICSCR - TMU Interrupt Critical Site Capture register */
#define TMU_TICSCR_CASITE_MASK                   (0xFFFFU)
#define TMU_TICSCR_CASITE_SHIFT                  (0U)
#define TMU_TICSCR_CASITE(x)                     (((uint32_t)(((uint32_t)(x)) << TMU_TICSCR_CASITE_SHIFT)) & TMU_TICSCR_CASITE_MASK)

/*! @name TMHTCRH - TMU Monitor High Temperature Capture register */
#define TMU_TMHTCRH_TEMP_MASK                    (0xFFU)
#define TMU_TMHTCRH_TEMP_SHIFT                   (0U)
#define TMU_TMHTCRH_TEMP(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TMHTCRH_TEMP_SHIFT)) & TMU_TMHTCRH_TEMP_MASK)
#define TMU_TMHTCRH_V_MASK                       (0x80000000U)
#define TMU_TMHTCRH_V_SHIFT                      (31U)
#define TMU_TMHTCRH_V(x)                         (((uint32_t)(((uint32_t)(x)) << TMU_TMHTCRH_V_SHIFT)) & TMU_TMHTCRH_V_MASK)

/*! @name TMHTCRL - TMU Monitor Low Temperature Capture register */
#define TMU_TMHTCRL_TEMP_MASK                    (0xFFU)
#define TMU_TMHTCRL_TEMP_SHIFT                   (0U)
#define TMU_TMHTCRL_TEMP(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TMHTCRL_TEMP_SHIFT)) & TMU_TMHTCRL_TEMP_MASK)
#define TMU_TMHTCRL_V_MASK                       (0x80000000U)
#define TMU_TMHTCRL_V_SHIFT                      (31U)
#define TMU_TMHTCRL_V(x)                         (((uint32_t)(((uint32_t)(x)) << TMU_TMHTCRL_V_SHIFT)) & TMU_TMHTCRL_V_MASK)

/*! @name TMHTITR - TMU Monitor High Temperature Immediate Threshold register */
#define TMU_TMHTITR_TEMP_MASK                    (0xFFU)
#define TMU_TMHTITR_TEMP_SHIFT                   (0U)
#define TMU_TMHTITR_TEMP(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TMHTITR_TEMP_SHIFT)) & TMU_TMHTITR_TEMP_MASK)
#define TMU_TMHTITR_EN_MASK                      (0x80000000U)
#define TMU_TMHTITR_EN_SHIFT                     (31U)
#define TMU_TMHTITR_EN(x)                        (((uint32_t)(((uint32_t)(x)) << TMU_TMHTITR_EN_SHIFT)) & TMU_TMHTITR_EN_MASK)

/*! @name TMHTATR - TMU Monitor High Temperature Average threshold register */
#define TMU_TMHTATR_TEMP_MASK                    (0xFFU)
#define TMU_TMHTATR_TEMP_SHIFT                   (0U)
#define TMU_TMHTATR_TEMP(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TMHTATR_TEMP_SHIFT)) & TMU_TMHTATR_TEMP_MASK)
#define TMU_TMHTATR_EN_MASK                      (0x80000000U)
#define TMU_TMHTATR_EN_SHIFT                     (31U)
#define TMU_TMHTATR_EN(x)                        (((uint32_t)(((uint32_t)(x)) << TMU_TMHTATR_EN_SHIFT)) & TMU_TMHTATR_EN_MASK)

/*! @name TMHTACTR - TMU Monitor High Temperature Average Critical Threshold register */
#define TMU_TMHTACTR_TEMP_MASK                   (0xFFU)
#define TMU_TMHTACTR_TEMP_SHIFT                  (0U)
#define TMU_TMHTACTR_TEMP(x)                     (((uint32_t)(((uint32_t)(x)) << TMU_TMHTACTR_TEMP_SHIFT)) & TMU_TMHTACTR_TEMP_MASK)
#define TMU_TMHTACTR_EN_MASK                     (0x80000000U)
#define TMU_TMHTACTR_EN_SHIFT                    (31U)
#define TMU_TMHTACTR_EN(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TMHTACTR_EN_SHIFT)) & TMU_TMHTACTR_EN_MASK)

/*! @name TTCFGR - TMU Temperature Configuration register */
#define TMU_TTCFGR_DATA_MASK                     (0xFFFFFFFFU)
#define TMU_TTCFGR_DATA_SHIFT                    (0U)
#define TMU_TTCFGR_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TTCFGR_DATA_SHIFT)) & TMU_TTCFGR_DATA_MASK)

/*! @name TSCFGR - TMU Sensor Configuration register */
#define TMU_TSCFGR_DATA_MASK                     (0xFFFFFFFFU)
#define TMU_TSCFGR_DATA_SHIFT                    (0U)
#define TMU_TSCFGR_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TSCFGR_DATA_SHIFT)) & TMU_TSCFGR_DATA_MASK)

/*! @name TRITSR - TMU Report Immediate Temperature Site register n */
#define TMU_TRITSR_TEMP_MASK                     (0xFFU)
#define TMU_TRITSR_TEMP_SHIFT                    (0U)
#define TMU_TRITSR_TEMP(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TRITSR_TEMP_SHIFT)) & TMU_TRITSR_TEMP_MASK)
#define TMU_TRITSR_V_MASK                        (0x80000000U)
#define TMU_TRITSR_V_SHIFT                       (31U)
#define TMU_TRITSR_V(x)                          (((uint32_t)(((uint32_t)(x)) << TMU_TRITSR_V_SHIFT)) & TMU_TRITSR_V_MASK)

/* The count of TMU_TRITSR */
#define TMU_TRITSR_COUNT                         (16U)

/*! @name TRATSR - TMU Report Average Temperature Site register n */
#define TMU_TRATSR_TEMP_MASK                     (0xFFU)
#define TMU_TRATSR_TEMP_SHIFT                    (0U)
#define TMU_TRATSR_TEMP(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TRATSR_TEMP_SHIFT)) & TMU_TRATSR_TEMP_MASK)
#define TMU_TRATSR_V_MASK                        (0x80000000U)
#define TMU_TRATSR_V_SHIFT                       (31U)
#define TMU_TRATSR_V(x)                          (((uint32_t)(((uint32_t)(x)) << TMU_TRATSR_V_SHIFT)) & TMU_TRATSR_V_MASK)

/* The count of TMU_TRATSR */
#define TMU_TRATSR_COUNT                         (16U)

/*! @name IPBRR0 - IP Block Revision register 0 */
#define TMU_IPBRR0_IP_MN_MASK                    (0xFFU)
#define TMU_IPBRR0_IP_MN_SHIFT                   (0U)
#define TMU_IPBRR0_IP_MN(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_IPBRR0_IP_MN_SHIFT)) & TMU_IPBRR0_IP_MN_MASK)
#define TMU_IPBRR0_IP_MJ_MASK                    (0xFF00U)
#define TMU_IPBRR0_IP_MJ_SHIFT                   (8U)
#define TMU_IPBRR0_IP_MJ(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_IPBRR0_IP_MJ_SHIFT)) & TMU_IPBRR0_IP_MJ_MASK)
#define TMU_IPBRR0_IP_ID_MASK                    (0xFFFF0000U)
#define TMU_IPBRR0_IP_ID_SHIFT                   (16U)
#define TMU_IPBRR0_IP_ID(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_IPBRR0_IP_ID_SHIFT)) & TMU_IPBRR0_IP_ID_MASK)

/*! @name TTRCR - TMU Temperature Range n Control register */
#define TMU_TTRCR_TEMP_MASK                      (0xFFU)
#define TMU_TTRCR_TEMP_SHIFT                     (0U)
#define TMU_TTRCR_TEMP(x)                        (((uint32_t)(((uint32_t)(x)) << TMU_TTRCR_TEMP_SHIFT)) & TMU_TTRCR_TEMP_MASK)
#define TMU_TTRCR_CAL_PTS_MASK                   (0xF0000U)
#define TMU_TTRCR_CAL_PTS_SHIFT                  (16U)
#define TMU_TTRCR_CAL_PTS(x)                     (((uint32_t)(((uint32_t)(x)) << TMU_TTRCR_CAL_PTS_SHIFT)) & TMU_TTRCR_CAL_PTS_MASK)

/* The count of TMU_TTRCR */
#define TMU_TTRCR_COUNT                          (4U)


/*!
 * @}
 */ /* end of group TMU_Register_Masks */


/* TMU - Peripheral instance base addresses */
/** Peripheral TMU base address */
#define TMU_BASE                                 (0x30260000u)
/** Peripheral TMU base pointer */
#define TMU                                      ((TMU_Type *)TMU_BASE)
/** Array initializer of TMU peripheral base addresses */
#define TMU_BASE_ADDRS                           { TMU_BASE }
/** Array initializer of TMU peripheral base pointers */
#define TMU_BASE_PTRS                            { TMU }

/*!
 * @}
 */ /* end of group TMU_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- UART Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Peripheral_Access_Layer UART Peripheral Access Layer
 * @{
 */

/** UART - Register Layout Typedef */
typedef struct {
  __I  uint32_t URXD;                              /**< UART Receiver Register, offset: 0x0 */
       uint8_t RESERVED_0[60];
  __O  uint32_t UTXD;                              /**< UART Transmitter Register, offset: 0x40 */
       uint8_t RESERVED_1[60];
  __IO uint32_t UCR1;                              /**< UART Control Register 1, offset: 0x80 */
  __IO uint32_t UCR2;                              /**< UART Control Register 2, offset: 0x84 */
  __IO uint32_t UCR3;                              /**< UART Control Register 3, offset: 0x88 */
  __IO uint32_t UCR4;                              /**< UART Control Register 4, offset: 0x8C */
  __IO uint32_t UFCR;                              /**< UART FIFO Control Register, offset: 0x90 */
  __IO uint32_t USR1;                              /**< UART Status Register 1, offset: 0x94 */
  __IO uint32_t USR2;                              /**< UART Status Register 2, offset: 0x98 */
  __IO uint32_t UESC;                              /**< UART Escape Character Register, offset: 0x9C */
  __IO uint32_t UTIM;                              /**< UART Escape Timer Register, offset: 0xA0 */
  __IO uint32_t UBIR;                              /**< UART BRM Incremental Register, offset: 0xA4 */
  __IO uint32_t UBMR;                              /**< UART BRM Modulator Register, offset: 0xA8 */
  __I  uint32_t UBRC;                              /**< UART Baud Rate Count Register, offset: 0xAC */
  __IO uint32_t ONEMS;                             /**< UART One Millisecond Register, offset: 0xB0 */
  __IO uint32_t UTS;                               /**< UART Test Register, offset: 0xB4 */
  __IO uint32_t UMCR;                              /**< UART RS-485 Mode Control Register, offset: 0xB8 */
} UART_Type;

/* ----------------------------------------------------------------------------
   -- UART Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Register_Masks UART Register Masks
 * @{
 */

/*! @name URXD - UART Receiver Register */
#define UART_URXD_RX_DATA_MASK                   (0xFFU)
#define UART_URXD_RX_DATA_SHIFT                  (0U)
#define UART_URXD_RX_DATA(x)                     (((uint32_t)(((uint32_t)(x)) << UART_URXD_RX_DATA_SHIFT)) & UART_URXD_RX_DATA_MASK)
#define UART_URXD_PRERR_MASK                     (0x400U)
#define UART_URXD_PRERR_SHIFT                    (10U)
#define UART_URXD_PRERR(x)                       (((uint32_t)(((uint32_t)(x)) << UART_URXD_PRERR_SHIFT)) & UART_URXD_PRERR_MASK)
#define UART_URXD_BRK_MASK                       (0x800U)
#define UART_URXD_BRK_SHIFT                      (11U)
#define UART_URXD_BRK(x)                         (((uint32_t)(((uint32_t)(x)) << UART_URXD_BRK_SHIFT)) & UART_URXD_BRK_MASK)
#define UART_URXD_FRMERR_MASK                    (0x1000U)
#define UART_URXD_FRMERR_SHIFT                   (12U)
#define UART_URXD_FRMERR(x)                      (((uint32_t)(((uint32_t)(x)) << UART_URXD_FRMERR_SHIFT)) & UART_URXD_FRMERR_MASK)
#define UART_URXD_OVRRUN_MASK                    (0x2000U)
#define UART_URXD_OVRRUN_SHIFT                   (13U)
#define UART_URXD_OVRRUN(x)                      (((uint32_t)(((uint32_t)(x)) << UART_URXD_OVRRUN_SHIFT)) & UART_URXD_OVRRUN_MASK)
#define UART_URXD_ERR_MASK                       (0x4000U)
#define UART_URXD_ERR_SHIFT                      (14U)
#define UART_URXD_ERR(x)                         (((uint32_t)(((uint32_t)(x)) << UART_URXD_ERR_SHIFT)) & UART_URXD_ERR_MASK)
#define UART_URXD_CHARRDY_MASK                   (0x8000U)
#define UART_URXD_CHARRDY_SHIFT                  (15U)
#define UART_URXD_CHARRDY(x)                     (((uint32_t)(((uint32_t)(x)) << UART_URXD_CHARRDY_SHIFT)) & UART_URXD_CHARRDY_MASK)

/*! @name UTXD - UART Transmitter Register */
#define UART_UTXD_TX_DATA_MASK                   (0xFFU)
#define UART_UTXD_TX_DATA_SHIFT                  (0U)
#define UART_UTXD_TX_DATA(x)                     (((uint32_t)(((uint32_t)(x)) << UART_UTXD_TX_DATA_SHIFT)) & UART_UTXD_TX_DATA_MASK)

/*! @name UCR1 - UART Control Register 1 */
#define UART_UCR1_UARTEN_MASK                    (0x1U)
#define UART_UCR1_UARTEN_SHIFT                   (0U)
#define UART_UCR1_UARTEN(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UCR1_UARTEN_SHIFT)) & UART_UCR1_UARTEN_MASK)
#define UART_UCR1_DOZE_MASK                      (0x2U)
#define UART_UCR1_DOZE_SHIFT                     (1U)
#define UART_UCR1_DOZE(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR1_DOZE_SHIFT)) & UART_UCR1_DOZE_MASK)
#define UART_UCR1_ATDMAEN_MASK                   (0x4U)
#define UART_UCR1_ATDMAEN_SHIFT                  (2U)
#define UART_UCR1_ATDMAEN(x)                     (((uint32_t)(((uint32_t)(x)) << UART_UCR1_ATDMAEN_SHIFT)) & UART_UCR1_ATDMAEN_MASK)
#define UART_UCR1_TXDMAEN_MASK                   (0x8U)
#define UART_UCR1_TXDMAEN_SHIFT                  (3U)
#define UART_UCR1_TXDMAEN(x)                     (((uint32_t)(((uint32_t)(x)) << UART_UCR1_TXDMAEN_SHIFT)) & UART_UCR1_TXDMAEN_MASK)
#define UART_UCR1_SNDBRK_MASK                    (0x10U)
#define UART_UCR1_SNDBRK_SHIFT                   (4U)
#define UART_UCR1_SNDBRK(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UCR1_SNDBRK_SHIFT)) & UART_UCR1_SNDBRK_MASK)
#define UART_UCR1_RTSDEN_MASK                    (0x20U)
#define UART_UCR1_RTSDEN_SHIFT                   (5U)
#define UART_UCR1_RTSDEN(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UCR1_RTSDEN_SHIFT)) & UART_UCR1_RTSDEN_MASK)
#define UART_UCR1_TXMPTYEN_MASK                  (0x40U)
#define UART_UCR1_TXMPTYEN_SHIFT                 (6U)
#define UART_UCR1_TXMPTYEN(x)                    (((uint32_t)(((uint32_t)(x)) << UART_UCR1_TXMPTYEN_SHIFT)) & UART_UCR1_TXMPTYEN_MASK)
#define UART_UCR1_IREN_MASK                      (0x80U)
#define UART_UCR1_IREN_SHIFT                     (7U)
#define UART_UCR1_IREN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR1_IREN_SHIFT)) & UART_UCR1_IREN_MASK)
#define UART_UCR1_RXDMAEN_MASK                   (0x100U)
#define UART_UCR1_RXDMAEN_SHIFT                  (8U)
#define UART_UCR1_RXDMAEN(x)                     (((uint32_t)(((uint32_t)(x)) << UART_UCR1_RXDMAEN_SHIFT)) & UART_UCR1_RXDMAEN_MASK)
#define UART_UCR1_RRDYEN_MASK                    (0x200U)
#define UART_UCR1_RRDYEN_SHIFT                   (9U)
#define UART_UCR1_RRDYEN(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UCR1_RRDYEN_SHIFT)) & UART_UCR1_RRDYEN_MASK)
#define UART_UCR1_ICD_MASK                       (0xC00U)
#define UART_UCR1_ICD_SHIFT                      (10U)
#define UART_UCR1_ICD(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UCR1_ICD_SHIFT)) & UART_UCR1_ICD_MASK)
#define UART_UCR1_IDEN_MASK                      (0x1000U)
#define UART_UCR1_IDEN_SHIFT                     (12U)
#define UART_UCR1_IDEN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR1_IDEN_SHIFT)) & UART_UCR1_IDEN_MASK)
#define UART_UCR1_TRDYEN_MASK                    (0x2000U)
#define UART_UCR1_TRDYEN_SHIFT                   (13U)
#define UART_UCR1_TRDYEN(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UCR1_TRDYEN_SHIFT)) & UART_UCR1_TRDYEN_MASK)
#define UART_UCR1_ADBR_MASK                      (0x4000U)
#define UART_UCR1_ADBR_SHIFT                     (14U)
#define UART_UCR1_ADBR(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR1_ADBR_SHIFT)) & UART_UCR1_ADBR_MASK)
#define UART_UCR1_ADEN_MASK                      (0x8000U)
#define UART_UCR1_ADEN_SHIFT                     (15U)
#define UART_UCR1_ADEN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR1_ADEN_SHIFT)) & UART_UCR1_ADEN_MASK)

/*! @name UCR2 - UART Control Register 2 */
#define UART_UCR2_SRST_MASK                      (0x1U)
#define UART_UCR2_SRST_SHIFT                     (0U)
#define UART_UCR2_SRST(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_SRST_SHIFT)) & UART_UCR2_SRST_MASK)
#define UART_UCR2_RXEN_MASK                      (0x2U)
#define UART_UCR2_RXEN_SHIFT                     (1U)
#define UART_UCR2_RXEN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_RXEN_SHIFT)) & UART_UCR2_RXEN_MASK)
#define UART_UCR2_TXEN_MASK                      (0x4U)
#define UART_UCR2_TXEN_SHIFT                     (2U)
#define UART_UCR2_TXEN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_TXEN_SHIFT)) & UART_UCR2_TXEN_MASK)
#define UART_UCR2_ATEN_MASK                      (0x8U)
#define UART_UCR2_ATEN_SHIFT                     (3U)
#define UART_UCR2_ATEN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_ATEN_SHIFT)) & UART_UCR2_ATEN_MASK)
#define UART_UCR2_RTSEN_MASK                     (0x10U)
#define UART_UCR2_RTSEN_SHIFT                    (4U)
#define UART_UCR2_RTSEN(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UCR2_RTSEN_SHIFT)) & UART_UCR2_RTSEN_MASK)
#define UART_UCR2_WS_MASK                        (0x20U)
#define UART_UCR2_WS_SHIFT                       (5U)
#define UART_UCR2_WS(x)                          (((uint32_t)(((uint32_t)(x)) << UART_UCR2_WS_SHIFT)) & UART_UCR2_WS_MASK)
#define UART_UCR2_STPB_MASK                      (0x40U)
#define UART_UCR2_STPB_SHIFT                     (6U)
#define UART_UCR2_STPB(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_STPB_SHIFT)) & UART_UCR2_STPB_MASK)
#define UART_UCR2_PROE_MASK                      (0x80U)
#define UART_UCR2_PROE_SHIFT                     (7U)
#define UART_UCR2_PROE(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_PROE_SHIFT)) & UART_UCR2_PROE_MASK)
#define UART_UCR2_PREN_MASK                      (0x100U)
#define UART_UCR2_PREN_SHIFT                     (8U)
#define UART_UCR2_PREN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_PREN_SHIFT)) & UART_UCR2_PREN_MASK)
#define UART_UCR2_RTEC_MASK                      (0x600U)
#define UART_UCR2_RTEC_SHIFT                     (9U)
#define UART_UCR2_RTEC(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_RTEC_SHIFT)) & UART_UCR2_RTEC_MASK)
#define UART_UCR2_ESCEN_MASK                     (0x800U)
#define UART_UCR2_ESCEN_SHIFT                    (11U)
#define UART_UCR2_ESCEN(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UCR2_ESCEN_SHIFT)) & UART_UCR2_ESCEN_MASK)
#define UART_UCR2_CTS_MASK                       (0x1000U)
#define UART_UCR2_CTS_SHIFT                      (12U)
#define UART_UCR2_CTS(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UCR2_CTS_SHIFT)) & UART_UCR2_CTS_MASK)
#define UART_UCR2_CTSC_MASK                      (0x2000U)
#define UART_UCR2_CTSC_SHIFT                     (13U)
#define UART_UCR2_CTSC(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_CTSC_SHIFT)) & UART_UCR2_CTSC_MASK)
#define UART_UCR2_IRTS_MASK                      (0x4000U)
#define UART_UCR2_IRTS_SHIFT                     (14U)
#define UART_UCR2_IRTS(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_IRTS_SHIFT)) & UART_UCR2_IRTS_MASK)
#define UART_UCR2_ESCI_MASK                      (0x8000U)
#define UART_UCR2_ESCI_SHIFT                     (15U)
#define UART_UCR2_ESCI(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_ESCI_SHIFT)) & UART_UCR2_ESCI_MASK)

/*! @name UCR3 - UART Control Register 3 */
#define UART_UCR3_ACIEN_MASK                     (0x1U)
#define UART_UCR3_ACIEN_SHIFT                    (0U)
#define UART_UCR3_ACIEN(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UCR3_ACIEN_SHIFT)) & UART_UCR3_ACIEN_MASK)
#define UART_UCR3_INVT_MASK                      (0x2U)
#define UART_UCR3_INVT_SHIFT                     (1U)
#define UART_UCR3_INVT(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR3_INVT_SHIFT)) & UART_UCR3_INVT_MASK)
#define UART_UCR3_RXDMUXSEL_MASK                 (0x4U)
#define UART_UCR3_RXDMUXSEL_SHIFT                (2U)
#define UART_UCR3_RXDMUXSEL(x)                   (((uint32_t)(((uint32_t)(x)) << UART_UCR3_RXDMUXSEL_SHIFT)) & UART_UCR3_RXDMUXSEL_MASK)
#define UART_UCR3_DTRDEN_MASK                    (0x8U)
#define UART_UCR3_DTRDEN_SHIFT                   (3U)
#define UART_UCR3_DTRDEN(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UCR3_DTRDEN_SHIFT)) & UART_UCR3_DTRDEN_MASK)
#define UART_UCR3_AWAKEN_MASK                    (0x10U)
#define UART_UCR3_AWAKEN_SHIFT                   (4U)
#define UART_UCR3_AWAKEN(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UCR3_AWAKEN_SHIFT)) & UART_UCR3_AWAKEN_MASK)
#define UART_UCR3_AIRINTEN_MASK                  (0x20U)
#define UART_UCR3_AIRINTEN_SHIFT                 (5U)
#define UART_UCR3_AIRINTEN(x)                    (((uint32_t)(((uint32_t)(x)) << UART_UCR3_AIRINTEN_SHIFT)) & UART_UCR3_AIRINTEN_MASK)
#define UART_UCR3_RXDSEN_MASK                    (0x40U)
#define UART_UCR3_RXDSEN_SHIFT                   (6U)
#define UART_UCR3_RXDSEN(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UCR3_RXDSEN_SHIFT)) & UART_UCR3_RXDSEN_MASK)
#define UART_UCR3_ADNIMP_MASK                    (0x80U)
#define UART_UCR3_ADNIMP_SHIFT                   (7U)
#define UART_UCR3_ADNIMP(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UCR3_ADNIMP_SHIFT)) & UART_UCR3_ADNIMP_MASK)
#define UART_UCR3_RI_MASK                        (0x100U)
#define UART_UCR3_RI_SHIFT                       (8U)
#define UART_UCR3_RI(x)                          (((uint32_t)(((uint32_t)(x)) << UART_UCR3_RI_SHIFT)) & UART_UCR3_RI_MASK)
#define UART_UCR3_DCD_MASK                       (0x200U)
#define UART_UCR3_DCD_SHIFT                      (9U)
#define UART_UCR3_DCD(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UCR3_DCD_SHIFT)) & UART_UCR3_DCD_MASK)
#define UART_UCR3_DSR_MASK                       (0x400U)
#define UART_UCR3_DSR_SHIFT                      (10U)
#define UART_UCR3_DSR(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UCR3_DSR_SHIFT)) & UART_UCR3_DSR_MASK)
#define UART_UCR3_FRAERREN_MASK                  (0x800U)
#define UART_UCR3_FRAERREN_SHIFT                 (11U)
#define UART_UCR3_FRAERREN(x)                    (((uint32_t)(((uint32_t)(x)) << UART_UCR3_FRAERREN_SHIFT)) & UART_UCR3_FRAERREN_MASK)
#define UART_UCR3_PARERREN_MASK                  (0x1000U)
#define UART_UCR3_PARERREN_SHIFT                 (12U)
#define UART_UCR3_PARERREN(x)                    (((uint32_t)(((uint32_t)(x)) << UART_UCR3_PARERREN_SHIFT)) & UART_UCR3_PARERREN_MASK)
#define UART_UCR3_DTREN_MASK                     (0x2000U)
#define UART_UCR3_DTREN_SHIFT                    (13U)
#define UART_UCR3_DTREN(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UCR3_DTREN_SHIFT)) & UART_UCR3_DTREN_MASK)
#define UART_UCR3_DPEC_MASK                      (0xC000U)
#define UART_UCR3_DPEC_SHIFT                     (14U)
#define UART_UCR3_DPEC(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR3_DPEC_SHIFT)) & UART_UCR3_DPEC_MASK)

/*! @name UCR4 - UART Control Register 4 */
#define UART_UCR4_DREN_MASK                      (0x1U)
#define UART_UCR4_DREN_SHIFT                     (0U)
#define UART_UCR4_DREN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR4_DREN_SHIFT)) & UART_UCR4_DREN_MASK)
#define UART_UCR4_OREN_MASK                      (0x2U)
#define UART_UCR4_OREN_SHIFT                     (1U)
#define UART_UCR4_OREN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR4_OREN_SHIFT)) & UART_UCR4_OREN_MASK)
#define UART_UCR4_BKEN_MASK                      (0x4U)
#define UART_UCR4_BKEN_SHIFT                     (2U)
#define UART_UCR4_BKEN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR4_BKEN_SHIFT)) & UART_UCR4_BKEN_MASK)
#define UART_UCR4_TCEN_MASK                      (0x8U)
#define UART_UCR4_TCEN_SHIFT                     (3U)
#define UART_UCR4_TCEN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR4_TCEN_SHIFT)) & UART_UCR4_TCEN_MASK)
#define UART_UCR4_LPBYP_MASK                     (0x10U)
#define UART_UCR4_LPBYP_SHIFT                    (4U)
#define UART_UCR4_LPBYP(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UCR4_LPBYP_SHIFT)) & UART_UCR4_LPBYP_MASK)
#define UART_UCR4_IRSC_MASK                      (0x20U)
#define UART_UCR4_IRSC_SHIFT                     (5U)
#define UART_UCR4_IRSC(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR4_IRSC_SHIFT)) & UART_UCR4_IRSC_MASK)
#define UART_UCR4_IDDMAEN_MASK                   (0x40U)
#define UART_UCR4_IDDMAEN_SHIFT                  (6U)
#define UART_UCR4_IDDMAEN(x)                     (((uint32_t)(((uint32_t)(x)) << UART_UCR4_IDDMAEN_SHIFT)) & UART_UCR4_IDDMAEN_MASK)
#define UART_UCR4_WKEN_MASK                      (0x80U)
#define UART_UCR4_WKEN_SHIFT                     (7U)
#define UART_UCR4_WKEN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR4_WKEN_SHIFT)) & UART_UCR4_WKEN_MASK)
#define UART_UCR4_ENIRI_MASK                     (0x100U)
#define UART_UCR4_ENIRI_SHIFT                    (8U)
#define UART_UCR4_ENIRI(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UCR4_ENIRI_SHIFT)) & UART_UCR4_ENIRI_MASK)
#define UART_UCR4_INVR_MASK                      (0x200U)
#define UART_UCR4_INVR_SHIFT                     (9U)
#define UART_UCR4_INVR(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR4_INVR_SHIFT)) & UART_UCR4_INVR_MASK)
#define UART_UCR4_CTSTL_MASK                     (0xFC00U)
#define UART_UCR4_CTSTL_SHIFT                    (10U)
#define UART_UCR4_CTSTL(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UCR4_CTSTL_SHIFT)) & UART_UCR4_CTSTL_MASK)

/*! @name UFCR - UART FIFO Control Register */
#define UART_UFCR_RXTL_MASK                      (0x3FU)
#define UART_UFCR_RXTL_SHIFT                     (0U)
#define UART_UFCR_RXTL(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UFCR_RXTL_SHIFT)) & UART_UFCR_RXTL_MASK)
#define UART_UFCR_DCEDTE_MASK                    (0x40U)
#define UART_UFCR_DCEDTE_SHIFT                   (6U)
#define UART_UFCR_DCEDTE(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UFCR_DCEDTE_SHIFT)) & UART_UFCR_DCEDTE_MASK)
#define UART_UFCR_RFDIV_MASK                     (0x380U)
#define UART_UFCR_RFDIV_SHIFT                    (7U)
#define UART_UFCR_RFDIV(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UFCR_RFDIV_SHIFT)) & UART_UFCR_RFDIV_MASK)
#define UART_UFCR_TXTL_MASK                      (0xFC00U)
#define UART_UFCR_TXTL_SHIFT                     (10U)
#define UART_UFCR_TXTL(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UFCR_TXTL_SHIFT)) & UART_UFCR_TXTL_MASK)

/*! @name USR1 - UART Status Register 1 */
#define UART_USR1_SAD_MASK                       (0x8U)
#define UART_USR1_SAD_SHIFT                      (3U)
#define UART_USR1_SAD(x)                         (((uint32_t)(((uint32_t)(x)) << UART_USR1_SAD_SHIFT)) & UART_USR1_SAD_MASK)
#define UART_USR1_AWAKE_MASK                     (0x10U)
#define UART_USR1_AWAKE_SHIFT                    (4U)
#define UART_USR1_AWAKE(x)                       (((uint32_t)(((uint32_t)(x)) << UART_USR1_AWAKE_SHIFT)) & UART_USR1_AWAKE_MASK)
#define UART_USR1_AIRINT_MASK                    (0x20U)
#define UART_USR1_AIRINT_SHIFT                   (5U)
#define UART_USR1_AIRINT(x)                      (((uint32_t)(((uint32_t)(x)) << UART_USR1_AIRINT_SHIFT)) & UART_USR1_AIRINT_MASK)
#define UART_USR1_RXDS_MASK                      (0x40U)
#define UART_USR1_RXDS_SHIFT                     (6U)
#define UART_USR1_RXDS(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR1_RXDS_SHIFT)) & UART_USR1_RXDS_MASK)
#define UART_USR1_DTRD_MASK                      (0x80U)
#define UART_USR1_DTRD_SHIFT                     (7U)
#define UART_USR1_DTRD(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR1_DTRD_SHIFT)) & UART_USR1_DTRD_MASK)
#define UART_USR1_AGTIM_MASK                     (0x100U)
#define UART_USR1_AGTIM_SHIFT                    (8U)
#define UART_USR1_AGTIM(x)                       (((uint32_t)(((uint32_t)(x)) << UART_USR1_AGTIM_SHIFT)) & UART_USR1_AGTIM_MASK)
#define UART_USR1_RRDY_MASK                      (0x200U)
#define UART_USR1_RRDY_SHIFT                     (9U)
#define UART_USR1_RRDY(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR1_RRDY_SHIFT)) & UART_USR1_RRDY_MASK)
#define UART_USR1_FRAMERR_MASK                   (0x400U)
#define UART_USR1_FRAMERR_SHIFT                  (10U)
#define UART_USR1_FRAMERR(x)                     (((uint32_t)(((uint32_t)(x)) << UART_USR1_FRAMERR_SHIFT)) & UART_USR1_FRAMERR_MASK)
#define UART_USR1_ESCF_MASK                      (0x800U)
#define UART_USR1_ESCF_SHIFT                     (11U)
#define UART_USR1_ESCF(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR1_ESCF_SHIFT)) & UART_USR1_ESCF_MASK)
#define UART_USR1_RTSD_MASK                      (0x1000U)
#define UART_USR1_RTSD_SHIFT                     (12U)
#define UART_USR1_RTSD(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR1_RTSD_SHIFT)) & UART_USR1_RTSD_MASK)
#define UART_USR1_TRDY_MASK                      (0x2000U)
#define UART_USR1_TRDY_SHIFT                     (13U)
#define UART_USR1_TRDY(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR1_TRDY_SHIFT)) & UART_USR1_TRDY_MASK)
#define UART_USR1_RTSS_MASK                      (0x4000U)
#define UART_USR1_RTSS_SHIFT                     (14U)
#define UART_USR1_RTSS(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR1_RTSS_SHIFT)) & UART_USR1_RTSS_MASK)
#define UART_USR1_PARITYERR_MASK                 (0x8000U)
#define UART_USR1_PARITYERR_SHIFT                (15U)
#define UART_USR1_PARITYERR(x)                   (((uint32_t)(((uint32_t)(x)) << UART_USR1_PARITYERR_SHIFT)) & UART_USR1_PARITYERR_MASK)

/*! @name USR2 - UART Status Register 2 */
#define UART_USR2_RDR_MASK                       (0x1U)
#define UART_USR2_RDR_SHIFT                      (0U)
#define UART_USR2_RDR(x)                         (((uint32_t)(((uint32_t)(x)) << UART_USR2_RDR_SHIFT)) & UART_USR2_RDR_MASK)
#define UART_USR2_ORE_MASK                       (0x2U)
#define UART_USR2_ORE_SHIFT                      (1U)
#define UART_USR2_ORE(x)                         (((uint32_t)(((uint32_t)(x)) << UART_USR2_ORE_SHIFT)) & UART_USR2_ORE_MASK)
#define UART_USR2_BRCD_MASK                      (0x4U)
#define UART_USR2_BRCD_SHIFT                     (2U)
#define UART_USR2_BRCD(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR2_BRCD_SHIFT)) & UART_USR2_BRCD_MASK)
#define UART_USR2_TXDC_MASK                      (0x8U)
#define UART_USR2_TXDC_SHIFT                     (3U)
#define UART_USR2_TXDC(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR2_TXDC_SHIFT)) & UART_USR2_TXDC_MASK)
#define UART_USR2_RTSF_MASK                      (0x10U)
#define UART_USR2_RTSF_SHIFT                     (4U)
#define UART_USR2_RTSF(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR2_RTSF_SHIFT)) & UART_USR2_RTSF_MASK)
#define UART_USR2_DCDIN_MASK                     (0x20U)
#define UART_USR2_DCDIN_SHIFT                    (5U)
#define UART_USR2_DCDIN(x)                       (((uint32_t)(((uint32_t)(x)) << UART_USR2_DCDIN_SHIFT)) & UART_USR2_DCDIN_MASK)
#define UART_USR2_DCDDELT_MASK                   (0x40U)
#define UART_USR2_DCDDELT_SHIFT                  (6U)
#define UART_USR2_DCDDELT(x)                     (((uint32_t)(((uint32_t)(x)) << UART_USR2_DCDDELT_SHIFT)) & UART_USR2_DCDDELT_MASK)
#define UART_USR2_WAKE_MASK                      (0x80U)
#define UART_USR2_WAKE_SHIFT                     (7U)
#define UART_USR2_WAKE(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR2_WAKE_SHIFT)) & UART_USR2_WAKE_MASK)
#define UART_USR2_IRINT_MASK                     (0x100U)
#define UART_USR2_IRINT_SHIFT                    (8U)
#define UART_USR2_IRINT(x)                       (((uint32_t)(((uint32_t)(x)) << UART_USR2_IRINT_SHIFT)) & UART_USR2_IRINT_MASK)
#define UART_USR2_RIIN_MASK                      (0x200U)
#define UART_USR2_RIIN_SHIFT                     (9U)
#define UART_USR2_RIIN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR2_RIIN_SHIFT)) & UART_USR2_RIIN_MASK)
#define UART_USR2_RIDELT_MASK                    (0x400U)
#define UART_USR2_RIDELT_SHIFT                   (10U)
#define UART_USR2_RIDELT(x)                      (((uint32_t)(((uint32_t)(x)) << UART_USR2_RIDELT_SHIFT)) & UART_USR2_RIDELT_MASK)
#define UART_USR2_ACST_MASK                      (0x800U)
#define UART_USR2_ACST_SHIFT                     (11U)
#define UART_USR2_ACST(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR2_ACST_SHIFT)) & UART_USR2_ACST_MASK)
#define UART_USR2_IDLE_MASK                      (0x1000U)
#define UART_USR2_IDLE_SHIFT                     (12U)
#define UART_USR2_IDLE(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR2_IDLE_SHIFT)) & UART_USR2_IDLE_MASK)
#define UART_USR2_DTRF_MASK                      (0x2000U)
#define UART_USR2_DTRF_SHIFT                     (13U)
#define UART_USR2_DTRF(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR2_DTRF_SHIFT)) & UART_USR2_DTRF_MASK)
#define UART_USR2_TXFE_MASK                      (0x4000U)
#define UART_USR2_TXFE_SHIFT                     (14U)
#define UART_USR2_TXFE(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR2_TXFE_SHIFT)) & UART_USR2_TXFE_MASK)
#define UART_USR2_ADET_MASK                      (0x8000U)
#define UART_USR2_ADET_SHIFT                     (15U)
#define UART_USR2_ADET(x)                        (((uint32_t)(((uint32_t)(x)) << UART_USR2_ADET_SHIFT)) & UART_USR2_ADET_MASK)

/*! @name UESC - UART Escape Character Register */
#define UART_UESC_ESC_CHAR_MASK                  (0xFFU)
#define UART_UESC_ESC_CHAR_SHIFT                 (0U)
#define UART_UESC_ESC_CHAR(x)                    (((uint32_t)(((uint32_t)(x)) << UART_UESC_ESC_CHAR_SHIFT)) & UART_UESC_ESC_CHAR_MASK)

/*! @name UTIM - UART Escape Timer Register */
#define UART_UTIM_TIM_MASK                       (0xFFFU)
#define UART_UTIM_TIM_SHIFT                      (0U)
#define UART_UTIM_TIM(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UTIM_TIM_SHIFT)) & UART_UTIM_TIM_MASK)

/*! @name UBIR - UART BRM Incremental Register */
#define UART_UBIR_INC_MASK                       (0xFFFFU)
#define UART_UBIR_INC_SHIFT                      (0U)
#define UART_UBIR_INC(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UBIR_INC_SHIFT)) & UART_UBIR_INC_MASK)

/*! @name UBMR - UART BRM Modulator Register */
#define UART_UBMR_MOD_MASK                       (0xFFFFU)
#define UART_UBMR_MOD_SHIFT                      (0U)
#define UART_UBMR_MOD(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UBMR_MOD_SHIFT)) & UART_UBMR_MOD_MASK)

/*! @name UBRC - UART Baud Rate Count Register */
#define UART_UBRC_BCNT_MASK                      (0xFFFFU)
#define UART_UBRC_BCNT_SHIFT                     (0U)
#define UART_UBRC_BCNT(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UBRC_BCNT_SHIFT)) & UART_UBRC_BCNT_MASK)

/*! @name ONEMS - UART One Millisecond Register */
#define UART_ONEMS_ONEMS_MASK                    (0xFFFFFFU)
#define UART_ONEMS_ONEMS_SHIFT                   (0U)
#define UART_ONEMS_ONEMS(x)                      (((uint32_t)(((uint32_t)(x)) << UART_ONEMS_ONEMS_SHIFT)) & UART_ONEMS_ONEMS_MASK)

/*! @name UTS - UART Test Register */
#define UART_UTS_SOFTRST_MASK                    (0x1U)
#define UART_UTS_SOFTRST_SHIFT                   (0U)
#define UART_UTS_SOFTRST(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UTS_SOFTRST_SHIFT)) & UART_UTS_SOFTRST_MASK)
#define UART_UTS_RXFULL_MASK                     (0x8U)
#define UART_UTS_RXFULL_SHIFT                    (3U)
#define UART_UTS_RXFULL(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UTS_RXFULL_SHIFT)) & UART_UTS_RXFULL_MASK)
#define UART_UTS_TXFULL_MASK                     (0x10U)
#define UART_UTS_TXFULL_SHIFT                    (4U)
#define UART_UTS_TXFULL(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UTS_TXFULL_SHIFT)) & UART_UTS_TXFULL_MASK)
#define UART_UTS_RXEMPTY_MASK                    (0x20U)
#define UART_UTS_RXEMPTY_SHIFT                   (5U)
#define UART_UTS_RXEMPTY(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UTS_RXEMPTY_SHIFT)) & UART_UTS_RXEMPTY_MASK)
#define UART_UTS_TXEMPTY_MASK                    (0x40U)
#define UART_UTS_TXEMPTY_SHIFT                   (6U)
#define UART_UTS_TXEMPTY(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UTS_TXEMPTY_SHIFT)) & UART_UTS_TXEMPTY_MASK)
#define UART_UTS_RXDBG_MASK                      (0x200U)
#define UART_UTS_RXDBG_SHIFT                     (9U)
#define UART_UTS_RXDBG(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UTS_RXDBG_SHIFT)) & UART_UTS_RXDBG_MASK)
#define UART_UTS_LOOPIR_MASK                     (0x400U)
#define UART_UTS_LOOPIR_SHIFT                    (10U)
#define UART_UTS_LOOPIR(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UTS_LOOPIR_SHIFT)) & UART_UTS_LOOPIR_MASK)
#define UART_UTS_DBGEN_MASK                      (0x800U)
#define UART_UTS_DBGEN_SHIFT                     (11U)
#define UART_UTS_DBGEN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UTS_DBGEN_SHIFT)) & UART_UTS_DBGEN_MASK)
#define UART_UTS_LOOP_MASK                       (0x1000U)
#define UART_UTS_LOOP_SHIFT                      (12U)
#define UART_UTS_LOOP(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UTS_LOOP_SHIFT)) & UART_UTS_LOOP_MASK)
#define UART_UTS_FRCPERR_MASK                    (0x2000U)
#define UART_UTS_FRCPERR_SHIFT                   (13U)
#define UART_UTS_FRCPERR(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UTS_FRCPERR_SHIFT)) & UART_UTS_FRCPERR_MASK)

/*! @name UMCR - UART RS-485 Mode Control Register */
#define UART_UMCR_MDEN_MASK                      (0x1U)
#define UART_UMCR_MDEN_SHIFT                     (0U)
#define UART_UMCR_MDEN(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UMCR_MDEN_SHIFT)) & UART_UMCR_MDEN_MASK)
#define UART_UMCR_SLAM_MASK                      (0x2U)
#define UART_UMCR_SLAM_SHIFT                     (1U)
#define UART_UMCR_SLAM(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UMCR_SLAM_SHIFT)) & UART_UMCR_SLAM_MASK)
#define UART_UMCR_TXB8_MASK                      (0x4U)
#define UART_UMCR_TXB8_SHIFT                     (2U)
#define UART_UMCR_TXB8(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UMCR_TXB8_SHIFT)) & UART_UMCR_TXB8_MASK)
#define UART_UMCR_SADEN_MASK                     (0x8U)
#define UART_UMCR_SADEN_SHIFT                    (3U)
#define UART_UMCR_SADEN(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UMCR_SADEN_SHIFT)) & UART_UMCR_SADEN_MASK)
#define UART_UMCR_SLADDR_MASK                    (0xFF00U)
#define UART_UMCR_SLADDR_SHIFT                   (8U)
#define UART_UMCR_SLADDR(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UMCR_SLADDR_SHIFT)) & UART_UMCR_SLADDR_MASK)


/*!
 * @}
 */ /* end of group UART_Register_Masks */


/* UART - Peripheral instance base addresses */
/** Peripheral UART1 base address */
#define UART1_BASE                               (0x30860000u)
/** Peripheral UART1 base pointer */
#define UART1                                    ((UART_Type *)UART1_BASE)
/** Peripheral UART2 base address */
#define UART2_BASE                               (0x30890000u)
/** Peripheral UART2 base pointer */
#define UART2                                    ((UART_Type *)UART2_BASE)
/** Peripheral UART3 base address */
#define UART3_BASE                               (0x30880000u)
/** Peripheral UART3 base pointer */
#define UART3                                    ((UART_Type *)UART3_BASE)
/** Peripheral UART4 base address */
#define UART4_BASE                               (0x30A60000u)
/** Peripheral UART4 base pointer */
#define UART4                                    ((UART_Type *)UART4_BASE)
/** Array initializer of UART peripheral base addresses */
#define UART_BASE_ADDRS                          { 0u, UART1_BASE, UART2_BASE, UART3_BASE, UART4_BASE }
/** Array initializer of UART peripheral base pointers */
#define UART_BASE_PTRS                           { (UART_Type *)0u, UART1, UART2, UART3, UART4 }
/** Interrupt vectors for the UART peripheral type */
#define UART_IRQS                                { NotAvail_IRQn, UART1_IRQn, UART2_IRQn, UART3_IRQn, UART4_IRQn }

/*!
 * @}
 */ /* end of group UART_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- USB_CORE Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_CORE_Peripheral_Access_Layer USB_CORE Peripheral Access Layer
 * @{
 */

/** USB_CORE - Register Layout Typedef */
typedef struct {
  __O  uint32_t OTGCMD;                            /**< OTG Command, offset: 0x0 */
  __I  uint32_t OTGSTS;                            /**< OTG Status, offset: 0x4 */
  __I  uint32_t OTGSTATE;                          /**< OTG State, offset: 0x8 */
  __IO uint32_t OTGREFCLK;                         /**< OTG Reference Clock, offset: 0xC */
  __IO uint32_t OTGIEN;                            /**< OTG Interrupt Enable, offset: 0x10 */
  __IO uint32_t OTGIVECT;                          /**< OTG Interrupt Vector, offset: 0x14 */
       uint8_t RESERVED_0[8];
  __IO uint32_t CLK_FREQ;                          /**< Clock Frequency, offset: 0x20 */
  __O  uint32_t OTGTMR;                            /**< OTG Timer, offset: 0x24 */
       uint8_t RESERVED_1[8];
  __I  uint32_t OTGVERSION;                        /**< OTG Version, offset: 0x30 */
  __I  uint32_t OTGCAPABILITY;                     /**< OTG Capability, offset: 0x34 */
       uint8_t RESERVED_2[8];
  __IO uint32_t OTGSIMULATE;                       /**< OTG Simulate, offset: 0x40 */
       uint8_t RESERVED_3[12];
  __I  uint32_t OTGANASTS;                         /**< OTG Attach Detection Protocol BC Status, offset: 0x50 */
  __I  uint32_t ADP_RAMP_TIME;                     /**< Attach Detection Protocol Ramp Time, offset: 0x54 */
  __IO uint32_t OTGCTRL1;                          /**< OTG Control, offset: 0x58 */
  __IO uint32_t OTGCTRL2;                          /**< OTG Control, offset: 0x5C */
       uint8_t RESERVED_4[65440];
  __I  uint32_t HCIVERSION_CAPLENGTH;              /**< HCI Version and CAPLENGTH, offset: 0x10000 */
  __I  uint32_t HCSPARAMS1;                        /**< Structural Parameters 1, offset: 0x10004 */
  __I  uint32_t HCSPARAMS2;                        /**< Structural Parameters 2, offset: 0x10008 */
  __I  uint32_t HCSPARAMS3;                        /**< Structural Parameters 3, offset: 0x1000C */
  __I  uint32_t HCCPARAMS;                         /**< Capability Parameters, offset: 0x10010 */
  __I  uint32_t DBOFF;                             /**< DoorBell Array Offset, offset: 0x10014 */
  __I  uint32_t RTSOFF;                            /**< xHCI Runtime Registers Offset, offset: 0x10018 */
       uint8_t RESERVED_5[100];
  __IO uint32_t USBCMD;                            /**< USB Command, offset: 0x10080 */
  __IO uint32_t USBSTS;                            /**< USB Status, offset: 0x10084 */
  __I  uint32_t PAGESIZE;                          /**< Page Size, offset: 0x10088 */
       uint8_t RESERVED_6[8];
  __IO uint32_t DNCTRL;                            /**< Device Notification Control, offset: 0x10094 */
  __IO uint32_t CRCR_LO;                           /**< Command Ring Control Register Low, offset: 0x10098 */
  __IO uint32_t CRCR_HI;                           /**< Command Ring Control Register High, offset: 0x1009C */
       uint8_t RESERVED_7[16];
  __IO uint32_t DCBAAP_LO;                         /**< Device Context Base Address Array Pointer(LOW), offset: 0x100B0 */
  __IO uint32_t DCBAAP_HI;                         /**< Device Context Base Address Array Pointer (HIGH), offset: 0x100B4 */
  __IO uint32_t CONFIG;                            /**< Configure, offset: 0x100B8 */
       uint8_t RESERVED_8[964];
  __IO uint32_t PORTSC1USB2;                       /**< USB2 Port Status and Control, offset: 0x10480 */
  __IO uint32_t PORTPMSC1USB2;                     /**< USB2 Port Power Management Status and Control, offset: 0x10484 */
       uint8_t RESERVED_9[4];
  __IO uint32_t PORT1HLPMC;                        /**< USB2 Port Hardware LPM Control register, offset: 0x1048C */
  __IO uint32_t PORTSC1USB3;                       /**< USB3 Port Status and Control, offset: 0x10490 */
  __IO uint32_t PORTPMSC1USB3;                     /**< USB3 Port Power Management Status and Control, offset: 0x10494 */
  __I  uint32_t PORTLI1;                           /**< USB3 Port Link Info, offset: 0x10498 */
       uint8_t RESERVED_10[7012];
  __I  uint32_t MFINDEX;                           /**< MicroFrame Index, offset: 0x12000 */
       uint8_t RESERVED_11[28];
  __IO uint32_t IMAN0;                             /**< Interrupter Management, offset: 0x12020 */
  __IO uint32_t IMOD0;                             /**< Interrupter Moderation, offset: 0x12024 */
  __IO uint32_t ERSTSZ0;                           /**< Event Ring Segment Table Size, offset: 0x12028 */
       uint32_t RSVD0;                             /**< Reserved, offset: 0x1202C */
  __IO uint32_t ERSTBA0_LO;                        /**< Event Ring Segment Table Base Address (LOW), offset: 0x12030 */
  __IO uint32_t ERSTBA00_HI;                       /**< Event Ring Segment Table Base Address (HIGH), offset: 0x12034 */
  __IO uint32_t ERDP0_LO;                          /**< Event Ring Dequeue Pointer (LOW), offset: 0x12038 */
  __IO uint32_t ERDP0_HI;                          /**< Event Ring Dequeue Pointer (HIGH), offset: 0x1203C */
  __IO uint32_t IMAN1;                             /**< Interrupter Management, offset: 0x12040 */
  __IO uint32_t IMOD1;                             /**< Interrupter Moderation, offset: 0x12044 */
  __IO uint32_t ERSTSZ1;                           /**< Event Ring Segment Table Size, offset: 0x12048 */
       uint32_t RSVD1;                             /**< Reserved, offset: 0x1204C */
  __IO uint32_t ERSTBA1_LO;                        /**< Event Ring Segment Table Base Address (LOW), offset: 0x12050 */
  __IO uint32_t ERSTBA01_HI;                       /**< Event Ring Segment Table Base Address (HIGH), offset: 0x12054 */
  __IO uint32_t ERDP1_LO;                          /**< Event Ring Dequeue Pointer (LOW), offset: 0x12058 */
  __IO uint32_t ERDP1_HI;                          /**< Event Ring Dequeue Pointer (HIGH), offset: 0x1205C */
  __IO uint32_t IMAN2;                             /**< Interrupter Management, offset: 0x12060 */
  __IO uint32_t IMOD2;                             /**< Interrupter Moderation, offset: 0x12064 */
  __IO uint32_t ERSTSZ2;                           /**< Event Ring Segment Table Size, offset: 0x12068 */
       uint32_t RSVD2;                             /**< Reserved, offset: 0x1206C */
  __IO uint32_t ERSTBA2_LO;                        /**< Event Ring Segment Table Base Address (LOW), offset: 0x12070 */
  __IO uint32_t ERSTBA02_HI;                       /**< Event Ring Segment Table Base Address (HIGH), offset: 0x12074 */
  __IO uint32_t ERDP2_LO;                          /**< Event Ring Dequeue Pointer (LOW), offset: 0x12078 */
  __IO uint32_t ERDP2_HI;                          /**< Event Ring Dequeue Pointer (HIGH), offset: 0x1207C */
  __IO uint32_t IMAN3;                             /**< Interrupter Management, offset: 0x12080 */
  __IO uint32_t IMOD3;                             /**< Interrupter Moderation, offset: 0x12084 */
  __IO uint32_t ERSTSZ3;                           /**< Event Ring Segment Table Size, offset: 0x12088 */
       uint32_t RSVD3;                             /**< Reserved, offset: 0x1208C */
  __IO uint32_t ERSTBA3_LO;                        /**< Event Ring Segment Table Base Address (LOW), offset: 0x12090 */
  __IO uint32_t ERSTBA03_HI;                       /**< Event Ring Segment Table Base Address (HIGH), offset: 0x12094 */
  __IO uint32_t ERDP3_LO;                          /**< Event Ring Dequeue Pointer (LOW), offset: 0x12098 */
  __IO uint32_t ERDP3_HI;                          /**< Event Ring Dequeue Pointer (HIGH), offset: 0x1209C */
  __IO uint32_t IMAN4;                             /**< Interrupter Management, offset: 0x120A0 */
  __IO uint32_t IMOD4;                             /**< Interrupter Moderation, offset: 0x120A4 */
  __IO uint32_t ERSTSZ4;                           /**< Event Ring Segment Table Size, offset: 0x120A8 */
       uint32_t RSVD4;                             /**< Reserved, offset: 0x120AC */
  __IO uint32_t ERSTBA4_LO;                        /**< Event Ring Segment Table Base Address (LOW), offset: 0x120B0 */
  __IO uint32_t ERSTBA04_HI;                       /**< Event Ring Segment Table Base Address (HIGH), offset: 0x120B4 */
  __IO uint32_t ERDP4_LO;                          /**< Event Ring Dequeue Pointer (LOW), offset: 0x120B8 */
  __IO uint32_t ERDP4_HI;                          /**< Event Ring Dequeue Pointer (HIGH), offset: 0x120BC */
  __IO uint32_t IMAN5;                             /**< Interrupter Management, offset: 0x120C0 */
  __IO uint32_t IMOD5;                             /**< Interrupter Moderation, offset: 0x120C4 */
  __IO uint32_t ERSTSZ5;                           /**< Event Ring Segment Table Size, offset: 0x120C8 */
       uint32_t RSVD5;                             /**< Reserved, offset: 0x120CC */
  __IO uint32_t ERSTBA5_LO;                        /**< Event Ring Segment Table Base Address (LOW), offset: 0x120D0 */
  __IO uint32_t ERSTBA05_HI;                       /**< Event Ring Segment Table Base Address (HIGH), offset: 0x120D4 */
  __IO uint32_t ERDP5_LO;                          /**< Event Ring Dequeue Pointer (LOW), offset: 0x120D8 */
  __IO uint32_t ERDP5_HI;                          /**< Event Ring Dequeue Pointer (HIGH), offset: 0x120DC */
  __IO uint32_t IMAN6;                             /**< Interrupter Management, offset: 0x120E0 */
  __IO uint32_t IMOD6;                             /**< Interrupter Moderation, offset: 0x120E4 */
  __IO uint32_t ERSTSZ6;                           /**< Event Ring Segment Table Size, offset: 0x120E8 */
       uint32_t RSVD6;                             /**< Reserved, offset: 0x120EC */
  __IO uint32_t ERSTBA6_LO;                        /**< Event Ring Segment Table Base Address (LOW), offset: 0x120F0 */
  __IO uint32_t ERSTBA06_HI;                       /**< Event Ring Segment Table Base Address (HIGH), offset: 0x120F4 */
  __IO uint32_t ERDP6_LO;                          /**< Event Ring Dequeue Pointer (LOW), offset: 0x120F8 */
  __IO uint32_t ERDP6_HI;                          /**< Event Ring Dequeue Pointer (HIGH), offset: 0x120FC */
  __IO uint32_t IMAN7;                             /**< Interrupter Management, offset: 0x12100 */
  __IO uint32_t IMOD7;                             /**< Interrupter Moderation, offset: 0x12104 */
  __IO uint32_t ERSTSZ7;                           /**< Event Ring Segment Table Size, offset: 0x12108 */
       uint32_t RSVD7;                             /**< Reserved, offset: 0x1210C */
  __IO uint32_t ERSTBA7_LO;                        /**< Event Ring Segment Table Base Address (LOW), offset: 0x12110 */
  __IO uint32_t ERSTBA07_HI;                       /**< Event Ring Segment Table Base Address (HIGH), offset: 0x12114 */
  __IO uint32_t ERDP7_LO;                          /**< Event Ring Dequeue Pointer (LOW), offset: 0x12118 */
  __IO uint32_t ERDP7_HI;                          /**< Event Ring Dequeue Pointer (HIGH), offset: 0x1211C */
       uint8_t RESERVED_12[3808];
  __IO uint32_t DB0;                               /**< Host Controller Doorbell, offset: 0x13000 */
  __IO uint32_t DB1;                               /**< Doorbell Array, offset: 0x13004 */
  __IO uint32_t DB2;                               /**< Doorbell Array, offset: 0x13008 */
  __IO uint32_t DB3;                               /**< Doorbell Array, offset: 0x1300C */
  __IO uint32_t DB4;                               /**< Doorbell Array, offset: 0x13010 */
  __IO uint32_t DB5;                               /**< Doorbell Array, offset: 0x13014 */
  __IO uint32_t DB6;                               /**< Doorbell Array, offset: 0x13018 */
  __IO uint32_t DB7;                               /**< Doorbell Array, offset: 0x1301C */
  __IO uint32_t DB8;                               /**< Doorbell Array, offset: 0x13020 */
  __IO uint32_t DB9;                               /**< Doorbell Array, offset: 0x13024 */
  __IO uint32_t DB10;                              /**< Doorbell Array, offset: 0x13028 */
  __IO uint32_t DB11;                              /**< Doorbell Array, offset: 0x1302C */
  __IO uint32_t DB12;                              /**< Doorbell Array, offset: 0x13030 */
  __IO uint32_t DB13;                              /**< Doorbell Array, offset: 0x13034 */
  __IO uint32_t DB14;                              /**< Doorbell Array, offset: 0x13038 */
  __IO uint32_t DB15;                              /**< Doorbell Array, offset: 0x1303C */
  __IO uint32_t DB16;                              /**< Doorbell Array, offset: 0x13040 */
  __IO uint32_t DB17;                              /**< Doorbell Array, offset: 0x13044 */
  __IO uint32_t DB18;                              /**< Doorbell Array, offset: 0x13048 */
  __IO uint32_t DB19;                              /**< Doorbell Array, offset: 0x1304C */
  __IO uint32_t DB20;                              /**< Doorbell Array, offset: 0x13050 */
  __IO uint32_t DB21;                              /**< Doorbell Array, offset: 0x13054 */
  __IO uint32_t DB22;                              /**< Doorbell Array, offset: 0x13058 */
  __IO uint32_t DB23;                              /**< Doorbell Array, offset: 0x1305C */
  __IO uint32_t DB24;                              /**< Doorbell Array, offset: 0x13060 */
  __IO uint32_t DB25;                              /**< Doorbell Array, offset: 0x13064 */
  __IO uint32_t DB26;                              /**< Doorbell Array, offset: 0x13068 */
  __IO uint32_t DB27;                              /**< Doorbell Array, offset: 0x1306C */
  __IO uint32_t DB28;                              /**< Doorbell Array, offset: 0x13070 */
  __IO uint32_t DB29;                              /**< Doorbell Array, offset: 0x13074 */
  __IO uint32_t DB30;                              /**< Doorbell Array, offset: 0x13078 */
  __IO uint32_t DB31;                              /**< Doorbell Array, offset: 0x1307C */
  __IO uint32_t DB32;                              /**< Doorbell Array, offset: 0x13080 */
       uint8_t RESERVED_13[20348];
  __IO uint32_t XECP_PORT_CAP_REG;                 /**< USB3 Extended capability, offset: 0x18000 */
  __IO uint32_t XECP_PORT_1_REG;                   /**< USB3 Extended capability, offset: 0x18004 */
  __IO uint32_t XECP_CDNS_DEBUG_BUS_CAP;           /**< xHCI Debug Bus Capability, offset: 0x18008 */
  __IO uint32_t XECP_CDNS_DEBUG_BUS_CTRL;          /**< xHCI Debug Bus Control, offset: 0x1800C */
  __I  uint32_t XECP_CDNS_DEBUG_BUS_STATUS;        /**< xHCI Debug Bus Status, offset: 0x18010 */
  __IO uint32_t XECP_PM_CAP;                       /**< Extended Power Management capability, offset: 0x18014 */
  __IO uint32_t XECP_PM_PMCSR;                     /**< Extended Power Management Control/Status, offset: 0x18018 */
  __IO uint32_t XECP_MSI_CAP;                      /**< MSI configuration, offset: 0x1801C */
  __IO uint32_t XECP_MSI_ADDR_L;                   /**< Message Lower Address, offset: 0x18020 */
  __IO uint32_t XECP_MSI_ADDR_H;                   /**< Message Upper Address, offset: 0x18024 */
  __IO uint32_t XECP_MSI_DATA;                     /**< Message data, offset: 0x18028 */
  __IO uint32_t XECP_AXI_CAP;                      /**< AXI Master Wrapper Extended Capability, offset: 0x1802C */
  __I  uint32_t XECP_AXI_CFG0;                     /**< AXI Master Wrapper Extended Capability Configuration, offset: 0x18030 */
  __IO uint32_t XECP_AXI_CTRL0;                    /**< AXI Master Wrapper Extended Capability Control, offset: 0x18034 */
  __IO uint32_t XECP_AXI_CTRL1;                    /**< AXI Master Wrapper Extended Capability Control, offset: 0x18038 */
  __IO uint32_t XECP_AXI_CTRL2;                    /**< AXI Master Wrapper Extended Capability Control, offset: 0x1803C */
  __I  uint32_t XECP_SUPP_USB2_CAP0;               /**< xHCI Supported Protocol Capability, offset: 0x18040 */
  __I  uint32_t XECP_SUPP_USB2_CAP1;               /**< xHCI Supported Protocol Capability, offset: 0x18044 */
  __I  uint32_t XECP_SUPP_USB2_CAP2;               /**< xHCI Supported Protocol Capability, offset: 0x18048 */
  __I  uint32_t XECP_SUPP_USB2_PROTOCOL_SLOT_TYPE; /**< Protocol Slot Type, offset: 0x1804C */
  __I  uint32_t XECP_PSI_FULL_SPEED;               /**< Protocol Speed ID, offset: 0x18050 */
  __I  uint32_t XECP_PSI_LOW_SPEED;                /**< Protocol Speed ID, offset: 0x18054 */
  __I  uint32_t XECP_PSI_HIGH_SPEED;               /**< Protocol Speed ID, offset: 0x18058 */
       uint8_t RESERVED_14[4];
  __I  uint32_t XECP_SUPP_USB3_CAP0;               /**< xHCI Supported Protocol Capability, offset: 0x18060 */
  __I  uint32_t XECP_SUPP_USB3_CAP1;               /**< xHCI Supported Protocol Capability, offset: 0x18064 */
  __I  uint32_t XECP_SUPP_USB3_CAP2;               /**< xHCI Supported Protocol Capability; USB 3, offset: 0x18068 */
  __I  uint32_t XECP_SUPP_USB3_PROTOCOL_SLOT_TYPE; /**< Protocol Slot Type, offset: 0x1806C */
  __I  uint32_t PSI_SUPER_SPEED;                   /**< Protocol Speed ID, offset: 0x18070 */
       uint8_t RESERVED_15[12];
  __I  uint32_t XECP_CMDM_STS0;                    /**< Command Ring related status, offset: 0x18080 */
       uint32_t RSVD01;                            /**< Reserved, offset: 0x18084 */
       uint32_t RSVD02;                            /**< Reserved, offset: 0x18088 */
       uint32_t RSVD03;                            /**< Reserved, offset: 0x1808C */
       uint32_t RSVD04;                            /**< Reserved, offset: 0x18090 */
       uint32_t RSVD05;                            /**< Reserved, offset: 0x18094 */
  __IO uint32_t XECP_CMDM_CTRL_REG1;               /**< Command Manager Control, offset: 0x18098 */
  __IO uint32_t XECP_CMDM_CTRL_REG2;               /**< Command Manager Control, offset: 0x1809C */
  __IO uint32_t XECP_CMDM_CTRL_REG3;               /**< Command Manager Control, offset: 0x180A0 */
       uint8_t RESERVED_16[12];
  __I  uint32_t XECP_HOST_CTRL_CAP;                /**< Host Control Capability, offset: 0x180B0 */
       uint32_t XECP_HOST_CTRL_RSVD;               /**< Reserved, offset: 0x180B4 */
  __O  uint32_t XECP_HOST_CLR_MASK_REG;            /**< Override Endpoint Flow Control, offset: 0x180B8 */
  __O  uint32_t XECP_HOST_CLR_IN_EP_VALID_REG;     /**< Clear Active IN EP ID Control, offset: 0x180BC */
  __O  uint32_t XECP_HOST_CLR_PMASK_REG;           /**< Clear Poll Mask Control, offset: 0x180C0 */
  __IO uint32_t XECP_HOST_CTRL_OCRD_REG;           /**< Port Credit Control, offset: 0x180C4 */
  __I  uint32_t XECP_HOST_CTRL_TEST_BUS_LO;        /**< Test Bus Low, offset: 0x180C8 */
  __I  uint32_t XECP_HOST_CTRL_TEST_BUS_HI;        /**< Test Bus High, offset: 0x180CC */
  __IO uint32_t XECP_HOST_CTRL_TRM_REG1;           /**< Host Control Transfer Manager, offset: 0x180D0 */
  __IO uint32_t XECP_HOST_CTRL_SCH_REG1;           /**< Host Control Scheduler, offset: 0x180D4 */
  __IO uint32_t XECP_HOST_CTRL_ODMA_REG;           /**< Host Control ODMA, offset: 0x180D8 */
  __IO uint32_t XECP_HOST_CTRL_IDMA_REG;           /**< Host Control IDMA, offset: 0x180DC */
  __IO uint32_t XECP_HOST_CTRL_PORT_CTRL;          /**< Global Port Control, offset: 0x180E0 */
       uint8_t RESERVED_17[28];
  __IO uint32_t XECP_AUX_CTRL_REG;                 /**< AUX Reset Control, offset: 0x18100 */
  __IO uint32_t XECP_HOST_BW_OV_SS_REG;            /**< Super Speed Bandwidth Overload, offset: 0x18104 */
  __IO uint32_t XECP_HOST_BW_OV_HS_REG;            /**< High Speed TT Bandwidth Overload, offset: 0x18108 */
  __IO uint32_t XECP_HOST_BW_OV_FS_LS_REG;         /**< Bandwidth Overload Full and Low Speed, offset: 0x1810C */
  __IO uint32_t XECP_HOST_BW_OV_SYS_REG;           /**< System Bandwidth Overload, offset: 0x18110 */
  __IO uint32_t XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG; /**< Scheduler Async Delay, offset: 0x18114 */
  __O  uint32_t XECP_UPORTS_PON_RST_REG;           /**< AUX Power PHY Reset, offset: 0x18118 */
  __IO uint32_t XECP_HOST_CTRL_TRM_REG3;           /**< Host Control Transfer Manager (TRM), offset: 0x1811C */
  __IO uint32_t XECP_AUX_CTRL_REG1;                /**< AUX Power Management Control 1, offset: 0x18120 */
       uint8_t RESERVED_18[4];
  __IO uint32_t XECP_HOST_CTRL_WATERMARK_REG;      /**< Port Watermark, offset: 0x18128 */
  __IO uint32_t XECP_HOST_CTRL_PORT_LINK_REG;      /**< SuperSpeed Port Link Control, offset: 0x1812C */
  __IO uint32_t XECP_USB2_LINK_MGR_CTRL_REG1;      /**< USB2 Port Link Control, offset: 0x18130 */
  __IO uint32_t XECP_USB2_LINK_MGR_CTRL_REG2;      /**< USB2 Port Link Control, offset: 0x18134 */
  __IO uint32_t XECP_USB2_LINK_MGR_CTRL_REG3;      /**< USB2 Port Link Control, offset: 0x18138 */
  __IO uint32_t XECP_USB2_LINK_MGR_CTRL_REG4;      /**< USB2 Port Link Control, offset: 0x1813C */
  __IO uint32_t XECP_HOST_CTRL_BW_MAX_REG;         /**< USB2 Max Bandwidth Control, offset: 0x18140 */
  __I  uint32_t XECP_FPGA_REVISION_REG;            /**< FPGA_REVISION_REG, offset: 0x18144 */
  __IO uint32_t XECP_HOST_INTF_CTRL_REG;           /**< Host interface control, offset: 0x18148 */
       uint8_t RESERVED_19[548];
  __IO uint32_t XECP_USBLEGSUP;                    /**< USB Legacy Support Capability, offset: 0x18370 */
  __IO uint32_t XECP_USBLEGCTLSTS;                 /**< USB Legacy Support Control Status, offset: 0x18374 */
       uint8_t RESERVED_20[8];
  __I  uint32_t XECP_DCID;                         /**< Debug Capability ID, offset: 0x18380 */
  __IO uint32_t XECP_DCDB;                         /**< Debug Capability Doorbell, offset: 0x18384 */
  __IO uint32_t XECP_DCERSTSZ;                     /**< Debug Capability Event Ring Segment Table Size, offset: 0x18388 */
       uint32_t XECP_RSVD_0C;                      /**< Reserved, offset: 0x1838C */
  __IO uint32_t XECP_DCERSTBA_LOW;                 /**< Debug Capability Event Ring Segment Table Base Address, offset: 0x18390 */
  __IO uint32_t XECP_DCERSTBA_HIGH;                /**< Debug Capability Event Ring Segment Table Base Address, offset: 0x18394 */
  __IO uint32_t XECP_DCERDP_LOW;                   /**< Debug Capability Event Ring Dequeue Pointer, offset: 0x18398 */
  __IO uint32_t XECP_DCERDP_HIGH;                  /**< Debug Capability Event Ring Dequeue Pointer, offset: 0x1839C */
  __IO uint32_t XECP_DCCTRL;                       /**< Debug Capability Control, offset: 0x183A0 */
  __I  uint32_t XECP_DCST;                         /**< Debug Capability Status, offset: 0x183A4 */
  __IO uint32_t XECP_DCPORTSC;                     /**< Debug Capability Port Status and Control, offset: 0x183A8 */
       uint32_t XECP_RSVD_2C;                      /**< Reserved, offset: 0x183AC */
  __IO uint32_t XECP_DCCP_LOW;                     /**< Debug Capability Context Pointer, offset: 0x183B0 */
  __IO uint32_t XECP_DCCP_HIGH;                    /**< Debug Capability Context Pointer, offset: 0x183B4 */
  __IO uint32_t XECP_DCDDI1;                       /**< Debug Capability Device Descriptor Info, offset: 0x183B8 */
  __IO uint32_t XECP_DCDDI2;                       /**< The Debug Capability Device Descriptor, offset: 0x183BC */
       uint8_t RESERVED_21[31808];
  __IO uint32_t USB_CONF;                          /**< Global Configuration, offset: 0x20000 */
  __I  uint32_t USB_STS;                           /**< Global Status, offset: 0x20004 */
  __IO uint32_t USB_CMD;                           /**< Global Command, offset: 0x20008 */
  __I  uint32_t USB_IPTN;                          /**< ITP Number, offset: 0x2000C */
  __I  uint32_t USB_LPM;                           /**< Link Power Management, offset: 0x20010 */
  __IO uint32_t USB_IEN;                           /**< Interrupt Enable, offset: 0x20014 */
  __IO uint32_t USB_ISTS;                          /**< Interrupt Status, offset: 0x20018 */
  __IO uint32_t EP_SEL;                            /**< Endpoint Select, offset: 0x2001C */
  __IO uint32_t EP_TRADDR;                         /**< Endpoint Transfer Ring Address, offset: 0x20020 */
  __IO uint32_t EP_CFG;                            /**< Endpoint Configuration, offset: 0x20024 */
  __IO uint32_t EP_CMD;                            /**< Endpoint Command, offset: 0x20028 */
  __IO uint32_t EP_STS;                            /**< Endpoint Status, offset: 0x2002C */
  __I  uint32_t EP_STS_SID;                        /**< Endpoint Status, offset: 0x20030 */
  __IO uint32_t EP_STS_EN;                         /**< Endpoint Status Register Enable, offset: 0x20034 */
  __IO uint32_t DRBL;                              /**< Doorbell Register, offset: 0x20038 */
  __IO uint32_t EP_IEN;                            /**< Endpoints Interrupt Enable), offset: 0x2003C */
  __I  uint32_t EP_ISTS;                           /**< Endpoints Interrupt Status, offset: 0x20040 */
  __IO uint32_t USB_PWR;                           /**< Global power configuration, offset: 0x20044 */
  __IO uint32_t USB_CONF2;                         /**< USB configuration, offset: 0x20048 */
  __I  uint32_t USB_CAP1;                          /**< USB Capability, offset: 0x2004C */
  __I  uint32_t USB_CAP2;                          /**< USB Capability, offset: 0x20050 */
  __I  uint32_t USB_CAP3;                          /**< USB Capability, offset: 0x20054 */
  __I  uint32_t USB_CAP4;                          /**< ISO HW support, offset: 0x20058 */
  __I  uint32_t USB_CAP5;                          /**< Bulk Stream HW, offset: 0x2005C */
  __I  uint32_t USB_CAP6;                          /**< Device controller version, offset: 0x20060 */
  __IO uint32_t USB_CPKT1;                         /**< Custom Packet value, offset: 0x20064 */
  __IO uint32_t USB_CPKT2;                         /**< Custom Packet value, offset: 0x20068 */
  __IO uint32_t USB_CPKT3;                         /**< Custom Packet value, offset: 0x2006C */
       uint8_t RESERVED_22[144];
  __IO uint32_t CFG_REG1;                          /**< VBUS debouncer Configuration, offset: 0x20100 */
  __IO uint32_t DBG_LINK1;                         /**< Link, offset: 0x20104 */
  __IO uint32_t DBG_LINK2;                         /**< Link, offset: 0x20108 */
  __IO uint32_t CFG_REG4;                          /**< USB3 Configuration, offset: 0x2010C */
  __IO uint32_t CFG_REG5;                          /**< USB3 Configuration, offset: 0x20110 */
  __IO uint32_t CFG_REG6;                          /**< Configuration Register 6, offset: 0x20114 */
  __IO uint32_t CFG_REG7;                          /**< USB3 Configuration, offset: 0x20118 */
  __IO uint32_t CFG_REG8;                          /**< USB3 Configuration, offset: 0x2011C */
  __IO uint32_t CFG_REG9;                          /**< USB3 Configuration, offset: 0x20120 */
  __IO uint32_t CFG_REG10;                         /**< USB3 Configuration, offset: 0x20124 */
  __IO uint32_t CFG_REG11;                         /**< USB3 Configuration, offset: 0x20128 */
  __IO uint32_t CFG_REG12;                         /**< USB3 Configuration, offset: 0x2012C */
  __IO uint32_t CFG_REG13;                         /**< USB3 Configuration, offset: 0x20130 */
  __IO uint32_t CFG_REG14;                         /**< USB3 Configuration, offset: 0x20134 */
  __IO uint32_t CFG_REG15;                         /**< USB3 Configuration, offset: 0x20138 */
  __IO uint32_t CFG_REG16;                         /**< USB3 Configuration, offset: 0x2013C */
  __IO uint32_t CFG_REG17;                         /**< USB3 Configuration, offset: 0x20140 */
  __IO uint32_t CFG_REG18;                         /**< USB3 Configuration, offset: 0x20144 */
  __IO uint32_t CFG_REG19;                         /**< USB3 Configuration, offset: 0x20148 */
  __IO uint32_t CFG_REG20;                         /**< USB3 Configuration, offset: 0x2014C */
  __IO uint32_t CFG_REG21;                         /**< USB3 Configuration, offset: 0x20150 */
  __IO uint32_t CFG_REG22;                         /**< USB3 Configuration, offset: 0x20154 */
  __IO uint32_t CFG_REG23;                         /**< USB3 Configuration, offset: 0x20158 */
  __IO uint32_t CFG_REG24;                         /**< USB3 Configuration, offset: 0x2015C */
  __IO uint32_t CFG_REG25;                         /**< USB3 Configuration, offset: 0x20160 */
  __IO uint32_t CFG_REG26;                         /**< USB3 Configuration, offset: 0x20164 */
  __IO uint32_t CFG_REG27;                         /**< USB3 Configuration, offset: 0x20168 */
  __IO uint32_t CFG_REG28;                         /**< USB3 Configuration, offset: 0x2016C */
  __IO uint32_t CFG_REG29;                         /**< USB3 Configuration, offset: 0x20170 */
  __IO uint32_t CFG_REG30;                         /**< USB3 Configuration, offset: 0x20174 */
  __IO uint32_t CFG_REG31;                         /**< USB3 Configuration, offset: 0x20178 */
  __IO uint32_t CFG_REG32;                         /**< USB3 Configuration, offset: 0x2017C */
  __IO uint32_t CFG_REG33;                         /**< USB3 Configuration, offset: 0x20180 */
  __IO uint32_t CFG_REG34;                         /**< USB3 Configuration, offset: 0x20184 */
  __IO uint32_t CFG_REG35;                         /**< USB3 Configuration, offset: 0x20188 */
       uint8_t RESERVED_23[32];
  __IO uint32_t CFG_REG36;                         /**< USB3 Configuration, offset: 0x201AC */
  __IO uint32_t CFG_REG37;                         /**< USB3 Configuration, offset: 0x201B0 */
  __IO uint32_t CFG_REG38;                         /**< USB3 Configuration, offset: 0x201B4 */
  __IO uint32_t CFG_REG39;                         /**< USB3 Configuration, offset: 0x201B8 */
  __IO uint32_t CFG_REG40;                         /**< USB3 Configuration, offset: 0x201BC */
  __IO uint32_t CFG_REG41;                         /**< USB3 Configuration, offset: 0x201C0 */
  __IO uint32_t CFG_REG42;                         /**< USB3 Configuration, offset: 0x201C4 */
  __IO uint32_t CFG_REG43;                         /**< USB3 Configuration, offset: 0x201C8 */
  __IO uint32_t CFG_REG44;                         /**< USB3 Configuration, offset: 0x201CC */
  __IO uint32_t CFG_REG45;                         /**< USB3 Configuration, offset: 0x201D0 */
  __IO uint32_t CFG_REG46;                         /**< USB3 Configuration, offset: 0x201D4 */
  __IO uint32_t CFG_REG47;                         /**< USB3 Configuration, offset: 0x201D8 */
  __IO uint32_t CFG_REG48;                         /**< USB2 Configuration, offset: 0x201DC */
  __IO uint32_t CFG_REG49;                         /**< USB2 Configuration, offset: 0x201E0 */
  __IO uint32_t CFG_REG50;                         /**< USB2 Configuration, offset: 0x201E4 */
  __IO uint32_t CFG_REG51;                         /**< USB2 Configuration, offset: 0x201E8 */
  __IO uint32_t CFG_REG52;                         /**< USB2 Configuration, offset: 0x201EC */
  __IO uint32_t CFG_REG53;                         /**< USB2 Configuration, offset: 0x201F0 */
  __IO uint32_t CFG_REG54;                         /**< USB2 Configuration, offset: 0x201F4 */
  __IO uint32_t CFG_REG55;                         /**< USB2 Configuration, offset: 0x201F8 */
  __IO uint32_t CFG_REG56;                         /**< USB2 Configuration, offset: 0x201FC */
  __IO uint32_t CFG_REG57;                         /**< USB3 Configuration, offset: 0x20200 */
  __IO uint32_t CFG_REG58;                         /**< USB3 Configuration, offset: 0x20204 */
  __IO uint32_t CFG_REG59;                         /**< USB3 Configuration, offset: 0x20208 */
  __IO uint32_t CFG_REG60;                         /**< USB3 Configuration, offset: 0x2020C */
  __IO uint32_t CFG_REG61;                         /**< USB3 Configuration, offset: 0x20210 */
  __IO uint32_t CFG_REG62;                         /**< USB3 Configuration, offset: 0x20214 */
  __IO uint32_t CFG_REG63;                         /**< USB3 Configuration, offset: 0x20218 */
       uint8_t RESERVED_24[4];
  __IO uint32_t CFG_REG64;                         /**< USB2 Configuration, offset: 0x20220 */
  __IO uint32_t CFG_REG65;                         /**< USB2 Configuration, offset: 0x20224 */
  __IO uint32_t CFG_REG66;                         /**< USB2 Configuration, offset: 0x20228 */
       uint8_t RESERVED_25[212];
  __IO uint32_t DMA_AXI_CTRL;                      /**< DMA AXI Master Control, offset: 0x20300 */
  __IO uint32_t DMA_AXI_ID;                        /**< DMA AXI Master ID, offset: 0x20304 */
  __IO uint32_t DMA_AXI_CAP;                       /**< DMA AXI Master Extended Capability, offset: 0x20308 */
  __IO uint32_t DMA_AXI_CTRL0;                     /**< DMA AXI Master Control, offset: 0x2030C */
  __IO uint32_t DMA_AXI_CTRL1;                     /**< DMA AXI Master Control, offset: 0x20310 */
} USB_CORE_Type;

/* ----------------------------------------------------------------------------
   -- USB_CORE Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_CORE_Register_Masks USB_CORE Register Masks
 * @{
 */

/*! @name OTGCMD - OTG Command */
#define USB_CORE_OTGCMD_DEV_BUS_REQ_MASK         (0x1U)
#define USB_CORE_OTGCMD_DEV_BUS_REQ_SHIFT        (0U)
#define USB_CORE_OTGCMD_DEV_BUS_REQ(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_DEV_BUS_REQ_SHIFT)) & USB_CORE_OTGCMD_DEV_BUS_REQ_MASK)
#define USB_CORE_OTGCMD_HOST_BUS_REQ_MASK        (0x2U)
#define USB_CORE_OTGCMD_HOST_BUS_REQ_SHIFT       (1U)
#define USB_CORE_OTGCMD_HOST_BUS_REQ(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_HOST_BUS_REQ_SHIFT)) & USB_CORE_OTGCMD_HOST_BUS_REQ_MASK)
#define USB_CORE_OTGCMD_OTG_EN_MASK              (0x4U)
#define USB_CORE_OTGCMD_OTG_EN_SHIFT             (2U)
#define USB_CORE_OTGCMD_OTG_EN(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_OTG_EN_SHIFT)) & USB_CORE_OTGCMD_OTG_EN_MASK)
#define USB_CORE_OTGCMD_OTG_DIS_MASK             (0x8U)
#define USB_CORE_OTGCMD_OTG_DIS_SHIFT            (3U)
#define USB_CORE_OTGCMD_OTG_DIS(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_OTG_DIS_SHIFT)) & USB_CORE_OTGCMD_OTG_DIS_MASK)
#define USB_CORE_OTGCMD_A_DEV_EN_MASK            (0x10U)
#define USB_CORE_OTGCMD_A_DEV_EN_SHIFT           (4U)
#define USB_CORE_OTGCMD_A_DEV_EN(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_A_DEV_EN_SHIFT)) & USB_CORE_OTGCMD_A_DEV_EN_MASK)
#define USB_CORE_OTGCMD_A_DEV_DIS_MASK           (0x20U)
#define USB_CORE_OTGCMD_A_DEV_DIS_SHIFT          (5U)
#define USB_CORE_OTGCMD_A_DEV_DIS(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_A_DEV_DIS_SHIFT)) & USB_CORE_OTGCMD_A_DEV_DIS_MASK)
#define USB_CORE_OTGCMD_DEV_SESS_VLD_USE_SET_MASK (0x40U)
#define USB_CORE_OTGCMD_DEV_SESS_VLD_USE_SET_SHIFT (6U)
#define USB_CORE_OTGCMD_DEV_SESS_VLD_USE_SET(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_DEV_SESS_VLD_USE_SET_SHIFT)) & USB_CORE_OTGCMD_DEV_SESS_VLD_USE_SET_MASK)
#define USB_CORE_OTGCMD_DEV_SESS_VLD_USE_CLR_MASK (0x80U)
#define USB_CORE_OTGCMD_DEV_SESS_VLD_USE_CLR_SHIFT (7U)
#define USB_CORE_OTGCMD_DEV_SESS_VLD_USE_CLR(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_DEV_SESS_VLD_USE_CLR_SHIFT)) & USB_CORE_OTGCMD_DEV_SESS_VLD_USE_CLR_MASK)
#define USB_CORE_OTGCMD_DEV_BUS_DROP_MASK        (0x100U)
#define USB_CORE_OTGCMD_DEV_BUS_DROP_SHIFT       (8U)
#define USB_CORE_OTGCMD_DEV_BUS_DROP(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_DEV_BUS_DROP_SHIFT)) & USB_CORE_OTGCMD_DEV_BUS_DROP_MASK)
#define USB_CORE_OTGCMD_HOST_BUS_DROP_MASK       (0x200U)
#define USB_CORE_OTGCMD_HOST_BUS_DROP_SHIFT      (9U)
#define USB_CORE_OTGCMD_HOST_BUS_DROP(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_HOST_BUS_DROP_SHIFT)) & USB_CORE_OTGCMD_HOST_BUS_DROP_MASK)
#define USB_CORE_OTGCMD_DIS_VBUS_DROP_MASK       (0x400U)
#define USB_CORE_OTGCMD_DIS_VBUS_DROP_SHIFT      (10U)
#define USB_CORE_OTGCMD_DIS_VBUS_DROP(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_DIS_VBUS_DROP_SHIFT)) & USB_CORE_OTGCMD_DIS_VBUS_DROP_MASK)
#define USB_CORE_OTGCMD_DEV_POWER_OFF_MASK       (0x800U)
#define USB_CORE_OTGCMD_DEV_POWER_OFF_SHIFT      (11U)
#define USB_CORE_OTGCMD_DEV_POWER_OFF(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_DEV_POWER_OFF_SHIFT)) & USB_CORE_OTGCMD_DEV_POWER_OFF_MASK)
#define USB_CORE_OTGCMD_HOST_POWER_OFF_MASK      (0x1000U)
#define USB_CORE_OTGCMD_HOST_POWER_OFF_SHIFT     (12U)
#define USB_CORE_OTGCMD_HOST_POWER_OFF(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_HOST_POWER_OFF_SHIFT)) & USB_CORE_OTGCMD_HOST_POWER_OFF_MASK)
#define USB_CORE_OTGCMD_DEV_DEVEN_FORCE_SET_MASK (0x2000U)
#define USB_CORE_OTGCMD_DEV_DEVEN_FORCE_SET_SHIFT (13U)
#define USB_CORE_OTGCMD_DEV_DEVEN_FORCE_SET(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_DEV_DEVEN_FORCE_SET_SHIFT)) & USB_CORE_OTGCMD_DEV_DEVEN_FORCE_SET_MASK)
#define USB_CORE_OTGCMD_DEV_DEVEN_FORCE_CLR_MASK (0x4000U)
#define USB_CORE_OTGCMD_DEV_DEVEN_FORCE_CLR_SHIFT (14U)
#define USB_CORE_OTGCMD_DEV_DEVEN_FORCE_CLR(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_DEV_DEVEN_FORCE_CLR_SHIFT)) & USB_CORE_OTGCMD_DEV_DEVEN_FORCE_CLR_MASK)
#define USB_CORE_OTGCMD_H_WRST_FOR_SWAP_SET_MASK (0x8000U)
#define USB_CORE_OTGCMD_H_WRST_FOR_SWAP_SET_SHIFT (15U)
#define USB_CORE_OTGCMD_H_WRST_FOR_SWAP_SET(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_H_WRST_FOR_SWAP_SET_SHIFT)) & USB_CORE_OTGCMD_H_WRST_FOR_SWAP_SET_MASK)
#define USB_CORE_OTGCMD_H_WRST_FOR_SWAP_CLR_MASK (0x10000U)
#define USB_CORE_OTGCMD_H_WRST_FOR_SWAP_CLR_SHIFT (16U)
#define USB_CORE_OTGCMD_H_WRST_FOR_SWAP_CLR(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_H_WRST_FOR_SWAP_CLR_SHIFT)) & USB_CORE_OTGCMD_H_WRST_FOR_SWAP_CLR_MASK)
#define USB_CORE_OTGCMD_D_WRST_FOR_SWAP_SET_MASK (0x20000U)
#define USB_CORE_OTGCMD_D_WRST_FOR_SWAP_SET_SHIFT (17U)
#define USB_CORE_OTGCMD_D_WRST_FOR_SWAP_SET(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_D_WRST_FOR_SWAP_SET_SHIFT)) & USB_CORE_OTGCMD_D_WRST_FOR_SWAP_SET_MASK)
#define USB_CORE_OTGCMD_D_WRST_FOR_SWAP_CLR_MASK (0x40000U)
#define USB_CORE_OTGCMD_D_WRST_FOR_SWAP_CLR_SHIFT (18U)
#define USB_CORE_OTGCMD_D_WRST_FOR_SWAP_CLR(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_D_WRST_FOR_SWAP_CLR_SHIFT)) & USB_CORE_OTGCMD_D_WRST_FOR_SWAP_CLR_MASK)
#define USB_CORE_OTGCMD_SS_HOST_DISABLED_SET_MASK (0x80000U)
#define USB_CORE_OTGCMD_SS_HOST_DISABLED_SET_SHIFT (19U)
#define USB_CORE_OTGCMD_SS_HOST_DISABLED_SET(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_SS_HOST_DISABLED_SET_SHIFT)) & USB_CORE_OTGCMD_SS_HOST_DISABLED_SET_MASK)
#define USB_CORE_OTGCMD_SS_HOST_DISABLED_CLR_MASK (0x100000U)
#define USB_CORE_OTGCMD_SS_HOST_DISABLED_CLR_SHIFT (20U)
#define USB_CORE_OTGCMD_SS_HOST_DISABLED_CLR(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_SS_HOST_DISABLED_CLR_SHIFT)) & USB_CORE_OTGCMD_SS_HOST_DISABLED_CLR_MASK)
#define USB_CORE_OTGCMD_SS_PERIPH_DISABLED_SET_MASK (0x200000U)
#define USB_CORE_OTGCMD_SS_PERIPH_DISABLED_SET_SHIFT (21U)
#define USB_CORE_OTGCMD_SS_PERIPH_DISABLED_SET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_SS_PERIPH_DISABLED_SET_SHIFT)) & USB_CORE_OTGCMD_SS_PERIPH_DISABLED_SET_MASK)
#define USB_CORE_OTGCMD_SS_PERIPH_DISABLED_CLR_MASK (0x400000U)
#define USB_CORE_OTGCMD_SS_PERIPH_DISABLED_CLR_SHIFT (22U)
#define USB_CORE_OTGCMD_SS_PERIPH_DISABLED_CLR(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_SS_PERIPH_DISABLED_CLR_SHIFT)) & USB_CORE_OTGCMD_SS_PERIPH_DISABLED_CLR_MASK)
#define USB_CORE_OTGCMD_A_SET_B_HNP_EN_SET_MASK  (0x800000U)
#define USB_CORE_OTGCMD_A_SET_B_HNP_EN_SET_SHIFT (23U)
#define USB_CORE_OTGCMD_A_SET_B_HNP_EN_SET(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_A_SET_B_HNP_EN_SET_SHIFT)) & USB_CORE_OTGCMD_A_SET_B_HNP_EN_SET_MASK)
#define USB_CORE_OTGCMD_A_SET_B_HNP_EN_CLR_MASK  (0x1000000U)
#define USB_CORE_OTGCMD_A_SET_B_HNP_EN_CLR_SHIFT (24U)
#define USB_CORE_OTGCMD_A_SET_B_HNP_EN_CLR(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_A_SET_B_HNP_EN_CLR_SHIFT)) & USB_CORE_OTGCMD_A_SET_B_HNP_EN_CLR_MASK)
#define USB_CORE_OTGCMD_B_HNP_EN_SET_MASK        (0x2000000U)
#define USB_CORE_OTGCMD_B_HNP_EN_SET_SHIFT       (25U)
#define USB_CORE_OTGCMD_B_HNP_EN_SET(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_B_HNP_EN_SET_SHIFT)) & USB_CORE_OTGCMD_B_HNP_EN_SET_MASK)
#define USB_CORE_OTGCMD_B_HNP_EN_CLR_MASK        (0x4000000U)
#define USB_CORE_OTGCMD_B_HNP_EN_CLR_SHIFT       (26U)
#define USB_CORE_OTGCMD_B_HNP_EN_CLR(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_B_HNP_EN_CLR_SHIFT)) & USB_CORE_OTGCMD_B_HNP_EN_CLR_MASK)
#define USB_CORE_OTGCMD_OTG2_SWITCH_TO_PERIPH_MASK (0x8000000U)
#define USB_CORE_OTGCMD_OTG2_SWITCH_TO_PERIPH_SHIFT (27U)
#define USB_CORE_OTGCMD_OTG2_SWITCH_TO_PERIPH(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_OTG2_SWITCH_TO_PERIPH_SHIFT)) & USB_CORE_OTGCMD_OTG2_SWITCH_TO_PERIPH_MASK)
#define USB_CORE_OTGCMD_INIT_SRP_MASK            (0x10000000U)
#define USB_CORE_OTGCMD_INIT_SRP_SHIFT           (28U)
#define USB_CORE_OTGCMD_INIT_SRP(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_INIT_SRP_SHIFT)) & USB_CORE_OTGCMD_INIT_SRP_MASK)
#define USB_CORE_OTGCMD_DEV_VBUS_DEB_SHORT_SET_MASK (0x20000000U)
#define USB_CORE_OTGCMD_DEV_VBUS_DEB_SHORT_SET_SHIFT (29U)
#define USB_CORE_OTGCMD_DEV_VBUS_DEB_SHORT_SET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_DEV_VBUS_DEB_SHORT_SET_SHIFT)) & USB_CORE_OTGCMD_DEV_VBUS_DEB_SHORT_SET_MASK)
#define USB_CORE_OTGCMD_DEV_VBUS_DEB_SHORT_CLR_MASK (0x40000000U)
#define USB_CORE_OTGCMD_DEV_VBUS_DEB_SHORT_CLR_SHIFT (30U)
#define USB_CORE_OTGCMD_DEV_VBUS_DEB_SHORT_CLR(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCMD_DEV_VBUS_DEB_SHORT_CLR_SHIFT)) & USB_CORE_OTGCMD_DEV_VBUS_DEB_SHORT_CLR_MASK)

/*! @name OTGSTS - OTG Status */
#define USB_CORE_OTGSTS_ID_VALUE_MASK            (0x1U)
#define USB_CORE_OTGSTS_ID_VALUE_SHIFT           (0U)
#define USB_CORE_OTGSTS_ID_VALUE(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_ID_VALUE_SHIFT)) & USB_CORE_OTGSTS_ID_VALUE_MASK)
#define USB_CORE_OTGSTS_VBUS_VALID_MASK          (0x2U)
#define USB_CORE_OTGSTS_VBUS_VALID_SHIFT         (1U)
#define USB_CORE_OTGSTS_VBUS_VALID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_VBUS_VALID_SHIFT)) & USB_CORE_OTGSTS_VBUS_VALID_MASK)
#define USB_CORE_OTGSTS_SESSION_VALID_MASK       (0x4U)
#define USB_CORE_OTGSTS_SESSION_VALID_SHIFT      (2U)
#define USB_CORE_OTGSTS_SESSION_VALID(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_SESSION_VALID_SHIFT)) & USB_CORE_OTGSTS_SESSION_VALID_MASK)
#define USB_CORE_OTGSTS_DEV_ACTIVE_MASK          (0x8U)
#define USB_CORE_OTGSTS_DEV_ACTIVE_SHIFT         (3U)
#define USB_CORE_OTGSTS_DEV_ACTIVE(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_DEV_ACTIVE_SHIFT)) & USB_CORE_OTGSTS_DEV_ACTIVE_MASK)
#define USB_CORE_OTGSTS_HOST_ACTIVE_MASK         (0x10U)
#define USB_CORE_OTGSTS_HOST_ACTIVE_SHIFT        (4U)
#define USB_CORE_OTGSTS_HOST_ACTIVE(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_HOST_ACTIVE_SHIFT)) & USB_CORE_OTGSTS_HOST_ACTIVE_MASK)
#define USB_CORE_OTGSTS_OTG_IS_ENABLED_MASK      (0x20U)
#define USB_CORE_OTGSTS_OTG_IS_ENABLED_SHIFT     (5U)
#define USB_CORE_OTGSTS_OTG_IS_ENABLED(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_OTG_IS_ENABLED_SHIFT)) & USB_CORE_OTGSTS_OTG_IS_ENABLED_MASK)
#define USB_CORE_OTGSTS_OTG_MODE_MASK            (0x40U)
#define USB_CORE_OTGSTS_OTG_MODE_SHIFT           (6U)
#define USB_CORE_OTGSTS_OTG_MODE(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_OTG_MODE_SHIFT)) & USB_CORE_OTGSTS_OTG_MODE_MASK)
#define USB_CORE_OTGSTS_SS_HOST_DISABLED_MASK    (0x80U)
#define USB_CORE_OTGSTS_SS_HOST_DISABLED_SHIFT   (7U)
#define USB_CORE_OTGSTS_SS_HOST_DISABLED(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_SS_HOST_DISABLED_SHIFT)) & USB_CORE_OTGSTS_SS_HOST_DISABLED_MASK)
#define USB_CORE_OTGSTS_SS_PERIPH_DISABLED_MASK  (0x100U)
#define USB_CORE_OTGSTS_SS_PERIPH_DISABLED_SHIFT (8U)
#define USB_CORE_OTGSTS_SS_PERIPH_DISABLED(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_SS_PERIPH_DISABLED_SHIFT)) & USB_CORE_OTGSTS_SS_PERIPH_DISABLED_MASK)
#define USB_CORE_OTGSTS_DEV_VBUS_DEB_SHORT_MASK  (0x200U)
#define USB_CORE_OTGSTS_DEV_VBUS_DEB_SHORT_SHIFT (9U)
#define USB_CORE_OTGSTS_DEV_VBUS_DEB_SHORT(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_DEV_VBUS_DEB_SHORT_SHIFT)) & USB_CORE_OTGSTS_DEV_VBUS_DEB_SHORT_MASK)
#define USB_CORE_OTGSTS_DEV_SESS_VLD_USE_MASK    (0x400U)
#define USB_CORE_OTGSTS_DEV_SESS_VLD_USE_SHIFT   (10U)
#define USB_CORE_OTGSTS_DEV_SESS_VLD_USE(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_DEV_SESS_VLD_USE_SHIFT)) & USB_CORE_OTGSTS_DEV_SESS_VLD_USE_MASK)
#define USB_CORE_OTGSTS_OTG_NRDY_MASK            (0x800U)
#define USB_CORE_OTGSTS_OTG_NRDY_SHIFT           (11U)
#define USB_CORE_OTGSTS_OTG_NRDY(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_OTG_NRDY_SHIFT)) & USB_CORE_OTGSTS_OTG_NRDY_MASK)
#define USB_CORE_OTGSTS_STRAP_MASK               (0x7000U)
#define USB_CORE_OTGSTS_STRAP_SHIFT              (12U)
#define USB_CORE_OTGSTS_STRAP(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_STRAP_SHIFT)) & USB_CORE_OTGSTS_STRAP_MASK)
#define USB_CORE_OTGSTS_H_WRST_FOR_SWAP_MASK     (0x8000U)
#define USB_CORE_OTGSTS_H_WRST_FOR_SWAP_SHIFT    (15U)
#define USB_CORE_OTGSTS_H_WRST_FOR_SWAP(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_H_WRST_FOR_SWAP_SHIFT)) & USB_CORE_OTGSTS_H_WRST_FOR_SWAP_MASK)
#define USB_CORE_OTGSTS_DEV_DEVEN_FORCE_MASK     (0x10000U)
#define USB_CORE_OTGSTS_DEV_DEVEN_FORCE_SHIFT    (16U)
#define USB_CORE_OTGSTS_DEV_DEVEN_FORCE(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_DEV_DEVEN_FORCE_SHIFT)) & USB_CORE_OTGSTS_DEV_DEVEN_FORCE_MASK)
#define USB_CORE_OTGSTS_D_WRST_FOR_SWAP_MASK     (0x20000U)
#define USB_CORE_OTGSTS_D_WRST_FOR_SWAP_SHIFT    (17U)
#define USB_CORE_OTGSTS_D_WRST_FOR_SWAP(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_D_WRST_FOR_SWAP_SHIFT)) & USB_CORE_OTGSTS_D_WRST_FOR_SWAP_MASK)
#define USB_CORE_OTGSTS_SRP_INITIAL_CONDITION_MET_MASK (0x40000U)
#define USB_CORE_OTGSTS_SRP_INITIAL_CONDITION_MET_SHIFT (18U)
#define USB_CORE_OTGSTS_SRP_INITIAL_CONDITION_MET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_SRP_INITIAL_CONDITION_MET_SHIFT)) & USB_CORE_OTGSTS_SRP_INITIAL_CONDITION_MET_MASK)
#define USB_CORE_OTGSTS_SRP_DET_NOT_COMPLIANT_DEV_MASK (0x80000U)
#define USB_CORE_OTGSTS_SRP_DET_NOT_COMPLIANT_DEV_SHIFT (19U)
#define USB_CORE_OTGSTS_SRP_DET_NOT_COMPLIANT_DEV(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_SRP_DET_NOT_COMPLIANT_DEV_SHIFT)) & USB_CORE_OTGSTS_SRP_DET_NOT_COMPLIANT_DEV_MASK)
#define USB_CORE_OTGSTS_A_SET_B_HNP_EN_MASK      (0x800000U)
#define USB_CORE_OTGSTS_A_SET_B_HNP_EN_SHIFT     (23U)
#define USB_CORE_OTGSTS_A_SET_B_HNP_EN(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_A_SET_B_HNP_EN_SHIFT)) & USB_CORE_OTGSTS_A_SET_B_HNP_EN_MASK)
#define USB_CORE_OTGSTS_B_HNP_EN_MASK            (0x2000000U)
#define USB_CORE_OTGSTS_B_HNP_EN_SHIFT           (25U)
#define USB_CORE_OTGSTS_B_HNP_EN(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_B_HNP_EN_SHIFT)) & USB_CORE_OTGSTS_B_HNP_EN_MASK)
#define USB_CORE_OTGSTS_XHC_READY_MASK           (0x4000000U)
#define USB_CORE_OTGSTS_XHC_READY_SHIFT          (26U)
#define USB_CORE_OTGSTS_XHC_READY(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_XHC_READY_SHIFT)) & USB_CORE_OTGSTS_XHC_READY_MASK)
#define USB_CORE_OTGSTS_DEV_READY_MASK           (0x8000000U)
#define USB_CORE_OTGSTS_DEV_READY_SHIFT          (27U)
#define USB_CORE_OTGSTS_DEV_READY(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTS_DEV_READY_SHIFT)) & USB_CORE_OTGSTS_DEV_READY_MASK)

/*! @name OTGSTATE - OTG State */
#define USB_CORE_OTGSTATE_DEV_OTG_STATE_MASK     (0x7U)
#define USB_CORE_OTGSTATE_DEV_OTG_STATE_SHIFT    (0U)
#define USB_CORE_OTGSTATE_DEV_OTG_STATE(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_DEV_OTG_STATE_SHIFT)) & USB_CORE_OTGSTATE_DEV_OTG_STATE_MASK)
#define USB_CORE_OTGSTATE_HOST_OTG_STATE_MASK    (0x38U)
#define USB_CORE_OTGSTATE_HOST_OTG_STATE_SHIFT   (3U)
#define USB_CORE_OTGSTATE_HOST_OTG_STATE(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_HOST_OTG_STATE_SHIFT)) & USB_CORE_OTGSTATE_HOST_OTG_STATE_MASK)
#define USB_CORE_OTGSTATE_APB_AXI_CTRL_MASK      (0x300U)
#define USB_CORE_OTGSTATE_APB_AXI_CTRL_SHIFT     (8U)
#define USB_CORE_OTGSTATE_APB_AXI_CTRL(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_APB_AXI_CTRL_SHIFT)) & USB_CORE_OTGSTATE_APB_AXI_CTRL_MASK)
#define USB_CORE_OTGSTATE_PIPE_CTRL_MASK         (0xC00U)
#define USB_CORE_OTGSTATE_PIPE_CTRL_SHIFT        (10U)
#define USB_CORE_OTGSTATE_PIPE_CTRL(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_PIPE_CTRL_SHIFT)) & USB_CORE_OTGSTATE_PIPE_CTRL_MASK)
#define USB_CORE_OTGSTATE_UTMI_CTRL_MASK         (0x3000U)
#define USB_CORE_OTGSTATE_UTMI_CTRL_SHIFT        (12U)
#define USB_CORE_OTGSTATE_UTMI_CTRL(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_UTMI_CTRL_SHIFT)) & USB_CORE_OTGSTATE_UTMI_CTRL_MASK)
#define USB_CORE_OTGSTATE_DEV_POWER_STATE_MASK   (0x70000U)
#define USB_CORE_OTGSTATE_DEV_POWER_STATE_SHIFT  (16U)
#define USB_CORE_OTGSTATE_DEV_POWER_STATE(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_DEV_POWER_STATE_SHIFT)) & USB_CORE_OTGSTATE_DEV_POWER_STATE_MASK)
#define USB_CORE_OTGSTATE_HOST_POWER_STATE_MASK  (0x380000U)
#define USB_CORE_OTGSTATE_HOST_POWER_STATE_SHIFT (19U)
#define USB_CORE_OTGSTATE_HOST_POWER_STATE(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_HOST_POWER_STATE_SHIFT)) & USB_CORE_OTGSTATE_HOST_POWER_STATE_MASK)
#define USB_CORE_OTGSTATE_PHY_REFCLK_REQ_MASK    (0x1000000U)
#define USB_CORE_OTGSTATE_PHY_REFCLK_REQ_SHIFT   (24U)
#define USB_CORE_OTGSTATE_PHY_REFCLK_REQ(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_PHY_REFCLK_REQ_SHIFT)) & USB_CORE_OTGSTATE_PHY_REFCLK_REQ_MASK)
#define USB_CORE_OTGSTATE_PHY_REFCLK_1PCT_VALID_MASK (0x2000000U)
#define USB_CORE_OTGSTATE_PHY_REFCLK_1PCT_VALID_SHIFT (25U)
#define USB_CORE_OTGSTATE_PHY_REFCLK_1PCT_VALID(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_PHY_REFCLK_1PCT_VALID_SHIFT)) & USB_CORE_OTGSTATE_PHY_REFCLK_1PCT_VALID_MASK)
#define USB_CORE_OTGSTATE_PHY_REFCLK_VALID_MASK  (0x4000000U)
#define USB_CORE_OTGSTATE_PHY_REFCLK_VALID_SHIFT (26U)
#define USB_CORE_OTGSTATE_PHY_REFCLK_VALID(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_PHY_REFCLK_VALID_SHIFT)) & USB_CORE_OTGSTATE_PHY_REFCLK_VALID_MASK)
#define USB_CORE_OTGSTATE_REFCLK_FSM_MASK        (0x38000000U)
#define USB_CORE_OTGSTATE_REFCLK_FSM_SHIFT       (27U)
#define USB_CORE_OTGSTATE_REFCLK_FSM(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSTATE_REFCLK_FSM_SHIFT)) & USB_CORE_OTGSTATE_REFCLK_FSM_MASK)

/*! @name OTGREFCLK - OTG Reference Clock */
#define USB_CORE_OTGREFCLK_P3_TO_REFCLK_REQ_MASK (0x3FFFU)
#define USB_CORE_OTGREFCLK_P3_TO_REFCLK_REQ_SHIFT (0U)
#define USB_CORE_OTGREFCLK_P3_TO_REFCLK_REQ(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGREFCLK_P3_TO_REFCLK_REQ_SHIFT)) & USB_CORE_OTGREFCLK_P3_TO_REFCLK_REQ_MASK)
#define USB_CORE_OTGREFCLK_SUSPEND_TO_REFCLK_REQ_MASK (0x3FFF0000U)
#define USB_CORE_OTGREFCLK_SUSPEND_TO_REFCLK_REQ_SHIFT (16U)
#define USB_CORE_OTGREFCLK_SUSPEND_TO_REFCLK_REQ(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGREFCLK_SUSPEND_TO_REFCLK_REQ_SHIFT)) & USB_CORE_OTGREFCLK_SUSPEND_TO_REFCLK_REQ_MASK)
#define USB_CORE_OTGREFCLK_OTG_STB_CLK_SWITCH_EN_MASK (0x80000000U)
#define USB_CORE_OTGREFCLK_OTG_STB_CLK_SWITCH_EN_SHIFT (31U)
#define USB_CORE_OTGREFCLK_OTG_STB_CLK_SWITCH_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGREFCLK_OTG_STB_CLK_SWITCH_EN_SHIFT)) & USB_CORE_OTGREFCLK_OTG_STB_CLK_SWITCH_EN_MASK)

/*! @name OTGIEN - OTG Interrupt Enable */
#define USB_CORE_OTGIEN_ID_CHANGE_INT_EN_MASK    (0x1U)
#define USB_CORE_OTGIEN_ID_CHANGE_INT_EN_SHIFT   (0U)
#define USB_CORE_OTGIEN_ID_CHANGE_INT_EN(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_ID_CHANGE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_ID_CHANGE_INT_EN_MASK)
#define USB_CORE_OTGIEN_VBUS_ON_FAILED_INT_EN_MASK (0x2U)
#define USB_CORE_OTGIEN_VBUS_ON_FAILED_INT_EN_SHIFT (1U)
#define USB_CORE_OTGIEN_VBUS_ON_FAILED_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_VBUS_ON_FAILED_INT_EN_SHIFT)) & USB_CORE_OTGIEN_VBUS_ON_FAILED_INT_EN_MASK)
#define USB_CORE_OTGIEN_OTGSESSVALID_RISE_INT_EN_MASK (0x4U)
#define USB_CORE_OTGIEN_OTGSESSVALID_RISE_INT_EN_SHIFT (2U)
#define USB_CORE_OTGIEN_OTGSESSVALID_RISE_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_OTGSESSVALID_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_OTGSESSVALID_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_OTGSESSVALID_FALL_INT_EN_MASK (0x8U)
#define USB_CORE_OTGIEN_OTGSESSVALID_FALL_INT_EN_SHIFT (3U)
#define USB_CORE_OTGIEN_OTGSESSVALID_FALL_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_OTGSESSVALID_FALL_INT_EN_SHIFT)) & USB_CORE_OTGIEN_OTGSESSVALID_FALL_INT_EN_MASK)
#define USB_CORE_OTGIEN_VBUSVALID_RISE_INT_EN_MASK (0x10U)
#define USB_CORE_OTGIEN_VBUSVALID_RISE_INT_EN_SHIFT (4U)
#define USB_CORE_OTGIEN_VBUSVALID_RISE_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_VBUSVALID_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_VBUSVALID_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_VBUSVALID_FALL_INT_EN_MASK (0x20U)
#define USB_CORE_OTGIEN_VBUSVALID_FALL_INT_EN_SHIFT (5U)
#define USB_CORE_OTGIEN_VBUSVALID_FALL_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_VBUSVALID_FALL_INT_EN_SHIFT)) & USB_CORE_OTGIEN_VBUSVALID_FALL_INT_EN_MASK)
#define USB_CORE_OTGIEN_SENSE_RISE_INT_EN_MASK   (0x40U)
#define USB_CORE_OTGIEN_SENSE_RISE_INT_EN_SHIFT  (6U)
#define USB_CORE_OTGIEN_SENSE_RISE_INT_EN(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_SENSE_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_SENSE_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_PROBE_RISE_INT_EN_MASK   (0x80U)
#define USB_CORE_OTGIEN_PROBE_RISE_INT_EN_SHIFT  (7U)
#define USB_CORE_OTGIEN_PROBE_RISE_INT_EN(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_PROBE_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_PROBE_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_ADP_PROBE_COMPLETED_INT_EN_MASK (0x100U)
#define USB_CORE_OTGIEN_ADP_PROBE_COMPLETED_INT_EN_SHIFT (8U)
#define USB_CORE_OTGIEN_ADP_PROBE_COMPLETED_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_ADP_PROBE_COMPLETED_INT_EN_SHIFT)) & USB_CORE_OTGIEN_ADP_PROBE_COMPLETED_INT_EN_MASK)
#define USB_CORE_OTGIEN_TA_AIDL_BDIS_TMOUT_INT_EN_MASK (0x200U)
#define USB_CORE_OTGIEN_TA_AIDL_BDIS_TMOUT_INT_EN_SHIFT (9U)
#define USB_CORE_OTGIEN_TA_AIDL_BDIS_TMOUT_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_TA_AIDL_BDIS_TMOUT_INT_EN_SHIFT)) & USB_CORE_OTGIEN_TA_AIDL_BDIS_TMOUT_INT_EN_MASK)
#define USB_CORE_OTGIEN_TA_BIDL_ADIS_TMOUT_INT_EN_MASK (0x400U)
#define USB_CORE_OTGIEN_TA_BIDL_ADIS_TMOUT_INT_EN_SHIFT (10U)
#define USB_CORE_OTGIEN_TA_BIDL_ADIS_TMOUT_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_TA_BIDL_ADIS_TMOUT_INT_EN_SHIFT)) & USB_CORE_OTGIEN_TA_BIDL_ADIS_TMOUT_INT_EN_MASK)
#define USB_CORE_OTGIEN_SRP_DET_INT_EN_MASK      (0x800U)
#define USB_CORE_OTGIEN_SRP_DET_INT_EN_SHIFT     (11U)
#define USB_CORE_OTGIEN_SRP_DET_INT_EN(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_SRP_DET_INT_EN_SHIFT)) & USB_CORE_OTGIEN_SRP_DET_INT_EN_MASK)
#define USB_CORE_OTGIEN_SRP_NOT_COMP_DEV_REMOVED_INT_EN_MASK (0x1000U)
#define USB_CORE_OTGIEN_SRP_NOT_COMP_DEV_REMOVED_INT_EN_SHIFT (12U)
#define USB_CORE_OTGIEN_SRP_NOT_COMP_DEV_REMOVED_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_SRP_NOT_COMP_DEV_REMOVED_INT_EN_SHIFT)) & USB_CORE_OTGIEN_SRP_NOT_COMP_DEV_REMOVED_INT_EN_MASK)
#define USB_CORE_OTGIEN_OVERCURRENT_INT_EN_MASK  (0x2000U)
#define USB_CORE_OTGIEN_OVERCURRENT_INT_EN_SHIFT (13U)
#define USB_CORE_OTGIEN_OVERCURRENT_INT_EN(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_OVERCURRENT_INT_EN_SHIFT)) & USB_CORE_OTGIEN_OVERCURRENT_INT_EN_MASK)
#define USB_CORE_OTGIEN_SRP_FAIL_INT_EN_MASK     (0x4000U)
#define USB_CORE_OTGIEN_SRP_FAIL_INT_EN_SHIFT    (14U)
#define USB_CORE_OTGIEN_SRP_FAIL_INT_EN(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_SRP_FAIL_INT_EN_SHIFT)) & USB_CORE_OTGIEN_SRP_FAIL_INT_EN_MASK)
#define USB_CORE_OTGIEN_SRP_CMPL_INT_EN_MASK     (0x8000U)
#define USB_CORE_OTGIEN_SRP_CMPL_INT_EN_SHIFT    (15U)
#define USB_CORE_OTGIEN_SRP_CMPL_INT_EN(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_SRP_CMPL_INT_EN_SHIFT)) & USB_CORE_OTGIEN_SRP_CMPL_INT_EN_MASK)
#define USB_CORE_OTGIEN_TB_ASE0_BRST_TMOUT_INT_EN_MASK (0x10000U)
#define USB_CORE_OTGIEN_TB_ASE0_BRST_TMOUT_INT_EN_SHIFT (16U)
#define USB_CORE_OTGIEN_TB_ASE0_BRST_TMOUT_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_TB_ASE0_BRST_TMOUT_INT_EN_SHIFT)) & USB_CORE_OTGIEN_TB_ASE0_BRST_TMOUT_INT_EN_MASK)
#define USB_CORE_OTGIEN_TB_AIDL_BDIS_MIN_TMOUT_INT_EN_MASK (0x20000U)
#define USB_CORE_OTGIEN_TB_AIDL_BDIS_MIN_TMOUT_INT_EN_SHIFT (17U)
#define USB_CORE_OTGIEN_TB_AIDL_BDIS_MIN_TMOUT_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_TB_AIDL_BDIS_MIN_TMOUT_INT_EN_SHIFT)) & USB_CORE_OTGIEN_TB_AIDL_BDIS_MIN_TMOUT_INT_EN_MASK)
#define USB_CORE_OTGIEN_TIMER_TMOUT_INT_EN_MASK  (0x40000U)
#define USB_CORE_OTGIEN_TIMER_TMOUT_INT_EN_SHIFT (18U)
#define USB_CORE_OTGIEN_TIMER_TMOUT_INT_EN(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_TIMER_TMOUT_INT_EN_SHIFT)) & USB_CORE_OTGIEN_TIMER_TMOUT_INT_EN_MASK)
#define USB_CORE_OTGIEN_H_POLL_ENTRY_INT_EN_MASK (0x80000U)
#define USB_CORE_OTGIEN_H_POLL_ENTRY_INT_EN_SHIFT (19U)
#define USB_CORE_OTGIEN_H_POLL_ENTRY_INT_EN(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_H_POLL_ENTRY_INT_EN_SHIFT)) & USB_CORE_OTGIEN_H_POLL_ENTRY_INT_EN_MASK)
#define USB_CORE_OTGIEN_H_WRST_GEN_CMPL_INT_EN_MASK (0x100000U)
#define USB_CORE_OTGIEN_H_WRST_GEN_CMPL_INT_EN_SHIFT (20U)
#define USB_CORE_OTGIEN_H_WRST_GEN_CMPL_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_H_WRST_GEN_CMPL_INT_EN_SHIFT)) & USB_CORE_OTGIEN_H_WRST_GEN_CMPL_INT_EN_MASK)
#define USB_CORE_OTGIEN_RID_FLOAT_FALL_INT_EN_MASK (0x200000U)
#define USB_CORE_OTGIEN_RID_FLOAT_FALL_INT_EN_SHIFT (21U)
#define USB_CORE_OTGIEN_RID_FLOAT_FALL_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_RID_FLOAT_FALL_INT_EN_SHIFT)) & USB_CORE_OTGIEN_RID_FLOAT_FALL_INT_EN_MASK)
#define USB_CORE_OTGIEN_RID_FLOAT_RISE_INT_EN_MASK (0x400000U)
#define USB_CORE_OTGIEN_RID_FLOAT_RISE_INT_EN_SHIFT (22U)
#define USB_CORE_OTGIEN_RID_FLOAT_RISE_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_RID_FLOAT_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_RID_FLOAT_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_RID_GND_RISE_INT_EN_MASK (0x800000U)
#define USB_CORE_OTGIEN_RID_GND_RISE_INT_EN_SHIFT (23U)
#define USB_CORE_OTGIEN_RID_GND_RISE_INT_EN(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_RID_GND_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_RID_GND_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_RID_C_RISE_INT_EN_MASK   (0x1000000U)
#define USB_CORE_OTGIEN_RID_C_RISE_INT_EN_SHIFT  (24U)
#define USB_CORE_OTGIEN_RID_C_RISE_INT_EN(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_RID_C_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_RID_C_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_RID_B_RISE_INT_EN_MASK   (0x2000000U)
#define USB_CORE_OTGIEN_RID_B_RISE_INT_EN_SHIFT  (25U)
#define USB_CORE_OTGIEN_RID_B_RISE_INT_EN(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_RID_B_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_RID_B_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_RID_A_RISE_INT_EN_MASK   (0x4000000U)
#define USB_CORE_OTGIEN_RID_A_RISE_INT_EN_SHIFT  (26U)
#define USB_CORE_OTGIEN_RID_A_RISE_INT_EN(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_RID_A_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_RID_A_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_DM_VDAT_REF_RISE_INT_EN_MASK (0x8000000U)
#define USB_CORE_OTGIEN_DM_VDAT_REF_RISE_INT_EN_SHIFT (27U)
#define USB_CORE_OTGIEN_DM_VDAT_REF_RISE_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_DM_VDAT_REF_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_DM_VDAT_REF_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_DP_VDAT_REF_RISE_INT_EN_MASK (0x10000000U)
#define USB_CORE_OTGIEN_DP_VDAT_REF_RISE_INT_EN_SHIFT (28U)
#define USB_CORE_OTGIEN_DP_VDAT_REF_RISE_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_DP_VDAT_REF_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_DP_VDAT_REF_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_DCD_COMP_RISE_INT_EN_MASK (0x20000000U)
#define USB_CORE_OTGIEN_DCD_COMP_RISE_INT_EN_SHIFT (29U)
#define USB_CORE_OTGIEN_DCD_COMP_RISE_INT_EN(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_DCD_COMP_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_DCD_COMP_RISE_INT_EN_MASK)
#define USB_CORE_OTGIEN_DCD_COMP_FALL_INT_EN_MASK (0x40000000U)
#define USB_CORE_OTGIEN_DCD_COMP_FALL_INT_EN_SHIFT (30U)
#define USB_CORE_OTGIEN_DCD_COMP_FALL_INT_EN(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_DCD_COMP_FALL_INT_EN_SHIFT)) & USB_CORE_OTGIEN_DCD_COMP_FALL_INT_EN_MASK)
#define USB_CORE_OTGIEN_DM_VLGC_COMP_RISE_INT_EN_MASK (0x80000000U)
#define USB_CORE_OTGIEN_DM_VLGC_COMP_RISE_INT_EN_SHIFT (31U)
#define USB_CORE_OTGIEN_DM_VLGC_COMP_RISE_INT_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIEN_DM_VLGC_COMP_RISE_INT_EN_SHIFT)) & USB_CORE_OTGIEN_DM_VLGC_COMP_RISE_INT_EN_MASK)

/*! @name OTGIVECT - OTG Interrupt Vector */
#define USB_CORE_OTGIVECT_ID_CHANGE_INT_MASK     (0x1U)
#define USB_CORE_OTGIVECT_ID_CHANGE_INT_SHIFT    (0U)
#define USB_CORE_OTGIVECT_ID_CHANGE_INT(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_ID_CHANGE_INT_SHIFT)) & USB_CORE_OTGIVECT_ID_CHANGE_INT_MASK)
#define USB_CORE_OTGIVECT_VBUS_ON_FAILED_INT_MASK (0x2U)
#define USB_CORE_OTGIVECT_VBUS_ON_FAILED_INT_SHIFT (1U)
#define USB_CORE_OTGIVECT_VBUS_ON_FAILED_INT(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_VBUS_ON_FAILED_INT_SHIFT)) & USB_CORE_OTGIVECT_VBUS_ON_FAILED_INT_MASK)
#define USB_CORE_OTGIVECT_OTGSESSVALID_RISE_INT_MASK (0x4U)
#define USB_CORE_OTGIVECT_OTGSESSVALID_RISE_INT_SHIFT (2U)
#define USB_CORE_OTGIVECT_OTGSESSVALID_RISE_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_OTGSESSVALID_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_OTGSESSVALID_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_OTGSESSVALID_FALL_INT_MASK (0x8U)
#define USB_CORE_OTGIVECT_OTGSESSVALID_FALL_INT_SHIFT (3U)
#define USB_CORE_OTGIVECT_OTGSESSVALID_FALL_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_OTGSESSVALID_FALL_INT_SHIFT)) & USB_CORE_OTGIVECT_OTGSESSVALID_FALL_INT_MASK)
#define USB_CORE_OTGIVECT_VBUSVALID_RISE_INT_MASK (0x10U)
#define USB_CORE_OTGIVECT_VBUSVALID_RISE_INT_SHIFT (4U)
#define USB_CORE_OTGIVECT_VBUSVALID_RISE_INT(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_VBUSVALID_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_VBUSVALID_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_VBUSVALID_FALL_INT_MASK (0x20U)
#define USB_CORE_OTGIVECT_VBUSVALID_FALL_INT_SHIFT (5U)
#define USB_CORE_OTGIVECT_VBUSVALID_FALL_INT(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_VBUSVALID_FALL_INT_SHIFT)) & USB_CORE_OTGIVECT_VBUSVALID_FALL_INT_MASK)
#define USB_CORE_OTGIVECT_SENSE_RISE_INT_MASK    (0x40U)
#define USB_CORE_OTGIVECT_SENSE_RISE_INT_SHIFT   (6U)
#define USB_CORE_OTGIVECT_SENSE_RISE_INT(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_SENSE_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_SENSE_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_PROBE_RISE_INT_MASK    (0x80U)
#define USB_CORE_OTGIVECT_PROBE_RISE_INT_SHIFT   (7U)
#define USB_CORE_OTGIVECT_PROBE_RISE_INT(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_PROBE_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_PROBE_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_ADP_PROBE_COMPLETED_INT_MASK (0x100U)
#define USB_CORE_OTGIVECT_ADP_PROBE_COMPLETED_INT_SHIFT (8U)
#define USB_CORE_OTGIVECT_ADP_PROBE_COMPLETED_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_ADP_PROBE_COMPLETED_INT_SHIFT)) & USB_CORE_OTGIVECT_ADP_PROBE_COMPLETED_INT_MASK)
#define USB_CORE_OTGIVECT_TA_AIDL_BDIS_TMOUT_INT_MASK (0x200U)
#define USB_CORE_OTGIVECT_TA_AIDL_BDIS_TMOUT_INT_SHIFT (9U)
#define USB_CORE_OTGIVECT_TA_AIDL_BDIS_TMOUT_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_TA_AIDL_BDIS_TMOUT_INT_SHIFT)) & USB_CORE_OTGIVECT_TA_AIDL_BDIS_TMOUT_INT_MASK)
#define USB_CORE_OTGIVECT_TA_BIDL_ADIS_TMOUT_INT_MASK (0x400U)
#define USB_CORE_OTGIVECT_TA_BIDL_ADIS_TMOUT_INT_SHIFT (10U)
#define USB_CORE_OTGIVECT_TA_BIDL_ADIS_TMOUT_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_TA_BIDL_ADIS_TMOUT_INT_SHIFT)) & USB_CORE_OTGIVECT_TA_BIDL_ADIS_TMOUT_INT_MASK)
#define USB_CORE_OTGIVECT_SRP_DET_INT_MASK       (0x800U)
#define USB_CORE_OTGIVECT_SRP_DET_INT_SHIFT      (11U)
#define USB_CORE_OTGIVECT_SRP_DET_INT(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_SRP_DET_INT_SHIFT)) & USB_CORE_OTGIVECT_SRP_DET_INT_MASK)
#define USB_CORE_OTGIVECT_SRP_NOT_COMP_DEV_REMOVED_INT_MASK (0x1000U)
#define USB_CORE_OTGIVECT_SRP_NOT_COMP_DEV_REMOVED_INT_SHIFT (12U)
#define USB_CORE_OTGIVECT_SRP_NOT_COMP_DEV_REMOVED_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_SRP_NOT_COMP_DEV_REMOVED_INT_SHIFT)) & USB_CORE_OTGIVECT_SRP_NOT_COMP_DEV_REMOVED_INT_MASK)
#define USB_CORE_OTGIVECT_OVERCURRENT_INT_MASK   (0x2000U)
#define USB_CORE_OTGIVECT_OVERCURRENT_INT_SHIFT  (13U)
#define USB_CORE_OTGIVECT_OVERCURRENT_INT(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_OVERCURRENT_INT_SHIFT)) & USB_CORE_OTGIVECT_OVERCURRENT_INT_MASK)
#define USB_CORE_OTGIVECT_SRP_FAIL_INT_MASK      (0x4000U)
#define USB_CORE_OTGIVECT_SRP_FAIL_INT_SHIFT     (14U)
#define USB_CORE_OTGIVECT_SRP_FAIL_INT(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_SRP_FAIL_INT_SHIFT)) & USB_CORE_OTGIVECT_SRP_FAIL_INT_MASK)
#define USB_CORE_OTGIVECT_SRP_CMPL_INT_MASK      (0x8000U)
#define USB_CORE_OTGIVECT_SRP_CMPL_INT_SHIFT     (15U)
#define USB_CORE_OTGIVECT_SRP_CMPL_INT(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_SRP_CMPL_INT_SHIFT)) & USB_CORE_OTGIVECT_SRP_CMPL_INT_MASK)
#define USB_CORE_OTGIVECT_TB_ASE0_BRST_TMOUT_INT_MASK (0x10000U)
#define USB_CORE_OTGIVECT_TB_ASE0_BRST_TMOUT_INT_SHIFT (16U)
#define USB_CORE_OTGIVECT_TB_ASE0_BRST_TMOUT_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_TB_ASE0_BRST_TMOUT_INT_SHIFT)) & USB_CORE_OTGIVECT_TB_ASE0_BRST_TMOUT_INT_MASK)
#define USB_CORE_OTGIVECT_TB_AIDL_BDIS_MIN_TMOUT_INT_MASK (0x20000U)
#define USB_CORE_OTGIVECT_TB_AIDL_BDIS_MIN_TMOUT_INT_SHIFT (17U)
#define USB_CORE_OTGIVECT_TB_AIDL_BDIS_MIN_TMOUT_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_TB_AIDL_BDIS_MIN_TMOUT_INT_SHIFT)) & USB_CORE_OTGIVECT_TB_AIDL_BDIS_MIN_TMOUT_INT_MASK)
#define USB_CORE_OTGIVECT_TIMER_TMOUT_INT_MASK   (0x40000U)
#define USB_CORE_OTGIVECT_TIMER_TMOUT_INT_SHIFT  (18U)
#define USB_CORE_OTGIVECT_TIMER_TMOUT_INT(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_TIMER_TMOUT_INT_SHIFT)) & USB_CORE_OTGIVECT_TIMER_TMOUT_INT_MASK)
#define USB_CORE_OTGIVECT_H_POLLTRY_INT_MASK     (0x80000U)
#define USB_CORE_OTGIVECT_H_POLLTRY_INT_SHIFT    (19U)
#define USB_CORE_OTGIVECT_H_POLLTRY_INT(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_H_POLLTRY_INT_SHIFT)) & USB_CORE_OTGIVECT_H_POLLTRY_INT_MASK)
#define USB_CORE_OTGIVECT_H_WRST_GEN_CMPL_INT_MASK (0x100000U)
#define USB_CORE_OTGIVECT_H_WRST_GEN_CMPL_INT_SHIFT (20U)
#define USB_CORE_OTGIVECT_H_WRST_GEN_CMPL_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_H_WRST_GEN_CMPL_INT_SHIFT)) & USB_CORE_OTGIVECT_H_WRST_GEN_CMPL_INT_MASK)
#define USB_CORE_OTGIVECT_RID_FLOAT_FALL_INT_MASK (0x200000U)
#define USB_CORE_OTGIVECT_RID_FLOAT_FALL_INT_SHIFT (21U)
#define USB_CORE_OTGIVECT_RID_FLOAT_FALL_INT(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_RID_FLOAT_FALL_INT_SHIFT)) & USB_CORE_OTGIVECT_RID_FLOAT_FALL_INT_MASK)
#define USB_CORE_OTGIVECT_RID_FLOAT_RISE_INT_MASK (0x400000U)
#define USB_CORE_OTGIVECT_RID_FLOAT_RISE_INT_SHIFT (22U)
#define USB_CORE_OTGIVECT_RID_FLOAT_RISE_INT(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_RID_FLOAT_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_RID_FLOAT_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_RID_GND_RISE_INT_MASK  (0x800000U)
#define USB_CORE_OTGIVECT_RID_GND_RISE_INT_SHIFT (23U)
#define USB_CORE_OTGIVECT_RID_GND_RISE_INT(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_RID_GND_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_RID_GND_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_RID_C_RISE_INT_MASK    (0x1000000U)
#define USB_CORE_OTGIVECT_RID_C_RISE_INT_SHIFT   (24U)
#define USB_CORE_OTGIVECT_RID_C_RISE_INT(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_RID_C_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_RID_C_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_RID_B_RISE_INT_MASK    (0x2000000U)
#define USB_CORE_OTGIVECT_RID_B_RISE_INT_SHIFT   (25U)
#define USB_CORE_OTGIVECT_RID_B_RISE_INT(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_RID_B_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_RID_B_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_RID_A_RISE_INT_MASK    (0x4000000U)
#define USB_CORE_OTGIVECT_RID_A_RISE_INT_SHIFT   (26U)
#define USB_CORE_OTGIVECT_RID_A_RISE_INT(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_RID_A_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_RID_A_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_DM_VDAT_REF_RISE_INT_MASK (0x8000000U)
#define USB_CORE_OTGIVECT_DM_VDAT_REF_RISE_INT_SHIFT (27U)
#define USB_CORE_OTGIVECT_DM_VDAT_REF_RISE_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_DM_VDAT_REF_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_DM_VDAT_REF_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_DP_VDAT_REF_RISE_INT_MASK (0x10000000U)
#define USB_CORE_OTGIVECT_DP_VDAT_REF_RISE_INT_SHIFT (28U)
#define USB_CORE_OTGIVECT_DP_VDAT_REF_RISE_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_DP_VDAT_REF_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_DP_VDAT_REF_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_DCD_COMP_RISE_INT_MASK (0x20000000U)
#define USB_CORE_OTGIVECT_DCD_COMP_RISE_INT_SHIFT (29U)
#define USB_CORE_OTGIVECT_DCD_COMP_RISE_INT(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_DCD_COMP_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_DCD_COMP_RISE_INT_MASK)
#define USB_CORE_OTGIVECT_DCD_COMP_FALL_INT_MASK (0x40000000U)
#define USB_CORE_OTGIVECT_DCD_COMP_FALL_INT_SHIFT (30U)
#define USB_CORE_OTGIVECT_DCD_COMP_FALL_INT(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_DCD_COMP_FALL_INT_SHIFT)) & USB_CORE_OTGIVECT_DCD_COMP_FALL_INT_MASK)
#define USB_CORE_OTGIVECT_DM_VLGC_COMP_RISE_INT_MASK (0x80000000U)
#define USB_CORE_OTGIVECT_DM_VLGC_COMP_RISE_INT_SHIFT (31U)
#define USB_CORE_OTGIVECT_DM_VLGC_COMP_RISE_INT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGIVECT_DM_VLGC_COMP_RISE_INT_SHIFT)) & USB_CORE_OTGIVECT_DM_VLGC_COMP_RISE_INT_MASK)

/*! @name CLK_FREQ - Clock Frequency */
#define USB_CORE_CLK_FREQ_CLK_FREQ_MHZ_MASK      (0xFFFFU)
#define USB_CORE_CLK_FREQ_CLK_FREQ_MHZ_SHIFT     (0U)
#define USB_CORE_CLK_FREQ_CLK_FREQ_MHZ(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_CLK_FREQ_CLK_FREQ_MHZ_SHIFT)) & USB_CORE_CLK_FREQ_CLK_FREQ_MHZ_MASK)
#define USB_CORE_CLK_FREQ_CLK_FREQ_KHZ_MASK      (0xFFFF0000U)
#define USB_CORE_CLK_FREQ_CLK_FREQ_KHZ_SHIFT     (16U)
#define USB_CORE_CLK_FREQ_CLK_FREQ_KHZ(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_CLK_FREQ_CLK_FREQ_KHZ_SHIFT)) & USB_CORE_CLK_FREQ_CLK_FREQ_KHZ_MASK)

/*! @name OTGTMR - OTG Timer */
#define USB_CORE_OTGTMR_TIMEOUT_VALUE_MASK       (0xFFFFU)
#define USB_CORE_OTGTMR_TIMEOUT_VALUE_SHIFT      (0U)
#define USB_CORE_OTGTMR_TIMEOUT_VALUE(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGTMR_TIMEOUT_VALUE_SHIFT)) & USB_CORE_OTGTMR_TIMEOUT_VALUE_MASK)
#define USB_CORE_OTGTMR_TIMEOUT_UNITS_MASK       (0x30000U)
#define USB_CORE_OTGTMR_TIMEOUT_UNITS_SHIFT      (16U)
#define USB_CORE_OTGTMR_TIMEOUT_UNITS(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGTMR_TIMEOUT_UNITS_SHIFT)) & USB_CORE_OTGTMR_TIMEOUT_UNITS_MASK)
#define USB_CORE_OTGTMR_TIMER_WRITE_MASK         (0x40000U)
#define USB_CORE_OTGTMR_TIMER_WRITE_SHIFT        (18U)
#define USB_CORE_OTGTMR_TIMER_WRITE(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGTMR_TIMER_WRITE_SHIFT)) & USB_CORE_OTGTMR_TIMER_WRITE_MASK)
#define USB_CORE_OTGTMR_TIMER_START_MASK         (0x80000U)
#define USB_CORE_OTGTMR_TIMER_START_SHIFT        (19U)
#define USB_CORE_OTGTMR_TIMER_START(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGTMR_TIMER_START_SHIFT)) & USB_CORE_OTGTMR_TIMER_START_MASK)
#define USB_CORE_OTGTMR_TIMER_STOP_MASK          (0x100000U)
#define USB_CORE_OTGTMR_TIMER_STOP_SHIFT         (20U)
#define USB_CORE_OTGTMR_TIMER_STOP(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGTMR_TIMER_STOP_SHIFT)) & USB_CORE_OTGTMR_TIMER_STOP_MASK)

/*! @name OTGVERSION - OTG Version */
#define USB_CORE_OTGVERSION_OTGVERSION_MASK      (0xFFFFU)
#define USB_CORE_OTGVERSION_OTGVERSION_SHIFT     (0U)
#define USB_CORE_OTGVERSION_OTGVERSION(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGVERSION_OTGVERSION_SHIFT)) & USB_CORE_OTGVERSION_OTGVERSION_MASK)

/*! @name OTGCAPABILITY - OTG Capability */
#define USB_CORE_OTGCAPABILITY_SRP_SUPPORT_MASK  (0x1U)
#define USB_CORE_OTGCAPABILITY_SRP_SUPPORT_SHIFT (0U)
#define USB_CORE_OTGCAPABILITY_SRP_SUPPORT(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCAPABILITY_SRP_SUPPORT_SHIFT)) & USB_CORE_OTGCAPABILITY_SRP_SUPPORT_MASK)
#define USB_CORE_OTGCAPABILITY_HNP_SUPPORT_MASK  (0x2U)
#define USB_CORE_OTGCAPABILITY_HNP_SUPPORT_SHIFT (1U)
#define USB_CORE_OTGCAPABILITY_HNP_SUPPORT(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCAPABILITY_HNP_SUPPORT_SHIFT)) & USB_CORE_OTGCAPABILITY_HNP_SUPPORT_MASK)
#define USB_CORE_OTGCAPABILITY_ADP_SUPPORT_MASK  (0x4U)
#define USB_CORE_OTGCAPABILITY_ADP_SUPPORT_SHIFT (2U)
#define USB_CORE_OTGCAPABILITY_ADP_SUPPORT(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCAPABILITY_ADP_SUPPORT_SHIFT)) & USB_CORE_OTGCAPABILITY_ADP_SUPPORT_MASK)
#define USB_CORE_OTGCAPABILITY_BC_SUPPORT_MASK   (0x8U)
#define USB_CORE_OTGCAPABILITY_BC_SUPPORT_SHIFT  (3U)
#define USB_CORE_OTGCAPABILITY_BC_SUPPORT(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCAPABILITY_BC_SUPPORT_SHIFT)) & USB_CORE_OTGCAPABILITY_BC_SUPPORT_MASK)
#define USB_CORE_OTGCAPABILITY_RSP_SUPPORT_MASK  (0x10U)
#define USB_CORE_OTGCAPABILITY_RSP_SUPPORT_SHIFT (4U)
#define USB_CORE_OTGCAPABILITY_RSP_SUPPORT(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCAPABILITY_RSP_SUPPORT_SHIFT)) & USB_CORE_OTGCAPABILITY_RSP_SUPPORT_MASK)
#define USB_CORE_OTGCAPABILITY_OTG2REVISION_MASK (0xFFF00U)
#define USB_CORE_OTGCAPABILITY_OTG2REVISION_SHIFT (8U)
#define USB_CORE_OTGCAPABILITY_OTG2REVISION(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCAPABILITY_OTG2REVISION_SHIFT)) & USB_CORE_OTGCAPABILITY_OTG2REVISION_MASK)
#define USB_CORE_OTGCAPABILITY_OTG3REVISION_MASK (0xFFF00000U)
#define USB_CORE_OTGCAPABILITY_OTG3REVISION_SHIFT (20U)
#define USB_CORE_OTGCAPABILITY_OTG3REVISION(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCAPABILITY_OTG3REVISION_SHIFT)) & USB_CORE_OTGCAPABILITY_OTG3REVISION_MASK)

/*! @name OTGSIMULATE - OTG Simulate */
#define USB_CORE_OTGSIMULATE_OTG_CFG_FAST_SIMS_MASK (0x1U)
#define USB_CORE_OTGSIMULATE_OTG_CFG_FAST_SIMS_SHIFT (0U)
#define USB_CORE_OTGSIMULATE_OTG_CFG_FAST_SIMS(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGSIMULATE_OTG_CFG_FAST_SIMS_SHIFT)) & USB_CORE_OTGSIMULATE_OTG_CFG_FAST_SIMS_MASK)

/*! @name OTGANASTS - OTG Attach Detection Protocol BC Status */
#define USB_CORE_OTGANASTS_dp_vdat_ref_comp_sts_MASK (0x1U)
#define USB_CORE_OTGANASTS_dp_vdat_ref_comp_sts_SHIFT (0U)
#define USB_CORE_OTGANASTS_dp_vdat_ref_comp_sts(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_dp_vdat_ref_comp_sts_SHIFT)) & USB_CORE_OTGANASTS_dp_vdat_ref_comp_sts_MASK)
#define USB_CORE_OTGANASTS_dm_vdat_ref_comp_sts_MASK (0x2U)
#define USB_CORE_OTGANASTS_dm_vdat_ref_comp_sts_SHIFT (1U)
#define USB_CORE_OTGANASTS_dm_vdat_ref_comp_sts(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_dm_vdat_ref_comp_sts_SHIFT)) & USB_CORE_OTGANASTS_dm_vdat_ref_comp_sts_MASK)
#define USB_CORE_OTGANASTS_dm_vlgc_comp_sts_MASK (0x4U)
#define USB_CORE_OTGANASTS_dm_vlgc_comp_sts_SHIFT (2U)
#define USB_CORE_OTGANASTS_dm_vlgc_comp_sts(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_dm_vlgc_comp_sts_SHIFT)) & USB_CORE_OTGANASTS_dm_vlgc_comp_sts_MASK)
#define USB_CORE_OTGANASTS_dcd_comp_sts_MASK     (0x8U)
#define USB_CORE_OTGANASTS_dcd_comp_sts_SHIFT    (3U)
#define USB_CORE_OTGANASTS_dcd_comp_sts(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_dcd_comp_sts_SHIFT)) & USB_CORE_OTGANASTS_dcd_comp_sts_MASK)
#define USB_CORE_OTGANASTS_otgsessvalid_MASK     (0x10U)
#define USB_CORE_OTGANASTS_otgsessvalid_SHIFT    (4U)
#define USB_CORE_OTGANASTS_otgsessvalid(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_otgsessvalid_SHIFT)) & USB_CORE_OTGANASTS_otgsessvalid_MASK)
#define USB_CORE_OTGANASTS_adp_probe_ana_MASK    (0x20U)
#define USB_CORE_OTGANASTS_adp_probe_ana_SHIFT   (5U)
#define USB_CORE_OTGANASTS_adp_probe_ana(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_adp_probe_ana_SHIFT)) & USB_CORE_OTGANASTS_adp_probe_ana_MASK)
#define USB_CORE_OTGANASTS_adp_sense_ana_MASK    (0x40U)
#define USB_CORE_OTGANASTS_adp_sense_ana_SHIFT   (6U)
#define USB_CORE_OTGANASTS_adp_sense_ana(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_adp_sense_ana_SHIFT)) & USB_CORE_OTGANASTS_adp_sense_ana_MASK)
#define USB_CORE_OTGANASTS_sessend_MASK          (0x80U)
#define USB_CORE_OTGANASTS_sessend_SHIFT         (7U)
#define USB_CORE_OTGANASTS_sessend(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_sessend_SHIFT)) & USB_CORE_OTGANASTS_sessend_MASK)
#define USB_CORE_OTGANASTS_rid_float_comp_sts_MASK (0x100U)
#define USB_CORE_OTGANASTS_rid_float_comp_sts_SHIFT (8U)
#define USB_CORE_OTGANASTS_rid_float_comp_sts(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_rid_float_comp_sts_SHIFT)) & USB_CORE_OTGANASTS_rid_float_comp_sts_MASK)
#define USB_CORE_OTGANASTS_rid_gnd_comp_sts_MASK (0x200U)
#define USB_CORE_OTGANASTS_rid_gnd_comp_sts_SHIFT (9U)
#define USB_CORE_OTGANASTS_rid_gnd_comp_sts(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_rid_gnd_comp_sts_SHIFT)) & USB_CORE_OTGANASTS_rid_gnd_comp_sts_MASK)
#define USB_CORE_OTGANASTS_rid_c_comp_sts_MASK   (0x400U)
#define USB_CORE_OTGANASTS_rid_c_comp_sts_SHIFT  (10U)
#define USB_CORE_OTGANASTS_rid_c_comp_sts(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_rid_c_comp_sts_SHIFT)) & USB_CORE_OTGANASTS_rid_c_comp_sts_MASK)
#define USB_CORE_OTGANASTS_rid_b_comp_sts_MASK   (0x800U)
#define USB_CORE_OTGANASTS_rid_b_comp_sts_SHIFT  (11U)
#define USB_CORE_OTGANASTS_rid_b_comp_sts(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_rid_b_comp_sts_SHIFT)) & USB_CORE_OTGANASTS_rid_b_comp_sts_MASK)
#define USB_CORE_OTGANASTS_rid_a_comp_sts_MASK   (0x1000U)
#define USB_CORE_OTGANASTS_rid_a_comp_sts_SHIFT  (12U)
#define USB_CORE_OTGANASTS_rid_a_comp_sts(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_rid_a_comp_sts_SHIFT)) & USB_CORE_OTGANASTS_rid_a_comp_sts_MASK)
#define USB_CORE_OTGANASTS_iddig_MASK            (0x2000U)
#define USB_CORE_OTGANASTS_iddig_SHIFT           (13U)
#define USB_CORE_OTGANASTS_iddig(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_iddig_SHIFT)) & USB_CORE_OTGANASTS_iddig_MASK)
#define USB_CORE_OTGANASTS_linestate_MASK        (0xC000U)
#define USB_CORE_OTGANASTS_linestate_SHIFT       (14U)
#define USB_CORE_OTGANASTS_linestate(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_linestate_SHIFT)) & USB_CORE_OTGANASTS_linestate_MASK)
#define USB_CORE_OTGANASTS_rid_float_MASK        (0x10000U)
#define USB_CORE_OTGANASTS_rid_float_SHIFT       (16U)
#define USB_CORE_OTGANASTS_rid_float(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_rid_float_SHIFT)) & USB_CORE_OTGANASTS_rid_float_MASK)
#define USB_CORE_OTGANASTS_rid_gnd_MASK          (0x20000U)
#define USB_CORE_OTGANASTS_rid_gnd_SHIFT         (17U)
#define USB_CORE_OTGANASTS_rid_gnd(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_rid_gnd_SHIFT)) & USB_CORE_OTGANASTS_rid_gnd_MASK)
#define USB_CORE_OTGANASTS_rid_c_MASK            (0x40000U)
#define USB_CORE_OTGANASTS_rid_c_SHIFT           (18U)
#define USB_CORE_OTGANASTS_rid_c(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_rid_c_SHIFT)) & USB_CORE_OTGANASTS_rid_c_MASK)
#define USB_CORE_OTGANASTS_rid_b_MASK            (0x80000U)
#define USB_CORE_OTGANASTS_rid_b_SHIFT           (19U)
#define USB_CORE_OTGANASTS_rid_b(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_rid_b_SHIFT)) & USB_CORE_OTGANASTS_rid_b_MASK)
#define USB_CORE_OTGANASTS_rid_a_MASK            (0x100000U)
#define USB_CORE_OTGANASTS_rid_a_SHIFT           (20U)
#define USB_CORE_OTGANASTS_rid_a(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_rid_a_SHIFT)) & USB_CORE_OTGANASTS_rid_a_MASK)
#define USB_CORE_OTGANASTS_adp_chrg_tmout_det_MASK (0x1000000U)
#define USB_CORE_OTGANASTS_adp_chrg_tmout_det_SHIFT (24U)
#define USB_CORE_OTGANASTS_adp_chrg_tmout_det(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGANASTS_adp_chrg_tmout_det_SHIFT)) & USB_CORE_OTGANASTS_adp_chrg_tmout_det_MASK)

/*! @name ADP_RAMP_TIME - Attach Detection Protocol Ramp Time */
#define USB_CORE_ADP_RAMP_TIME_ADP_RAMP_TIME_MASK (0xFFFFFFFFU)
#define USB_CORE_ADP_RAMP_TIME_ADP_RAMP_TIME_SHIFT (0U)
#define USB_CORE_ADP_RAMP_TIME_ADP_RAMP_TIME(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_ADP_RAMP_TIME_ADP_RAMP_TIME_SHIFT)) & USB_CORE_ADP_RAMP_TIME_ADP_RAMP_TIME_MASK)

/*! @name OTGCTRL1 - OTG Control */
#define USB_CORE_OTGCTRL1_adp_en_MASK            (0x1U)
#define USB_CORE_OTGCTRL1_adp_en_SHIFT           (0U)
#define USB_CORE_OTGCTRL1_adp_en(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_adp_en_SHIFT)) & USB_CORE_OTGCTRL1_adp_en_MASK)
#define USB_CORE_OTGCTRL1_adp_probe_en_MASK      (0x2U)
#define USB_CORE_OTGCTRL1_adp_probe_en_SHIFT     (1U)
#define USB_CORE_OTGCTRL1_adp_probe_en(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_adp_probe_en_SHIFT)) & USB_CORE_OTGCTRL1_adp_probe_en_MASK)
#define USB_CORE_OTGCTRL1_adp_sense_en_MASK      (0x4U)
#define USB_CORE_OTGCTRL1_adp_sense_en_SHIFT     (2U)
#define USB_CORE_OTGCTRL1_adp_sense_en(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_adp_sense_en_SHIFT)) & USB_CORE_OTGCTRL1_adp_sense_en_MASK)
#define USB_CORE_OTGCTRL1_adp_sink_current_en_MASK (0x8U)
#define USB_CORE_OTGCTRL1_adp_sink_current_en_SHIFT (3U)
#define USB_CORE_OTGCTRL1_adp_sink_current_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_adp_sink_current_en_SHIFT)) & USB_CORE_OTGCTRL1_adp_sink_current_en_MASK)
#define USB_CORE_OTGCTRL1_adp_source_current_en_MASK (0x10U)
#define USB_CORE_OTGCTRL1_adp_source_current_en_SHIFT (4U)
#define USB_CORE_OTGCTRL1_adp_source_current_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_adp_source_current_en_SHIFT)) & USB_CORE_OTGCTRL1_adp_source_current_en_MASK)
#define USB_CORE_OTGCTRL1_do_adp_prb_MASK        (0x20U)
#define USB_CORE_OTGCTRL1_do_adp_prb_SHIFT       (5U)
#define USB_CORE_OTGCTRL1_do_adp_prb(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_do_adp_prb_SHIFT)) & USB_CORE_OTGCTRL1_do_adp_prb_MASK)
#define USB_CORE_OTGCTRL1_do_adp_sns_MASK        (0x40U)
#define USB_CORE_OTGCTRL1_do_adp_sns_SHIFT       (6U)
#define USB_CORE_OTGCTRL1_do_adp_sns(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_do_adp_sns_SHIFT)) & USB_CORE_OTGCTRL1_do_adp_sns_MASK)
#define USB_CORE_OTGCTRL1_adp_auto_MASK          (0x80U)
#define USB_CORE_OTGCTRL1_adp_auto_SHIFT         (7U)
#define USB_CORE_OTGCTRL1_adp_auto(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_adp_auto_SHIFT)) & USB_CORE_OTGCTRL1_adp_auto_MASK)
#define USB_CORE_OTGCTRL1_bc_en_MASK             (0x100U)
#define USB_CORE_OTGCTRL1_bc_en_SHIFT            (8U)
#define USB_CORE_OTGCTRL1_bc_en(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_bc_en_SHIFT)) & USB_CORE_OTGCTRL1_bc_en_MASK)
#define USB_CORE_OTGCTRL1_idm_sink_en_MASK       (0x200U)
#define USB_CORE_OTGCTRL1_idm_sink_en_SHIFT      (9U)
#define USB_CORE_OTGCTRL1_idm_sink_en(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_idm_sink_en_SHIFT)) & USB_CORE_OTGCTRL1_idm_sink_en_MASK)
#define USB_CORE_OTGCTRL1_idp_sink_en_MASK       (0x400U)
#define USB_CORE_OTGCTRL1_idp_sink_en_SHIFT      (10U)
#define USB_CORE_OTGCTRL1_idp_sink_en(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_idp_sink_en_SHIFT)) & USB_CORE_OTGCTRL1_idp_sink_en_MASK)
#define USB_CORE_OTGCTRL1_idp_src_en_MASK        (0x800U)
#define USB_CORE_OTGCTRL1_idp_src_en_SHIFT       (11U)
#define USB_CORE_OTGCTRL1_idp_src_en(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_idp_src_en_SHIFT)) & USB_CORE_OTGCTRL1_idp_src_en_MASK)
#define USB_CORE_OTGCTRL1_vdm_src_en_MASK        (0x1000U)
#define USB_CORE_OTGCTRL1_vdm_src_en_SHIFT       (12U)
#define USB_CORE_OTGCTRL1_vdm_src_en(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_vdm_src_en_SHIFT)) & USB_CORE_OTGCTRL1_vdm_src_en_MASK)
#define USB_CORE_OTGCTRL1_vdp_src_en_MASK        (0x2000U)
#define USB_CORE_OTGCTRL1_vdp_src_en_SHIFT       (13U)
#define USB_CORE_OTGCTRL1_vdp_src_en(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_vdp_src_en_SHIFT)) & USB_CORE_OTGCTRL1_vdp_src_en_MASK)
#define USB_CORE_OTGCTRL1_dm_vdat_ref_comp_en_MASK (0x10000U)
#define USB_CORE_OTGCTRL1_dm_vdat_ref_comp_en_SHIFT (16U)
#define USB_CORE_OTGCTRL1_dm_vdat_ref_comp_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_dm_vdat_ref_comp_en_SHIFT)) & USB_CORE_OTGCTRL1_dm_vdat_ref_comp_en_MASK)
#define USB_CORE_OTGCTRL1_dm_vlgc_comp_en_MASK   (0x20000U)
#define USB_CORE_OTGCTRL1_dm_vlgc_comp_en_SHIFT  (17U)
#define USB_CORE_OTGCTRL1_dm_vlgc_comp_en(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_dm_vlgc_comp_en_SHIFT)) & USB_CORE_OTGCTRL1_dm_vlgc_comp_en_MASK)
#define USB_CORE_OTGCTRL1_dp_vdat_ref_comp_en_MASK (0x40000U)
#define USB_CORE_OTGCTRL1_dp_vdat_ref_comp_en_SHIFT (18U)
#define USB_CORE_OTGCTRL1_dp_vdat_ref_comp_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_dp_vdat_ref_comp_en_SHIFT)) & USB_CORE_OTGCTRL1_dp_vdat_ref_comp_en_MASK)
#define USB_CORE_OTGCTRL1_rid_float_comp_en_MASK (0x80000U)
#define USB_CORE_OTGCTRL1_rid_float_comp_en_SHIFT (19U)
#define USB_CORE_OTGCTRL1_rid_float_comp_en(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_rid_float_comp_en_SHIFT)) & USB_CORE_OTGCTRL1_rid_float_comp_en_MASK)
#define USB_CORE_OTGCTRL1_rid_nonfloat_comp_en_MASK (0x100000U)
#define USB_CORE_OTGCTRL1_rid_nonfloat_comp_en_SHIFT (20U)
#define USB_CORE_OTGCTRL1_rid_nonfloat_comp_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_rid_nonfloat_comp_en_SHIFT)) & USB_CORE_OTGCTRL1_rid_nonfloat_comp_en_MASK)
#define USB_CORE_OTGCTRL1_bc_dmpulldown_MASK     (0x200000U)
#define USB_CORE_OTGCTRL1_bc_dmpulldown_SHIFT    (21U)
#define USB_CORE_OTGCTRL1_bc_dmpulldown(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_bc_dmpulldown_SHIFT)) & USB_CORE_OTGCTRL1_bc_dmpulldown_MASK)
#define USB_CORE_OTGCTRL1_bc_dppulldown_MASK     (0x400000U)
#define USB_CORE_OTGCTRL1_bc_dppulldown_SHIFT    (22U)
#define USB_CORE_OTGCTRL1_bc_dppulldown(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_bc_dppulldown_SHIFT)) & USB_CORE_OTGCTRL1_bc_dppulldown_MASK)
#define USB_CORE_OTGCTRL1_bc_pulldownctrl_MASK   (0x800000U)
#define USB_CORE_OTGCTRL1_bc_pulldownctrl_SHIFT  (23U)
#define USB_CORE_OTGCTRL1_bc_pulldownctrl(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_bc_pulldownctrl_SHIFT)) & USB_CORE_OTGCTRL1_bc_pulldownctrl_MASK)
#define USB_CORE_OTGCTRL1_idpullup_MASK          (0x1000000U)
#define USB_CORE_OTGCTRL1_idpullup_SHIFT         (24U)
#define USB_CORE_OTGCTRL1_idpullup(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_idpullup_SHIFT)) & USB_CORE_OTGCTRL1_idpullup_MASK)
#define USB_CORE_OTGCTRL1_drive_vbus_sel_MASK    (0x2000000U)
#define USB_CORE_OTGCTRL1_drive_vbus_sel_SHIFT   (25U)
#define USB_CORE_OTGCTRL1_drive_vbus_sel(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_drive_vbus_sel_SHIFT)) & USB_CORE_OTGCTRL1_drive_vbus_sel_MASK)
#define USB_CORE_OTGCTRL1_drive_vbus_sfr_MASK    (0x4000000U)
#define USB_CORE_OTGCTRL1_drive_vbus_sfr_SHIFT   (26U)
#define USB_CORE_OTGCTRL1_drive_vbus_sfr(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_drive_vbus_sfr_SHIFT)) & USB_CORE_OTGCTRL1_drive_vbus_sfr_MASK)
#define USB_CORE_OTGCTRL1_force_opmode01_MASK    (0x8000000U)
#define USB_CORE_OTGCTRL1_force_opmode01_SHIFT   (27U)
#define USB_CORE_OTGCTRL1_force_opmode01(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL1_force_opmode01_SHIFT)) & USB_CORE_OTGCTRL1_force_opmode01_MASK)

/*! @name OTGCTRL2 - OTG Control */
#define USB_CORE_OTGCTRL2_TA_ADP_PRB_MASK        (0xFFU)
#define USB_CORE_OTGCTRL2_TA_ADP_PRB_SHIFT       (0U)
#define USB_CORE_OTGCTRL2_TA_ADP_PRB(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL2_TA_ADP_PRB_SHIFT)) & USB_CORE_OTGCTRL2_TA_ADP_PRB_MASK)
#define USB_CORE_OTGCTRL2_TB_ADP_PRB_MASK        (0xFF00U)
#define USB_CORE_OTGCTRL2_TB_ADP_PRB_SHIFT       (8U)
#define USB_CORE_OTGCTRL2_TB_ADP_PRB(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL2_TB_ADP_PRB_SHIFT)) & USB_CORE_OTGCTRL2_TB_ADP_PRB_MASK)
#define USB_CORE_OTGCTRL2_ADP_CHRG_TMOUT_MASK    (0xFF0000U)
#define USB_CORE_OTGCTRL2_ADP_CHRG_TMOUT_SHIFT   (16U)
#define USB_CORE_OTGCTRL2_ADP_CHRG_TMOUT(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL2_ADP_CHRG_TMOUT_SHIFT)) & USB_CORE_OTGCTRL2_ADP_CHRG_TMOUT_MASK)
#define USB_CORE_OTGCTRL2_T_ADP_DSCHG_MASK       (0xFF000000U)
#define USB_CORE_OTGCTRL2_T_ADP_DSCHG_SHIFT      (24U)
#define USB_CORE_OTGCTRL2_T_ADP_DSCHG(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_OTGCTRL2_T_ADP_DSCHG_SHIFT)) & USB_CORE_OTGCTRL2_T_ADP_DSCHG_MASK)

/*! @name HCIVERSION_CAPLENGTH - HCI Version and CAPLENGTH */
#define USB_CORE_HCIVERSION_CAPLENGTH_CAPLENGTH_MASK (0xFFU)
#define USB_CORE_HCIVERSION_CAPLENGTH_CAPLENGTH_SHIFT (0U)
#define USB_CORE_HCIVERSION_CAPLENGTH_CAPLENGTH(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCIVERSION_CAPLENGTH_CAPLENGTH_SHIFT)) & USB_CORE_HCIVERSION_CAPLENGTH_CAPLENGTH_MASK)
#define USB_CORE_HCIVERSION_CAPLENGTH_HCIVERSION_MASK (0xFFFF0000U)
#define USB_CORE_HCIVERSION_CAPLENGTH_HCIVERSION_SHIFT (16U)
#define USB_CORE_HCIVERSION_CAPLENGTH_HCIVERSION(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCIVERSION_CAPLENGTH_HCIVERSION_SHIFT)) & USB_CORE_HCIVERSION_CAPLENGTH_HCIVERSION_MASK)

/*! @name HCSPARAMS1 - Structural Parameters 1 */
#define USB_CORE_HCSPARAMS1_MaxSlots_MASK        (0xFFU)
#define USB_CORE_HCSPARAMS1_MaxSlots_SHIFT       (0U)
#define USB_CORE_HCSPARAMS1_MaxSlots(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCSPARAMS1_MaxSlots_SHIFT)) & USB_CORE_HCSPARAMS1_MaxSlots_MASK)
#define USB_CORE_HCSPARAMS1_MaxIntrs_MASK        (0x7FF00U)
#define USB_CORE_HCSPARAMS1_MaxIntrs_SHIFT       (8U)
#define USB_CORE_HCSPARAMS1_MaxIntrs(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCSPARAMS1_MaxIntrs_SHIFT)) & USB_CORE_HCSPARAMS1_MaxIntrs_MASK)
#define USB_CORE_HCSPARAMS1_MaxPorts_MASK        (0xFF000000U)
#define USB_CORE_HCSPARAMS1_MaxPorts_SHIFT       (24U)
#define USB_CORE_HCSPARAMS1_MaxPorts(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCSPARAMS1_MaxPorts_SHIFT)) & USB_CORE_HCSPARAMS1_MaxPorts_MASK)

/*! @name HCSPARAMS2 - Structural Parameters 2 */
#define USB_CORE_HCSPARAMS2_IST_MASK             (0xFU)
#define USB_CORE_HCSPARAMS2_IST_SHIFT            (0U)
#define USB_CORE_HCSPARAMS2_IST(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCSPARAMS2_IST_SHIFT)) & USB_CORE_HCSPARAMS2_IST_MASK)
#define USB_CORE_HCSPARAMS2_ERSTMax_MASK         (0xF0U)
#define USB_CORE_HCSPARAMS2_ERSTMax_SHIFT        (4U)
#define USB_CORE_HCSPARAMS2_ERSTMax(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCSPARAMS2_ERSTMax_SHIFT)) & USB_CORE_HCSPARAMS2_ERSTMax_MASK)
#define USB_CORE_HCSPARAMS2_MaxSPBufHi_MASK      (0x3E00000U)
#define USB_CORE_HCSPARAMS2_MaxSPBufHi_SHIFT     (21U)
#define USB_CORE_HCSPARAMS2_MaxSPBufHi(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCSPARAMS2_MaxSPBufHi_SHIFT)) & USB_CORE_HCSPARAMS2_MaxSPBufHi_MASK)
#define USB_CORE_HCSPARAMS2_SPR_MASK             (0x4000000U)
#define USB_CORE_HCSPARAMS2_SPR_SHIFT            (26U)
#define USB_CORE_HCSPARAMS2_SPR(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCSPARAMS2_SPR_SHIFT)) & USB_CORE_HCSPARAMS2_SPR_MASK)
#define USB_CORE_HCSPARAMS2_MaxSPBufLo_MASK      (0xF8000000U)
#define USB_CORE_HCSPARAMS2_MaxSPBufLo_SHIFT     (27U)
#define USB_CORE_HCSPARAMS2_MaxSPBufLo(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCSPARAMS2_MaxSPBufLo_SHIFT)) & USB_CORE_HCSPARAMS2_MaxSPBufLo_MASK)

/*! @name HCSPARAMS3 - Structural Parameters 3 */
#define USB_CORE_HCSPARAMS3_U1DevExitLat_MASK    (0xFFU)
#define USB_CORE_HCSPARAMS3_U1DevExitLat_SHIFT   (0U)
#define USB_CORE_HCSPARAMS3_U1DevExitLat(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCSPARAMS3_U1DevExitLat_SHIFT)) & USB_CORE_HCSPARAMS3_U1DevExitLat_MASK)
#define USB_CORE_HCSPARAMS3_U2DevExitLat_MASK    (0xFFFF0000U)
#define USB_CORE_HCSPARAMS3_U2DevExitLat_SHIFT   (16U)
#define USB_CORE_HCSPARAMS3_U2DevExitLat(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCSPARAMS3_U2DevExitLat_SHIFT)) & USB_CORE_HCSPARAMS3_U2DevExitLat_MASK)

/*! @name HCCPARAMS - Capability Parameters */
#define USB_CORE_HCCPARAMS_AC64_MASK             (0x1U)
#define USB_CORE_HCCPARAMS_AC64_SHIFT            (0U)
#define USB_CORE_HCCPARAMS_AC64(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_AC64_SHIFT)) & USB_CORE_HCCPARAMS_AC64_MASK)
#define USB_CORE_HCCPARAMS_BNC_MASK              (0x2U)
#define USB_CORE_HCCPARAMS_BNC_SHIFT             (1U)
#define USB_CORE_HCCPARAMS_BNC(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_BNC_SHIFT)) & USB_CORE_HCCPARAMS_BNC_MASK)
#define USB_CORE_HCCPARAMS_CSZ_MASK              (0x4U)
#define USB_CORE_HCCPARAMS_CSZ_SHIFT             (2U)
#define USB_CORE_HCCPARAMS_CSZ(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_CSZ_SHIFT)) & USB_CORE_HCCPARAMS_CSZ_MASK)
#define USB_CORE_HCCPARAMS_PPC_MASK              (0x8U)
#define USB_CORE_HCCPARAMS_PPC_SHIFT             (3U)
#define USB_CORE_HCCPARAMS_PPC(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_PPC_SHIFT)) & USB_CORE_HCCPARAMS_PPC_MASK)
#define USB_CORE_HCCPARAMS_PIND_MASK             (0x10U)
#define USB_CORE_HCCPARAMS_PIND_SHIFT            (4U)
#define USB_CORE_HCCPARAMS_PIND(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_PIND_SHIFT)) & USB_CORE_HCCPARAMS_PIND_MASK)
#define USB_CORE_HCCPARAMS_LHRC_MASK             (0x20U)
#define USB_CORE_HCCPARAMS_LHRC_SHIFT            (5U)
#define USB_CORE_HCCPARAMS_LHRC(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_LHRC_SHIFT)) & USB_CORE_HCCPARAMS_LHRC_MASK)
#define USB_CORE_HCCPARAMS_LTC_MASK              (0x40U)
#define USB_CORE_HCCPARAMS_LTC_SHIFT             (6U)
#define USB_CORE_HCCPARAMS_LTC(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_LTC_SHIFT)) & USB_CORE_HCCPARAMS_LTC_MASK)
#define USB_CORE_HCCPARAMS_NSS_MASK              (0x80U)
#define USB_CORE_HCCPARAMS_NSS_SHIFT             (7U)
#define USB_CORE_HCCPARAMS_NSS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_NSS_SHIFT)) & USB_CORE_HCCPARAMS_NSS_MASK)
#define USB_CORE_HCCPARAMS_PAE_MASK              (0x100U)
#define USB_CORE_HCCPARAMS_PAE_SHIFT             (8U)
#define USB_CORE_HCCPARAMS_PAE(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_PAE_SHIFT)) & USB_CORE_HCCPARAMS_PAE_MASK)
#define USB_CORE_HCCPARAMS_SPC_MASK              (0x200U)
#define USB_CORE_HCCPARAMS_SPC_SHIFT             (9U)
#define USB_CORE_HCCPARAMS_SPC(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_SPC_SHIFT)) & USB_CORE_HCCPARAMS_SPC_MASK)
#define USB_CORE_HCCPARAMS_MaxPSASize_MASK       (0xF000U)
#define USB_CORE_HCCPARAMS_MaxPSASize_SHIFT      (12U)
#define USB_CORE_HCCPARAMS_MaxPSASize(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_MaxPSASize_SHIFT)) & USB_CORE_HCCPARAMS_MaxPSASize_MASK)
#define USB_CORE_HCCPARAMS_xECP_MASK             (0xFFFF0000U)
#define USB_CORE_HCCPARAMS_xECP_SHIFT            (16U)
#define USB_CORE_HCCPARAMS_xECP(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_HCCPARAMS_xECP_SHIFT)) & USB_CORE_HCCPARAMS_xECP_MASK)

/*! @name DBOFF - DoorBell Array Offset */
#define USB_CORE_DBOFF_DAO_MASK                  (0xFFFFFFFCU)
#define USB_CORE_DBOFF_DAO_SHIFT                 (2U)
#define USB_CORE_DBOFF_DAO(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBOFF_DAO_SHIFT)) & USB_CORE_DBOFF_DAO_MASK)

/*! @name RTSOFF - xHCI Runtime Registers Offset */
#define USB_CORE_RTSOFF_RRSO_MASK                (0xFFFFFFE0U)
#define USB_CORE_RTSOFF_RRSO_SHIFT               (5U)
#define USB_CORE_RTSOFF_RRSO(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_RTSOFF_RRSO_SHIFT)) & USB_CORE_RTSOFF_RRSO_MASK)

/*! @name USBCMD - USB Command */
#define USB_CORE_USBCMD_R_S_MASK                 (0x1U)
#define USB_CORE_USBCMD_R_S_SHIFT                (0U)
#define USB_CORE_USBCMD_R_S(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBCMD_R_S_SHIFT)) & USB_CORE_USBCMD_R_S_MASK)
#define USB_CORE_USBCMD_HCRST_MASK               (0x2U)
#define USB_CORE_USBCMD_HCRST_SHIFT              (1U)
#define USB_CORE_USBCMD_HCRST(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBCMD_HCRST_SHIFT)) & USB_CORE_USBCMD_HCRST_MASK)
#define USB_CORE_USBCMD_INTE_MASK                (0x4U)
#define USB_CORE_USBCMD_INTE_SHIFT               (2U)
#define USB_CORE_USBCMD_INTE(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBCMD_INTE_SHIFT)) & USB_CORE_USBCMD_INTE_MASK)
#define USB_CORE_USBCMD_HSEE_MASK                (0x8U)
#define USB_CORE_USBCMD_HSEE_SHIFT               (3U)
#define USB_CORE_USBCMD_HSEE(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBCMD_HSEE_SHIFT)) & USB_CORE_USBCMD_HSEE_MASK)
#define USB_CORE_USBCMD_LHCRST_MASK              (0x80U)
#define USB_CORE_USBCMD_LHCRST_SHIFT             (7U)
#define USB_CORE_USBCMD_LHCRST(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBCMD_LHCRST_SHIFT)) & USB_CORE_USBCMD_LHCRST_MASK)
#define USB_CORE_USBCMD_CSS_MASK                 (0x100U)
#define USB_CORE_USBCMD_CSS_SHIFT                (8U)
#define USB_CORE_USBCMD_CSS(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBCMD_CSS_SHIFT)) & USB_CORE_USBCMD_CSS_MASK)
#define USB_CORE_USBCMD_CRS_MASK                 (0x200U)
#define USB_CORE_USBCMD_CRS_SHIFT                (9U)
#define USB_CORE_USBCMD_CRS(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBCMD_CRS_SHIFT)) & USB_CORE_USBCMD_CRS_MASK)
#define USB_CORE_USBCMD_EWE_MASK                 (0x400U)
#define USB_CORE_USBCMD_EWE_SHIFT                (10U)
#define USB_CORE_USBCMD_EWE(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBCMD_EWE_SHIFT)) & USB_CORE_USBCMD_EWE_MASK)
#define USB_CORE_USBCMD_EU3S_MASK                (0x800U)
#define USB_CORE_USBCMD_EU3S_SHIFT               (11U)
#define USB_CORE_USBCMD_EU3S(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBCMD_EU3S_SHIFT)) & USB_CORE_USBCMD_EU3S_MASK)

/*! @name USBSTS - USB Status */
#define USB_CORE_USBSTS_HCH_MASK                 (0x1U)
#define USB_CORE_USBSTS_HCH_SHIFT                (0U)
#define USB_CORE_USBSTS_HCH(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBSTS_HCH_SHIFT)) & USB_CORE_USBSTS_HCH_MASK)
#define USB_CORE_USBSTS_HSE_MASK                 (0x4U)
#define USB_CORE_USBSTS_HSE_SHIFT                (2U)
#define USB_CORE_USBSTS_HSE(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBSTS_HSE_SHIFT)) & USB_CORE_USBSTS_HSE_MASK)
#define USB_CORE_USBSTS_EINT_MASK                (0x8U)
#define USB_CORE_USBSTS_EINT_SHIFT               (3U)
#define USB_CORE_USBSTS_EINT(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBSTS_EINT_SHIFT)) & USB_CORE_USBSTS_EINT_MASK)
#define USB_CORE_USBSTS_PCD_MASK                 (0x10U)
#define USB_CORE_USBSTS_PCD_SHIFT                (4U)
#define USB_CORE_USBSTS_PCD(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBSTS_PCD_SHIFT)) & USB_CORE_USBSTS_PCD_MASK)
#define USB_CORE_USBSTS_SSS_MASK                 (0x100U)
#define USB_CORE_USBSTS_SSS_SHIFT                (8U)
#define USB_CORE_USBSTS_SSS(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBSTS_SSS_SHIFT)) & USB_CORE_USBSTS_SSS_MASK)
#define USB_CORE_USBSTS_RSS_MASK                 (0x200U)
#define USB_CORE_USBSTS_RSS_SHIFT                (9U)
#define USB_CORE_USBSTS_RSS(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBSTS_RSS_SHIFT)) & USB_CORE_USBSTS_RSS_MASK)
#define USB_CORE_USBSTS_SRE_MASK                 (0x400U)
#define USB_CORE_USBSTS_SRE_SHIFT                (10U)
#define USB_CORE_USBSTS_SRE(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBSTS_SRE_SHIFT)) & USB_CORE_USBSTS_SRE_MASK)
#define USB_CORE_USBSTS_CNR_MASK                 (0x800U)
#define USB_CORE_USBSTS_CNR_SHIFT                (11U)
#define USB_CORE_USBSTS_CNR(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBSTS_CNR_SHIFT)) & USB_CORE_USBSTS_CNR_MASK)
#define USB_CORE_USBSTS_HCE_MASK                 (0x1000U)
#define USB_CORE_USBSTS_HCE_SHIFT                (12U)
#define USB_CORE_USBSTS_HCE(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_USBSTS_HCE_SHIFT)) & USB_CORE_USBSTS_HCE_MASK)

/*! @name PAGESIZE - Page Size */
#define USB_CORE_PAGESIZE_PAGESIZE_MASK          (0xFFFFU)
#define USB_CORE_PAGESIZE_PAGESIZE_SHIFT         (0U)
#define USB_CORE_PAGESIZE_PAGESIZE(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_PAGESIZE_PAGESIZE_SHIFT)) & USB_CORE_PAGESIZE_PAGESIZE_MASK)

/*! @name DNCTRL - Device Notification Control */
#define USB_CORE_DNCTRL_N0_MASK                  (0x1U)
#define USB_CORE_DNCTRL_N0_SHIFT                 (0U)
#define USB_CORE_DNCTRL_N0(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N0_SHIFT)) & USB_CORE_DNCTRL_N0_MASK)
#define USB_CORE_DNCTRL_N1_MASK                  (0x2U)
#define USB_CORE_DNCTRL_N1_SHIFT                 (1U)
#define USB_CORE_DNCTRL_N1(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N1_SHIFT)) & USB_CORE_DNCTRL_N1_MASK)
#define USB_CORE_DNCTRL_N2_MASK                  (0x4U)
#define USB_CORE_DNCTRL_N2_SHIFT                 (2U)
#define USB_CORE_DNCTRL_N2(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N2_SHIFT)) & USB_CORE_DNCTRL_N2_MASK)
#define USB_CORE_DNCTRL_N3_MASK                  (0x8U)
#define USB_CORE_DNCTRL_N3_SHIFT                 (3U)
#define USB_CORE_DNCTRL_N3(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N3_SHIFT)) & USB_CORE_DNCTRL_N3_MASK)
#define USB_CORE_DNCTRL_N4_MASK                  (0x10U)
#define USB_CORE_DNCTRL_N4_SHIFT                 (4U)
#define USB_CORE_DNCTRL_N4(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N4_SHIFT)) & USB_CORE_DNCTRL_N4_MASK)
#define USB_CORE_DNCTRL_N5_MASK                  (0x20U)
#define USB_CORE_DNCTRL_N5_SHIFT                 (5U)
#define USB_CORE_DNCTRL_N5(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N5_SHIFT)) & USB_CORE_DNCTRL_N5_MASK)
#define USB_CORE_DNCTRL_N6_MASK                  (0x40U)
#define USB_CORE_DNCTRL_N6_SHIFT                 (6U)
#define USB_CORE_DNCTRL_N6(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N6_SHIFT)) & USB_CORE_DNCTRL_N6_MASK)
#define USB_CORE_DNCTRL_N7_MASK                  (0x80U)
#define USB_CORE_DNCTRL_N7_SHIFT                 (7U)
#define USB_CORE_DNCTRL_N7(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N7_SHIFT)) & USB_CORE_DNCTRL_N7_MASK)
#define USB_CORE_DNCTRL_N8_MASK                  (0x100U)
#define USB_CORE_DNCTRL_N8_SHIFT                 (8U)
#define USB_CORE_DNCTRL_N8(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N8_SHIFT)) & USB_CORE_DNCTRL_N8_MASK)
#define USB_CORE_DNCTRL_N9_MASK                  (0x200U)
#define USB_CORE_DNCTRL_N9_SHIFT                 (9U)
#define USB_CORE_DNCTRL_N9(x)                    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N9_SHIFT)) & USB_CORE_DNCTRL_N9_MASK)
#define USB_CORE_DNCTRL_N10_MASK                 (0x400U)
#define USB_CORE_DNCTRL_N10_SHIFT                (10U)
#define USB_CORE_DNCTRL_N10(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N10_SHIFT)) & USB_CORE_DNCTRL_N10_MASK)
#define USB_CORE_DNCTRL_N11_MASK                 (0x800U)
#define USB_CORE_DNCTRL_N11_SHIFT                (11U)
#define USB_CORE_DNCTRL_N11(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N11_SHIFT)) & USB_CORE_DNCTRL_N11_MASK)
#define USB_CORE_DNCTRL_N12_MASK                 (0x1000U)
#define USB_CORE_DNCTRL_N12_SHIFT                (12U)
#define USB_CORE_DNCTRL_N12(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N12_SHIFT)) & USB_CORE_DNCTRL_N12_MASK)
#define USB_CORE_DNCTRL_N13_MASK                 (0x2000U)
#define USB_CORE_DNCTRL_N13_SHIFT                (13U)
#define USB_CORE_DNCTRL_N13(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N13_SHIFT)) & USB_CORE_DNCTRL_N13_MASK)
#define USB_CORE_DNCTRL_N14_MASK                 (0x4000U)
#define USB_CORE_DNCTRL_N14_SHIFT                (14U)
#define USB_CORE_DNCTRL_N14(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N14_SHIFT)) & USB_CORE_DNCTRL_N14_MASK)
#define USB_CORE_DNCTRL_N15_MASK                 (0x8000U)
#define USB_CORE_DNCTRL_N15_SHIFT                (15U)
#define USB_CORE_DNCTRL_N15(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_DNCTRL_N15_SHIFT)) & USB_CORE_DNCTRL_N15_MASK)

/*! @name CRCR_LO - Command Ring Control Register Low */
#define USB_CORE_CRCR_LO_RCS_MASK                (0x1U)
#define USB_CORE_CRCR_LO_RCS_SHIFT               (0U)
#define USB_CORE_CRCR_LO_RCS(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_CRCR_LO_RCS_SHIFT)) & USB_CORE_CRCR_LO_RCS_MASK)
#define USB_CORE_CRCR_LO_CS_MASK                 (0x2U)
#define USB_CORE_CRCR_LO_CS_SHIFT                (1U)
#define USB_CORE_CRCR_LO_CS(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_CRCR_LO_CS_SHIFT)) & USB_CORE_CRCR_LO_CS_MASK)
#define USB_CORE_CRCR_LO_CA_MASK                 (0x4U)
#define USB_CORE_CRCR_LO_CA_SHIFT                (2U)
#define USB_CORE_CRCR_LO_CA(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_CRCR_LO_CA_SHIFT)) & USB_CORE_CRCR_LO_CA_MASK)
#define USB_CORE_CRCR_LO_CRR_MASK                (0x8U)
#define USB_CORE_CRCR_LO_CRR_SHIFT               (3U)
#define USB_CORE_CRCR_LO_CRR(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_CRCR_LO_CRR_SHIFT)) & USB_CORE_CRCR_LO_CRR_MASK)
#define USB_CORE_CRCR_LO_CRPtr_L_MASK            (0xFFFFFFC0U)
#define USB_CORE_CRCR_LO_CRPtr_L_SHIFT           (6U)
#define USB_CORE_CRCR_LO_CRPtr_L(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_CRCR_LO_CRPtr_L_SHIFT)) & USB_CORE_CRCR_LO_CRPtr_L_MASK)

/*! @name CRCR_HI - Command Ring Control Register High */
#define USB_CORE_CRCR_HI_CRPtr_H_MASK            (0xFFFFFFFFU)
#define USB_CORE_CRCR_HI_CRPtr_H_SHIFT           (0U)
#define USB_CORE_CRCR_HI_CRPtr_H(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_CRCR_HI_CRPtr_H_SHIFT)) & USB_CORE_CRCR_HI_CRPtr_H_MASK)

/*! @name DCBAAP_LO - Device Context Base Address Array Pointer(LOW) */
#define USB_CORE_DCBAAP_LO_DCBAAPtr_L_MASK       (0xFFFFFFC0U)
#define USB_CORE_DCBAAP_LO_DCBAAPtr_L_SHIFT      (6U)
#define USB_CORE_DCBAAP_LO_DCBAAPtr_L(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_DCBAAP_LO_DCBAAPtr_L_SHIFT)) & USB_CORE_DCBAAP_LO_DCBAAPtr_L_MASK)

/*! @name DCBAAP_HI - Device Context Base Address Array Pointer (HIGH) */
#define USB_CORE_DCBAAP_HI_DCBAAPtr_H_MASK       (0xFFFFFFFFU)
#define USB_CORE_DCBAAP_HI_DCBAAPtr_H_SHIFT      (0U)
#define USB_CORE_DCBAAP_HI_DCBAAPtr_H(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_DCBAAP_HI_DCBAAPtr_H_SHIFT)) & USB_CORE_DCBAAP_HI_DCBAAPtr_H_MASK)

/*! @name CONFIG - Configure */
#define USB_CORE_CONFIG_MaxSlotsEn_MASK          (0xFFU)
#define USB_CORE_CONFIG_MaxSlotsEn_SHIFT         (0U)
#define USB_CORE_CONFIG_MaxSlotsEn(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_CONFIG_MaxSlotsEn_SHIFT)) & USB_CORE_CONFIG_MaxSlotsEn_MASK)

/*! @name PORTSC1USB2 - USB2 Port Status and Control */
#define USB_CORE_PORTSC1USB2_CCS_MASK            (0x1U)
#define USB_CORE_PORTSC1USB2_CCS_SHIFT           (0U)
#define USB_CORE_PORTSC1USB2_CCS(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_CCS_SHIFT)) & USB_CORE_PORTSC1USB2_CCS_MASK)
#define USB_CORE_PORTSC1USB2_PED_MASK            (0x2U)
#define USB_CORE_PORTSC1USB2_PED_SHIFT           (1U)
#define USB_CORE_PORTSC1USB2_PED(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_PED_SHIFT)) & USB_CORE_PORTSC1USB2_PED_MASK)
#define USB_CORE_PORTSC1USB2_OCA_MASK            (0x8U)
#define USB_CORE_PORTSC1USB2_OCA_SHIFT           (3U)
#define USB_CORE_PORTSC1USB2_OCA(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_OCA_SHIFT)) & USB_CORE_PORTSC1USB2_OCA_MASK)
#define USB_CORE_PORTSC1USB2_PR_MASK             (0x10U)
#define USB_CORE_PORTSC1USB2_PR_SHIFT            (4U)
#define USB_CORE_PORTSC1USB2_PR(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_PR_SHIFT)) & USB_CORE_PORTSC1USB2_PR_MASK)
#define USB_CORE_PORTSC1USB2_PLS_MASK            (0x1E0U)
#define USB_CORE_PORTSC1USB2_PLS_SHIFT           (5U)
#define USB_CORE_PORTSC1USB2_PLS(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_PLS_SHIFT)) & USB_CORE_PORTSC1USB2_PLS_MASK)
#define USB_CORE_PORTSC1USB2_PP_MASK             (0x200U)
#define USB_CORE_PORTSC1USB2_PP_SHIFT            (9U)
#define USB_CORE_PORTSC1USB2_PP(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_PP_SHIFT)) & USB_CORE_PORTSC1USB2_PP_MASK)
#define USB_CORE_PORTSC1USB2_PortSpeed_MASK      (0x3C00U)
#define USB_CORE_PORTSC1USB2_PortSpeed_SHIFT     (10U)
#define USB_CORE_PORTSC1USB2_PortSpeed(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_PortSpeed_SHIFT)) & USB_CORE_PORTSC1USB2_PortSpeed_MASK)
#define USB_CORE_PORTSC1USB2_PIC_MASK            (0xC000U)
#define USB_CORE_PORTSC1USB2_PIC_SHIFT           (14U)
#define USB_CORE_PORTSC1USB2_PIC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_PIC_SHIFT)) & USB_CORE_PORTSC1USB2_PIC_MASK)
#define USB_CORE_PORTSC1USB2_LWS_MASK            (0x10000U)
#define USB_CORE_PORTSC1USB2_LWS_SHIFT           (16U)
#define USB_CORE_PORTSC1USB2_LWS(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_LWS_SHIFT)) & USB_CORE_PORTSC1USB2_LWS_MASK)
#define USB_CORE_PORTSC1USB2_CSC_MASK            (0x20000U)
#define USB_CORE_PORTSC1USB2_CSC_SHIFT           (17U)
#define USB_CORE_PORTSC1USB2_CSC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_CSC_SHIFT)) & USB_CORE_PORTSC1USB2_CSC_MASK)
#define USB_CORE_PORTSC1USB2_PEC_MASK            (0x40000U)
#define USB_CORE_PORTSC1USB2_PEC_SHIFT           (18U)
#define USB_CORE_PORTSC1USB2_PEC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_PEC_SHIFT)) & USB_CORE_PORTSC1USB2_PEC_MASK)
#define USB_CORE_PORTSC1USB2_WRC_MASK            (0x80000U)
#define USB_CORE_PORTSC1USB2_WRC_SHIFT           (19U)
#define USB_CORE_PORTSC1USB2_WRC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_WRC_SHIFT)) & USB_CORE_PORTSC1USB2_WRC_MASK)
#define USB_CORE_PORTSC1USB2_OCC_MASK            (0x100000U)
#define USB_CORE_PORTSC1USB2_OCC_SHIFT           (20U)
#define USB_CORE_PORTSC1USB2_OCC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_OCC_SHIFT)) & USB_CORE_PORTSC1USB2_OCC_MASK)
#define USB_CORE_PORTSC1USB2_PRC_MASK            (0x200000U)
#define USB_CORE_PORTSC1USB2_PRC_SHIFT           (21U)
#define USB_CORE_PORTSC1USB2_PRC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_PRC_SHIFT)) & USB_CORE_PORTSC1USB2_PRC_MASK)
#define USB_CORE_PORTSC1USB2_PLC_MASK            (0x400000U)
#define USB_CORE_PORTSC1USB2_PLC_SHIFT           (22U)
#define USB_CORE_PORTSC1USB2_PLC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_PLC_SHIFT)) & USB_CORE_PORTSC1USB2_PLC_MASK)
#define USB_CORE_PORTSC1USB2_CAS_MASK            (0x1000000U)
#define USB_CORE_PORTSC1USB2_CAS_SHIFT           (24U)
#define USB_CORE_PORTSC1USB2_CAS(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_CAS_SHIFT)) & USB_CORE_PORTSC1USB2_CAS_MASK)
#define USB_CORE_PORTSC1USB2_WCE_MASK            (0x2000000U)
#define USB_CORE_PORTSC1USB2_WCE_SHIFT           (25U)
#define USB_CORE_PORTSC1USB2_WCE(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_WCE_SHIFT)) & USB_CORE_PORTSC1USB2_WCE_MASK)
#define USB_CORE_PORTSC1USB2_WDE_MASK            (0x4000000U)
#define USB_CORE_PORTSC1USB2_WDE_SHIFT           (26U)
#define USB_CORE_PORTSC1USB2_WDE(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_WDE_SHIFT)) & USB_CORE_PORTSC1USB2_WDE_MASK)
#define USB_CORE_PORTSC1USB2_WOE_MASK            (0x8000000U)
#define USB_CORE_PORTSC1USB2_WOE_SHIFT           (27U)
#define USB_CORE_PORTSC1USB2_WOE(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_WOE_SHIFT)) & USB_CORE_PORTSC1USB2_WOE_MASK)
#define USB_CORE_PORTSC1USB2_DR_MASK             (0x40000000U)
#define USB_CORE_PORTSC1USB2_DR_SHIFT            (30U)
#define USB_CORE_PORTSC1USB2_DR(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB2_DR_SHIFT)) & USB_CORE_PORTSC1USB2_DR_MASK)

/*! @name PORTPMSC1USB2 - USB2 Port Power Management Status and Control */
#define USB_CORE_PORTPMSC1USB2_L1S_MASK          (0x7U)
#define USB_CORE_PORTPMSC1USB2_L1S_SHIFT         (0U)
#define USB_CORE_PORTPMSC1USB2_L1S(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTPMSC1USB2_L1S_SHIFT)) & USB_CORE_PORTPMSC1USB2_L1S_MASK)
#define USB_CORE_PORTPMSC1USB2_RWE_MASK          (0x8U)
#define USB_CORE_PORTPMSC1USB2_RWE_SHIFT         (3U)
#define USB_CORE_PORTPMSC1USB2_RWE(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTPMSC1USB2_RWE_SHIFT)) & USB_CORE_PORTPMSC1USB2_RWE_MASK)
#define USB_CORE_PORTPMSC1USB2_BESL_MASK         (0xF0U)
#define USB_CORE_PORTPMSC1USB2_BESL_SHIFT        (4U)
#define USB_CORE_PORTPMSC1USB2_BESL(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTPMSC1USB2_BESL_SHIFT)) & USB_CORE_PORTPMSC1USB2_BESL_MASK)
#define USB_CORE_PORTPMSC1USB2_L1DS_MASK         (0xFF00U)
#define USB_CORE_PORTPMSC1USB2_L1DS_SHIFT        (8U)
#define USB_CORE_PORTPMSC1USB2_L1DS(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTPMSC1USB2_L1DS_SHIFT)) & USB_CORE_PORTPMSC1USB2_L1DS_MASK)
#define USB_CORE_PORTPMSC1USB2_HLE_MASK          (0x10000U)
#define USB_CORE_PORTPMSC1USB2_HLE_SHIFT         (16U)
#define USB_CORE_PORTPMSC1USB2_HLE(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTPMSC1USB2_HLE_SHIFT)) & USB_CORE_PORTPMSC1USB2_HLE_MASK)
#define USB_CORE_PORTPMSC1USB2_PTC_MASK          (0xF0000000U)
#define USB_CORE_PORTPMSC1USB2_PTC_SHIFT         (28U)
#define USB_CORE_PORTPMSC1USB2_PTC(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTPMSC1USB2_PTC_SHIFT)) & USB_CORE_PORTPMSC1USB2_PTC_MASK)

/*! @name PORT1HLPMC - USB2 Port Hardware LPM Control register */
#define USB_CORE_PORT1HLPMC_HIRDM_MASK           (0x3U)
#define USB_CORE_PORT1HLPMC_HIRDM_SHIFT          (0U)
#define USB_CORE_PORT1HLPMC_HIRDM(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORT1HLPMC_HIRDM_SHIFT)) & USB_CORE_PORT1HLPMC_HIRDM_MASK)
#define USB_CORE_PORT1HLPMC_L1_timeout_MASK      (0x3FCU)
#define USB_CORE_PORT1HLPMC_L1_timeout_SHIFT     (2U)
#define USB_CORE_PORT1HLPMC_L1_timeout(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORT1HLPMC_L1_timeout_SHIFT)) & USB_CORE_PORT1HLPMC_L1_timeout_MASK)
#define USB_CORE_PORT1HLPMC_BESLD_MASK           (0x3C00U)
#define USB_CORE_PORT1HLPMC_BESLD_SHIFT          (10U)
#define USB_CORE_PORT1HLPMC_BESLD(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORT1HLPMC_BESLD_SHIFT)) & USB_CORE_PORT1HLPMC_BESLD_MASK)

/*! @name PORTSC1USB3 - USB3 Port Status and Control */
#define USB_CORE_PORTSC1USB3_CCS_MASK            (0x1U)
#define USB_CORE_PORTSC1USB3_CCS_SHIFT           (0U)
#define USB_CORE_PORTSC1USB3_CCS(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_CCS_SHIFT)) & USB_CORE_PORTSC1USB3_CCS_MASK)
#define USB_CORE_PORTSC1USB3_PED_MASK            (0x2U)
#define USB_CORE_PORTSC1USB3_PED_SHIFT           (1U)
#define USB_CORE_PORTSC1USB3_PED(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_PED_SHIFT)) & USB_CORE_PORTSC1USB3_PED_MASK)
#define USB_CORE_PORTSC1USB3_OCA_MASK            (0x8U)
#define USB_CORE_PORTSC1USB3_OCA_SHIFT           (3U)
#define USB_CORE_PORTSC1USB3_OCA(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_OCA_SHIFT)) & USB_CORE_PORTSC1USB3_OCA_MASK)
#define USB_CORE_PORTSC1USB3_PR_MASK             (0x10U)
#define USB_CORE_PORTSC1USB3_PR_SHIFT            (4U)
#define USB_CORE_PORTSC1USB3_PR(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_PR_SHIFT)) & USB_CORE_PORTSC1USB3_PR_MASK)
#define USB_CORE_PORTSC1USB3_PLS_MASK            (0x1E0U)
#define USB_CORE_PORTSC1USB3_PLS_SHIFT           (5U)
#define USB_CORE_PORTSC1USB3_PLS(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_PLS_SHIFT)) & USB_CORE_PORTSC1USB3_PLS_MASK)
#define USB_CORE_PORTSC1USB3_PP_MASK             (0x200U)
#define USB_CORE_PORTSC1USB3_PP_SHIFT            (9U)
#define USB_CORE_PORTSC1USB3_PP(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_PP_SHIFT)) & USB_CORE_PORTSC1USB3_PP_MASK)
#define USB_CORE_PORTSC1USB3_PortSpeed_MASK      (0x3C00U)
#define USB_CORE_PORTSC1USB3_PortSpeed_SHIFT     (10U)
#define USB_CORE_PORTSC1USB3_PortSpeed(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_PortSpeed_SHIFT)) & USB_CORE_PORTSC1USB3_PortSpeed_MASK)
#define USB_CORE_PORTSC1USB3_PIC_MASK            (0xC000U)
#define USB_CORE_PORTSC1USB3_PIC_SHIFT           (14U)
#define USB_CORE_PORTSC1USB3_PIC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_PIC_SHIFT)) & USB_CORE_PORTSC1USB3_PIC_MASK)
#define USB_CORE_PORTSC1USB3_LWS_MASK            (0x10000U)
#define USB_CORE_PORTSC1USB3_LWS_SHIFT           (16U)
#define USB_CORE_PORTSC1USB3_LWS(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_LWS_SHIFT)) & USB_CORE_PORTSC1USB3_LWS_MASK)
#define USB_CORE_PORTSC1USB3_CSC_MASK            (0x20000U)
#define USB_CORE_PORTSC1USB3_CSC_SHIFT           (17U)
#define USB_CORE_PORTSC1USB3_CSC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_CSC_SHIFT)) & USB_CORE_PORTSC1USB3_CSC_MASK)
#define USB_CORE_PORTSC1USB3_PEC_MASK            (0x40000U)
#define USB_CORE_PORTSC1USB3_PEC_SHIFT           (18U)
#define USB_CORE_PORTSC1USB3_PEC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_PEC_SHIFT)) & USB_CORE_PORTSC1USB3_PEC_MASK)
#define USB_CORE_PORTSC1USB3_WRC_MASK            (0x80000U)
#define USB_CORE_PORTSC1USB3_WRC_SHIFT           (19U)
#define USB_CORE_PORTSC1USB3_WRC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_WRC_SHIFT)) & USB_CORE_PORTSC1USB3_WRC_MASK)
#define USB_CORE_PORTSC1USB3_OCC_MASK            (0x100000U)
#define USB_CORE_PORTSC1USB3_OCC_SHIFT           (20U)
#define USB_CORE_PORTSC1USB3_OCC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_OCC_SHIFT)) & USB_CORE_PORTSC1USB3_OCC_MASK)
#define USB_CORE_PORTSC1USB3_PRC_MASK            (0x200000U)
#define USB_CORE_PORTSC1USB3_PRC_SHIFT           (21U)
#define USB_CORE_PORTSC1USB3_PRC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_PRC_SHIFT)) & USB_CORE_PORTSC1USB3_PRC_MASK)
#define USB_CORE_PORTSC1USB3_PLC_MASK            (0x400000U)
#define USB_CORE_PORTSC1USB3_PLC_SHIFT           (22U)
#define USB_CORE_PORTSC1USB3_PLC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_PLC_SHIFT)) & USB_CORE_PORTSC1USB3_PLC_MASK)
#define USB_CORE_PORTSC1USB3_CEC_MASK            (0x800000U)
#define USB_CORE_PORTSC1USB3_CEC_SHIFT           (23U)
#define USB_CORE_PORTSC1USB3_CEC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_CEC_SHIFT)) & USB_CORE_PORTSC1USB3_CEC_MASK)
#define USB_CORE_PORTSC1USB3_CAS_MASK            (0x1000000U)
#define USB_CORE_PORTSC1USB3_CAS_SHIFT           (24U)
#define USB_CORE_PORTSC1USB3_CAS(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_CAS_SHIFT)) & USB_CORE_PORTSC1USB3_CAS_MASK)
#define USB_CORE_PORTSC1USB3_WCE_MASK            (0x2000000U)
#define USB_CORE_PORTSC1USB3_WCE_SHIFT           (25U)
#define USB_CORE_PORTSC1USB3_WCE(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_WCE_SHIFT)) & USB_CORE_PORTSC1USB3_WCE_MASK)
#define USB_CORE_PORTSC1USB3_WDE_MASK            (0x4000000U)
#define USB_CORE_PORTSC1USB3_WDE_SHIFT           (26U)
#define USB_CORE_PORTSC1USB3_WDE(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_WDE_SHIFT)) & USB_CORE_PORTSC1USB3_WDE_MASK)
#define USB_CORE_PORTSC1USB3_WOE_MASK            (0x8000000U)
#define USB_CORE_PORTSC1USB3_WOE_SHIFT           (27U)
#define USB_CORE_PORTSC1USB3_WOE(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_WOE_SHIFT)) & USB_CORE_PORTSC1USB3_WOE_MASK)
#define USB_CORE_PORTSC1USB3_DR_MASK             (0x40000000U)
#define USB_CORE_PORTSC1USB3_DR_SHIFT            (30U)
#define USB_CORE_PORTSC1USB3_DR(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_DR_SHIFT)) & USB_CORE_PORTSC1USB3_DR_MASK)
#define USB_CORE_PORTSC1USB3_WPR_MASK            (0x80000000U)
#define USB_CORE_PORTSC1USB3_WPR_SHIFT           (31U)
#define USB_CORE_PORTSC1USB3_WPR(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTSC1USB3_WPR_SHIFT)) & USB_CORE_PORTSC1USB3_WPR_MASK)

/*! @name PORTPMSC1USB3 - USB3 Port Power Management Status and Control */
#define USB_CORE_PORTPMSC1USB3_U1_timeout_MASK   (0xFFU)
#define USB_CORE_PORTPMSC1USB3_U1_timeout_SHIFT  (0U)
#define USB_CORE_PORTPMSC1USB3_U1_timeout(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTPMSC1USB3_U1_timeout_SHIFT)) & USB_CORE_PORTPMSC1USB3_U1_timeout_MASK)
#define USB_CORE_PORTPMSC1USB3_U2_timeout_MASK   (0xFF00U)
#define USB_CORE_PORTPMSC1USB3_U2_timeout_SHIFT  (8U)
#define USB_CORE_PORTPMSC1USB3_U2_timeout(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTPMSC1USB3_U2_timeout_SHIFT)) & USB_CORE_PORTPMSC1USB3_U2_timeout_MASK)
#define USB_CORE_PORTPMSC1USB3_FLA_MASK          (0x10000U)
#define USB_CORE_PORTPMSC1USB3_FLA_SHIFT         (16U)
#define USB_CORE_PORTPMSC1USB3_FLA(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTPMSC1USB3_FLA_SHIFT)) & USB_CORE_PORTPMSC1USB3_FLA_MASK)

/*! @name PORTLI1 - USB3 Port Link Info */
#define USB_CORE_PORTLI1_LEC_MASK                (0xFFFFU)
#define USB_CORE_PORTLI1_LEC_SHIFT               (0U)
#define USB_CORE_PORTLI1_LEC(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_PORTLI1_LEC_SHIFT)) & USB_CORE_PORTLI1_LEC_MASK)

/*! @name MFINDEX - MicroFrame Index */
#define USB_CORE_MFINDEX_MFIndex_MASK            (0x3FFFU)
#define USB_CORE_MFINDEX_MFIndex_SHIFT           (0U)
#define USB_CORE_MFINDEX_MFIndex(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_MFINDEX_MFIndex_SHIFT)) & USB_CORE_MFINDEX_MFIndex_MASK)

/*! @name IMAN0 - Interrupter Management */
#define USB_CORE_IMAN0_IP_MASK                   (0x1U)
#define USB_CORE_IMAN0_IP_SHIFT                  (0U)
#define USB_CORE_IMAN0_IP(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN0_IP_SHIFT)) & USB_CORE_IMAN0_IP_MASK)
#define USB_CORE_IMAN0_IE_MASK                   (0x2U)
#define USB_CORE_IMAN0_IE_SHIFT                  (1U)
#define USB_CORE_IMAN0_IE(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN0_IE_SHIFT)) & USB_CORE_IMAN0_IE_MASK)

/*! @name IMOD0 - Interrupter Moderation */
#define USB_CORE_IMOD0_IMODI_MASK                (0xFFFFU)
#define USB_CORE_IMOD0_IMODI_SHIFT               (0U)
#define USB_CORE_IMOD0_IMODI(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD0_IMODI_SHIFT)) & USB_CORE_IMOD0_IMODI_MASK)
#define USB_CORE_IMOD0_IMODC_MASK                (0xFFFF0000U)
#define USB_CORE_IMOD0_IMODC_SHIFT               (16U)
#define USB_CORE_IMOD0_IMODC(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD0_IMODC_SHIFT)) & USB_CORE_IMOD0_IMODC_MASK)

/*! @name ERSTSZ0 - Event Ring Segment Table Size */
#define USB_CORE_ERSTSZ0_ERSTS_MASK              (0xFFFFU)
#define USB_CORE_ERSTSZ0_ERSTS_SHIFT             (0U)
#define USB_CORE_ERSTSZ0_ERSTS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTSZ0_ERSTS_SHIFT)) & USB_CORE_ERSTSZ0_ERSTS_MASK)

/*! @name ERSTBA0_LO - Event Ring Segment Table Base Address (LOW) */
#define USB_CORE_ERSTBA0_LO_ERSTBAddr_LO_MASK    (0xFFFFFFC0U)
#define USB_CORE_ERSTBA0_LO_ERSTBAddr_LO_SHIFT   (6U)
#define USB_CORE_ERSTBA0_LO_ERSTBAddr_LO(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA0_LO_ERSTBAddr_LO_SHIFT)) & USB_CORE_ERSTBA0_LO_ERSTBAddr_LO_MASK)

/*! @name ERSTBA00_HI - Event Ring Segment Table Base Address (HIGH) */
#define USB_CORE_ERSTBA00_HI_ERSTBAddr_HI_MASK   (0xFFFFFFFFU)
#define USB_CORE_ERSTBA00_HI_ERSTBAddr_HI_SHIFT  (0U)
#define USB_CORE_ERSTBA00_HI_ERSTBAddr_HI(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA00_HI_ERSTBAddr_HI_SHIFT)) & USB_CORE_ERSTBA00_HI_ERSTBAddr_HI_MASK)

/*! @name ERDP0_LO - Event Ring Dequeue Pointer (LOW) */
#define USB_CORE_ERDP0_LO_DESI_MASK              (0x7U)
#define USB_CORE_ERDP0_LO_DESI_SHIFT             (0U)
#define USB_CORE_ERDP0_LO_DESI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP0_LO_DESI_SHIFT)) & USB_CORE_ERDP0_LO_DESI_MASK)
#define USB_CORE_ERDP0_LO_EHB_MASK               (0x8U)
#define USB_CORE_ERDP0_LO_EHB_SHIFT              (3U)
#define USB_CORE_ERDP0_LO_EHB(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP0_LO_EHB_SHIFT)) & USB_CORE_ERDP0_LO_EHB_MASK)
#define USB_CORE_ERDP0_LO_ERDPtr_MASK            (0xFFFFFFF0U)
#define USB_CORE_ERDP0_LO_ERDPtr_SHIFT           (4U)
#define USB_CORE_ERDP0_LO_ERDPtr(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP0_LO_ERDPtr_SHIFT)) & USB_CORE_ERDP0_LO_ERDPtr_MASK)

/*! @name ERDP0_HI - Event Ring Dequeue Pointer (HIGH) */
#define USB_CORE_ERDP0_HI_ERDPtr_HI_MASK         (0xFFFFFFFFU)
#define USB_CORE_ERDP0_HI_ERDPtr_HI_SHIFT        (0U)
#define USB_CORE_ERDP0_HI_ERDPtr_HI(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP0_HI_ERDPtr_HI_SHIFT)) & USB_CORE_ERDP0_HI_ERDPtr_HI_MASK)

/*! @name IMAN1 - Interrupter Management */
#define USB_CORE_IMAN1_IP_MASK                   (0x1U)
#define USB_CORE_IMAN1_IP_SHIFT                  (0U)
#define USB_CORE_IMAN1_IP(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN1_IP_SHIFT)) & USB_CORE_IMAN1_IP_MASK)
#define USB_CORE_IMAN1_IE_MASK                   (0x2U)
#define USB_CORE_IMAN1_IE_SHIFT                  (1U)
#define USB_CORE_IMAN1_IE(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN1_IE_SHIFT)) & USB_CORE_IMAN1_IE_MASK)

/*! @name IMOD1 - Interrupter Moderation */
#define USB_CORE_IMOD1_IMODI_MASK                (0xFFFFU)
#define USB_CORE_IMOD1_IMODI_SHIFT               (0U)
#define USB_CORE_IMOD1_IMODI(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD1_IMODI_SHIFT)) & USB_CORE_IMOD1_IMODI_MASK)
#define USB_CORE_IMOD1_IMODC_MASK                (0xFFFF0000U)
#define USB_CORE_IMOD1_IMODC_SHIFT               (16U)
#define USB_CORE_IMOD1_IMODC(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD1_IMODC_SHIFT)) & USB_CORE_IMOD1_IMODC_MASK)

/*! @name ERSTSZ1 - Event Ring Segment Table Size */
#define USB_CORE_ERSTSZ1_ERSTS_MASK              (0xFFFFU)
#define USB_CORE_ERSTSZ1_ERSTS_SHIFT             (0U)
#define USB_CORE_ERSTSZ1_ERSTS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTSZ1_ERSTS_SHIFT)) & USB_CORE_ERSTSZ1_ERSTS_MASK)

/*! @name ERSTBA1_LO - Event Ring Segment Table Base Address (LOW) */
#define USB_CORE_ERSTBA1_LO_ERSTBAddr_LO_MASK    (0xFFFFFFC0U)
#define USB_CORE_ERSTBA1_LO_ERSTBAddr_LO_SHIFT   (6U)
#define USB_CORE_ERSTBA1_LO_ERSTBAddr_LO(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA1_LO_ERSTBAddr_LO_SHIFT)) & USB_CORE_ERSTBA1_LO_ERSTBAddr_LO_MASK)

/*! @name ERSTBA01_HI - Event Ring Segment Table Base Address (HIGH) */
#define USB_CORE_ERSTBA01_HI_ERSTBAddr_HI_MASK   (0xFFFFFFFFU)
#define USB_CORE_ERSTBA01_HI_ERSTBAddr_HI_SHIFT  (0U)
#define USB_CORE_ERSTBA01_HI_ERSTBAddr_HI(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA01_HI_ERSTBAddr_HI_SHIFT)) & USB_CORE_ERSTBA01_HI_ERSTBAddr_HI_MASK)

/*! @name ERDP1_LO - Event Ring Dequeue Pointer (LOW) */
#define USB_CORE_ERDP1_LO_DESI_MASK              (0x7U)
#define USB_CORE_ERDP1_LO_DESI_SHIFT             (0U)
#define USB_CORE_ERDP1_LO_DESI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP1_LO_DESI_SHIFT)) & USB_CORE_ERDP1_LO_DESI_MASK)
#define USB_CORE_ERDP1_LO_EHB_MASK               (0x8U)
#define USB_CORE_ERDP1_LO_EHB_SHIFT              (3U)
#define USB_CORE_ERDP1_LO_EHB(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP1_LO_EHB_SHIFT)) & USB_CORE_ERDP1_LO_EHB_MASK)
#define USB_CORE_ERDP1_LO_ERDPtr_MASK            (0xFFFFFFF0U)
#define USB_CORE_ERDP1_LO_ERDPtr_SHIFT           (4U)
#define USB_CORE_ERDP1_LO_ERDPtr(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP1_LO_ERDPtr_SHIFT)) & USB_CORE_ERDP1_LO_ERDPtr_MASK)

/*! @name ERDP1_HI - Event Ring Dequeue Pointer (HIGH) */
#define USB_CORE_ERDP1_HI_ERDPtr_HI_MASK         (0xFFFFFFFFU)
#define USB_CORE_ERDP1_HI_ERDPtr_HI_SHIFT        (0U)
#define USB_CORE_ERDP1_HI_ERDPtr_HI(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP1_HI_ERDPtr_HI_SHIFT)) & USB_CORE_ERDP1_HI_ERDPtr_HI_MASK)

/*! @name IMAN2 - Interrupter Management */
#define USB_CORE_IMAN2_IP_MASK                   (0x1U)
#define USB_CORE_IMAN2_IP_SHIFT                  (0U)
#define USB_CORE_IMAN2_IP(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN2_IP_SHIFT)) & USB_CORE_IMAN2_IP_MASK)
#define USB_CORE_IMAN2_IE_MASK                   (0x2U)
#define USB_CORE_IMAN2_IE_SHIFT                  (1U)
#define USB_CORE_IMAN2_IE(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN2_IE_SHIFT)) & USB_CORE_IMAN2_IE_MASK)

/*! @name IMOD2 - Interrupter Moderation */
#define USB_CORE_IMOD2_IMODI_MASK                (0xFFFFU)
#define USB_CORE_IMOD2_IMODI_SHIFT               (0U)
#define USB_CORE_IMOD2_IMODI(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD2_IMODI_SHIFT)) & USB_CORE_IMOD2_IMODI_MASK)
#define USB_CORE_IMOD2_IMODC_MASK                (0xFFFF0000U)
#define USB_CORE_IMOD2_IMODC_SHIFT               (16U)
#define USB_CORE_IMOD2_IMODC(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD2_IMODC_SHIFT)) & USB_CORE_IMOD2_IMODC_MASK)

/*! @name ERSTSZ2 - Event Ring Segment Table Size */
#define USB_CORE_ERSTSZ2_ERSTS_MASK              (0xFFFFU)
#define USB_CORE_ERSTSZ2_ERSTS_SHIFT             (0U)
#define USB_CORE_ERSTSZ2_ERSTS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTSZ2_ERSTS_SHIFT)) & USB_CORE_ERSTSZ2_ERSTS_MASK)

/*! @name ERSTBA2_LO - Event Ring Segment Table Base Address (LOW) */
#define USB_CORE_ERSTBA2_LO_ERSTBAddr_LO_MASK    (0xFFFFFFC0U)
#define USB_CORE_ERSTBA2_LO_ERSTBAddr_LO_SHIFT   (6U)
#define USB_CORE_ERSTBA2_LO_ERSTBAddr_LO(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA2_LO_ERSTBAddr_LO_SHIFT)) & USB_CORE_ERSTBA2_LO_ERSTBAddr_LO_MASK)

/*! @name ERSTBA02_HI - Event Ring Segment Table Base Address (HIGH) */
#define USB_CORE_ERSTBA02_HI_ERSTBAddr_HI_MASK   (0xFFFFFFFFU)
#define USB_CORE_ERSTBA02_HI_ERSTBAddr_HI_SHIFT  (0U)
#define USB_CORE_ERSTBA02_HI_ERSTBAddr_HI(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA02_HI_ERSTBAddr_HI_SHIFT)) & USB_CORE_ERSTBA02_HI_ERSTBAddr_HI_MASK)

/*! @name ERDP2_LO - Event Ring Dequeue Pointer (LOW) */
#define USB_CORE_ERDP2_LO_DESI_MASK              (0x7U)
#define USB_CORE_ERDP2_LO_DESI_SHIFT             (0U)
#define USB_CORE_ERDP2_LO_DESI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP2_LO_DESI_SHIFT)) & USB_CORE_ERDP2_LO_DESI_MASK)
#define USB_CORE_ERDP2_LO_EHB_MASK               (0x8U)
#define USB_CORE_ERDP2_LO_EHB_SHIFT              (3U)
#define USB_CORE_ERDP2_LO_EHB(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP2_LO_EHB_SHIFT)) & USB_CORE_ERDP2_LO_EHB_MASK)
#define USB_CORE_ERDP2_LO_ERDPtr_MASK            (0xFFFFFFF0U)
#define USB_CORE_ERDP2_LO_ERDPtr_SHIFT           (4U)
#define USB_CORE_ERDP2_LO_ERDPtr(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP2_LO_ERDPtr_SHIFT)) & USB_CORE_ERDP2_LO_ERDPtr_MASK)

/*! @name ERDP2_HI - Event Ring Dequeue Pointer (HIGH) */
#define USB_CORE_ERDP2_HI_ERDPtr_HI_MASK         (0xFFFFFFFFU)
#define USB_CORE_ERDP2_HI_ERDPtr_HI_SHIFT        (0U)
#define USB_CORE_ERDP2_HI_ERDPtr_HI(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP2_HI_ERDPtr_HI_SHIFT)) & USB_CORE_ERDP2_HI_ERDPtr_HI_MASK)

/*! @name IMAN3 - Interrupter Management */
#define USB_CORE_IMAN3_IP_MASK                   (0x1U)
#define USB_CORE_IMAN3_IP_SHIFT                  (0U)
#define USB_CORE_IMAN3_IP(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN3_IP_SHIFT)) & USB_CORE_IMAN3_IP_MASK)
#define USB_CORE_IMAN3_IE_MASK                   (0x2U)
#define USB_CORE_IMAN3_IE_SHIFT                  (1U)
#define USB_CORE_IMAN3_IE(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN3_IE_SHIFT)) & USB_CORE_IMAN3_IE_MASK)

/*! @name IMOD3 - Interrupter Moderation */
#define USB_CORE_IMOD3_IMODI_MASK                (0xFFFFU)
#define USB_CORE_IMOD3_IMODI_SHIFT               (0U)
#define USB_CORE_IMOD3_IMODI(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD3_IMODI_SHIFT)) & USB_CORE_IMOD3_IMODI_MASK)
#define USB_CORE_IMOD3_IMODC_MASK                (0xFFFF0000U)
#define USB_CORE_IMOD3_IMODC_SHIFT               (16U)
#define USB_CORE_IMOD3_IMODC(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD3_IMODC_SHIFT)) & USB_CORE_IMOD3_IMODC_MASK)

/*! @name ERSTSZ3 - Event Ring Segment Table Size */
#define USB_CORE_ERSTSZ3_ERSTS_MASK              (0xFFFFU)
#define USB_CORE_ERSTSZ3_ERSTS_SHIFT             (0U)
#define USB_CORE_ERSTSZ3_ERSTS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTSZ3_ERSTS_SHIFT)) & USB_CORE_ERSTSZ3_ERSTS_MASK)

/*! @name ERSTBA3_LO - Event Ring Segment Table Base Address (LOW) */
#define USB_CORE_ERSTBA3_LO_ERSTBAddr_LO_MASK    (0xFFFFFFC0U)
#define USB_CORE_ERSTBA3_LO_ERSTBAddr_LO_SHIFT   (6U)
#define USB_CORE_ERSTBA3_LO_ERSTBAddr_LO(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA3_LO_ERSTBAddr_LO_SHIFT)) & USB_CORE_ERSTBA3_LO_ERSTBAddr_LO_MASK)

/*! @name ERSTBA03_HI - Event Ring Segment Table Base Address (HIGH) */
#define USB_CORE_ERSTBA03_HI_ERSTBAddr_HI_MASK   (0xFFFFFFFFU)
#define USB_CORE_ERSTBA03_HI_ERSTBAddr_HI_SHIFT  (0U)
#define USB_CORE_ERSTBA03_HI_ERSTBAddr_HI(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA03_HI_ERSTBAddr_HI_SHIFT)) & USB_CORE_ERSTBA03_HI_ERSTBAddr_HI_MASK)

/*! @name ERDP3_LO - Event Ring Dequeue Pointer (LOW) */
#define USB_CORE_ERDP3_LO_DESI_MASK              (0x7U)
#define USB_CORE_ERDP3_LO_DESI_SHIFT             (0U)
#define USB_CORE_ERDP3_LO_DESI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP3_LO_DESI_SHIFT)) & USB_CORE_ERDP3_LO_DESI_MASK)
#define USB_CORE_ERDP3_LO_EHB_MASK               (0x8U)
#define USB_CORE_ERDP3_LO_EHB_SHIFT              (3U)
#define USB_CORE_ERDP3_LO_EHB(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP3_LO_EHB_SHIFT)) & USB_CORE_ERDP3_LO_EHB_MASK)
#define USB_CORE_ERDP3_LO_ERDPtr_MASK            (0xFFFFFFF0U)
#define USB_CORE_ERDP3_LO_ERDPtr_SHIFT           (4U)
#define USB_CORE_ERDP3_LO_ERDPtr(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP3_LO_ERDPtr_SHIFT)) & USB_CORE_ERDP3_LO_ERDPtr_MASK)

/*! @name ERDP3_HI - Event Ring Dequeue Pointer (HIGH) */
#define USB_CORE_ERDP3_HI_ERDPtr_HI_MASK         (0xFFFFFFFFU)
#define USB_CORE_ERDP3_HI_ERDPtr_HI_SHIFT        (0U)
#define USB_CORE_ERDP3_HI_ERDPtr_HI(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP3_HI_ERDPtr_HI_SHIFT)) & USB_CORE_ERDP3_HI_ERDPtr_HI_MASK)

/*! @name IMAN4 - Interrupter Management */
#define USB_CORE_IMAN4_IP_MASK                   (0x1U)
#define USB_CORE_IMAN4_IP_SHIFT                  (0U)
#define USB_CORE_IMAN4_IP(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN4_IP_SHIFT)) & USB_CORE_IMAN4_IP_MASK)
#define USB_CORE_IMAN4_IE_MASK                   (0x2U)
#define USB_CORE_IMAN4_IE_SHIFT                  (1U)
#define USB_CORE_IMAN4_IE(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN4_IE_SHIFT)) & USB_CORE_IMAN4_IE_MASK)

/*! @name IMOD4 - Interrupter Moderation */
#define USB_CORE_IMOD4_IMODI_MASK                (0xFFFFU)
#define USB_CORE_IMOD4_IMODI_SHIFT               (0U)
#define USB_CORE_IMOD4_IMODI(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD4_IMODI_SHIFT)) & USB_CORE_IMOD4_IMODI_MASK)
#define USB_CORE_IMOD4_IMODC_MASK                (0xFFFF0000U)
#define USB_CORE_IMOD4_IMODC_SHIFT               (16U)
#define USB_CORE_IMOD4_IMODC(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD4_IMODC_SHIFT)) & USB_CORE_IMOD4_IMODC_MASK)

/*! @name ERSTSZ4 - Event Ring Segment Table Size */
#define USB_CORE_ERSTSZ4_ERSTS_MASK              (0xFFFFU)
#define USB_CORE_ERSTSZ4_ERSTS_SHIFT             (0U)
#define USB_CORE_ERSTSZ4_ERSTS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTSZ4_ERSTS_SHIFT)) & USB_CORE_ERSTSZ4_ERSTS_MASK)

/*! @name ERSTBA4_LO - Event Ring Segment Table Base Address (LOW) */
#define USB_CORE_ERSTBA4_LO_ERSTBAddr_LO_MASK    (0xFFFFFFC0U)
#define USB_CORE_ERSTBA4_LO_ERSTBAddr_LO_SHIFT   (6U)
#define USB_CORE_ERSTBA4_LO_ERSTBAddr_LO(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA4_LO_ERSTBAddr_LO_SHIFT)) & USB_CORE_ERSTBA4_LO_ERSTBAddr_LO_MASK)

/*! @name ERSTBA04_HI - Event Ring Segment Table Base Address (HIGH) */
#define USB_CORE_ERSTBA04_HI_ERSTBAddr_HI_MASK   (0xFFFFFFFFU)
#define USB_CORE_ERSTBA04_HI_ERSTBAddr_HI_SHIFT  (0U)
#define USB_CORE_ERSTBA04_HI_ERSTBAddr_HI(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA04_HI_ERSTBAddr_HI_SHIFT)) & USB_CORE_ERSTBA04_HI_ERSTBAddr_HI_MASK)

/*! @name ERDP4_LO - Event Ring Dequeue Pointer (LOW) */
#define USB_CORE_ERDP4_LO_DESI_MASK              (0x7U)
#define USB_CORE_ERDP4_LO_DESI_SHIFT             (0U)
#define USB_CORE_ERDP4_LO_DESI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP4_LO_DESI_SHIFT)) & USB_CORE_ERDP4_LO_DESI_MASK)
#define USB_CORE_ERDP4_LO_EHB_MASK               (0x8U)
#define USB_CORE_ERDP4_LO_EHB_SHIFT              (3U)
#define USB_CORE_ERDP4_LO_EHB(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP4_LO_EHB_SHIFT)) & USB_CORE_ERDP4_LO_EHB_MASK)
#define USB_CORE_ERDP4_LO_ERDPtr_MASK            (0xFFFFFFF0U)
#define USB_CORE_ERDP4_LO_ERDPtr_SHIFT           (4U)
#define USB_CORE_ERDP4_LO_ERDPtr(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP4_LO_ERDPtr_SHIFT)) & USB_CORE_ERDP4_LO_ERDPtr_MASK)

/*! @name ERDP4_HI - Event Ring Dequeue Pointer (HIGH) */
#define USB_CORE_ERDP4_HI_ERDPtr_HI_MASK         (0xFFFFFFFFU)
#define USB_CORE_ERDP4_HI_ERDPtr_HI_SHIFT        (0U)
#define USB_CORE_ERDP4_HI_ERDPtr_HI(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP4_HI_ERDPtr_HI_SHIFT)) & USB_CORE_ERDP4_HI_ERDPtr_HI_MASK)

/*! @name IMAN5 - Interrupter Management */
#define USB_CORE_IMAN5_IP_MASK                   (0x1U)
#define USB_CORE_IMAN5_IP_SHIFT                  (0U)
#define USB_CORE_IMAN5_IP(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN5_IP_SHIFT)) & USB_CORE_IMAN5_IP_MASK)
#define USB_CORE_IMAN5_IE_MASK                   (0x2U)
#define USB_CORE_IMAN5_IE_SHIFT                  (1U)
#define USB_CORE_IMAN5_IE(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN5_IE_SHIFT)) & USB_CORE_IMAN5_IE_MASK)

/*! @name IMOD5 - Interrupter Moderation */
#define USB_CORE_IMOD5_IMODI_MASK                (0xFFFFU)
#define USB_CORE_IMOD5_IMODI_SHIFT               (0U)
#define USB_CORE_IMOD5_IMODI(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD5_IMODI_SHIFT)) & USB_CORE_IMOD5_IMODI_MASK)
#define USB_CORE_IMOD5_IMODC_MASK                (0xFFFF0000U)
#define USB_CORE_IMOD5_IMODC_SHIFT               (16U)
#define USB_CORE_IMOD5_IMODC(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD5_IMODC_SHIFT)) & USB_CORE_IMOD5_IMODC_MASK)

/*! @name ERSTSZ5 - Event Ring Segment Table Size */
#define USB_CORE_ERSTSZ5_ERSTS_MASK              (0xFFFFU)
#define USB_CORE_ERSTSZ5_ERSTS_SHIFT             (0U)
#define USB_CORE_ERSTSZ5_ERSTS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTSZ5_ERSTS_SHIFT)) & USB_CORE_ERSTSZ5_ERSTS_MASK)

/*! @name ERSTBA5_LO - Event Ring Segment Table Base Address (LOW) */
#define USB_CORE_ERSTBA5_LO_ERSTBAddr_LO_MASK    (0xFFFFFFC0U)
#define USB_CORE_ERSTBA5_LO_ERSTBAddr_LO_SHIFT   (6U)
#define USB_CORE_ERSTBA5_LO_ERSTBAddr_LO(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA5_LO_ERSTBAddr_LO_SHIFT)) & USB_CORE_ERSTBA5_LO_ERSTBAddr_LO_MASK)

/*! @name ERSTBA05_HI - Event Ring Segment Table Base Address (HIGH) */
#define USB_CORE_ERSTBA05_HI_ERSTBAddr_HI_MASK   (0xFFFFFFFFU)
#define USB_CORE_ERSTBA05_HI_ERSTBAddr_HI_SHIFT  (0U)
#define USB_CORE_ERSTBA05_HI_ERSTBAddr_HI(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA05_HI_ERSTBAddr_HI_SHIFT)) & USB_CORE_ERSTBA05_HI_ERSTBAddr_HI_MASK)

/*! @name ERDP5_LO - Event Ring Dequeue Pointer (LOW) */
#define USB_CORE_ERDP5_LO_DESI_MASK              (0x7U)
#define USB_CORE_ERDP5_LO_DESI_SHIFT             (0U)
#define USB_CORE_ERDP5_LO_DESI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP5_LO_DESI_SHIFT)) & USB_CORE_ERDP5_LO_DESI_MASK)
#define USB_CORE_ERDP5_LO_EHB_MASK               (0x8U)
#define USB_CORE_ERDP5_LO_EHB_SHIFT              (3U)
#define USB_CORE_ERDP5_LO_EHB(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP5_LO_EHB_SHIFT)) & USB_CORE_ERDP5_LO_EHB_MASK)
#define USB_CORE_ERDP5_LO_ERDPtr_MASK            (0xFFFFFFF0U)
#define USB_CORE_ERDP5_LO_ERDPtr_SHIFT           (4U)
#define USB_CORE_ERDP5_LO_ERDPtr(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP5_LO_ERDPtr_SHIFT)) & USB_CORE_ERDP5_LO_ERDPtr_MASK)

/*! @name ERDP5_HI - Event Ring Dequeue Pointer (HIGH) */
#define USB_CORE_ERDP5_HI_ERDPtr_HI_MASK         (0xFFFFFFFFU)
#define USB_CORE_ERDP5_HI_ERDPtr_HI_SHIFT        (0U)
#define USB_CORE_ERDP5_HI_ERDPtr_HI(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP5_HI_ERDPtr_HI_SHIFT)) & USB_CORE_ERDP5_HI_ERDPtr_HI_MASK)

/*! @name IMAN6 - Interrupter Management */
#define USB_CORE_IMAN6_IP_MASK                   (0x1U)
#define USB_CORE_IMAN6_IP_SHIFT                  (0U)
#define USB_CORE_IMAN6_IP(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN6_IP_SHIFT)) & USB_CORE_IMAN6_IP_MASK)
#define USB_CORE_IMAN6_IE_MASK                   (0x2U)
#define USB_CORE_IMAN6_IE_SHIFT                  (1U)
#define USB_CORE_IMAN6_IE(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN6_IE_SHIFT)) & USB_CORE_IMAN6_IE_MASK)

/*! @name IMOD6 - Interrupter Moderation */
#define USB_CORE_IMOD6_IMODI_MASK                (0xFFFFU)
#define USB_CORE_IMOD6_IMODI_SHIFT               (0U)
#define USB_CORE_IMOD6_IMODI(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD6_IMODI_SHIFT)) & USB_CORE_IMOD6_IMODI_MASK)
#define USB_CORE_IMOD6_IMODC_MASK                (0xFFFF0000U)
#define USB_CORE_IMOD6_IMODC_SHIFT               (16U)
#define USB_CORE_IMOD6_IMODC(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD6_IMODC_SHIFT)) & USB_CORE_IMOD6_IMODC_MASK)

/*! @name ERSTSZ6 - Event Ring Segment Table Size */
#define USB_CORE_ERSTSZ6_ERSTS_MASK              (0xFFFFU)
#define USB_CORE_ERSTSZ6_ERSTS_SHIFT             (0U)
#define USB_CORE_ERSTSZ6_ERSTS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTSZ6_ERSTS_SHIFT)) & USB_CORE_ERSTSZ6_ERSTS_MASK)

/*! @name ERSTBA6_LO - Event Ring Segment Table Base Address (LOW) */
#define USB_CORE_ERSTBA6_LO_ERSTBAddr_LO_MASK    (0xFFFFFFC0U)
#define USB_CORE_ERSTBA6_LO_ERSTBAddr_LO_SHIFT   (6U)
#define USB_CORE_ERSTBA6_LO_ERSTBAddr_LO(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA6_LO_ERSTBAddr_LO_SHIFT)) & USB_CORE_ERSTBA6_LO_ERSTBAddr_LO_MASK)

/*! @name ERSTBA06_HI - Event Ring Segment Table Base Address (HIGH) */
#define USB_CORE_ERSTBA06_HI_ERSTBAddr_HI_MASK   (0xFFFFFFFFU)
#define USB_CORE_ERSTBA06_HI_ERSTBAddr_HI_SHIFT  (0U)
#define USB_CORE_ERSTBA06_HI_ERSTBAddr_HI(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA06_HI_ERSTBAddr_HI_SHIFT)) & USB_CORE_ERSTBA06_HI_ERSTBAddr_HI_MASK)

/*! @name ERDP6_LO - Event Ring Dequeue Pointer (LOW) */
#define USB_CORE_ERDP6_LO_DESI_MASK              (0x7U)
#define USB_CORE_ERDP6_LO_DESI_SHIFT             (0U)
#define USB_CORE_ERDP6_LO_DESI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP6_LO_DESI_SHIFT)) & USB_CORE_ERDP6_LO_DESI_MASK)
#define USB_CORE_ERDP6_LO_EHB_MASK               (0x8U)
#define USB_CORE_ERDP6_LO_EHB_SHIFT              (3U)
#define USB_CORE_ERDP6_LO_EHB(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP6_LO_EHB_SHIFT)) & USB_CORE_ERDP6_LO_EHB_MASK)
#define USB_CORE_ERDP6_LO_ERDPtr_MASK            (0xFFFFFFF0U)
#define USB_CORE_ERDP6_LO_ERDPtr_SHIFT           (4U)
#define USB_CORE_ERDP6_LO_ERDPtr(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP6_LO_ERDPtr_SHIFT)) & USB_CORE_ERDP6_LO_ERDPtr_MASK)

/*! @name ERDP6_HI - Event Ring Dequeue Pointer (HIGH) */
#define USB_CORE_ERDP6_HI_ERDPtr_HI_MASK         (0xFFFFFFFFU)
#define USB_CORE_ERDP6_HI_ERDPtr_HI_SHIFT        (0U)
#define USB_CORE_ERDP6_HI_ERDPtr_HI(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP6_HI_ERDPtr_HI_SHIFT)) & USB_CORE_ERDP6_HI_ERDPtr_HI_MASK)

/*! @name IMAN7 - Interrupter Management */
#define USB_CORE_IMAN7_IP_MASK                   (0x1U)
#define USB_CORE_IMAN7_IP_SHIFT                  (0U)
#define USB_CORE_IMAN7_IP(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN7_IP_SHIFT)) & USB_CORE_IMAN7_IP_MASK)
#define USB_CORE_IMAN7_IE_MASK                   (0x2U)
#define USB_CORE_IMAN7_IE_SHIFT                  (1U)
#define USB_CORE_IMAN7_IE(x)                     (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMAN7_IE_SHIFT)) & USB_CORE_IMAN7_IE_MASK)

/*! @name IMOD7 - Interrupter Moderation */
#define USB_CORE_IMOD7_IMODI_MASK                (0xFFFFU)
#define USB_CORE_IMOD7_IMODI_SHIFT               (0U)
#define USB_CORE_IMOD7_IMODI(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD7_IMODI_SHIFT)) & USB_CORE_IMOD7_IMODI_MASK)
#define USB_CORE_IMOD7_IMODC_MASK                (0xFFFF0000U)
#define USB_CORE_IMOD7_IMODC_SHIFT               (16U)
#define USB_CORE_IMOD7_IMODC(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_IMOD7_IMODC_SHIFT)) & USB_CORE_IMOD7_IMODC_MASK)

/*! @name ERSTSZ7 - Event Ring Segment Table Size */
#define USB_CORE_ERSTSZ7_ERSTS_MASK              (0xFFFFU)
#define USB_CORE_ERSTSZ7_ERSTS_SHIFT             (0U)
#define USB_CORE_ERSTSZ7_ERSTS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTSZ7_ERSTS_SHIFT)) & USB_CORE_ERSTSZ7_ERSTS_MASK)

/*! @name ERSTBA7_LO - Event Ring Segment Table Base Address (LOW) */
#define USB_CORE_ERSTBA7_LO_ERSTBAddr_LO_MASK    (0xFFFFFFC0U)
#define USB_CORE_ERSTBA7_LO_ERSTBAddr_LO_SHIFT   (6U)
#define USB_CORE_ERSTBA7_LO_ERSTBAddr_LO(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA7_LO_ERSTBAddr_LO_SHIFT)) & USB_CORE_ERSTBA7_LO_ERSTBAddr_LO_MASK)

/*! @name ERSTBA07_HI - Event Ring Segment Table Base Address (HIGH) */
#define USB_CORE_ERSTBA07_HI_ERSTBAddr_HI_MASK   (0xFFFFFFFFU)
#define USB_CORE_ERSTBA07_HI_ERSTBAddr_HI_SHIFT  (0U)
#define USB_CORE_ERSTBA07_HI_ERSTBAddr_HI(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERSTBA07_HI_ERSTBAddr_HI_SHIFT)) & USB_CORE_ERSTBA07_HI_ERSTBAddr_HI_MASK)

/*! @name ERDP7_LO - Event Ring Dequeue Pointer (LOW) */
#define USB_CORE_ERDP7_LO_DESI_MASK              (0x7U)
#define USB_CORE_ERDP7_LO_DESI_SHIFT             (0U)
#define USB_CORE_ERDP7_LO_DESI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP7_LO_DESI_SHIFT)) & USB_CORE_ERDP7_LO_DESI_MASK)
#define USB_CORE_ERDP7_LO_EHB_MASK               (0x8U)
#define USB_CORE_ERDP7_LO_EHB_SHIFT              (3U)
#define USB_CORE_ERDP7_LO_EHB(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP7_LO_EHB_SHIFT)) & USB_CORE_ERDP7_LO_EHB_MASK)
#define USB_CORE_ERDP7_LO_ERDPtr_MASK            (0xFFFFFFF0U)
#define USB_CORE_ERDP7_LO_ERDPtr_SHIFT           (4U)
#define USB_CORE_ERDP7_LO_ERDPtr(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP7_LO_ERDPtr_SHIFT)) & USB_CORE_ERDP7_LO_ERDPtr_MASK)

/*! @name ERDP7_HI - Event Ring Dequeue Pointer (HIGH) */
#define USB_CORE_ERDP7_HI_ERDPtr_HI_MASK         (0xFFFFFFFFU)
#define USB_CORE_ERDP7_HI_ERDPtr_HI_SHIFT        (0U)
#define USB_CORE_ERDP7_HI_ERDPtr_HI(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_ERDP7_HI_ERDPtr_HI_SHIFT)) & USB_CORE_ERDP7_HI_ERDPtr_HI_MASK)

/*! @name DB0 - Host Controller Doorbell */
#define USB_CORE_DB0_DB_target_MASK              (0xFFU)
#define USB_CORE_DB0_DB_target_SHIFT             (0U)
#define USB_CORE_DB0_DB_target(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB0_DB_target_SHIFT)) & USB_CORE_DB0_DB_target_MASK)
#define USB_CORE_DB0_DB_stream_ID_MASK           (0xFFFF0000U)
#define USB_CORE_DB0_DB_stream_ID_SHIFT          (16U)
#define USB_CORE_DB0_DB_stream_ID(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB0_DB_stream_ID_SHIFT)) & USB_CORE_DB0_DB_stream_ID_MASK)

/*! @name DB1 - Doorbell Array */
#define USB_CORE_DB1_DB_target_MASK              (0xFFU)
#define USB_CORE_DB1_DB_target_SHIFT             (0U)
#define USB_CORE_DB1_DB_target(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB1_DB_target_SHIFT)) & USB_CORE_DB1_DB_target_MASK)
#define USB_CORE_DB1_DB_stream_ID_MASK           (0xFFFF0000U)
#define USB_CORE_DB1_DB_stream_ID_SHIFT          (16U)
#define USB_CORE_DB1_DB_stream_ID(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB1_DB_stream_ID_SHIFT)) & USB_CORE_DB1_DB_stream_ID_MASK)

/*! @name DB2 - Doorbell Array */
#define USB_CORE_DB2_DB_target_MASK              (0xFFU)
#define USB_CORE_DB2_DB_target_SHIFT             (0U)
#define USB_CORE_DB2_DB_target(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB2_DB_target_SHIFT)) & USB_CORE_DB2_DB_target_MASK)
#define USB_CORE_DB2_DB_stream_ID_MASK           (0xFFFF0000U)
#define USB_CORE_DB2_DB_stream_ID_SHIFT          (16U)
#define USB_CORE_DB2_DB_stream_ID(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB2_DB_stream_ID_SHIFT)) & USB_CORE_DB2_DB_stream_ID_MASK)

/*! @name DB3 - Doorbell Array */
#define USB_CORE_DB3_DB_target_MASK              (0xFFU)
#define USB_CORE_DB3_DB_target_SHIFT             (0U)
#define USB_CORE_DB3_DB_target(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB3_DB_target_SHIFT)) & USB_CORE_DB3_DB_target_MASK)
#define USB_CORE_DB3_DB_stream_ID_MASK           (0xFFFF0000U)
#define USB_CORE_DB3_DB_stream_ID_SHIFT          (16U)
#define USB_CORE_DB3_DB_stream_ID(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB3_DB_stream_ID_SHIFT)) & USB_CORE_DB3_DB_stream_ID_MASK)

/*! @name DB4 - Doorbell Array */
#define USB_CORE_DB4_DB_target_MASK              (0xFFU)
#define USB_CORE_DB4_DB_target_SHIFT             (0U)
#define USB_CORE_DB4_DB_target(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB4_DB_target_SHIFT)) & USB_CORE_DB4_DB_target_MASK)
#define USB_CORE_DB4_DB_stream_ID_MASK           (0xFFFF0000U)
#define USB_CORE_DB4_DB_stream_ID_SHIFT          (16U)
#define USB_CORE_DB4_DB_stream_ID(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB4_DB_stream_ID_SHIFT)) & USB_CORE_DB4_DB_stream_ID_MASK)

/*! @name DB5 - Doorbell Array */
#define USB_CORE_DB5_DB_target_MASK              (0xFFU)
#define USB_CORE_DB5_DB_target_SHIFT             (0U)
#define USB_CORE_DB5_DB_target(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB5_DB_target_SHIFT)) & USB_CORE_DB5_DB_target_MASK)
#define USB_CORE_DB5_DB_stream_ID_MASK           (0xFFFF0000U)
#define USB_CORE_DB5_DB_stream_ID_SHIFT          (16U)
#define USB_CORE_DB5_DB_stream_ID(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB5_DB_stream_ID_SHIFT)) & USB_CORE_DB5_DB_stream_ID_MASK)

/*! @name DB6 - Doorbell Array */
#define USB_CORE_DB6_DB_target_MASK              (0xFFU)
#define USB_CORE_DB6_DB_target_SHIFT             (0U)
#define USB_CORE_DB6_DB_target(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB6_DB_target_SHIFT)) & USB_CORE_DB6_DB_target_MASK)
#define USB_CORE_DB6_DB_stream_ID_MASK           (0xFFFF0000U)
#define USB_CORE_DB6_DB_stream_ID_SHIFT          (16U)
#define USB_CORE_DB6_DB_stream_ID(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB6_DB_stream_ID_SHIFT)) & USB_CORE_DB6_DB_stream_ID_MASK)

/*! @name DB7 - Doorbell Array */
#define USB_CORE_DB7_DB_target_MASK              (0xFFU)
#define USB_CORE_DB7_DB_target_SHIFT             (0U)
#define USB_CORE_DB7_DB_target(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB7_DB_target_SHIFT)) & USB_CORE_DB7_DB_target_MASK)
#define USB_CORE_DB7_DB_stream_ID_MASK           (0xFFFF0000U)
#define USB_CORE_DB7_DB_stream_ID_SHIFT          (16U)
#define USB_CORE_DB7_DB_stream_ID(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB7_DB_stream_ID_SHIFT)) & USB_CORE_DB7_DB_stream_ID_MASK)

/*! @name DB8 - Doorbell Array */
#define USB_CORE_DB8_DB_target_MASK              (0xFFU)
#define USB_CORE_DB8_DB_target_SHIFT             (0U)
#define USB_CORE_DB8_DB_target(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB8_DB_target_SHIFT)) & USB_CORE_DB8_DB_target_MASK)
#define USB_CORE_DB8_DB_stream_ID_MASK           (0xFFFF0000U)
#define USB_CORE_DB8_DB_stream_ID_SHIFT          (16U)
#define USB_CORE_DB8_DB_stream_ID(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB8_DB_stream_ID_SHIFT)) & USB_CORE_DB8_DB_stream_ID_MASK)

/*! @name DB9 - Doorbell Array */
#define USB_CORE_DB9_DB_target_MASK              (0xFFU)
#define USB_CORE_DB9_DB_target_SHIFT             (0U)
#define USB_CORE_DB9_DB_target(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB9_DB_target_SHIFT)) & USB_CORE_DB9_DB_target_MASK)
#define USB_CORE_DB9_DB_stream_ID_MASK           (0xFFFF0000U)
#define USB_CORE_DB9_DB_stream_ID_SHIFT          (16U)
#define USB_CORE_DB9_DB_stream_ID(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB9_DB_stream_ID_SHIFT)) & USB_CORE_DB9_DB_stream_ID_MASK)

/*! @name DB10 - Doorbell Array */
#define USB_CORE_DB10_DB_target_MASK             (0xFFU)
#define USB_CORE_DB10_DB_target_SHIFT            (0U)
#define USB_CORE_DB10_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB10_DB_target_SHIFT)) & USB_CORE_DB10_DB_target_MASK)
#define USB_CORE_DB10_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB10_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB10_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB10_DB_stream_ID_SHIFT)) & USB_CORE_DB10_DB_stream_ID_MASK)

/*! @name DB11 - Doorbell Array */
#define USB_CORE_DB11_DB_target_MASK             (0xFFU)
#define USB_CORE_DB11_DB_target_SHIFT            (0U)
#define USB_CORE_DB11_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB11_DB_target_SHIFT)) & USB_CORE_DB11_DB_target_MASK)
#define USB_CORE_DB11_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB11_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB11_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB11_DB_stream_ID_SHIFT)) & USB_CORE_DB11_DB_stream_ID_MASK)

/*! @name DB12 - Doorbell Array */
#define USB_CORE_DB12_DB_target_MASK             (0xFFU)
#define USB_CORE_DB12_DB_target_SHIFT            (0U)
#define USB_CORE_DB12_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB12_DB_target_SHIFT)) & USB_CORE_DB12_DB_target_MASK)
#define USB_CORE_DB12_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB12_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB12_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB12_DB_stream_ID_SHIFT)) & USB_CORE_DB12_DB_stream_ID_MASK)

/*! @name DB13 - Doorbell Array */
#define USB_CORE_DB13_DB_target_MASK             (0xFFU)
#define USB_CORE_DB13_DB_target_SHIFT            (0U)
#define USB_CORE_DB13_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB13_DB_target_SHIFT)) & USB_CORE_DB13_DB_target_MASK)
#define USB_CORE_DB13_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB13_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB13_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB13_DB_stream_ID_SHIFT)) & USB_CORE_DB13_DB_stream_ID_MASK)

/*! @name DB14 - Doorbell Array */
#define USB_CORE_DB14_DB_target_MASK             (0xFFU)
#define USB_CORE_DB14_DB_target_SHIFT            (0U)
#define USB_CORE_DB14_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB14_DB_target_SHIFT)) & USB_CORE_DB14_DB_target_MASK)
#define USB_CORE_DB14_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB14_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB14_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB14_DB_stream_ID_SHIFT)) & USB_CORE_DB14_DB_stream_ID_MASK)

/*! @name DB15 - Doorbell Array */
#define USB_CORE_DB15_DB_target_MASK             (0xFFU)
#define USB_CORE_DB15_DB_target_SHIFT            (0U)
#define USB_CORE_DB15_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB15_DB_target_SHIFT)) & USB_CORE_DB15_DB_target_MASK)
#define USB_CORE_DB15_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB15_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB15_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB15_DB_stream_ID_SHIFT)) & USB_CORE_DB15_DB_stream_ID_MASK)

/*! @name DB16 - Doorbell Array */
#define USB_CORE_DB16_DB_target_MASK             (0xFFU)
#define USB_CORE_DB16_DB_target_SHIFT            (0U)
#define USB_CORE_DB16_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB16_DB_target_SHIFT)) & USB_CORE_DB16_DB_target_MASK)
#define USB_CORE_DB16_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB16_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB16_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB16_DB_stream_ID_SHIFT)) & USB_CORE_DB16_DB_stream_ID_MASK)

/*! @name DB17 - Doorbell Array */
#define USB_CORE_DB17_DB_target_MASK             (0xFFU)
#define USB_CORE_DB17_DB_target_SHIFT            (0U)
#define USB_CORE_DB17_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB17_DB_target_SHIFT)) & USB_CORE_DB17_DB_target_MASK)
#define USB_CORE_DB17_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB17_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB17_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB17_DB_stream_ID_SHIFT)) & USB_CORE_DB17_DB_stream_ID_MASK)

/*! @name DB18 - Doorbell Array */
#define USB_CORE_DB18_DB_target_MASK             (0xFFU)
#define USB_CORE_DB18_DB_target_SHIFT            (0U)
#define USB_CORE_DB18_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB18_DB_target_SHIFT)) & USB_CORE_DB18_DB_target_MASK)
#define USB_CORE_DB18_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB18_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB18_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB18_DB_stream_ID_SHIFT)) & USB_CORE_DB18_DB_stream_ID_MASK)

/*! @name DB19 - Doorbell Array */
#define USB_CORE_DB19_DB_target_MASK             (0xFFU)
#define USB_CORE_DB19_DB_target_SHIFT            (0U)
#define USB_CORE_DB19_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB19_DB_target_SHIFT)) & USB_CORE_DB19_DB_target_MASK)
#define USB_CORE_DB19_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB19_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB19_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB19_DB_stream_ID_SHIFT)) & USB_CORE_DB19_DB_stream_ID_MASK)

/*! @name DB20 - Doorbell Array */
#define USB_CORE_DB20_DB_target_MASK             (0xFFU)
#define USB_CORE_DB20_DB_target_SHIFT            (0U)
#define USB_CORE_DB20_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB20_DB_target_SHIFT)) & USB_CORE_DB20_DB_target_MASK)
#define USB_CORE_DB20_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB20_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB20_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB20_DB_stream_ID_SHIFT)) & USB_CORE_DB20_DB_stream_ID_MASK)

/*! @name DB21 - Doorbell Array */
#define USB_CORE_DB21_DB_target_MASK             (0xFFU)
#define USB_CORE_DB21_DB_target_SHIFT            (0U)
#define USB_CORE_DB21_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB21_DB_target_SHIFT)) & USB_CORE_DB21_DB_target_MASK)
#define USB_CORE_DB21_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB21_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB21_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB21_DB_stream_ID_SHIFT)) & USB_CORE_DB21_DB_stream_ID_MASK)

/*! @name DB22 - Doorbell Array */
#define USB_CORE_DB22_DB_target_MASK             (0xFFU)
#define USB_CORE_DB22_DB_target_SHIFT            (0U)
#define USB_CORE_DB22_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB22_DB_target_SHIFT)) & USB_CORE_DB22_DB_target_MASK)
#define USB_CORE_DB22_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB22_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB22_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB22_DB_stream_ID_SHIFT)) & USB_CORE_DB22_DB_stream_ID_MASK)

/*! @name DB23 - Doorbell Array */
#define USB_CORE_DB23_DB_target_MASK             (0xFFU)
#define USB_CORE_DB23_DB_target_SHIFT            (0U)
#define USB_CORE_DB23_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB23_DB_target_SHIFT)) & USB_CORE_DB23_DB_target_MASK)
#define USB_CORE_DB23_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB23_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB23_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB23_DB_stream_ID_SHIFT)) & USB_CORE_DB23_DB_stream_ID_MASK)

/*! @name DB24 - Doorbell Array */
#define USB_CORE_DB24_DB_target_MASK             (0xFFU)
#define USB_CORE_DB24_DB_target_SHIFT            (0U)
#define USB_CORE_DB24_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB24_DB_target_SHIFT)) & USB_CORE_DB24_DB_target_MASK)
#define USB_CORE_DB24_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB24_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB24_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB24_DB_stream_ID_SHIFT)) & USB_CORE_DB24_DB_stream_ID_MASK)

/*! @name DB25 - Doorbell Array */
#define USB_CORE_DB25_DB_target_MASK             (0xFFU)
#define USB_CORE_DB25_DB_target_SHIFT            (0U)
#define USB_CORE_DB25_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB25_DB_target_SHIFT)) & USB_CORE_DB25_DB_target_MASK)
#define USB_CORE_DB25_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB25_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB25_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB25_DB_stream_ID_SHIFT)) & USB_CORE_DB25_DB_stream_ID_MASK)

/*! @name DB26 - Doorbell Array */
#define USB_CORE_DB26_DB_target_MASK             (0xFFU)
#define USB_CORE_DB26_DB_target_SHIFT            (0U)
#define USB_CORE_DB26_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB26_DB_target_SHIFT)) & USB_CORE_DB26_DB_target_MASK)
#define USB_CORE_DB26_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB26_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB26_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB26_DB_stream_ID_SHIFT)) & USB_CORE_DB26_DB_stream_ID_MASK)

/*! @name DB27 - Doorbell Array */
#define USB_CORE_DB27_DB_target_MASK             (0xFFU)
#define USB_CORE_DB27_DB_target_SHIFT            (0U)
#define USB_CORE_DB27_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB27_DB_target_SHIFT)) & USB_CORE_DB27_DB_target_MASK)
#define USB_CORE_DB27_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB27_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB27_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB27_DB_stream_ID_SHIFT)) & USB_CORE_DB27_DB_stream_ID_MASK)

/*! @name DB28 - Doorbell Array */
#define USB_CORE_DB28_DB_target_MASK             (0xFFU)
#define USB_CORE_DB28_DB_target_SHIFT            (0U)
#define USB_CORE_DB28_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB28_DB_target_SHIFT)) & USB_CORE_DB28_DB_target_MASK)
#define USB_CORE_DB28_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB28_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB28_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB28_DB_stream_ID_SHIFT)) & USB_CORE_DB28_DB_stream_ID_MASK)

/*! @name DB29 - Doorbell Array */
#define USB_CORE_DB29_DB_target_MASK             (0xFFU)
#define USB_CORE_DB29_DB_target_SHIFT            (0U)
#define USB_CORE_DB29_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB29_DB_target_SHIFT)) & USB_CORE_DB29_DB_target_MASK)
#define USB_CORE_DB29_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB29_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB29_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB29_DB_stream_ID_SHIFT)) & USB_CORE_DB29_DB_stream_ID_MASK)

/*! @name DB30 - Doorbell Array */
#define USB_CORE_DB30_DB_target_MASK             (0xFFU)
#define USB_CORE_DB30_DB_target_SHIFT            (0U)
#define USB_CORE_DB30_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB30_DB_target_SHIFT)) & USB_CORE_DB30_DB_target_MASK)
#define USB_CORE_DB30_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB30_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB30_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB30_DB_stream_ID_SHIFT)) & USB_CORE_DB30_DB_stream_ID_MASK)

/*! @name DB31 - Doorbell Array */
#define USB_CORE_DB31_DB_target_MASK             (0xFFU)
#define USB_CORE_DB31_DB_target_SHIFT            (0U)
#define USB_CORE_DB31_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB31_DB_target_SHIFT)) & USB_CORE_DB31_DB_target_MASK)
#define USB_CORE_DB31_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB31_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB31_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB31_DB_stream_ID_SHIFT)) & USB_CORE_DB31_DB_stream_ID_MASK)

/*! @name DB32 - Doorbell Array */
#define USB_CORE_DB32_DB_target_MASK             (0xFFU)
#define USB_CORE_DB32_DB_target_SHIFT            (0U)
#define USB_CORE_DB32_DB_target(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB32_DB_target_SHIFT)) & USB_CORE_DB32_DB_target_MASK)
#define USB_CORE_DB32_DB_stream_ID_MASK          (0xFFFF0000U)
#define USB_CORE_DB32_DB_stream_ID_SHIFT         (16U)
#define USB_CORE_DB32_DB_stream_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DB32_DB_stream_ID_SHIFT)) & USB_CORE_DB32_DB_stream_ID_MASK)

/*! @name XECP_PORT_CAP_REG - USB3 Extended capability */
#define USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAP_ID_MASK (0xFFU)
#define USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAP_ID_SHIFT (0U)
#define USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAP_ID(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAP_ID_SHIFT)) & USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAP_ID_MASK)
#define USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAPABILITY_DW_MASK (0xFF00U)
#define USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAPABILITY_DW_SHIFT (8U)
#define USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAPABILITY_DW(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAPABILITY_DW_SHIFT)) & USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAPABILITY_DW_MASK)
#define USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAP_REV_MASK (0xFF0000U)
#define USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAP_REV_SHIFT (16U)
#define USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAP_REV(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAP_REV_SHIFT)) & USB_CORE_XECP_PORT_CAP_REG_XHCI_PORT_CAP_REV_MASK)
#define USB_CORE_XECP_PORT_CAP_REG_LPM_2_STB_SWITCH_CAPABLE_MASK (0x1000000U)
#define USB_CORE_XECP_PORT_CAP_REG_LPM_2_STB_SWITCH_CAPABLE_SHIFT (24U)
#define USB_CORE_XECP_PORT_CAP_REG_LPM_2_STB_SWITCH_CAPABLE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_CAP_REG_LPM_2_STB_SWITCH_CAPABLE_SHIFT)) & USB_CORE_XECP_PORT_CAP_REG_LPM_2_STB_SWITCH_CAPABLE_MASK)
#define USB_CORE_XECP_PORT_CAP_REG_LPM_2_STB_SWITCH_EN_MASK (0x2000000U)
#define USB_CORE_XECP_PORT_CAP_REG_LPM_2_STB_SWITCH_EN_SHIFT (25U)
#define USB_CORE_XECP_PORT_CAP_REG_LPM_2_STB_SWITCH_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_CAP_REG_LPM_2_STB_SWITCH_EN_SHIFT)) & USB_CORE_XECP_PORT_CAP_REG_LPM_2_STB_SWITCH_EN_MASK)

/*! @name XECP_PORT_1_REG - USB3 Extended capability */
#define USB_CORE_XECP_PORT_1_REG_TRAINING_FAIL_MASK (0x1U)
#define USB_CORE_XECP_PORT_1_REG_TRAINING_FAIL_SHIFT (0U)
#define USB_CORE_XECP_PORT_1_REG_TRAINING_FAIL(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_1_REG_TRAINING_FAIL_SHIFT)) & USB_CORE_XECP_PORT_1_REG_TRAINING_FAIL_MASK)
#define USB_CORE_XECP_PORT_1_REG_TERM_DEB_MAX_MASK (0x6U)
#define USB_CORE_XECP_PORT_1_REG_TERM_DEB_MAX_SHIFT (1U)
#define USB_CORE_XECP_PORT_1_REG_TERM_DEB_MAX(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_1_REG_TERM_DEB_MAX_SHIFT)) & USB_CORE_XECP_PORT_1_REG_TERM_DEB_MAX_MASK)
#define USB_CORE_XECP_PORT_1_REG_U3_SPUR_LFPS_FIX_MASK (0x8U)
#define USB_CORE_XECP_PORT_1_REG_U3_SPUR_LFPS_FIX_SHIFT (3U)
#define USB_CORE_XECP_PORT_1_REG_U3_SPUR_LFPS_FIX(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_1_REG_U3_SPUR_LFPS_FIX_SHIFT)) & USB_CORE_XECP_PORT_1_REG_U3_SPUR_LFPS_FIX_MASK)
#define USB_CORE_XECP_PORT_1_REG_SKP_OS_FIX_MASK (0x10U)
#define USB_CORE_XECP_PORT_1_REG_SKP_OS_FIX_SHIFT (4U)
#define USB_CORE_XECP_PORT_1_REG_SKP_OS_FIX(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_1_REG_SKP_OS_FIX_SHIFT)) & USB_CORE_XECP_PORT_1_REG_SKP_OS_FIX_MASK)
#define USB_CORE_XECP_PORT_1_REG_TTIME_FOR_RESET_EN_MASK (0x20U)
#define USB_CORE_XECP_PORT_1_REG_TTIME_FOR_RESET_EN_SHIFT (5U)
#define USB_CORE_XECP_PORT_1_REG_TTIME_FOR_RESET_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_1_REG_TTIME_FOR_RESET_EN_SHIFT)) & USB_CORE_XECP_PORT_1_REG_TTIME_FOR_RESET_EN_MASK)
#define USB_CORE_XECP_PORT_1_REG_U1_LFPS_MINGEN_TIME_MASK (0x7F00U)
#define USB_CORE_XECP_PORT_1_REG_U1_LFPS_MINGEN_TIME_SHIFT (8U)
#define USB_CORE_XECP_PORT_1_REG_U1_LFPS_MINGEN_TIME(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_1_REG_U1_LFPS_MINGEN_TIME_SHIFT)) & USB_CORE_XECP_PORT_1_REG_U1_LFPS_MINGEN_TIME_MASK)
#define USB_CORE_XECP_PORT_1_REG_U1_LFPS_TIME_WR_STROBE_MASK (0x8000U)
#define USB_CORE_XECP_PORT_1_REG_U1_LFPS_TIME_WR_STROBE_SHIFT (15U)
#define USB_CORE_XECP_PORT_1_REG_U1_LFPS_TIME_WR_STROBE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PORT_1_REG_U1_LFPS_TIME_WR_STROBE_SHIFT)) & USB_CORE_XECP_PORT_1_REG_U1_LFPS_TIME_WR_STROBE_MASK)

/*! @name XECP_CDNS_DEBUG_BUS_CAP - xHCI Debug Bus Capability */
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_XHCI_DEBUG_BUS_CAP_ID_MASK (0xFFU)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_XHCI_DEBUG_BUS_CAP_ID_SHIFT (0U)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_XHCI_DEBUG_BUS_CAP_ID(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_XHCI_DEBUG_BUS_CAP_ID_SHIFT)) & USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_XHCI_DEBUG_BUS_CAP_ID_MASK)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_XHCI_DEBUG_BUS_DW_MASK (0xFF00U)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_XHCI_DEBUG_BUS_DW_SHIFT (8U)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_XHCI_DEBUG_BUS_DW(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_XHCI_DEBUG_BUS_DW_SHIFT)) & USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_XHCI_DEBUG_BUS_DW_MASK)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_cpu_debug_en_MASK (0x80000000U)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_cpu_debug_en_SHIFT (31U)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_cpu_debug_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_cpu_debug_en_SHIFT)) & USB_CORE_XECP_CDNS_DEBUG_BUS_CAP_cpu_debug_en_MASK)

/*! @name XECP_CDNS_DEBUG_BUS_CTRL - xHCI Debug Bus Control */
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CTRL_cpu_debug_bus_sel_MASK (0x1FU)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CTRL_cpu_debug_bus_sel_SHIFT (0U)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_CTRL_cpu_debug_bus_sel(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CDNS_DEBUG_BUS_CTRL_cpu_debug_bus_sel_SHIFT)) & USB_CORE_XECP_CDNS_DEBUG_BUS_CTRL_cpu_debug_bus_sel_MASK)

/*! @name XECP_CDNS_DEBUG_BUS_STATUS - xHCI Debug Bus Status */
#define USB_CORE_XECP_CDNS_DEBUG_BUS_STATUS_xhci_debug_bus_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_STATUS_xhci_debug_bus_SHIFT (0U)
#define USB_CORE_XECP_CDNS_DEBUG_BUS_STATUS_xhci_debug_bus(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CDNS_DEBUG_BUS_STATUS_xhci_debug_bus_SHIFT)) & USB_CORE_XECP_CDNS_DEBUG_BUS_STATUS_xhci_debug_bus_MASK)

/*! @name XECP_PM_CAP - Extended Power Management capability */
#define USB_CORE_XECP_PM_CAP_XHCI_PM_CAP_ID_MASK (0xFFU)
#define USB_CORE_XECP_PM_CAP_XHCI_PM_CAP_ID_SHIFT (0U)
#define USB_CORE_XECP_PM_CAP_XHCI_PM_CAP_ID(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_CAP_XHCI_PM_CAP_ID_SHIFT)) & USB_CORE_XECP_PM_CAP_XHCI_PM_CAP_ID_MASK)
#define USB_CORE_XECP_PM_CAP_XHCI_PM_CAPABILITY_DW_MASK (0xFF00U)
#define USB_CORE_XECP_PM_CAP_XHCI_PM_CAPABILITY_DW_SHIFT (8U)
#define USB_CORE_XECP_PM_CAP_XHCI_PM_CAPABILITY_DW(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_CAP_XHCI_PM_CAPABILITY_DW_SHIFT)) & USB_CORE_XECP_PM_CAP_XHCI_PM_CAPABILITY_DW_MASK)
#define USB_CORE_XECP_PM_CAP_Version_MASK        (0x70000U)
#define USB_CORE_XECP_PM_CAP_Version_SHIFT       (16U)
#define USB_CORE_XECP_PM_CAP_Version(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_CAP_Version_SHIFT)) & USB_CORE_XECP_PM_CAP_Version_MASK)
#define USB_CORE_XECP_PM_CAP_PME_clock_MASK      (0x80000U)
#define USB_CORE_XECP_PM_CAP_PME_clock_SHIFT     (19U)
#define USB_CORE_XECP_PM_CAP_PME_clock(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_CAP_PME_clock_SHIFT)) & USB_CORE_XECP_PM_CAP_PME_clock_MASK)
#define USB_CORE_XECP_PM_CAP_reserved_MASK       (0x100000U)
#define USB_CORE_XECP_PM_CAP_reserved_SHIFT      (20U)
#define USB_CORE_XECP_PM_CAP_reserved(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_CAP_reserved_SHIFT)) & USB_CORE_XECP_PM_CAP_reserved_MASK)
#define USB_CORE_XECP_PM_CAP_DSI_MASK            (0x200000U)
#define USB_CORE_XECP_PM_CAP_DSI_SHIFT           (21U)
#define USB_CORE_XECP_PM_CAP_DSI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_CAP_DSI_SHIFT)) & USB_CORE_XECP_PM_CAP_DSI_MASK)
#define USB_CORE_XECP_PM_CAP_AUX_CURRENT_MASK    (0x1C00000U)
#define USB_CORE_XECP_PM_CAP_AUX_CURRENT_SHIFT   (22U)
#define USB_CORE_XECP_PM_CAP_AUX_CURRENT(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_CAP_AUX_CURRENT_SHIFT)) & USB_CORE_XECP_PM_CAP_AUX_CURRENT_MASK)
#define USB_CORE_XECP_PM_CAP_D1_Support_MASK     (0x2000000U)
#define USB_CORE_XECP_PM_CAP_D1_Support_SHIFT    (25U)
#define USB_CORE_XECP_PM_CAP_D1_Support(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_CAP_D1_Support_SHIFT)) & USB_CORE_XECP_PM_CAP_D1_Support_MASK)
#define USB_CORE_XECP_PM_CAP_D2_Support_MASK     (0x4000000U)
#define USB_CORE_XECP_PM_CAP_D2_Support_SHIFT    (26U)
#define USB_CORE_XECP_PM_CAP_D2_Support(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_CAP_D2_Support_SHIFT)) & USB_CORE_XECP_PM_CAP_D2_Support_MASK)
#define USB_CORE_XECP_PM_CAP_PME_Support_MASK    (0xF8000000U)
#define USB_CORE_XECP_PM_CAP_PME_Support_SHIFT   (27U)
#define USB_CORE_XECP_PM_CAP_PME_Support(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_CAP_PME_Support_SHIFT)) & USB_CORE_XECP_PM_CAP_PME_Support_MASK)

/*! @name XECP_PM_PMCSR - Extended Power Management Control/Status */
#define USB_CORE_XECP_PM_PMCSR_PowerState_MASK   (0x3U)
#define USB_CORE_XECP_PM_PMCSR_PowerState_SHIFT  (0U)
#define USB_CORE_XECP_PM_PMCSR_PowerState(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_PowerState_SHIFT)) & USB_CORE_XECP_PM_PMCSR_PowerState_MASK)
#define USB_CORE_XECP_PM_PMCSR_reserved1_MASK    (0x4U)
#define USB_CORE_XECP_PM_PMCSR_reserved1_SHIFT   (2U)
#define USB_CORE_XECP_PM_PMCSR_reserved1(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_reserved1_SHIFT)) & USB_CORE_XECP_PM_PMCSR_reserved1_MASK)
#define USB_CORE_XECP_PM_PMCSR_No_Soft_Reset_MASK (0x8U)
#define USB_CORE_XECP_PM_PMCSR_No_Soft_Reset_SHIFT (3U)
#define USB_CORE_XECP_PM_PMCSR_No_Soft_Reset(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_No_Soft_Reset_SHIFT)) & USB_CORE_XECP_PM_PMCSR_No_Soft_Reset_MASK)
#define USB_CORE_XECP_PM_PMCSR_reserved2_MASK    (0xF0U)
#define USB_CORE_XECP_PM_PMCSR_reserved2_SHIFT   (4U)
#define USB_CORE_XECP_PM_PMCSR_reserved2(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_reserved2_SHIFT)) & USB_CORE_XECP_PM_PMCSR_reserved2_MASK)
#define USB_CORE_XECP_PM_PMCSR_PME_En_MASK       (0x100U)
#define USB_CORE_XECP_PM_PMCSR_PME_En_SHIFT      (8U)
#define USB_CORE_XECP_PM_PMCSR_PME_En(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_PME_En_SHIFT)) & USB_CORE_XECP_PM_PMCSR_PME_En_MASK)
#define USB_CORE_XECP_PM_PMCSR_data_select_MASK  (0x1E00U)
#define USB_CORE_XECP_PM_PMCSR_data_select_SHIFT (9U)
#define USB_CORE_XECP_PM_PMCSR_data_select(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_data_select_SHIFT)) & USB_CORE_XECP_PM_PMCSR_data_select_MASK)
#define USB_CORE_XECP_PM_PMCSR_data_scale_MASK   (0x6000U)
#define USB_CORE_XECP_PM_PMCSR_data_scale_SHIFT  (13U)
#define USB_CORE_XECP_PM_PMCSR_data_scale(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_data_scale_SHIFT)) & USB_CORE_XECP_PM_PMCSR_data_scale_MASK)
#define USB_CORE_XECP_PM_PMCSR_pme_status_MASK   (0x8000U)
#define USB_CORE_XECP_PM_PMCSR_pme_status_SHIFT  (15U)
#define USB_CORE_XECP_PM_PMCSR_pme_status(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_pme_status_SHIFT)) & USB_CORE_XECP_PM_PMCSR_pme_status_MASK)
#define USB_CORE_XECP_PM_PMCSR_reserved3_MASK    (0x3F0000U)
#define USB_CORE_XECP_PM_PMCSR_reserved3_SHIFT   (16U)
#define USB_CORE_XECP_PM_PMCSR_reserved3(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_reserved3_SHIFT)) & USB_CORE_XECP_PM_PMCSR_reserved3_MASK)
#define USB_CORE_XECP_PM_PMCSR_B2_B3_MASK        (0x400000U)
#define USB_CORE_XECP_PM_PMCSR_B2_B3_SHIFT       (22U)
#define USB_CORE_XECP_PM_PMCSR_B2_B3(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_B2_B3_SHIFT)) & USB_CORE_XECP_PM_PMCSR_B2_B3_MASK)
#define USB_CORE_XECP_PM_PMCSR_BPCC_EN_MASK      (0x800000U)
#define USB_CORE_XECP_PM_PMCSR_BPCC_EN_SHIFT     (23U)
#define USB_CORE_XECP_PM_PMCSR_BPCC_EN(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_BPCC_EN_SHIFT)) & USB_CORE_XECP_PM_PMCSR_BPCC_EN_MASK)
#define USB_CORE_XECP_PM_PMCSR_data_register_MASK (0xFF000000U)
#define USB_CORE_XECP_PM_PMCSR_data_register_SHIFT (24U)
#define USB_CORE_XECP_PM_PMCSR_data_register(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PM_PMCSR_data_register_SHIFT)) & USB_CORE_XECP_PM_PMCSR_data_register_MASK)

/*! @name XECP_MSI_CAP - MSI configuration */
#define USB_CORE_XECP_MSI_CAP_MSI_ID_MASK        (0xFFU)
#define USB_CORE_XECP_MSI_CAP_MSI_ID_SHIFT       (0U)
#define USB_CORE_XECP_MSI_CAP_MSI_ID(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_CAP_MSI_ID_SHIFT)) & USB_CORE_XECP_MSI_CAP_MSI_ID_MASK)
#define USB_CORE_XECP_MSI_CAP_XECP_MSI_CAP_OFFSET_MASK (0xFF00U)
#define USB_CORE_XECP_MSI_CAP_XECP_MSI_CAP_OFFSET_SHIFT (8U)
#define USB_CORE_XECP_MSI_CAP_XECP_MSI_CAP_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_CAP_XECP_MSI_CAP_OFFSET_SHIFT)) & USB_CORE_XECP_MSI_CAP_XECP_MSI_CAP_OFFSET_MASK)
#define USB_CORE_XECP_MSI_CAP_MSI_en_MASK        (0x10000U)
#define USB_CORE_XECP_MSI_CAP_MSI_en_SHIFT       (16U)
#define USB_CORE_XECP_MSI_CAP_MSI_en(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_CAP_MSI_en_SHIFT)) & USB_CORE_XECP_MSI_CAP_MSI_en_MASK)
#define USB_CORE_XECP_MSI_CAP_MSI_MMC_MASK       (0xE0000U)
#define USB_CORE_XECP_MSI_CAP_MSI_MMC_SHIFT      (17U)
#define USB_CORE_XECP_MSI_CAP_MSI_MMC(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_CAP_MSI_MMC_SHIFT)) & USB_CORE_XECP_MSI_CAP_MSI_MMC_MASK)
#define USB_CORE_XECP_MSI_CAP_MSI_MME_MASK       (0x700000U)
#define USB_CORE_XECP_MSI_CAP_MSI_MME_SHIFT      (20U)
#define USB_CORE_XECP_MSI_CAP_MSI_MME(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_CAP_MSI_MME_SHIFT)) & USB_CORE_XECP_MSI_CAP_MSI_MME_MASK)
#define USB_CORE_XECP_MSI_CAP_AC64_MASK          (0x800000U)
#define USB_CORE_XECP_MSI_CAP_AC64_SHIFT         (23U)
#define USB_CORE_XECP_MSI_CAP_AC64(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_CAP_AC64_SHIFT)) & USB_CORE_XECP_MSI_CAP_AC64_MASK)
#define USB_CORE_XECP_MSI_CAP_per_vector_masking_MASK (0x1000000U)
#define USB_CORE_XECP_MSI_CAP_per_vector_masking_SHIFT (24U)
#define USB_CORE_XECP_MSI_CAP_per_vector_masking(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_CAP_per_vector_masking_SHIFT)) & USB_CORE_XECP_MSI_CAP_per_vector_masking_MASK)

/*! @name XECP_MSI_ADDR_L - Message Lower Address */
#define USB_CORE_XECP_MSI_ADDR_L_reserved_MASK   (0x3U)
#define USB_CORE_XECP_MSI_ADDR_L_reserved_SHIFT  (0U)
#define USB_CORE_XECP_MSI_ADDR_L_reserved(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_ADDR_L_reserved_SHIFT)) & USB_CORE_XECP_MSI_ADDR_L_reserved_MASK)
#define USB_CORE_XECP_MSI_ADDR_L_MSI_addr_low_MASK (0xFFFFFFFCU)
#define USB_CORE_XECP_MSI_ADDR_L_MSI_addr_low_SHIFT (2U)
#define USB_CORE_XECP_MSI_ADDR_L_MSI_addr_low(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_ADDR_L_MSI_addr_low_SHIFT)) & USB_CORE_XECP_MSI_ADDR_L_MSI_addr_low_MASK)

/*! @name XECP_MSI_ADDR_H - Message Upper Address */
#define USB_CORE_XECP_MSI_ADDR_H_MSI_addr_hi_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_MSI_ADDR_H_MSI_addr_hi_SHIFT (0U)
#define USB_CORE_XECP_MSI_ADDR_H_MSI_addr_hi(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_ADDR_H_MSI_addr_hi_SHIFT)) & USB_CORE_XECP_MSI_ADDR_H_MSI_addr_hi_MASK)

/*! @name XECP_MSI_DATA - Message data */
#define USB_CORE_XECP_MSI_DATA_MSI_data_MASK     (0xFFFFU)
#define USB_CORE_XECP_MSI_DATA_MSI_data_SHIFT    (0U)
#define USB_CORE_XECP_MSI_DATA_MSI_data(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_MSI_DATA_MSI_data_SHIFT)) & USB_CORE_XECP_MSI_DATA_MSI_data_MASK)

/*! @name XECP_AXI_CAP - AXI Master Wrapper Extended Capability */
#define USB_CORE_XECP_AXI_CAP_AXI_CAP_ID_MASK    (0xFFU)
#define USB_CORE_XECP_AXI_CAP_AXI_CAP_ID_SHIFT   (0U)
#define USB_CORE_XECP_AXI_CAP_AXI_CAP_ID(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CAP_AXI_CAP_ID_SHIFT)) & USB_CORE_XECP_AXI_CAP_AXI_CAP_ID_MASK)
#define USB_CORE_XECP_AXI_CAP_XECP_AXI_CAP_OFFSET_MASK (0xFF00U)
#define USB_CORE_XECP_AXI_CAP_XECP_AXI_CAP_OFFSET_SHIFT (8U)
#define USB_CORE_XECP_AXI_CAP_XECP_AXI_CAP_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CAP_XECP_AXI_CAP_OFFSET_SHIFT)) & USB_CORE_XECP_AXI_CAP_XECP_AXI_CAP_OFFSET_MASK)
#define USB_CORE_XECP_AXI_CAP_AXI_ADDRESS_WIDTH_64_MASK (0x10000U)
#define USB_CORE_XECP_AXI_CAP_AXI_ADDRESS_WIDTH_64_SHIFT (16U)
#define USB_CORE_XECP_AXI_CAP_AXI_ADDRESS_WIDTH_64(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CAP_AXI_ADDRESS_WIDTH_64_SHIFT)) & USB_CORE_XECP_AXI_CAP_AXI_ADDRESS_WIDTH_64_MASK)
#define USB_CORE_XECP_AXI_CAP_AXI_MASTER_WRAPPER_SPLIT_BYTE_BURSTS_MASK (0x400000U)
#define USB_CORE_XECP_AXI_CAP_AXI_MASTER_WRAPPER_SPLIT_BYTE_BURSTS_SHIFT (22U)
#define USB_CORE_XECP_AXI_CAP_AXI_MASTER_WRAPPER_SPLIT_BYTE_BURSTS(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CAP_AXI_MASTER_WRAPPER_SPLIT_BYTE_BURSTS_SHIFT)) & USB_CORE_XECP_AXI_CAP_AXI_MASTER_WRAPPER_SPLIT_BYTE_BURSTS_MASK)
#define USB_CORE_XECP_AXI_CAP_AXI_DISABLE_OOO_MASK (0x800000U)
#define USB_CORE_XECP_AXI_CAP_AXI_DISABLE_OOO_SHIFT (23U)
#define USB_CORE_XECP_AXI_CAP_AXI_DISABLE_OOO(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CAP_AXI_DISABLE_OOO_SHIFT)) & USB_CORE_XECP_AXI_CAP_AXI_DISABLE_OOO_MASK)
#define USB_CORE_XECP_AXI_CAP_AXI_DATA_BUS_SIZE_MASK (0x7000000U)
#define USB_CORE_XECP_AXI_CAP_AXI_DATA_BUS_SIZE_SHIFT (24U)
#define USB_CORE_XECP_AXI_CAP_AXI_DATA_BUS_SIZE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CAP_AXI_DATA_BUS_SIZE_SHIFT)) & USB_CORE_XECP_AXI_CAP_AXI_DATA_BUS_SIZE_MASK)
#define USB_CORE_XECP_AXI_CAP_AXI_ERROR_MASK     (0x20000000U)
#define USB_CORE_XECP_AXI_CAP_AXI_ERROR_SHIFT    (29U)
#define USB_CORE_XECP_AXI_CAP_AXI_ERROR(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CAP_AXI_ERROR_SHIFT)) & USB_CORE_XECP_AXI_CAP_AXI_ERROR_MASK)
#define USB_CORE_XECP_AXI_CAP_AXI_IDLE_MASK      (0x40000000U)
#define USB_CORE_XECP_AXI_CAP_AXI_IDLE_SHIFT     (30U)
#define USB_CORE_XECP_AXI_CAP_AXI_IDLE(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CAP_AXI_IDLE_SHIFT)) & USB_CORE_XECP_AXI_CAP_AXI_IDLE_MASK)
#define USB_CORE_XECP_AXI_CAP_AXI_HALT_MASK      (0x80000000U)
#define USB_CORE_XECP_AXI_CAP_AXI_HALT_SHIFT     (31U)
#define USB_CORE_XECP_AXI_CAP_AXI_HALT(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CAP_AXI_HALT_SHIFT)) & USB_CORE_XECP_AXI_CAP_AXI_HALT_MASK)

/*! @name XECP_AXI_CFG0 - AXI Master Wrapper Extended Capability Configuration */
#define USB_CORE_XECP_AXI_CFG0_AXI_MAX_WR_OT_MASK (0x3FU)
#define USB_CORE_XECP_AXI_CFG0_AXI_MAX_WR_OT_SHIFT (0U)
#define USB_CORE_XECP_AXI_CFG0_AXI_MAX_WR_OT(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CFG0_AXI_MAX_WR_OT_SHIFT)) & USB_CORE_XECP_AXI_CFG0_AXI_MAX_WR_OT_MASK)
#define USB_CORE_XECP_AXI_CFG0_AXI_WR_DEPTH_MASK (0xFF00U)
#define USB_CORE_XECP_AXI_CFG0_AXI_WR_DEPTH_SHIFT (8U)
#define USB_CORE_XECP_AXI_CFG0_AXI_WR_DEPTH(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CFG0_AXI_WR_DEPTH_SHIFT)) & USB_CORE_XECP_AXI_CFG0_AXI_WR_DEPTH_MASK)
#define USB_CORE_XECP_AXI_CFG0_AXI_MAX_RD_OT_MASK (0x3F0000U)
#define USB_CORE_XECP_AXI_CFG0_AXI_MAX_RD_OT_SHIFT (16U)
#define USB_CORE_XECP_AXI_CFG0_AXI_MAX_RD_OT(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CFG0_AXI_MAX_RD_OT_SHIFT)) & USB_CORE_XECP_AXI_CFG0_AXI_MAX_RD_OT_MASK)
#define USB_CORE_XECP_AXI_CFG0_AXI_RD_DEPTH_MASK (0xFF000000U)
#define USB_CORE_XECP_AXI_CFG0_AXI_RD_DEPTH_SHIFT (24U)
#define USB_CORE_XECP_AXI_CFG0_AXI_RD_DEPTH(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CFG0_AXI_RD_DEPTH_SHIFT)) & USB_CORE_XECP_AXI_CFG0_AXI_RD_DEPTH_MASK)

/*! @name XECP_AXI_CTRL0 - AXI Master Wrapper Extended Capability Control */
#define USB_CORE_XECP_AXI_CTRL0_AXI_BMAX_MASK    (0xFU)
#define USB_CORE_XECP_AXI_CTRL0_AXI_BMAX_SHIFT   (0U)
#define USB_CORE_XECP_AXI_CTRL0_AXI_BMAX(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CTRL0_AXI_BMAX_SHIFT)) & USB_CORE_XECP_AXI_CTRL0_AXI_BMAX_MASK)

/*! @name XECP_AXI_CTRL1 - AXI Master Wrapper Extended Capability Control */
#define USB_CORE_XECP_AXI_CTRL1_AXI_WOT_MASK     (0x3FU)
#define USB_CORE_XECP_AXI_CTRL1_AXI_WOT_SHIFT    (0U)
#define USB_CORE_XECP_AXI_CTRL1_AXI_WOT(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CTRL1_AXI_WOT_SHIFT)) & USB_CORE_XECP_AXI_CTRL1_AXI_WOT_MASK)
#define USB_CORE_XECP_AXI_CTRL1_AXI_ROT_MASK     (0x3F0000U)
#define USB_CORE_XECP_AXI_CTRL1_AXI_ROT_SHIFT    (16U)
#define USB_CORE_XECP_AXI_CTRL1_AXI_ROT(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CTRL1_AXI_ROT_SHIFT)) & USB_CORE_XECP_AXI_CTRL1_AXI_ROT_MASK)

/*! @name XECP_AXI_CTRL2 - AXI Master Wrapper Extended Capability Control */
#define USB_CORE_XECP_AXI_CTRL2_AXI_WTHRES_MASK  (0x1FU)
#define USB_CORE_XECP_AXI_CTRL2_AXI_WTHRES_SHIFT (0U)
#define USB_CORE_XECP_AXI_CTRL2_AXI_WTHRES(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AXI_CTRL2_AXI_WTHRES_SHIFT)) & USB_CORE_XECP_AXI_CTRL2_AXI_WTHRES_MASK)

/*! @name XECP_SUPP_USB2_CAP0 - xHCI Supported Protocol Capability */
#define USB_CORE_XECP_SUPP_USB2_CAP0_PID_MASK    (0xFFU)
#define USB_CORE_XECP_SUPP_USB2_CAP0_PID_SHIFT   (0U)
#define USB_CORE_XECP_SUPP_USB2_CAP0_PID(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP0_PID_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP0_PID_MASK)
#define USB_CORE_XECP_SUPP_USB2_CAP0_NextCapID_MASK (0xFF00U)
#define USB_CORE_XECP_SUPP_USB2_CAP0_NextCapID_SHIFT (8U)
#define USB_CORE_XECP_SUPP_USB2_CAP0_NextCapID(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP0_NextCapID_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP0_NextCapID_MASK)
#define USB_CORE_XECP_SUPP_USB2_CAP0_Minor_Rev_MASK (0xFF0000U)
#define USB_CORE_XECP_SUPP_USB2_CAP0_Minor_Rev_SHIFT (16U)
#define USB_CORE_XECP_SUPP_USB2_CAP0_Minor_Rev(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP0_Minor_Rev_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP0_Minor_Rev_MASK)
#define USB_CORE_XECP_SUPP_USB2_CAP0_Major_Rev_MASK (0xFF000000U)
#define USB_CORE_XECP_SUPP_USB2_CAP0_Major_Rev_SHIFT (24U)
#define USB_CORE_XECP_SUPP_USB2_CAP0_Major_Rev(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP0_Major_Rev_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP0_Major_Rev_MASK)

/*! @name XECP_SUPP_USB2_CAP1 - xHCI Supported Protocol Capability */
#define USB_CORE_XECP_SUPP_USB2_CAP1_USB_STRING_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_SUPP_USB2_CAP1_USB_STRING_SHIFT (0U)
#define USB_CORE_XECP_SUPP_USB2_CAP1_USB_STRING(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP1_USB_STRING_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP1_USB_STRING_MASK)

/*! @name XECP_SUPP_USB2_CAP2 - xHCI Supported Protocol Capability */
#define USB_CORE_XECP_SUPP_USB2_CAP2_Compatible_Port_Offset_MASK (0xFFU)
#define USB_CORE_XECP_SUPP_USB2_CAP2_Compatible_Port_Offset_SHIFT (0U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_Compatible_Port_Offset(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP2_Compatible_Port_Offset_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP2_Compatible_Port_Offset_MASK)
#define USB_CORE_XECP_SUPP_USB2_CAP2_Compatible_Port_Count_MASK (0xFF00U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_Compatible_Port_Count_SHIFT (8U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_Compatible_Port_Count(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP2_Compatible_Port_Count_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP2_Compatible_Port_Count_MASK)
#define USB_CORE_XECP_SUPP_USB2_CAP2_L1C_MASK    (0x10000U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_L1C_SHIFT   (16U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_L1C(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP2_L1C_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP2_L1C_MASK)
#define USB_CORE_XECP_SUPP_USB2_CAP2_HSO_MASK    (0x20000U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_HSO_SHIFT   (17U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_HSO(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP2_HSO_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP2_HSO_MASK)
#define USB_CORE_XECP_SUPP_USB2_CAP2_IHI_MASK    (0x40000U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_IHI_SHIFT   (18U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_IHI(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP2_IHI_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP2_IHI_MASK)
#define USB_CORE_XECP_SUPP_USB2_CAP2_HLC_MASK    (0x80000U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_HLC_SHIFT   (19U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_HLC(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP2_HLC_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP2_HLC_MASK)
#define USB_CORE_XECP_SUPP_USB2_CAP2_HLC_BESL_MASK (0x100000U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_HLC_BESL_SHIFT (20U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_HLC_BESL(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP2_HLC_BESL_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP2_HLC_BESL_MASK)
#define USB_CORE_XECP_SUPP_USB2_CAP2_PSIC_MASK   (0xF0000000U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_PSIC_SHIFT  (28U)
#define USB_CORE_XECP_SUPP_USB2_CAP2_PSIC(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_CAP2_PSIC_SHIFT)) & USB_CORE_XECP_SUPP_USB2_CAP2_PSIC_MASK)

/*! @name XECP_SUPP_USB2_PROTOCOL_SLOT_TYPE - Protocol Slot Type */
#define USB_CORE_XECP_SUPP_USB2_PROTOCOL_SLOT_TYPE_PST_MASK (0x1FU)
#define USB_CORE_XECP_SUPP_USB2_PROTOCOL_SLOT_TYPE_PST_SHIFT (0U)
#define USB_CORE_XECP_SUPP_USB2_PROTOCOL_SLOT_TYPE_PST(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB2_PROTOCOL_SLOT_TYPE_PST_SHIFT)) & USB_CORE_XECP_SUPP_USB2_PROTOCOL_SLOT_TYPE_PST_MASK)

/*! @name XECP_PSI_FULL_SPEED - Protocol Speed ID */
#define USB_CORE_XECP_PSI_FULL_SPEED_PSIV_MASK   (0xFU)
#define USB_CORE_XECP_PSI_FULL_SPEED_PSIV_SHIFT  (0U)
#define USB_CORE_XECP_PSI_FULL_SPEED_PSIV(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_FULL_SPEED_PSIV_SHIFT)) & USB_CORE_XECP_PSI_FULL_SPEED_PSIV_MASK)
#define USB_CORE_XECP_PSI_FULL_SPEED_PSIE_MASK   (0x30U)
#define USB_CORE_XECP_PSI_FULL_SPEED_PSIE_SHIFT  (4U)
#define USB_CORE_XECP_PSI_FULL_SPEED_PSIE(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_FULL_SPEED_PSIE_SHIFT)) & USB_CORE_XECP_PSI_FULL_SPEED_PSIE_MASK)
#define USB_CORE_XECP_PSI_FULL_SPEED_PLT_MASK    (0xC0U)
#define USB_CORE_XECP_PSI_FULL_SPEED_PLT_SHIFT   (6U)
#define USB_CORE_XECP_PSI_FULL_SPEED_PLT(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_FULL_SPEED_PLT_SHIFT)) & USB_CORE_XECP_PSI_FULL_SPEED_PLT_MASK)
#define USB_CORE_XECP_PSI_FULL_SPEED_PFD_MASK    (0x100U)
#define USB_CORE_XECP_PSI_FULL_SPEED_PFD_SHIFT   (8U)
#define USB_CORE_XECP_PSI_FULL_SPEED_PFD(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_FULL_SPEED_PFD_SHIFT)) & USB_CORE_XECP_PSI_FULL_SPEED_PFD_MASK)
#define USB_CORE_XECP_PSI_FULL_SPEED_PSIM_MASK   (0xFFFF0000U)
#define USB_CORE_XECP_PSI_FULL_SPEED_PSIM_SHIFT  (16U)
#define USB_CORE_XECP_PSI_FULL_SPEED_PSIM(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_FULL_SPEED_PSIM_SHIFT)) & USB_CORE_XECP_PSI_FULL_SPEED_PSIM_MASK)

/*! @name XECP_PSI_LOW_SPEED - Protocol Speed ID */
#define USB_CORE_XECP_PSI_LOW_SPEED_PSIV_MASK    (0xFU)
#define USB_CORE_XECP_PSI_LOW_SPEED_PSIV_SHIFT   (0U)
#define USB_CORE_XECP_PSI_LOW_SPEED_PSIV(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_LOW_SPEED_PSIV_SHIFT)) & USB_CORE_XECP_PSI_LOW_SPEED_PSIV_MASK)
#define USB_CORE_XECP_PSI_LOW_SPEED_PSIE_MASK    (0x30U)
#define USB_CORE_XECP_PSI_LOW_SPEED_PSIE_SHIFT   (4U)
#define USB_CORE_XECP_PSI_LOW_SPEED_PSIE(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_LOW_SPEED_PSIE_SHIFT)) & USB_CORE_XECP_PSI_LOW_SPEED_PSIE_MASK)
#define USB_CORE_XECP_PSI_LOW_SPEED_PLT_MASK     (0xC0U)
#define USB_CORE_XECP_PSI_LOW_SPEED_PLT_SHIFT    (6U)
#define USB_CORE_XECP_PSI_LOW_SPEED_PLT(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_LOW_SPEED_PLT_SHIFT)) & USB_CORE_XECP_PSI_LOW_SPEED_PLT_MASK)
#define USB_CORE_XECP_PSI_LOW_SPEED_PFD_MASK     (0x100U)
#define USB_CORE_XECP_PSI_LOW_SPEED_PFD_SHIFT    (8U)
#define USB_CORE_XECP_PSI_LOW_SPEED_PFD(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_LOW_SPEED_PFD_SHIFT)) & USB_CORE_XECP_PSI_LOW_SPEED_PFD_MASK)
#define USB_CORE_XECP_PSI_LOW_SPEED_PSIM_MASK    (0xFFFF0000U)
#define USB_CORE_XECP_PSI_LOW_SPEED_PSIM_SHIFT   (16U)
#define USB_CORE_XECP_PSI_LOW_SPEED_PSIM(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_LOW_SPEED_PSIM_SHIFT)) & USB_CORE_XECP_PSI_LOW_SPEED_PSIM_MASK)

/*! @name XECP_PSI_HIGH_SPEED - Protocol Speed ID */
#define USB_CORE_XECP_PSI_HIGH_SPEED_PSIV_MASK   (0xFU)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PSIV_SHIFT  (0U)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PSIV(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_HIGH_SPEED_PSIV_SHIFT)) & USB_CORE_XECP_PSI_HIGH_SPEED_PSIV_MASK)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PSIE_MASK   (0x30U)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PSIE_SHIFT  (4U)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PSIE(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_HIGH_SPEED_PSIE_SHIFT)) & USB_CORE_XECP_PSI_HIGH_SPEED_PSIE_MASK)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PLT_MASK    (0xC0U)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PLT_SHIFT   (6U)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PLT(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_HIGH_SPEED_PLT_SHIFT)) & USB_CORE_XECP_PSI_HIGH_SPEED_PLT_MASK)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PFD_MASK    (0x100U)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PFD_SHIFT   (8U)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PFD(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_HIGH_SPEED_PFD_SHIFT)) & USB_CORE_XECP_PSI_HIGH_SPEED_PFD_MASK)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PSIM_MASK   (0xFFFF0000U)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PSIM_SHIFT  (16U)
#define USB_CORE_XECP_PSI_HIGH_SPEED_PSIM(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_PSI_HIGH_SPEED_PSIM_SHIFT)) & USB_CORE_XECP_PSI_HIGH_SPEED_PSIM_MASK)

/*! @name XECP_SUPP_USB3_CAP0 - xHCI Supported Protocol Capability */
#define USB_CORE_XECP_SUPP_USB3_CAP0_PID_MASK    (0xFFU)
#define USB_CORE_XECP_SUPP_USB3_CAP0_PID_SHIFT   (0U)
#define USB_CORE_XECP_SUPP_USB3_CAP0_PID(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB3_CAP0_PID_SHIFT)) & USB_CORE_XECP_SUPP_USB3_CAP0_PID_MASK)
#define USB_CORE_XECP_SUPP_USB3_CAP0_NextCapID_MASK (0xFF00U)
#define USB_CORE_XECP_SUPP_USB3_CAP0_NextCapID_SHIFT (8U)
#define USB_CORE_XECP_SUPP_USB3_CAP0_NextCapID(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB3_CAP0_NextCapID_SHIFT)) & USB_CORE_XECP_SUPP_USB3_CAP0_NextCapID_MASK)
#define USB_CORE_XECP_SUPP_USB3_CAP0_Minor_Rev_MASK (0xFF0000U)
#define USB_CORE_XECP_SUPP_USB3_CAP0_Minor_Rev_SHIFT (16U)
#define USB_CORE_XECP_SUPP_USB3_CAP0_Minor_Rev(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB3_CAP0_Minor_Rev_SHIFT)) & USB_CORE_XECP_SUPP_USB3_CAP0_Minor_Rev_MASK)
#define USB_CORE_XECP_SUPP_USB3_CAP0_Major_Rev_MASK (0xFF000000U)
#define USB_CORE_XECP_SUPP_USB3_CAP0_Major_Rev_SHIFT (24U)
#define USB_CORE_XECP_SUPP_USB3_CAP0_Major_Rev(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB3_CAP0_Major_Rev_SHIFT)) & USB_CORE_XECP_SUPP_USB3_CAP0_Major_Rev_MASK)

/*! @name XECP_SUPP_USB3_CAP1 - xHCI Supported Protocol Capability */
#define USB_CORE_XECP_SUPP_USB3_CAP1_USB_STRING_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_SUPP_USB3_CAP1_USB_STRING_SHIFT (0U)
#define USB_CORE_XECP_SUPP_USB3_CAP1_USB_STRING(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB3_CAP1_USB_STRING_SHIFT)) & USB_CORE_XECP_SUPP_USB3_CAP1_USB_STRING_MASK)

/*! @name XECP_SUPP_USB3_CAP2 - xHCI Supported Protocol Capability; USB 3 */
#define USB_CORE_XECP_SUPP_USB3_CAP2_Compatible_Port_Offset_MASK (0xFFU)
#define USB_CORE_XECP_SUPP_USB3_CAP2_Compatible_Port_Offset_SHIFT (0U)
#define USB_CORE_XECP_SUPP_USB3_CAP2_Compatible_Port_Offset(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB3_CAP2_Compatible_Port_Offset_SHIFT)) & USB_CORE_XECP_SUPP_USB3_CAP2_Compatible_Port_Offset_MASK)
#define USB_CORE_XECP_SUPP_USB3_CAP2_Compatible_Port_Count_MASK (0xFF00U)
#define USB_CORE_XECP_SUPP_USB3_CAP2_Compatible_Port_Count_SHIFT (8U)
#define USB_CORE_XECP_SUPP_USB3_CAP2_Compatible_Port_Count(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB3_CAP2_Compatible_Port_Count_SHIFT)) & USB_CORE_XECP_SUPP_USB3_CAP2_Compatible_Port_Count_MASK)
#define USB_CORE_XECP_SUPP_USB3_CAP2_PSIC_MASK   (0xF0000000U)
#define USB_CORE_XECP_SUPP_USB3_CAP2_PSIC_SHIFT  (28U)
#define USB_CORE_XECP_SUPP_USB3_CAP2_PSIC(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB3_CAP2_PSIC_SHIFT)) & USB_CORE_XECP_SUPP_USB3_CAP2_PSIC_MASK)

/*! @name XECP_SUPP_USB3_PROTOCOL_SLOT_TYPE - Protocol Slot Type */
#define USB_CORE_XECP_SUPP_USB3_PROTOCOL_SLOT_TYPE_PST_MASK (0x1FU)
#define USB_CORE_XECP_SUPP_USB3_PROTOCOL_SLOT_TYPE_PST_SHIFT (0U)
#define USB_CORE_XECP_SUPP_USB3_PROTOCOL_SLOT_TYPE_PST(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_SUPP_USB3_PROTOCOL_SLOT_TYPE_PST_SHIFT)) & USB_CORE_XECP_SUPP_USB3_PROTOCOL_SLOT_TYPE_PST_MASK)

/*! @name PSI_SUPER_SPEED - Protocol Speed ID */
#define USB_CORE_PSI_SUPER_SPEED_PSIV_MASK       (0xFU)
#define USB_CORE_PSI_SUPER_SPEED_PSIV_SHIFT      (0U)
#define USB_CORE_PSI_SUPER_SPEED_PSIV(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_PSI_SUPER_SPEED_PSIV_SHIFT)) & USB_CORE_PSI_SUPER_SPEED_PSIV_MASK)
#define USB_CORE_PSI_SUPER_SPEED_PSIE_MASK       (0x30U)
#define USB_CORE_PSI_SUPER_SPEED_PSIE_SHIFT      (4U)
#define USB_CORE_PSI_SUPER_SPEED_PSIE(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_PSI_SUPER_SPEED_PSIE_SHIFT)) & USB_CORE_PSI_SUPER_SPEED_PSIE_MASK)
#define USB_CORE_PSI_SUPER_SPEED_PLT_MASK        (0xC0U)
#define USB_CORE_PSI_SUPER_SPEED_PLT_SHIFT       (6U)
#define USB_CORE_PSI_SUPER_SPEED_PLT(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_PSI_SUPER_SPEED_PLT_SHIFT)) & USB_CORE_PSI_SUPER_SPEED_PLT_MASK)
#define USB_CORE_PSI_SUPER_SPEED_PFD_MASK        (0x100U)
#define USB_CORE_PSI_SUPER_SPEED_PFD_SHIFT       (8U)
#define USB_CORE_PSI_SUPER_SPEED_PFD(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_PSI_SUPER_SPEED_PFD_SHIFT)) & USB_CORE_PSI_SUPER_SPEED_PFD_MASK)
#define USB_CORE_PSI_SUPER_SPEED_PSIM_MASK       (0xFFFF0000U)
#define USB_CORE_PSI_SUPER_SPEED_PSIM_SHIFT      (16U)
#define USB_CORE_PSI_SUPER_SPEED_PSIM(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_PSI_SUPER_SPEED_PSIM_SHIFT)) & USB_CORE_PSI_SUPER_SPEED_PSIM_MASK)

/*! @name XECP_CMDM_STS0 - Command Ring related status */
#define USB_CORE_XECP_CMDM_STS0_VEND_DEF_CMDM_CAP_ID_193_MASK (0xFFU)
#define USB_CORE_XECP_CMDM_STS0_VEND_DEF_CMDM_CAP_ID_193_SHIFT (0U)
#define USB_CORE_XECP_CMDM_STS0_VEND_DEF_CMDM_CAP_ID_193(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_VEND_DEF_CMDM_CAP_ID_193_SHIFT)) & USB_CORE_XECP_CMDM_STS0_VEND_DEF_CMDM_CAP_ID_193_MASK)
#define USB_CORE_XECP_CMDM_STS0_XECP_CMDM_NEXT_CAP_OFFSET_MASK (0xFF00U)
#define USB_CORE_XECP_CMDM_STS0_XECP_CMDM_NEXT_CAP_OFFSET_SHIFT (8U)
#define USB_CORE_XECP_CMDM_STS0_XECP_CMDM_NEXT_CAP_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_XECP_CMDM_NEXT_CAP_OFFSET_SHIFT)) & USB_CORE_XECP_CMDM_STS0_XECP_CMDM_NEXT_CAP_OFFSET_MASK)
#define USB_CORE_XECP_CMDM_STS0_cmd_running_MASK (0x10000U)
#define USB_CORE_XECP_CMDM_STS0_cmd_running_SHIFT (16U)
#define USB_CORE_XECP_CMDM_STS0_cmd_running(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_cmd_running_SHIFT)) & USB_CORE_XECP_CMDM_STS0_cmd_running_MASK)
#define USB_CORE_XECP_CMDM_STS0_host_cmd_db_rang_sticky_MASK (0x20000U)
#define USB_CORE_XECP_CMDM_STS0_host_cmd_db_rang_sticky_SHIFT (17U)
#define USB_CORE_XECP_CMDM_STS0_host_cmd_db_rang_sticky(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_host_cmd_db_rang_sticky_SHIFT)) & USB_CORE_XECP_CMDM_STS0_host_cmd_db_rang_sticky_MASK)
#define USB_CORE_XECP_CMDM_STS0_stopping_cmd_ring_MASK (0x40000U)
#define USB_CORE_XECP_CMDM_STS0_stopping_cmd_ring_SHIFT (18U)
#define USB_CORE_XECP_CMDM_STS0_stopping_cmd_ring(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_stopping_cmd_ring_SHIFT)) & USB_CORE_XECP_CMDM_STS0_stopping_cmd_ring_MASK)
#define USB_CORE_XECP_CMDM_STS0_trm_stall_req_MASK (0x100000U)
#define USB_CORE_XECP_CMDM_STS0_trm_stall_req_SHIFT (20U)
#define USB_CORE_XECP_CMDM_STS0_trm_stall_req(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_trm_stall_req_SHIFT)) & USB_CORE_XECP_CMDM_STS0_trm_stall_req_MASK)
#define USB_CORE_XECP_CMDM_STS0_trm_eperr_upd_req_MASK (0x200000U)
#define USB_CORE_XECP_CMDM_STS0_trm_eperr_upd_req_SHIFT (21U)
#define USB_CORE_XECP_CMDM_STS0_trm_eperr_upd_req(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_trm_eperr_upd_req_SHIFT)) & USB_CORE_XECP_CMDM_STS0_trm_eperr_upd_req_MASK)
#define USB_CORE_XECP_CMDM_STS0_dbm_ep_upd_req_MASK (0x400000U)
#define USB_CORE_XECP_CMDM_STS0_dbm_ep_upd_req_SHIFT (22U)
#define USB_CORE_XECP_CMDM_STS0_dbm_ep_upd_req(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_dbm_ep_upd_req_SHIFT)) & USB_CORE_XECP_CMDM_STS0_dbm_ep_upd_req_MASK)
#define USB_CORE_XECP_CMDM_STS0_update_endpt_active_MASK (0x800000U)
#define USB_CORE_XECP_CMDM_STS0_update_endpt_active_SHIFT (23U)
#define USB_CORE_XECP_CMDM_STS0_update_endpt_active(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_update_endpt_active_SHIFT)) & USB_CORE_XECP_CMDM_STS0_update_endpt_active_MASK)
#define USB_CORE_XECP_CMDM_STS0_odma_address_dev_pending_MASK (0x1000000U)
#define USB_CORE_XECP_CMDM_STS0_odma_address_dev_pending_SHIFT (24U)
#define USB_CORE_XECP_CMDM_STS0_odma_address_dev_pending(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_odma_address_dev_pending_SHIFT)) & USB_CORE_XECP_CMDM_STS0_odma_address_dev_pending_MASK)
#define USB_CORE_XECP_CMDM_STS0_odma_address_dev_done_MASK (0x2000000U)
#define USB_CORE_XECP_CMDM_STS0_odma_address_dev_done_SHIFT (25U)
#define USB_CORE_XECP_CMDM_STS0_odma_address_dev_done(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_odma_address_dev_done_SHIFT)) & USB_CORE_XECP_CMDM_STS0_odma_address_dev_done_MASK)
#define USB_CORE_XECP_CMDM_STS0_cmdm_clr_db_req_MASK (0x4000000U)
#define USB_CORE_XECP_CMDM_STS0_cmdm_clr_db_req_SHIFT (26U)
#define USB_CORE_XECP_CMDM_STS0_cmdm_clr_db_req(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_cmdm_clr_db_req_SHIFT)) & USB_CORE_XECP_CMDM_STS0_cmdm_clr_db_req_MASK)
#define USB_CORE_XECP_CMDM_STS0_cmdm_stop_req_MASK (0x8000000U)
#define USB_CORE_XECP_CMDM_STS0_cmdm_stop_req_SHIFT (27U)
#define USB_CORE_XECP_CMDM_STS0_cmdm_stop_req(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_cmdm_stop_req_SHIFT)) & USB_CORE_XECP_CMDM_STS0_cmdm_stop_req_MASK)
#define USB_CORE_XECP_CMDM_STS0_cmdm_cntx_lock_req_MASK (0x10000000U)
#define USB_CORE_XECP_CMDM_STS0_cmdm_cntx_lock_req_SHIFT (28U)
#define USB_CORE_XECP_CMDM_STS0_cmdm_cntx_lock_req(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_cmdm_cntx_lock_req_SHIFT)) & USB_CORE_XECP_CMDM_STS0_cmdm_cntx_lock_req_MASK)
#define USB_CORE_XECP_CMDM_STS0_trm_cntx_in_use_MASK (0x20000000U)
#define USB_CORE_XECP_CMDM_STS0_trm_cntx_in_use_SHIFT (29U)
#define USB_CORE_XECP_CMDM_STS0_trm_cntx_in_use(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_trm_cntx_in_use_SHIFT)) & USB_CORE_XECP_CMDM_STS0_trm_cntx_in_use_MASK)
#define USB_CORE_XECP_CMDM_STS0_odma_cntx_in_use_MASK (0x40000000U)
#define USB_CORE_XECP_CMDM_STS0_odma_cntx_in_use_SHIFT (30U)
#define USB_CORE_XECP_CMDM_STS0_odma_cntx_in_use(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_odma_cntx_in_use_SHIFT)) & USB_CORE_XECP_CMDM_STS0_odma_cntx_in_use_MASK)
#define USB_CORE_XECP_CMDM_STS0_idma_cntx_in_use_MASK (0x80000000U)
#define USB_CORE_XECP_CMDM_STS0_idma_cntx_in_use_SHIFT (31U)
#define USB_CORE_XECP_CMDM_STS0_idma_cntx_in_use(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_STS0_idma_cntx_in_use_SHIFT)) & USB_CORE_XECP_CMDM_STS0_idma_cntx_in_use_MASK)

/*! @name XECP_CMDM_CTRL_REG1 - Command Manager Control */
#define USB_CORE_XECP_CMDM_CTRL_REG1_update_endpt_event_enable_MASK (0x1U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_update_endpt_event_enable_SHIFT (0U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_update_endpt_event_enable(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_update_endpt_event_enable_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_update_endpt_event_enable_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_fail_MASK (0x2U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_fail_SHIFT (1U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_fail(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_fail_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_fail_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4setdqptr_MASK (0x4U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4setdqptr_SHIFT (2U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4setdqptr(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4setdqptr_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4setdqptr_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_addr_dev_slst_bsr_check_en_MASK (0x8U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_addr_dev_slst_bsr_check_en_SHIFT (3U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_addr_dev_slst_bsr_check_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_addr_dev_slst_bsr_check_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_addr_dev_slst_bsr_check_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4rstdev_MASK (0x10U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4rstdev_SHIFT (4U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4rstdev(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4rstdev_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4rstdev_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4enslot_reg_MASK (0x20U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4enslot_reg_SHIFT (5U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4enslot_reg(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4enslot_reg_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4enslot_reg_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4enaddr_MASK (0x40U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4enaddr_SHIFT (6U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4enaddr(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4enaddr_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4enaddr_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4encfgendpt_MASK (0x80U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4encfgendpt_SHIFT (7U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4encfgendpt(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4encfgendpt_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_cntx_4encfgendpt_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4en_slot_MASK (0x100U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4en_slot_SHIFT (8U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4en_slot(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4en_slot_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4en_slot_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4rst_endpt_MASK (0x200U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4rst_endpt_SHIFT (9U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4rst_endpt(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4rst_endpt_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4rst_endpt_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4rst_device_MASK (0x400U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4rst_device_SHIFT (10U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4rst_device(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4rst_device_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4rst_device_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4cfg_endpt_MASK (0x800U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4cfg_endpt_SHIFT (11U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4cfg_endpt(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4cfg_endpt_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4cfg_endpt_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_glob_tsp_en_MASK (0x1000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_glob_tsp_en_SHIFT (12U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_glob_tsp_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_glob_tsp_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_glob_tsp_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_init_retry_MASK (0x2000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_init_retry_SHIFT (13U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_init_retry(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_init_retry_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_init_retry_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_eval_epst_check_en_MASK (0x4000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_eval_epst_check_en_SHIFT (14U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_eval_epst_check_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_eval_epst_check_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_eval_epst_check_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4dis_slot_MASK (0x8000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4dis_slot_SHIFT (15U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4dis_slot(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4dis_slot_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_ep_cntx_4dis_slot_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_split_state_with_tspset_MASK (0x10000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_split_state_with_tspset_SHIFT (16U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_clr_split_state_with_tspset(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_clr_split_state_with_tspset_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_clr_split_state_with_tspset_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_pass_MASK (0x20000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_pass_SHIFT (17U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_pass(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_pass_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_pass_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_sys_pass_MASK (0x40000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_sys_pass_SHIFT (18U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_sys_pass(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_sys_pass_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_force_bandwidth_sys_pass_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_report_bandwidth_skip_scan_MASK (0x80000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_report_bandwidth_skip_scan_SHIFT (19U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_report_bandwidth_skip_scan(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_report_bandwidth_skip_scan_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_report_bandwidth_skip_scan_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_enable_max_ep_cache_MASK (0x100000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_enable_max_ep_cache_SHIFT (20U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_enable_max_ep_cache(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_enable_max_ep_cache_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_enable_max_ep_cache_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_cfg_endpt_cntx_lock_dis_MASK (0x200000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_cfg_endpt_cntx_lock_dis_SHIFT (21U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_cfg_endpt_cntx_lock_dis(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_cfg_endpt_cntx_lock_dis_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_cfg_endpt_cntx_lock_dis_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_feature_retry_en_MASK (0x400000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_feature_retry_en_SHIFT (22U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_feature_retry_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_feature_retry_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_feature_retry_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_eval_cntx_bw_scan_en_MASK (0x800000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_eval_cntx_bw_scan_en_SHIFT (23U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_eval_cntx_bw_scan_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_eval_cntx_bw_scan_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_eval_cntx_bw_scan_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_default_isoch_ep_bandwidth_MASK (0xF000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_default_isoch_ep_bandwidth_SHIFT (24U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_default_isoch_ep_bandwidth(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_default_isoch_ep_bandwidth_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_default_isoch_ep_bandwidth_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG1_default_intr_ep_bandwidth_MASK (0xF0000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_default_intr_ep_bandwidth_SHIFT (28U)
#define USB_CORE_XECP_CMDM_CTRL_REG1_default_intr_ep_bandwidth(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG1_default_intr_ep_bandwidth_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG1_default_intr_ep_bandwidth_MASK)

/*! @name XECP_CMDM_CTRL_REG2 - Command Manager Control */
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_st_MASK (0x3FFFU)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_st_SHIFT (0U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_st(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_clr_st_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_clr_st_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_burst_size_default_en_MASK (0x4000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_burst_size_default_en_SHIFT (14U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_burst_size_default_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_burst_size_default_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_burst_size_default_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_disable_stall_clr_ep_MASK (0x8000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_disable_stall_clr_ep_SHIFT (15U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_disable_stall_clr_ep(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_disable_stall_clr_ep_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_disable_stall_clr_ep_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_increase_update_ep_priority_en_MASK (0x10000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_increase_update_ep_priority_en_SHIFT (16U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_increase_update_ep_priority_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_increase_update_ep_priority_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_increase_update_ep_priority_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_trm_break_loop_en_MASK (0x20000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_trm_break_loop_en_SHIFT (17U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_trm_break_loop_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_trm_break_loop_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_trm_break_loop_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_tsp_4set_dqptr_reg_MASK (0x40000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_tsp_4set_dqptr_reg_SHIFT (18U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_tsp_4set_dqptr_reg(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_tsp_4set_dqptr_reg_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_tsp_4set_dqptr_reg_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_force_reset_endpt_reg_MASK (0x80000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_force_reset_endpt_reg_SHIFT (19U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_force_reset_endpt_reg(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_force_reset_endpt_reg_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_force_reset_endpt_reg_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_set_dqptr_clr_ep_arys_MASK (0x100000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_set_dqptr_clr_ep_arys_SHIFT (20U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_set_dqptr_clr_ep_arys(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_set_dqptr_clr_ep_arys_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_set_dqptr_clr_ep_arys_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_cmd_st_dis_reg_MASK (0x200000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_cmd_st_dis_reg_SHIFT (21U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_cmd_st_dis_reg(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_cmd_st_dis_reg_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_cmd_st_dis_reg_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_enable_bw_cal_MASK (0x400000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_enable_bw_cal_SHIFT (22U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_enable_bw_cal(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_enable_bw_cal_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_enable_bw_cal_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_cntx_4rst_endpt_reg_MASK (0x800000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_cntx_4rst_endpt_reg_SHIFT (23U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_cntx_4rst_endpt_reg(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_clr_cntx_4rst_endpt_reg_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_clr_cntx_4rst_endpt_reg_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_move_xfer_dqptr_2cpl_dqptr_en_MASK (0x1000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_move_xfer_dqptr_2cpl_dqptr_en_SHIFT (24U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_move_xfer_dqptr_2cpl_dqptr_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_move_xfer_dqptr_2cpl_dqptr_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_move_xfer_dqptr_2cpl_dqptr_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_ep_cntx_4stall_upd_MASK (0x2000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_ep_cntx_4stall_upd_SHIFT (25U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_ep_cntx_4stall_upd(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_clr_ep_cntx_4stall_upd_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_clr_ep_cntx_4stall_upd_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_ep_cntx_4stop_endpt_MASK (0x4000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_ep_cntx_4stop_endpt_SHIFT (26U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_clr_ep_cntx_4stop_endpt(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_clr_ep_cntx_4stop_endpt_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_clr_ep_cntx_4stop_endpt_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_all_clk_gate_dis_MASK (0x8000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_all_clk_gate_dis_SHIFT (27U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_all_clk_gate_dis(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_all_clk_gate_dis_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_all_clk_gate_dis_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_SRE_MASK    (0x10000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_SRE_SHIFT   (28U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_SRE(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_SRE_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_SRE_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_slot_id_overide_en_MASK (0x20000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_slot_id_overide_en_SHIFT (29U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_slot_id_overide_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_slot_id_overide_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_slot_id_overide_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_stop_endpt_2ms_timeout_en_MASK (0x40000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_stop_endpt_2ms_timeout_en_SHIFT (30U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_stop_endpt_2ms_timeout_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_stop_endpt_2ms_timeout_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_stop_endpt_2ms_timeout_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG2_doing_2dw_ocntx_wr_en_MASK (0x80000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_doing_2dw_ocntx_wr_en_SHIFT (31U)
#define USB_CORE_XECP_CMDM_CTRL_REG2_doing_2dw_ocntx_wr_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG2_doing_2dw_ocntx_wr_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG2_doing_2dw_ocntx_wr_en_MASK)

/*! @name XECP_CMDM_CTRL_REG3 - Command Manager Control */
#define USB_CORE_XECP_CMDM_CTRL_REG3_DEFAULT_PORT_BANDWD_AVAIL_MASK (0xFFU)
#define USB_CORE_XECP_CMDM_CTRL_REG3_DEFAULT_PORT_BANDWD_AVAIL_SHIFT (0U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_DEFAULT_PORT_BANDWD_AVAIL(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_DEFAULT_PORT_BANDWD_AVAIL_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_DEFAULT_PORT_BANDWD_AVAIL_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_DEFAULT_HS_BANDWD_AVAIL_MASK (0xFF00U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_DEFAULT_HS_BANDWD_AVAIL_SHIFT (8U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_DEFAULT_HS_BANDWD_AVAIL(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_DEFAULT_HS_BANDWD_AVAIL_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_DEFAULT_HS_BANDWD_AVAIL_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_disable_slot_timer_select_MASK (0x30000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_disable_slot_timer_select_SHIFT (16U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_disable_slot_timer_select(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_disable_slot_timer_select_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_disable_slot_timer_select_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_clr_trm_dma_cntx_en_MASK (0x40000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_clr_trm_dma_cntx_en_SHIFT (18U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_clr_trm_dma_cntx_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_clr_trm_dma_cntx_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_clr_trm_dma_cntx_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stop_2timeout_en_MASK (0x80000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stop_2timeout_en_SHIFT (19U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stop_2timeout_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_stop_2timeout_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_stop_2timeout_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_break_cntx_lock_en_MASK (0x100000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_break_cntx_lock_en_SHIFT (20U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_break_cntx_lock_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_break_cntx_lock_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_break_cntx_lock_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stop_ep_clr_stream_st_en_MASK (0x200000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stop_ep_clr_stream_st_en_SHIFT (21U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stop_ep_clr_stream_st_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_stop_ep_clr_stream_st_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_stop_ep_clr_stream_st_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_allow_clr_4stop_MASK (0x400000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_allow_clr_4stop_SHIFT (22U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_allow_clr_4stop(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_allow_clr_4stop_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_allow_clr_4stop_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stream_always_update_cntx_MASK (0x800000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stream_always_update_cntx_SHIFT (23U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stream_always_update_cntx(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_stream_always_update_cntx_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_stream_always_update_cntx_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_set_burst_size_4prdc_dis_MASK (0x1000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_set_burst_size_4prdc_dis_SHIFT (24U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_set_burst_size_4prdc_dis(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_set_burst_size_4prdc_dis_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_set_burst_size_4prdc_dis_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stop_ep_clr_lcstream_id_en_MASK (0x2000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stop_ep_clr_lcstream_id_en_SHIFT (25U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_stop_ep_clr_lcstream_id_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_stop_ep_clr_lcstream_id_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_stop_ep_clr_lcstream_id_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_update_cntx_when_stopped_MASK (0x4000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_update_cntx_when_stopped_SHIFT (26U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_update_cntx_when_stopped(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_update_cntx_when_stopped_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_update_cntx_when_stopped_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_disable_setdqptr_clr_stream_st_MASK (0x8000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_disable_setdqptr_clr_stream_st_SHIFT (27U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_disable_setdqptr_clr_stream_st(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_disable_setdqptr_clr_stream_st_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_disable_setdqptr_clr_stream_st_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_disable_non0ep_cntx_clr_MASK (0x10000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_disable_non0ep_cntx_clr_SHIFT (28U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_disable_non0ep_cntx_clr(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_disable_non0ep_cntx_clr_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_disable_non0ep_cntx_clr_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_extra_db_rm_4stop_en_MASK (0x20000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_extra_db_rm_4stop_en_SHIFT (29U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_extra_db_rm_4stop_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_extra_db_rm_4stop_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_extra_db_rm_4stop_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_ignore_hi_atomic_en_MASK (0x40000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_ignore_hi_atomic_en_SHIFT (30U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_ignore_hi_atomic_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_ignore_hi_atomic_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_ignore_hi_atomic_en_MASK)
#define USB_CORE_XECP_CMDM_CTRL_REG3_frindex_wr_en_MASK (0x80000000U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_frindex_wr_en_SHIFT (31U)
#define USB_CORE_XECP_CMDM_CTRL_REG3_frindex_wr_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_CMDM_CTRL_REG3_frindex_wr_en_SHIFT)) & USB_CORE_XECP_CMDM_CTRL_REG3_frindex_wr_en_MASK)

/*! @name XECP_HOST_CTRL_CAP - Host Control Capability */
#define USB_CORE_XECP_HOST_CTRL_CAP_VEND_DEF_HOST_CAP_ID_192_MASK (0xFFU)
#define USB_CORE_XECP_HOST_CTRL_CAP_VEND_DEF_HOST_CAP_ID_192_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_CAP_VEND_DEF_HOST_CAP_ID_192(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_CAP_VEND_DEF_HOST_CAP_ID_192_SHIFT)) & USB_CORE_XECP_HOST_CTRL_CAP_VEND_DEF_HOST_CAP_ID_192_MASK)
#define USB_CORE_XECP_HOST_CTRL_CAP_XECP_HOST_NEXT_CAP_OFFSET_MASK (0xFF00U)
#define USB_CORE_XECP_HOST_CTRL_CAP_XECP_HOST_NEXT_CAP_OFFSET_SHIFT (8U)
#define USB_CORE_XECP_HOST_CTRL_CAP_XECP_HOST_NEXT_CAP_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_CAP_XECP_HOST_NEXT_CAP_OFFSET_SHIFT)) & USB_CORE_XECP_HOST_CTRL_CAP_XECP_HOST_NEXT_CAP_OFFSET_MASK)

/*! @name XECP_HOST_CLR_MASK_REG - Override Endpoint Flow Control */
#define USB_CORE_XECP_HOST_CLR_MASK_REG_EP_dir_MASK (0x1U)
#define USB_CORE_XECP_HOST_CLR_MASK_REG_EP_dir_SHIFT (0U)
#define USB_CORE_XECP_HOST_CLR_MASK_REG_EP_dir(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CLR_MASK_REG_EP_dir_SHIFT)) & USB_CORE_XECP_HOST_CLR_MASK_REG_EP_dir_MASK)
#define USB_CORE_XECP_HOST_CLR_MASK_REG_EP_num_MASK (0x1EU)
#define USB_CORE_XECP_HOST_CLR_MASK_REG_EP_num_SHIFT (1U)
#define USB_CORE_XECP_HOST_CLR_MASK_REG_EP_num(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CLR_MASK_REG_EP_num_SHIFT)) & USB_CORE_XECP_HOST_CLR_MASK_REG_EP_num_MASK)
#define USB_CORE_XECP_HOST_CLR_MASK_REG_Slot_num_MASK (0x3E0U)
#define USB_CORE_XECP_HOST_CLR_MASK_REG_Slot_num_SHIFT (5U)
#define USB_CORE_XECP_HOST_CLR_MASK_REG_Slot_num(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CLR_MASK_REG_Slot_num_SHIFT)) & USB_CORE_XECP_HOST_CLR_MASK_REG_Slot_num_MASK)

/*! @name XECP_HOST_CLR_IN_EP_VALID_REG - Clear Active IN EP ID Control */
#define USB_CORE_XECP_HOST_CLR_IN_EP_VALID_REG_port_num_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_HOST_CLR_IN_EP_VALID_REG_port_num_SHIFT (0U)
#define USB_CORE_XECP_HOST_CLR_IN_EP_VALID_REG_port_num(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CLR_IN_EP_VALID_REG_port_num_SHIFT)) & USB_CORE_XECP_HOST_CLR_IN_EP_VALID_REG_port_num_MASK)

/*! @name XECP_HOST_CLR_PMASK_REG - Clear Poll Mask Control */
#define USB_CORE_XECP_HOST_CLR_PMASK_REG_EP_dir_MASK (0x1U)
#define USB_CORE_XECP_HOST_CLR_PMASK_REG_EP_dir_SHIFT (0U)
#define USB_CORE_XECP_HOST_CLR_PMASK_REG_EP_dir(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CLR_PMASK_REG_EP_dir_SHIFT)) & USB_CORE_XECP_HOST_CLR_PMASK_REG_EP_dir_MASK)
#define USB_CORE_XECP_HOST_CLR_PMASK_REG_EP_num_MASK (0x1EU)
#define USB_CORE_XECP_HOST_CLR_PMASK_REG_EP_num_SHIFT (1U)
#define USB_CORE_XECP_HOST_CLR_PMASK_REG_EP_num(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CLR_PMASK_REG_EP_num_SHIFT)) & USB_CORE_XECP_HOST_CLR_PMASK_REG_EP_num_MASK)
#define USB_CORE_XECP_HOST_CLR_PMASK_REG_Slot_num_MASK (0x3E0U)
#define USB_CORE_XECP_HOST_CLR_PMASK_REG_Slot_num_SHIFT (5U)
#define USB_CORE_XECP_HOST_CLR_PMASK_REG_Slot_num(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CLR_PMASK_REG_Slot_num_SHIFT)) & USB_CORE_XECP_HOST_CLR_PMASK_REG_Slot_num_MASK)

/*! @name XECP_HOST_CTRL_OCRD_REG - Port Credit Control */
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_port_num_MASK (0xFFU)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_port_num_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_port_num(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_OCRD_REG_port_num_SHIFT)) & USB_CORE_XECP_HOST_CTRL_OCRD_REG_port_num_MASK)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_st_upd_reg_MASK (0x4000000U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_st_upd_reg_SHIFT (26U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_st_upd_reg(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_OCRD_REG_st_upd_reg_SHIFT)) & USB_CORE_XECP_HOST_CTRL_OCRD_REG_st_upd_reg_MASK)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_minus_4rfifo_MASK (0x8000000U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_minus_4rfifo_SHIFT (27U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_minus_4rfifo(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_OCRD_REG_minus_4rfifo_SHIFT)) & USB_CORE_XECP_HOST_CTRL_OCRD_REG_minus_4rfifo_MASK)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_minus_ocrd_MASK (0x10000000U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_minus_ocrd_SHIFT (28U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_minus_ocrd(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_OCRD_REG_minus_ocrd_SHIFT)) & USB_CORE_XECP_HOST_CTRL_OCRD_REG_minus_ocrd_MASK)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_plus_ocrd_MASK (0x20000000U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_plus_ocrd_SHIFT (29U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_plus_ocrd(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_OCRD_REG_plus_ocrd_SHIFT)) & USB_CORE_XECP_HOST_CTRL_OCRD_REG_plus_ocrd_MASK)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_clr_cpl_st_MASK (0x40000000U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_clr_cpl_st_SHIFT (30U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_clr_cpl_st(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_OCRD_REG_clr_cpl_st_SHIFT)) & USB_CORE_XECP_HOST_CTRL_OCRD_REG_clr_cpl_st_MASK)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_clr_xfer_st_MASK (0x80000000U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_clr_xfer_st_SHIFT (31U)
#define USB_CORE_XECP_HOST_CTRL_OCRD_REG_clr_xfer_st(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_OCRD_REG_clr_xfer_st_SHIFT)) & USB_CORE_XECP_HOST_CTRL_OCRD_REG_clr_xfer_st_MASK)

/*! @name XECP_HOST_CTRL_TEST_BUS_LO - Test Bus Low */
#define USB_CORE_XECP_HOST_CTRL_TEST_BUS_LO_TEST_BUS_LO_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_HOST_CTRL_TEST_BUS_LO_TEST_BUS_LO_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_TEST_BUS_LO_TEST_BUS_LO(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TEST_BUS_LO_TEST_BUS_LO_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TEST_BUS_LO_TEST_BUS_LO_MASK)

/*! @name XECP_HOST_CTRL_TEST_BUS_HI - Test Bus High */
#define USB_CORE_XECP_HOST_CTRL_TEST_BUS_HI_TEST_BUS_HI_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_HOST_CTRL_TEST_BUS_HI_TEST_BUS_HI_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_TEST_BUS_HI_TEST_BUS_HI(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TEST_BUS_HI_TEST_BUS_HI_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TEST_BUS_HI_TEST_BUS_HI_MASK)

/*! @name XECP_HOST_CTRL_TRM_REG1 - Host Control Transfer Manager */
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_in_td_pace_enable_MASK (0x1U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_in_td_pace_enable_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_in_td_pace_enable(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_in_td_pace_enable_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_in_td_pace_enable_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_fc_4inrdy_MASK (0x2U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_fc_4inrdy_SHIFT (1U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_fc_4inrdy(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_fc_4inrdy_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_fc_4inrdy_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_link_nop_sucess_en_MASK (0x4U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_link_nop_sucess_en_SHIFT (2U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_link_nop_sucess_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_link_nop_sucess_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_link_nop_sucess_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_stall_MASK (0x8U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_stall_SHIFT (3U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_stall(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_stall_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_stall_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_xport_crd_disable_MASK (0x10U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_xport_crd_disable_SHIFT (4U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_xport_crd_disable(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_xport_crd_disable_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_xport_crd_disable_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_cpl_pkt_clr_mask_en_MASK (0x20U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_cpl_pkt_clr_mask_en_SHIFT (5U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_cpl_pkt_clr_mask_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_cpl_pkt_clr_mask_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_cpl_pkt_clr_mask_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_en_bb_port_disable_MASK (0x40U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_en_bb_port_disable_SHIFT (6U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_en_bb_port_disable(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_en_bb_port_disable_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_en_bb_port_disable_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_npkt0_fc_disable_MASK (0x80U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_npkt0_fc_disable_SHIFT (7U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_npkt0_fc_disable(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_npkt0_fc_disable_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_npkt0_fc_disable_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_cache_invalide_en_MASK (0x100U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_cache_invalide_en_SHIFT (8U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_cache_invalide_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_cache_invalide_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_cache_invalide_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_in_npkt_pace_disable_MASK (0x200U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_in_npkt_pace_disable_SHIFT (9U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_in_npkt_pace_disable(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_in_npkt_pace_disable_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_in_npkt_pace_disable_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_flush_2clr_valid_en_MASK (0x400U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_flush_2clr_valid_en_SHIFT (10U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_flush_2clr_valid_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_flush_2clr_valid_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_flush_2clr_valid_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_ctrl_reg_clr_bndry_MASK (0x800U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_ctrl_reg_clr_bndry_SHIFT (11U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_ctrl_reg_clr_bndry(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_ctrl_reg_clr_bndry_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_ctrl_reg_clr_bndry_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_ENT_en_MASK (0x1000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_ENT_en_SHIFT (12U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_ENT_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_ENT_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_ENT_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_single_burst_en_MASK (0x2000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_single_burst_en_SHIFT (13U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_single_burst_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_single_burst_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_single_burst_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_xfer_block_en_MASK (0x4000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_xfer_block_en_SHIFT (14U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_xfer_block_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_xfer_block_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_xfer_block_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_iso_0len_lpf_en_MASK (0x8000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_iso_0len_lpf_en_SHIFT (15U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_iso_0len_lpf_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_iso_0len_lpf_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_iso_0len_lpf_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_set_addr_err_en_MASK (0x10000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_set_addr_err_en_SHIFT (16U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_set_addr_err_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_set_addr_err_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_set_addr_err_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_phase1_imd_en_MASK (0x20000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_phase1_imd_en_SHIFT (17U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_phase1_imd_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_phase1_imd_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_phase1_imd_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_no_op_as_td_MASK (0x40000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_no_op_as_td_SHIFT (18U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_no_op_as_td(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_no_op_as_td_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_no_op_as_td_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_short_err_4msi_en_MASK (0x80000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_short_err_4msi_en_SHIFT (19U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_short_err_4msi_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_short_err_4msi_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_short_err_4msi_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_deadlock_detect_en_MASK (0x100000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_deadlock_detect_en_SHIFT (20U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_deadlock_detect_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_deadlock_detect_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_deadlock_detect_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_erdy_drop_MASK (0x200000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_erdy_drop_SHIFT (21U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_erdy_drop(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_erdy_drop_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_erdy_drop_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_cpl_db_rang_en_MASK (0x400000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_cpl_db_rang_en_SHIFT (22U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_cpl_db_rang_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_cpl_db_rang_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_cpl_db_rang_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_write_erdp_lo_MASK (0x800000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_write_erdp_lo_SHIFT (23U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_write_erdp_lo(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_write_erdp_lo_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_write_erdp_lo_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_imd_4nodma_MASK (0x1000000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_imd_4nodma_SHIFT (24U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_imd_4nodma(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_imd_4nodma_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_imd_4nodma_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_err_rm_db_en_MASK (0x2000000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_err_rm_db_en_SHIFT (25U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_err_rm_db_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_err_rm_db_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_err_rm_db_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_ep_halt_2retry_en_MASK (0x4000000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_ep_halt_2retry_en_SHIFT (26U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_ep_halt_2retry_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_ep_halt_2retry_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_ep_halt_2retry_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_enable_noop_upd_MASK (0x8000000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_enable_noop_upd_SHIFT (27U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_enable_noop_upd(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_enable_noop_upd_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_enable_noop_upd_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_cpl_sst_ppipe_err_MASK (0x10000000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_cpl_sst_ppipe_err_SHIFT (28U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_cpl_sst_ppipe_err(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_cpl_sst_ppipe_err_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_cpl_sst_ppipe_err_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_cpl_sst_mdata_err_MASK (0x20000000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_cpl_sst_mdata_err_SHIFT (29U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_cpl_sst_mdata_err(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_cpl_sst_mdata_err_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_disable_cpl_sst_mdata_err_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_usb2_nak_auto_detect_reg_en_MASK (0x40000000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_usb2_nak_auto_detect_reg_en_SHIFT (30U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_usb2_nak_auto_detect_reg_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_usb2_nak_auto_detect_reg_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_usb2_nak_auto_detect_reg_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_pace_en_MASK (0x80000000U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_pace_en_SHIFT (31U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_pace_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_pace_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG1_trb_pace_en_MASK)

/*! @name XECP_HOST_CTRL_SCH_REG1 - Host Control Scheduler */
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_poll_delay_dis_MASK (0x1U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_poll_delay_dis_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_poll_delay_dis(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_poll_delay_dis_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_poll_delay_dis_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_trm_active_in_ep_valid_MASK (0x2U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_trm_active_in_ep_valid_SHIFT (1U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_trm_active_in_ep_valid(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_trm_active_in_ep_valid_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_trm_active_in_ep_valid_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_2_MASK (0x4U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_2_SHIFT (2U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_2(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_2_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_2_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_tte_enable_introut_overlap_stop_MASK (0x8U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_tte_enable_introut_overlap_stop_SHIFT (3U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_tte_enable_introut_overlap_stop(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_tte_enable_introut_overlap_stop_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_tte_enable_introut_overlap_stop_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_sort_pattern_MASK (0x30U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_sort_pattern_SHIFT (4U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_sort_pattern(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_sort_pattern_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_sort_pattern_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_out_max_perf_MASK (0x40U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_out_max_perf_SHIFT (6U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_out_max_perf(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_out_max_perf_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_out_max_perf_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_1pkt_perf_MASK (0x80U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_1pkt_perf_SHIFT (7U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_1pkt_perf(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_1pkt_perf_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_1pkt_perf_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_scratch_pad_en_MASK (0x100U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_scratch_pad_en_SHIFT (8U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_scratch_pad_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_scratch_pad_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_scratch_pad_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_maxEP_MASK (0x600U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_maxEP_SHIFT (9U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_maxEP(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_maxEP_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_maxEP_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_cache_size_ctrl_MASK (0x1800U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_cache_size_ctrl_SHIFT (11U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_cache_size_ctrl(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_cache_size_ctrl_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_cache_size_ctrl_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_0_MASK (0x2000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_0_SHIFT (13U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_0(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_0_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_0_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_1_MASK (0x4000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_1_SHIFT (14U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_1(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_1_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_1_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_2_MASK (0x8000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_2_SHIFT (15U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_2(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_2_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_2_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_3_MASK (0x30000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_3_SHIFT (16U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_3(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_3_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_3_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_disable_gl_hub_iso_fix_MASK (0x40000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_disable_gl_hub_iso_fix_SHIFT (18U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_disable_gl_hub_iso_fix(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_disable_gl_hub_iso_fix_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_disable_gl_hub_iso_fix_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_disable_gl_hub_int_fix_MASK (0x80000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_disable_gl_hub_int_fix_SHIFT (19U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_disable_gl_hub_int_fix(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_disable_gl_hub_int_fix_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_disable_gl_hub_int_fix_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_4_MASK (0x100000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_4_SHIFT (20U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_4(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_4_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_TTE_4_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_stop_serve_nc_MASK (0x200000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_stop_serve_nc_SHIFT (21U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_stop_serve_nc(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_stop_serve_nc_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_stop_serve_nc_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_cclk_prdc_done_check_MASK (0xC00000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_cclk_prdc_done_check_SHIFT (22U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_cclk_prdc_done_check(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_cclk_prdc_done_check_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_cclk_prdc_done_check_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_prdc_cc_dis_MASK (0x1000000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_prdc_cc_dis_SHIFT (24U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_prdc_cc_dis(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_prdc_cc_dis_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_prdc_cc_dis_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_tt_overlap_all_ins_MASK (0x2000000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_tt_overlap_all_ins_SHIFT (25U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_tt_overlap_all_ins(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_tt_overlap_all_ins_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_tt_overlap_all_ins_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_1pkt_split_pref_MASK (0x4000000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_1pkt_split_pref_SHIFT (26U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_1pkt_split_pref(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_1pkt_split_pref_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_async_1pkt_split_pref_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_block_pending_en_MASK (0x8000000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_block_pending_en_SHIFT (27U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_block_pending_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_block_pending_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_block_pending_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_limit_prdc_MASK (0xF0000000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_limit_prdc_SHIFT (28U)
#define USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_limit_prdc(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_limit_prdc_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_REG1_sch_limit_prdc_MASK)

/*! @name XECP_HOST_CTRL_ODMA_REG - Host Control ODMA */
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_trans_timeout_en_MASK (0x1U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_trans_timeout_en_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_trans_timeout_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_trans_timeout_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_trans_timeout_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_trans_timeout_len_MASK (0x6U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_trans_timeout_len_SHIFT (1U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_trans_timeout_len(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_trans_timeout_len_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_trans_timeout_len_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_rd_to_idle_MASK (0x8U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_rd_to_idle_SHIFT (3U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_rd_to_idle(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_rd_to_idle_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_rd_to_idle_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_resp_to_idle_MASK (0x10U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_resp_to_idle_SHIFT (4U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_resp_to_idle(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_resp_to_idle_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_resp_to_idle_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_completion_to_idle_MASK (0x20U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_completion_to_idle_SHIFT (5U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_completion_to_idle(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_completion_to_idle_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_completion_to_idle_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_set_addr_to_idle_MASK (0x40U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_set_addr_to_idle_SHIFT (6U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_set_addr_to_idle(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_set_addr_to_idle_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_set_addr_to_idle_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_7_MASK (0x80U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_7_SHIFT (7U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_7(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_7_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_7_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_clear_cntx_locks_MASK (0x100U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_clear_cntx_locks_SHIFT (8U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_clear_cntx_locks(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_clear_cntx_locks_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_clear_cntx_locks_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_9_MASK (0x200U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_9_SHIFT (9U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_9(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_9_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_9_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_ep_timer_tick_MASK (0x400U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_ep_timer_tick_SHIFT (10U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_ep_timer_tick(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_ep_timer_tick_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_ep_timer_tick_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_11_MASK (0x800U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_11_SHIFT (11U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_11(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_11_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_odma_11_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_base_timer_MASK (0x1000U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_base_timer_SHIFT (12U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_base_timer(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_base_timer_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_EP_base_timer_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_ACK_crd_check_en_MASK (0x2000U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_ACK_crd_check_en_SHIFT (13U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_ACK_crd_check_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_ACK_crd_check_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_ACK_crd_check_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_speed_up_timeout_MASK (0x4000U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_speed_up_timeout_SHIFT (14U)
#define USB_CORE_XECP_HOST_CTRL_ODMA_REG_speed_up_timeout(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_ODMA_REG_speed_up_timeout_SHIFT)) & USB_CORE_XECP_HOST_CTRL_ODMA_REG_speed_up_timeout_MASK)

/*! @name XECP_HOST_CTRL_IDMA_REG - Host Control IDMA */
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_EP_trans_timeout_en_MASK (0x1U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_EP_trans_timeout_en_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_EP_trans_timeout_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_EP_trans_timeout_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_EP_trans_timeout_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_EP_timer_tick_MASK (0x6U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_EP_timer_tick_SHIFT (1U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_EP_timer_tick(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_EP_timer_tick_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_EP_timer_tick_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_ptr_buf_room_restore_pulse_MASK (0x8U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_ptr_buf_room_restore_pulse_SHIFT (3U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_ptr_buf_room_restore_pulse(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_ptr_buf_room_restore_pulse_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_ptr_buf_room_restore_pulse_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_restore_rdp_credits_pulse_MASK (0x10U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_restore_rdp_credits_pulse_SHIFT (4U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_restore_rdp_credits_pulse(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_restore_rdp_credits_pulse_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_restore_rdp_credits_pulse_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_ack_pst_clr_pulse_MASK (0x20U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_ack_pst_clr_pulse_SHIFT (5U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_ack_pst_clr_pulse(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_ack_pst_clr_pulse_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_ack_pst_clr_pulse_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_dm_pst_clr_pulse_MASK (0x40U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_dm_pst_clr_pulse_SHIFT (6U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_dm_pst_clr_pulse(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_dm_pst_clr_pulse_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_dm_pst_clr_pulse_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_clear_cntx_locks_MASK (0x80U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_clear_cntx_locks_SHIFT (7U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_clear_cntx_locks(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_clear_cntx_locks_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_clear_cntx_locks_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_compliance_iso_enable_MASK (0x100U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_compliance_iso_enable_SHIFT (8U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_compliance_iso_enable(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_compliance_iso_enable_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_compliance_iso_enable_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_9_MASK (0x200U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_9_SHIFT (9U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_9(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_9_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_9_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_timer_tick0_MASK (0x400U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_timer_tick0_SHIFT (10U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_timer_tick0(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_timer_tick0_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_timer_tick0_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_seq_num_adj_on_nrdy_MASK (0x800U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_seq_num_adj_on_nrdy_SHIFT (11U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_seq_num_adj_on_nrdy(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_seq_num_adj_on_nrdy_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_seq_num_adj_on_nrdy_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_speed_up_timeout_MASK (0x1000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_speed_up_timeout_SHIFT (12U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_speed_up_timeout(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_speed_up_timeout_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_speed_up_timeout_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_13_MASK (0x2000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_13_SHIFT (13U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_13(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_13_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_13_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_14_MASK (0x4000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_14_SHIFT (14U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_14(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_14_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_14_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_15_MASK (0x8000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_15_SHIFT (15U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_15(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_15_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_15_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_ptr_buf_room_set_MASK (0x10000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_ptr_buf_room_set_SHIFT (16U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_ptr_buf_room_set(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_ptr_buf_room_set_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_ptr_buf_room_set_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_17_MASK (0x20000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_17_SHIFT (17U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_17(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_17_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_17_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_addr_fifo_flush_bit_MASK (0x40000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_addr_fifo_flush_bit_SHIFT (18U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_addr_fifo_flush_bit(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_addr_fifo_flush_bit_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_addr_fifo_flush_bit_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_23_19_MASK (0xF80000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_23_19_SHIFT (19U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_23_19(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_23_19_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_23_19_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_24_MASK (0x1000000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_24_SHIFT (24U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_24(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_24_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_24_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_25_MASK (0x2000000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_25_SHIFT (25U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_25(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_25_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_25_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_timer_tick1_MASK (0x4000000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_timer_tick1_SHIFT (26U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_timer_tick1(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_timer_tick1_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_timer_tick1_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_27_MASK (0x8000000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_27_SHIFT (27U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_27(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_27_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_27_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_28_MASK (0x10000000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_28_SHIFT (28U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_28(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_28_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_idma_28_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_db_event_gen_en_MASK (0x20000000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_db_event_gen_en_SHIFT (29U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_db_event_gen_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_db_event_gen_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_db_event_gen_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_event_priority_MASK (0x40000000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_event_priority_SHIFT (30U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_event_priority(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_event_priority_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_event_priority_MASK)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_event_fifo_dis_MASK (0x80000000U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_event_fifo_dis_SHIFT (31U)
#define USB_CORE_XECP_HOST_CTRL_IDMA_REG_event_fifo_dis(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_IDMA_REG_event_fifo_dis_SHIFT)) & USB_CORE_XECP_HOST_CTRL_IDMA_REG_event_fifo_dis_MASK)

/*! @name XECP_HOST_CTRL_PORT_CTRL - Global Port Control */
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_res1_MASK (0xFU)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_res1_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_res1(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_CTRL_res1_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_CTRL_res1_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_test_bus_sel_ctrl_bits_MASK (0x1F0U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_test_bus_sel_ctrl_bits_SHIFT (4U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_test_bus_sel_ctrl_bits(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_CTRL_test_bus_sel_ctrl_bits_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_CTRL_test_bus_sel_ctrl_bits_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_PCIe_gasket_MASK (0x800U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_PCIe_gasket_SHIFT (11U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_PCIe_gasket(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_CTRL_PCIe_gasket_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_CTRL_PCIe_gasket_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_enable_itp_xmt_MASK (0x1000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_enable_itp_xmt_SHIFT (12U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_enable_itp_xmt(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_CTRL_enable_itp_xmt_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_CTRL_enable_itp_xmt_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_hbuf_water_mark_reg_cclk_MASK (0x1E000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_hbuf_water_mark_reg_cclk_SHIFT (13U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_hbuf_water_mark_reg_cclk(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_CTRL_hbuf_water_mark_reg_cclk_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_CTRL_hbuf_water_mark_reg_cclk_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_overflow_sys_err_en_MASK (0x20000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_overflow_sys_err_en_SHIFT (17U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_overflow_sys_err_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_CTRL_overflow_sys_err_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_CTRL_overflow_sys_err_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_rd_wr_addr_conflict_en_MASK (0x40000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_rd_wr_addr_conflict_en_SHIFT (18U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_rd_wr_addr_conflict_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_CTRL_rd_wr_addr_conflict_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_CTRL_rd_wr_addr_conflict_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_lock_header_data_en_MASK (0x80000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_lock_header_data_en_SHIFT (19U)
#define USB_CORE_XECP_HOST_CTRL_PORT_CTRL_lock_header_data_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_CTRL_lock_header_data_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_CTRL_lock_header_data_en_MASK)

/*! @name XECP_AUX_CTRL_REG - AUX Reset Control */
#define USB_CORE_XECP_AUX_CTRL_REG_force_fd_rst_MASK (0x3U)
#define USB_CORE_XECP_AUX_CTRL_REG_force_fd_rst_SHIFT (0U)
#define USB_CORE_XECP_AUX_CTRL_REG_force_fd_rst(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_force_fd_rst_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_force_fd_rst_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_4fd_rst_MASK (0x4U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_4fd_rst_SHIFT (2U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_4fd_rst(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_4fd_rst_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_4fd_rst_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_4main_pwrup_MASK (0x8U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_4main_pwrup_SHIFT (3U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_4main_pwrup(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_4main_pwrup_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_4main_pwrup_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_pm_ctrl_main_rst_en_MASK (0x10U)
#define USB_CORE_XECP_AUX_CTRL_REG_pm_ctrl_main_rst_en_SHIFT (4U)
#define USB_CORE_XECP_AUX_CTRL_REG_pm_ctrl_main_rst_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_pm_ctrl_main_rst_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_pm_ctrl_main_rst_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_rst_MASK (0x20U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_rst_SHIFT (5U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_rst(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_rst_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_rst_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_2usb_phy_MASK (0x40U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_2usb_phy_SHIFT (6U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_2usb_phy(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_2usb_phy_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_2usb_phy_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_warm_rst_2usb_phy_MASK (0x80U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_warm_rst_2usb_phy_SHIFT (7U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_warm_rst_2usb_phy(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_warm_rst_2usb_phy_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_warm_rst_2usb_phy_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2pcie_phy_MASK (0x100U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2pcie_phy_SHIFT (8U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2pcie_phy(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2pcie_phy_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2pcie_phy_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2pcore_MASK (0x200U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2pcore_SHIFT (9U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2pcore(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2pcore_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2pcore_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_4u2port_MASK (0x400U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_4u2port_SHIFT (10U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_4u2port(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_4u2port_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_4u2port_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_4u3port_MASK (0x800U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_4u3port_SHIFT (11U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_4u3port(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_4u3port_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_4u3port_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_4u3port_MASK (0x1000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_4u3port_SHIFT (12U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_4u3port(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_4u3port_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_4u3port_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hot_rst_4u3port_MASK (0x2000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hot_rst_4u3port_SHIFT (13U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hot_rst_4u3port(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_hot_rst_4u3port_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_hot_rst_4u3port_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_pcie_linkdown_rst_en_MASK (0x4000U)
#define USB_CORE_XECP_AUX_CTRL_REG_pcie_linkdown_rst_en_SHIFT (14U)
#define USB_CORE_XECP_AUX_CTRL_REG_pcie_linkdown_rst_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_pcie_linkdown_rst_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_pcie_linkdown_rst_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_4uphy_pon_MASK (0x8000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_4uphy_pon_SHIFT (15U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_4uphy_pon(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_4uphy_pon_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_warm_rst_4uphy_pon_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_mac_phy_pipe_rst_MASK (0x10000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_mac_phy_pipe_rst_SHIFT (16U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_mac_phy_pipe_rst(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_mac_phy_pipe_rst_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_mac_phy_pipe_rst_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_rst_2pcie_phy_MASK (0x20000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_rst_2pcie_phy_SHIFT (17U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_rst_2pcie_phy(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_rst_2pcie_phy_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_rst_2pcie_phy_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_eeprom_load_on_main_MASK (0x40000U)
#define USB_CORE_XECP_AUX_CTRL_REG_eeprom_load_on_main_SHIFT (18U)
#define USB_CORE_XECP_AUX_CTRL_REG_eeprom_load_on_main(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_eeprom_load_on_main_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_eeprom_load_on_main_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_hc_2pcore_MASK (0x80000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_hc_2pcore_SHIFT (19U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_hc_2pcore(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_hc_2pcore_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_hc_2pcore_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_warm_rst_4uphy_pon_MASK (0x100000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_warm_rst_4uphy_pon_SHIFT (20U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_warm_rst_4uphy_pon(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_warm_rst_4uphy_pon_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_hc_warm_rst_4uphy_pon_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hcreset_4usb2_MASK (0x200000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hcreset_4usb2_SHIFT (21U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_hcreset_4usb2(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_hcreset_4usb2_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_hcreset_4usb2_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_cold_rst_n_pulse_MASK (0x400000U)
#define USB_CORE_XECP_AUX_CTRL_REG_cold_rst_n_pulse_SHIFT (22U)
#define USB_CORE_XECP_AUX_CTRL_REG_cold_rst_n_pulse(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_cold_rst_n_pulse_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_cold_rst_n_pulse_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2usb_phy_MASK (0x800000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2usb_phy_SHIFT (23U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2usb_phy(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2usb_phy_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_main_pwrup_2usb_phy_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_linkdown_rst_4uport_MASK (0x1000000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_linkdown_rst_4uport_SHIFT (24U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_linkdown_rst_4uport(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_linkdown_rst_4uport_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_linkdown_rst_4uport_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_fast_sim_rst_MASK (0x2000000U)
#define USB_CORE_XECP_AUX_CTRL_REG_fast_sim_rst_SHIFT (25U)
#define USB_CORE_XECP_AUX_CTRL_REG_fast_sim_rst(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_fast_sim_rst_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_fast_sim_rst_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_en_MASK (0x4000000U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_en_SHIFT (26U)
#define USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_ignore_perst_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_perst_4main_en_MASK (0x8000000U)
#define USB_CORE_XECP_AUX_CTRL_REG_perst_4main_en_SHIFT (27U)
#define USB_CORE_XECP_AUX_CTRL_REG_perst_4main_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_perst_4main_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_perst_4main_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_perst_2pwdown_en_MASK (0x10000000U)
#define USB_CORE_XECP_AUX_CTRL_REG_perst_2pwdown_en_SHIFT (28U)
#define USB_CORE_XECP_AUX_CTRL_REG_perst_2pwdown_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_perst_2pwdown_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_perst_2pwdown_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_pcie_phy_rst_sel_MASK (0x20000000U)
#define USB_CORE_XECP_AUX_CTRL_REG_pcie_phy_rst_sel_SHIFT (29U)
#define USB_CORE_XECP_AUX_CTRL_REG_pcie_phy_rst_sel(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_pcie_phy_rst_sel_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_pcie_phy_rst_sel_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG_perst_filter_dis_MASK (0x40000000U)
#define USB_CORE_XECP_AUX_CTRL_REG_perst_filter_dis_SHIFT (30U)
#define USB_CORE_XECP_AUX_CTRL_REG_perst_filter_dis(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG_perst_filter_dis_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG_perst_filter_dis_MASK)

/*! @name XECP_HOST_BW_OV_SS_REG - Super Speed Bandwidth Overload */
#define USB_CORE_XECP_HOST_BW_OV_SS_REG_ss_bw_calc_MASK (0xFFFU)
#define USB_CORE_XECP_HOST_BW_OV_SS_REG_ss_bw_calc_SHIFT (0U)
#define USB_CORE_XECP_HOST_BW_OV_SS_REG_ss_bw_calc(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_BW_OV_SS_REG_ss_bw_calc_SHIFT)) & USB_CORE_XECP_HOST_BW_OV_SS_REG_ss_bw_calc_MASK)
#define USB_CORE_XECP_HOST_BW_OV_SS_REG_max_tt_bw_MASK (0xFFF000U)
#define USB_CORE_XECP_HOST_BW_OV_SS_REG_max_tt_bw_SHIFT (12U)
#define USB_CORE_XECP_HOST_BW_OV_SS_REG_max_tt_bw(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_BW_OV_SS_REG_max_tt_bw_SHIFT)) & USB_CORE_XECP_HOST_BW_OV_SS_REG_max_tt_bw_MASK)

/*! @name XECP_HOST_BW_OV_HS_REG - High Speed TT Bandwidth Overload */
#define USB_CORE_XECP_HOST_BW_OV_HS_REG_bw_ov_hs_tt_MASK (0xFFFU)
#define USB_CORE_XECP_HOST_BW_OV_HS_REG_bw_ov_hs_tt_SHIFT (0U)
#define USB_CORE_XECP_HOST_BW_OV_HS_REG_bw_ov_hs_tt(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_BW_OV_HS_REG_bw_ov_hs_tt_SHIFT)) & USB_CORE_XECP_HOST_BW_OV_HS_REG_bw_ov_hs_tt_MASK)
#define USB_CORE_XECP_HOST_BW_OV_HS_REG_bw_ov_hs_MASK (0xFFF000U)
#define USB_CORE_XECP_HOST_BW_OV_HS_REG_bw_ov_hs_SHIFT (12U)
#define USB_CORE_XECP_HOST_BW_OV_HS_REG_bw_ov_hs(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_BW_OV_HS_REG_bw_ov_hs_SHIFT)) & USB_CORE_XECP_HOST_BW_OV_HS_REG_bw_ov_hs_MASK)

/*! @name XECP_HOST_BW_OV_FS_LS_REG - Bandwidth Overload Full and Low Speed */
#define USB_CORE_XECP_HOST_BW_OV_FS_LS_REG_ls_bw_calc_MASK (0xFFFU)
#define USB_CORE_XECP_HOST_BW_OV_FS_LS_REG_ls_bw_calc_SHIFT (0U)
#define USB_CORE_XECP_HOST_BW_OV_FS_LS_REG_ls_bw_calc(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_BW_OV_FS_LS_REG_ls_bw_calc_SHIFT)) & USB_CORE_XECP_HOST_BW_OV_FS_LS_REG_ls_bw_calc_MASK)
#define USB_CORE_XECP_HOST_BW_OV_FS_LS_REG_fs_bw_calc_MASK (0xFFF000U)
#define USB_CORE_XECP_HOST_BW_OV_FS_LS_REG_fs_bw_calc_SHIFT (12U)
#define USB_CORE_XECP_HOST_BW_OV_FS_LS_REG_fs_bw_calc(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_BW_OV_FS_LS_REG_fs_bw_calc_SHIFT)) & USB_CORE_XECP_HOST_BW_OV_FS_LS_REG_fs_bw_calc_MASK)

/*! @name XECP_HOST_BW_OV_SYS_REG - System Bandwidth Overload */
#define USB_CORE_XECP_HOST_BW_OV_SYS_REG_sys_bw_calc_MASK (0xFFFU)
#define USB_CORE_XECP_HOST_BW_OV_SYS_REG_sys_bw_calc_SHIFT (0U)
#define USB_CORE_XECP_HOST_BW_OV_SYS_REG_sys_bw_calc(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_BW_OV_SYS_REG_sys_bw_calc_SHIFT)) & USB_CORE_XECP_HOST_BW_OV_SYS_REG_sys_bw_calc_MASK)
#define USB_CORE_XECP_HOST_BW_OV_SYS_REG_bw_ov_sys_tt_MASK (0xFFF000U)
#define USB_CORE_XECP_HOST_BW_OV_SYS_REG_bw_ov_sys_tt_SHIFT (12U)
#define USB_CORE_XECP_HOST_BW_OV_SYS_REG_bw_ov_sys_tt(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_BW_OV_SYS_REG_bw_ov_sys_tt_SHIFT)) & USB_CORE_XECP_HOST_BW_OV_SYS_REG_bw_ov_sys_tt_MASK)

/*! @name XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG - Scheduler Async Delay */
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_ls_ctrl_delay_def_MASK (0x7U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_ls_ctrl_delay_def_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_ls_ctrl_delay_def(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_ls_ctrl_delay_def_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_ls_ctrl_delay_def_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_ls_ctrl_delay_en_MASK (0x8U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_ls_ctrl_delay_en_SHIFT (3U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_ls_ctrl_delay_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_ls_ctrl_delay_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_ls_ctrl_delay_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_ctrl_delay_def_MASK (0x70U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_ctrl_delay_def_SHIFT (4U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_ctrl_delay_def(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_ctrl_delay_def_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_ctrl_delay_def_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_ctrl_delay_en_MASK (0x80U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_ctrl_delay_en_SHIFT (7U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_ctrl_delay_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_ctrl_delay_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_ctrl_delay_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_ctrl_delay_def_MASK (0x700U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_ctrl_delay_def_SHIFT (8U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_ctrl_delay_def(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_ctrl_delay_def_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_ctrl_delay_def_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_ctrl_delay_en_MASK (0x800U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_ctrl_delay_en_SHIFT (11U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_ctrl_delay_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_ctrl_delay_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_ctrl_delay_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_bulk_delay_def_MASK (0x7000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_bulk_delay_def_SHIFT (12U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_bulk_delay_def(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_bulk_delay_def_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_bulk_delay_def_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_bulk_delay_en_MASK (0x8000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_bulk_delay_en_SHIFT (15U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_bulk_delay_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_bulk_delay_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_fs_bulk_delay_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_bulk_delay_def_MASK (0x70000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_bulk_delay_def_SHIFT (16U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_bulk_delay_def(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_bulk_delay_def_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_bulk_delay_def_MASK)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_bulk_delay_en_MASK (0x80000U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_bulk_delay_en_SHIFT (19U)
#define USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_bulk_delay_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_bulk_delay_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_SCH_ASYNC_DELAY_REG_hs_bulk_delay_en_MASK)

/*! @name XECP_UPORTS_PON_RST_REG - AUX Power PHY Reset */
#define USB_CORE_XECP_UPORTS_PON_RST_REG_usb_phy_port_num_MASK (0xFU)
#define USB_CORE_XECP_UPORTS_PON_RST_REG_usb_phy_port_num_SHIFT (0U)
#define USB_CORE_XECP_UPORTS_PON_RST_REG_usb_phy_port_num(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_UPORTS_PON_RST_REG_usb_phy_port_num_SHIFT)) & USB_CORE_XECP_UPORTS_PON_RST_REG_usb_phy_port_num_MASK)

/*! @name XECP_HOST_CTRL_TRM_REG3 - Host Control Transfer Manager (TRM) */
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_cache_MASK (0x1U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_cache_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_cache(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_cache_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_cache_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_lookahead_MASK (0x2U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_lookahead_SHIFT (1U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_lookahead(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_lookahead_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_lookahead_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_hit_invalid_MASK (0x4U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_hit_invalid_SHIFT (2U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_hit_invalid(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_hit_invalid_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_hit_invalid_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_cache_debug_MASK (0x8U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_cache_debug_SHIFT (3U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_cache_debug(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_cache_debug_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_cache_debug_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_look_pos_MASK (0x30U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_look_pos_SHIFT (4U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_look_pos(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_look_pos_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_look_pos_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_defer_bc_MASK (0x40U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_defer_bc_SHIFT (6U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_defer_bc(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_defer_bc_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_defer_bc_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_miss_double_MASK (0x80U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_miss_double_SHIFT (7U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_miss_double(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_miss_double_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG3_cfg_en_miss_double_MASK)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cpl_extra_db_rang_en_MASK (0x100U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cpl_extra_db_rang_en_SHIFT (8U)
#define USB_CORE_XECP_HOST_CTRL_TRM_REG3_cpl_extra_db_rang_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_TRM_REG3_cpl_extra_db_rang_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_TRM_REG3_cpl_extra_db_rang_en_MASK)

/*! @name XECP_AUX_CTRL_REG1 - AUX Power Management Control 1 */
#define USB_CORE_XECP_AUX_CTRL_REG1_force_pm_state_MASK (0x1U)
#define USB_CORE_XECP_AUX_CTRL_REG1_force_pm_state_SHIFT (0U)
#define USB_CORE_XECP_AUX_CTRL_REG1_force_pm_state(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_force_pm_state_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_force_pm_state_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_pm_state_MASK (0x1EU)
#define USB_CORE_XECP_AUX_CTRL_REG1_pm_state_SHIFT (1U)
#define USB_CORE_XECP_AUX_CTRL_REG1_pm_state(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_pm_state_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_pm_state_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_enable_p2_enter_MASK (0x20U)
#define USB_CORE_XECP_AUX_CTRL_REG1_enable_p2_enter_SHIFT (5U)
#define USB_CORE_XECP_AUX_CTRL_REG1_enable_p2_enter(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_enable_p2_enter_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_enable_p2_enter_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_p2_overwrite_p1_en_MASK (0x40U)
#define USB_CORE_XECP_AUX_CTRL_REG1_p2_overwrite_p1_en_SHIFT (6U)
#define USB_CORE_XECP_AUX_CTRL_REG1_p2_overwrite_p1_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_p2_overwrite_p1_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_p2_overwrite_p1_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_ignore_aux_pme_en_MASK (0x80U)
#define USB_CORE_XECP_AUX_CTRL_REG1_ignore_aux_pme_en_SHIFT (7U)
#define USB_CORE_XECP_AUX_CTRL_REG1_ignore_aux_pme_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_ignore_aux_pme_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_ignore_aux_pme_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_phystatus_fall_timeout_en_MASK (0x100U)
#define USB_CORE_XECP_AUX_CTRL_REG1_phystatus_fall_timeout_en_SHIFT (8U)
#define USB_CORE_XECP_AUX_CTRL_REG1_phystatus_fall_timeout_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_phystatus_fall_timeout_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_phystatus_fall_timeout_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_cclk_gate_disable_MASK (0x200U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cclk_gate_disable_SHIFT (9U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cclk_gate_disable(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_cclk_gate_disable_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_cclk_gate_disable_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_new_ow_en_MASK (0x400U)
#define USB_CORE_XECP_AUX_CTRL_REG1_new_ow_en_SHIFT (10U)
#define USB_CORE_XECP_AUX_CTRL_REG1_new_ow_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_new_ow_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_new_ow_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_isolation_en_MASK (0x800U)
#define USB_CORE_XECP_AUX_CTRL_REG1_isolation_en_SHIFT (11U)
#define USB_CORE_XECP_AUX_CTRL_REG1_isolation_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_isolation_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_isolation_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_pme_status_en_MASK (0x1000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_pme_status_en_SHIFT (12U)
#define USB_CORE_XECP_AUX_CTRL_REG1_pme_status_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_pme_status_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_pme_status_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_elecidle_mask_en_MASK (0x2000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_elecidle_mask_en_SHIFT (13U)
#define USB_CORE_XECP_AUX_CTRL_REG1_elecidle_mask_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_elecidle_mask_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_elecidle_mask_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_pipe_rst_en_MASK (0x4000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_pipe_rst_en_SHIFT (14U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_pipe_rst_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_cfg_pipe_rst_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_cfg_pipe_rst_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_rxdet_p3_en_MASK (0x8000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_rxdet_p3_en_SHIFT (15U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_rxdet_p3_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_cfg_rxdet_p3_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_cfg_rxdet_p3_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_clk_gate_dis_MASK (0x10000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_clk_gate_dis_SHIFT (16U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_clk_gate_dis(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_cfg_clk_gate_dis_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_cfg_clk_gate_dis_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_usb_p2_en_MASK (0x20000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_usb_p2_en_SHIFT (17U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_usb_p2_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_cfg_usb_p2_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_cfg_usb_p2_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_iob_drivestrength_MASK (0xC0000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_iob_drivestrength_SHIFT (18U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_iob_drivestrength(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_cfg_iob_drivestrength_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_cfg_iob_drivestrength_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_pcie_txreg_pd_MASK (0x100000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_pcie_txreg_pd_SHIFT (20U)
#define USB_CORE_XECP_AUX_CTRL_REG1_cfg_pcie_txreg_pd(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_cfg_pcie_txreg_pd_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_cfg_pcie_txreg_pd_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_clr_save_flag_MASK (0x200000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_clr_save_flag_SHIFT (21U)
#define USB_CORE_XECP_AUX_CTRL_REG1_clr_save_flag(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_clr_save_flag_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_clr_save_flag_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_reservedrw_MASK (0x400000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_reservedrw_SHIFT (22U)
#define USB_CORE_XECP_AUX_CTRL_REG1_reservedrw(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_reservedrw_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_reservedrw_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_sr_cmd_save_en_MASK (0x800000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_sr_cmd_save_en_SHIFT (23U)
#define USB_CORE_XECP_AUX_CTRL_REG1_sr_cmd_save_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_sr_cmd_save_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_sr_cmd_save_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_clr_ssv_en_MASK (0x1000000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_clr_ssv_en_SHIFT (24U)
#define USB_CORE_XECP_AUX_CTRL_REG1_clr_ssv_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_clr_ssv_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_clr_ssv_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_set_ssv_en_MASK (0x2000000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_set_ssv_en_SHIFT (25U)
#define USB_CORE_XECP_AUX_CTRL_REG1_set_ssv_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_set_ssv_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_set_ssv_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_powerdown_p1_en_MASK (0x4000000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_powerdown_p1_en_SHIFT (26U)
#define USB_CORE_XECP_AUX_CTRL_REG1_powerdown_p1_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_powerdown_p1_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_powerdown_p1_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_use_perst_4fd_rst_MASK (0x8000000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_use_perst_4fd_rst_SHIFT (27U)
#define USB_CORE_XECP_AUX_CTRL_REG1_use_perst_4fd_rst(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_use_perst_4fd_rst_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_use_perst_4fd_rst_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_direct_rate_pass_en_MASK (0x10000000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_direct_rate_pass_en_SHIFT (28U)
#define USB_CORE_XECP_AUX_CTRL_REG1_direct_rate_pass_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_direct_rate_pass_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_direct_rate_pass_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_extend_phystatus_en_MASK (0x20000000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_extend_phystatus_en_SHIFT (29U)
#define USB_CORE_XECP_AUX_CTRL_REG1_extend_phystatus_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_extend_phystatus_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_extend_phystatus_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_low_pwr_cclk_gate_en_MASK (0x40000000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_low_pwr_cclk_gate_en_SHIFT (30U)
#define USB_CORE_XECP_AUX_CTRL_REG1_low_pwr_cclk_gate_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_low_pwr_cclk_gate_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_low_pwr_cclk_gate_en_MASK)
#define USB_CORE_XECP_AUX_CTRL_REG1_d3_hot_pme_en_MASK (0x80000000U)
#define USB_CORE_XECP_AUX_CTRL_REG1_d3_hot_pme_en_SHIFT (31U)
#define USB_CORE_XECP_AUX_CTRL_REG1_d3_hot_pme_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_AUX_CTRL_REG1_d3_hot_pme_en_SHIFT)) & USB_CORE_XECP_AUX_CTRL_REG1_d3_hot_pme_en_MASK)

/*! @name XECP_HOST_CTRL_WATERMARK_REG - Port Watermark */
#define USB_CORE_XECP_HOST_CTRL_WATERMARK_REG_xbuf_water_mark_MASK (0xFFFFU)
#define USB_CORE_XECP_HOST_CTRL_WATERMARK_REG_xbuf_water_mark_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_WATERMARK_REG_xbuf_water_mark(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_WATERMARK_REG_xbuf_water_mark_SHIFT)) & USB_CORE_XECP_HOST_CTRL_WATERMARK_REG_xbuf_water_mark_MASK)
#define USB_CORE_XECP_HOST_CTRL_WATERMARK_REG_rbuf_water_mark_MASK (0xFFFF0000U)
#define USB_CORE_XECP_HOST_CTRL_WATERMARK_REG_rbuf_water_mark_SHIFT (16U)
#define USB_CORE_XECP_HOST_CTRL_WATERMARK_REG_rbuf_water_mark(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_WATERMARK_REG_rbuf_water_mark_SHIFT)) & USB_CORE_XECP_HOST_CTRL_WATERMARK_REG_rbuf_water_mark_MASK)

/*! @name XECP_HOST_CTRL_PORT_LINK_REG - SuperSpeed Port Link Control */
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_dis_comp_MASK (0x1U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_dis_comp_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_dis_comp(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_dis_comp_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_dis_comp_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_lpbk_mode_MASK (0x2U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_lpbk_mode_SHIFT (1U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_lpbk_mode(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_lpbk_mode_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_lpbk_mode_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u1_enable_MASK (0x4U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u1_enable_SHIFT (2U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u1_enable(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u1_enable_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u1_enable_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u2_enable_MASK (0x8U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u2_enable_SHIFT (3U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u2_enable(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u2_enable_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u2_enable_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_symbol_err_en_MASK (0x10U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_symbol_err_en_SHIFT (4U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_symbol_err_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_symbol_err_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_symbol_err_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_dis_scrmb_MASK (0x20U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_dis_scrmb_SHIFT (5U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_dis_scrmb(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_dis_scrmb_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_dis_scrmb_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_fast_training_MASK (0x40U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_fast_training_SHIFT (6U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_fast_training(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_fast_training_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_fast_training_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_recovery_MASK (0x80U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_recovery_SHIFT (7U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_recovery(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_recovery_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_recovery_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_force_pm_accept_MASK (0x100U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_force_pm_accept_SHIFT (8U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_force_pm_accept(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_force_pm_accept_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_force_pm_accept_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u3_recov_val_MASK (0xE00U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u3_recov_val_SHIFT (9U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u3_recov_val(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u3_recov_val_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_u3_recov_val_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_norm_recov_val_MASK (0x7000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_norm_recov_val_SHIFT (12U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_norm_recov_val(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_norm_recov_val_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_norm_recov_val_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_lowpower_latency_MASK (0x18000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_lowpower_latency_SHIFT (15U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_lowpower_latency(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_lowpower_latency_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_cfg_lowpower_latency_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_dbg_mode_sel_MASK (0xE0000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_dbg_mode_sel_SHIFT (17U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_dbg_mode_sel(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_dbg_mode_sel_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_dbg_mode_sel_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_link_err_cnt_slv_en_MASK (0x100000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_link_err_cnt_slv_en_SHIFT (20U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_link_err_cnt_slv_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_link_err_cnt_slv_en_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_link_err_cnt_slv_en_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_comp_pattern_MASK (0x1E00000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_comp_pattern_SHIFT (21U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_comp_pattern(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_comp_pattern_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_comp_pattern_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_u0_MASK (0x2000000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_u0_SHIFT (25U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_u0(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_u0_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_u0_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_MASK (0x4000000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_SHIFT (26U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_MASK)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_state_MASK (0xF8000000U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_state_SHIFT (27U)
#define USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_state(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_state_SHIFT)) & USB_CORE_XECP_HOST_CTRL_PORT_LINK_REG_force_ltssm_state_MASK)

/*! @name XECP_USB2_LINK_MGR_CTRL_REG1 - USB2 Port Link Control */
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_QUICK_SIM_MASK (0x1U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_QUICK_SIM_SHIFT (0U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_QUICK_SIM(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_QUICK_SIM_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_QUICK_SIM_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_RST_MASK (0x2U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_RST_SHIFT (1U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_RST(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_RST_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_RST_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_RSTDISCON_MASK (0x4U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_RSTDISCON_SHIFT (2U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_RSTDISCON(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_RSTDISCON_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_RSTDISCON_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_CLKGATEDIS_MASK (0x8U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_CLKGATEDIS_SHIFT (3U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_CLKGATEDIS(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_CLKGATEDIS_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_CLKGATEDIS_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_SUSDISALL_MASK (0x10U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_SUSDISALL_SHIFT (4U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_SUSDISALL(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_SUSDISALL_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_PHY_SUSDISALL_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_AUTOPING_MASK (0x20U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_AUTOPING_SHIFT (5U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_AUTOPING(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_AUTOPING_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_AUTOPING_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FORCEPING_MASK (0x40U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FORCEPING_SHIFT (6U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FORCEPING(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FORCEPING_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FORCEPING_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DROPPING_MASK (0x80U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DROPPING_SHIFT (7U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DROPPING(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DROPPING_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DROPPING_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIRECT_RESUME_MASK (0x100U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIRECT_RESUME_SHIFT (8U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIRECT_RESUME(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIRECT_RESUME_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIRECT_RESUME_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIS_ISO_PEEK_MASK (0x200U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIS_ISO_PEEK_SHIFT (9U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIS_ISO_PEEK(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIS_ISO_PEEK_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIS_ISO_PEEK_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIS_PORT_ERR_MASK (0x400U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIS_PORT_ERR_SHIFT (10U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIS_PORT_ERR(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIS_PORT_ERR_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_DIS_PORT_ERR_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_ENABLE_DISC_WIN_MASK (0x800U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_ENABLE_DISC_WIN_SHIFT (11U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_ENABLE_DISC_WIN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_ENABLE_DISC_WIN_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_ENABLE_DISC_WIN_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_UTMIRST1_MASK (0x1000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_UTMIRST1_SHIFT (12U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_UTMIRST1(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_UTMIRST1_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_UTMIRST1_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_UTMIRST2_MASK (0x2000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_UTMIRST2_SHIFT (13U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_UTMIRST2(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_UTMIRST2_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_UTMIRST2_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FS_LS_EXT_DISCON_MASK (0x4000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FS_LS_EXT_DISCON_SHIFT (14U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FS_LS_EXT_DISCON(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FS_LS_EXT_DISCON_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FS_LS_EXT_DISCON_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_SPLIT_192_LIMITDIS_MASK (0x8000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_SPLIT_192_LIMITDIS_SHIFT (15U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_SPLIT_192_LIMITDIS(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_SPLIT_192_LIMITDIS_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_SPLIT_192_LIMITDIS_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FORCE_FULL_SPEED_MASK (0x10000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FORCE_FULL_SPEED_SHIFT (16U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FORCE_FULL_SPEED(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FORCE_FULL_SPEED_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_FORCE_FULL_SPEED_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_EOP_DETECT_MASK (0x20000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_EOP_DETECT_SHIFT (17U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_EOP_DETECT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_EOP_DETECT_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_EOP_DETECT_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_ENABLE_FLUSH_TO_MASK (0x40000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_ENABLE_FLUSH_TO_SHIFT (18U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_ENABLE_FLUSH_TO(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_ENABLE_FLUSH_TO_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_ENABLE_FLUSH_TO_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_HW_LPM_ERRATA1_MASK (0x80000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_HW_LPM_ERRATA1_SHIFT (19U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_HW_LPM_ERRATA1(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_HW_LPM_ERRATA1_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_HW_LPM_ERRATA1_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_HW_LPM_ERRATA_MASK (0x100000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_HW_LPM_ERRATA_SHIFT (20U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_HW_LPM_ERRATA(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_HW_LPM_ERRATA_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_HW_LPM_ERRATA_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_RESUME_DEB_DIS_MASK (0x200000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_RESUME_DEB_DIS_SHIFT (21U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_RESUME_DEB_DIS(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_RESUME_DEB_DIS_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_RESUME_DEB_DIS_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_LATENCY_TOL_MSG_MASK (0x400000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_LATENCY_TOL_MSG_SHIFT (22U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_LATENCY_TOL_MSG(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_LATENCY_TOL_MSG_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_LATENCY_TOL_MSG_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_MASK (0x800000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_SHIFT (23U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_USB2_PM_DEBUG_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_TIMER_DISCONNECT_DETECT_lo_MASK (0xFF000000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_TIMER_DISCONNECT_DETECT_lo_SHIFT (24U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_TIMER_DISCONNECT_DETECT_lo(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_TIMER_DISCONNECT_DETECT_lo_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG1_TIMER_DISCONNECT_DETECT_lo_MASK)

/*! @name XECP_USB2_LINK_MGR_CTRL_REG2 - USB2 Port Link Control */
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_DISCONNECT_DETECT_hi_MASK (0x1FU)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_DISCONNECT_DETECT_hi_SHIFT (0U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_DISCONNECT_DETECT_hi(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_DISCONNECT_DETECT_hi_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_DISCONNECT_DETECT_hi_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_CONNECT_DETECT_MASK (0x3FFE0U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_CONNECT_DETECT_SHIFT (5U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_CONNECT_DETECT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_CONNECT_DETECT_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_CONNECT_DETECT_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_CHIRP_K_DETECT_MASK (0x7FFC0000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_CHIRP_K_DETECT_SHIFT (18U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_CHIRP_K_DETECT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_CHIRP_K_DETECT_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_CHIRP_K_DETECT_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_RESET_0_MASK (0x80000000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_RESET_0_SHIFT (31U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_RESET_0(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_RESET_0_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG2_TIMER_RESET_0_MASK)

/*! @name XECP_USB2_LINK_MGR_CTRL_REG3 - USB2 Port Link Control */
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_RESET_MASK (0x7FFFU)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_RESET_SHIFT (0U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_RESET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_RESET_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_RESET_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_U3_SETTLE_MASK (0xFFF8000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_U3_SETTLE_SHIFT (15U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_U3_SETTLE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_U3_SETTLE_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_U3_SETTLE_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_U2_SETTLE_MASK (0xF0000000U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_U2_SETTLE_SHIFT (28U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_U2_SETTLE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_U2_SETTLE_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG3_TIMER_U2_SETTLE_MASK)

/*! @name XECP_USB2_LINK_MGR_CTRL_REG4 - USB2 Port Link Control */
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG4_TIMER_U2_SETTLE_MASK (0x1FFU)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG4_TIMER_U2_SETTLE_SHIFT (0U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG4_TIMER_U2_SETTLE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG4_TIMER_U2_SETTLE_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG4_TIMER_U2_SETTLE_MASK)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG4_TIMER_RESUME_U2_REFLECT_MASK (0x1FFFE00U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG4_TIMER_RESUME_U2_REFLECT_SHIFT (9U)
#define USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG4_TIMER_RESUME_U2_REFLECT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG4_TIMER_RESUME_U2_REFLECT_SHIFT)) & USB_CORE_XECP_USB2_LINK_MGR_CTRL_REG4_TIMER_RESUME_U2_REFLECT_MASK)

/*! @name XECP_HOST_CTRL_BW_MAX_REG - USB2 Max Bandwidth Control */
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_fsls_max_bw_MASK (0xFFU)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_fsls_max_bw_SHIFT (0U)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_fsls_max_bw(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_fsls_max_bw_SHIFT)) & USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_fsls_max_bw_MASK)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_hs_max_bw_MASK (0xFF00U)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_hs_max_bw_SHIFT (8U)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_hs_max_bw(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_hs_max_bw_SHIFT)) & USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_hs_max_bw_MASK)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_ss_max_bw_MASK (0xFF0000U)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_ss_max_bw_SHIFT (16U)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_ss_max_bw(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_ss_max_bw_SHIFT)) & USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_ss_max_bw_MASK)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_fsls_bhub_max_bw_MASK (0xFF000000U)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_fsls_bhub_max_bw_SHIFT (24U)
#define USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_fsls_bhub_max_bw(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_fsls_bhub_max_bw_SHIFT)) & USB_CORE_XECP_HOST_CTRL_BW_MAX_REG_fsls_bhub_max_bw_MASK)

/*! @name XECP_FPGA_REVISION_REG - FPGA_REVISION_REG */
#define USB_CORE_XECP_FPGA_REVISION_REG_FPGA_REVISION_REG_DEFAULT_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_FPGA_REVISION_REG_FPGA_REVISION_REG_DEFAULT_SHIFT (0U)
#define USB_CORE_XECP_FPGA_REVISION_REG_FPGA_REVISION_REG_DEFAULT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_FPGA_REVISION_REG_FPGA_REVISION_REG_DEFAULT_SHIFT)) & USB_CORE_XECP_FPGA_REVISION_REG_FPGA_REVISION_REG_DEFAULT_MASK)

/*! @name XECP_HOST_INTF_CTRL_REG - Host interface control */
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_host_err_mask_MASK (0x1U)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_host_err_mask_SHIFT (0U)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_host_err_mask(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_INTF_CTRL_REG_host_err_mask_SHIFT)) & USB_CORE_XECP_HOST_INTF_CTRL_REG_host_err_mask_MASK)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_hc_halt_timeout_en_MASK (0x2U)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_hc_halt_timeout_en_SHIFT (1U)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_hc_halt_timeout_en(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_INTF_CTRL_REG_hc_halt_timeout_en_SHIFT)) & USB_CORE_XECP_HOST_INTF_CTRL_REG_hc_halt_timeout_en_MASK)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_host_intf_ctrl_MASK (0x3CU)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_host_intf_ctrl_SHIFT (2U)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_host_intf_ctrl(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_INTF_CTRL_REG_host_intf_ctrl_SHIFT)) & USB_CORE_XECP_HOST_INTF_CTRL_REG_host_intf_ctrl_MASK)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_cfg_max_num_of_rd_MASK (0xC0U)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_cfg_max_num_of_rd_SHIFT (6U)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_cfg_max_num_of_rd(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_INTF_CTRL_REG_cfg_max_num_of_rd_SHIFT)) & USB_CORE_XECP_HOST_INTF_CTRL_REG_cfg_max_num_of_rd_MASK)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_prot_hdr_rbuf_overflow_cclk_MASK (0x100U)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_prot_hdr_rbuf_overflow_cclk_SHIFT (8U)
#define USB_CORE_XECP_HOST_INTF_CTRL_REG_prot_hdr_rbuf_overflow_cclk(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_HOST_INTF_CTRL_REG_prot_hdr_rbuf_overflow_cclk_SHIFT)) & USB_CORE_XECP_HOST_INTF_CTRL_REG_prot_hdr_rbuf_overflow_cclk_MASK)

/*! @name XECP_USBLEGSUP - USB Legacy Support Capability */
#define USB_CORE_XECP_USBLEGSUP_CID_MASK         (0xFFU)
#define USB_CORE_XECP_USBLEGSUP_CID_SHIFT        (0U)
#define USB_CORE_XECP_USBLEGSUP_CID(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGSUP_CID_SHIFT)) & USB_CORE_XECP_USBLEGSUP_CID_MASK)
#define USB_CORE_XECP_USBLEGSUP_NextCP_MASK      (0xFF00U)
#define USB_CORE_XECP_USBLEGSUP_NextCP_SHIFT     (8U)
#define USB_CORE_XECP_USBLEGSUP_NextCP(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGSUP_NextCP_SHIFT)) & USB_CORE_XECP_USBLEGSUP_NextCP_MASK)
#define USB_CORE_XECP_USBLEGSUP_HCBIOSOS_MASK    (0x10000U)
#define USB_CORE_XECP_USBLEGSUP_HCBIOSOS_SHIFT   (16U)
#define USB_CORE_XECP_USBLEGSUP_HCBIOSOS(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGSUP_HCBIOSOS_SHIFT)) & USB_CORE_XECP_USBLEGSUP_HCBIOSOS_MASK)
#define USB_CORE_XECP_USBLEGSUP_HCOSOS_MASK      (0x1000000U)
#define USB_CORE_XECP_USBLEGSUP_HCOSOS_SHIFT     (24U)
#define USB_CORE_XECP_USBLEGSUP_HCOSOS(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGSUP_HCOSOS_SHIFT)) & USB_CORE_XECP_USBLEGSUP_HCOSOS_MASK)

/*! @name XECP_USBLEGCTLSTS - USB Legacy Support Control Status */
#define USB_CORE_XECP_USBLEGCTLSTS_USBSMIE_MASK  (0x1U)
#define USB_CORE_XECP_USBLEGCTLSTS_USBSMIE_SHIFT (0U)
#define USB_CORE_XECP_USBLEGCTLSTS_USBSMIE(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGCTLSTS_USBSMIE_SHIFT)) & USB_CORE_XECP_USBLEGCTLSTS_USBSMIE_MASK)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIHSEE_MASK  (0x10U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIHSEE_SHIFT (4U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIHSEE(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGCTLSTS_SMIHSEE_SHIFT)) & USB_CORE_XECP_USBLEGCTLSTS_SMIHSEE_MASK)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIOSOE_MASK  (0x2000U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIOSOE_SHIFT (13U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIOSOE(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGCTLSTS_SMIOSOE_SHIFT)) & USB_CORE_XECP_USBLEGCTLSTS_SMIOSOE_MASK)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIPCICE_MASK (0x4000U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIPCICE_SHIFT (14U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIPCICE(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGCTLSTS_SMIPCICE_SHIFT)) & USB_CORE_XECP_USBLEGCTLSTS_SMIPCICE_MASK)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIBARE_MASK  (0x8000U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIBARE_SHIFT (15U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIBARE(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGCTLSTS_SMIBARE_SHIFT)) & USB_CORE_XECP_USBLEGCTLSTS_SMIBARE_MASK)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIEI_MASK    (0x10000U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIEI_SHIFT   (16U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIEI(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGCTLSTS_SMIEI_SHIFT)) & USB_CORE_XECP_USBLEGCTLSTS_SMIEI_MASK)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIHSE_MASK   (0x100000U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIHSE_SHIFT  (20U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIHSE(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGCTLSTS_SMIHSE_SHIFT)) & USB_CORE_XECP_USBLEGCTLSTS_SMIHSE_MASK)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIOSOC_MASK  (0x20000000U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIOSOC_SHIFT (29U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIOSOC(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGCTLSTS_SMIOSOC_SHIFT)) & USB_CORE_XECP_USBLEGCTLSTS_SMIOSOC_MASK)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIPCIC_MASK  (0x40000000U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIPCIC_SHIFT (30U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIPCIC(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGCTLSTS_SMIPCIC_SHIFT)) & USB_CORE_XECP_USBLEGCTLSTS_SMIPCIC_MASK)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIBAR_MASK   (0x80000000U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIBAR_SHIFT  (31U)
#define USB_CORE_XECP_USBLEGCTLSTS_SMIBAR(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_USBLEGCTLSTS_SMIBAR_SHIFT)) & USB_CORE_XECP_USBLEGCTLSTS_SMIBAR_MASK)

/*! @name XECP_DCID - Debug Capability ID */
#define USB_CORE_XECP_DCID_CapID_MASK            (0xFFU)
#define USB_CORE_XECP_DCID_CapID_SHIFT           (0U)
#define USB_CORE_XECP_DCID_CapID(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCID_CapID_SHIFT)) & USB_CORE_XECP_DCID_CapID_MASK)
#define USB_CORE_XECP_DCID_NextCapID_MASK        (0xFF00U)
#define USB_CORE_XECP_DCID_NextCapID_SHIFT       (8U)
#define USB_CORE_XECP_DCID_NextCapID(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCID_NextCapID_SHIFT)) & USB_CORE_XECP_DCID_NextCapID_MASK)
#define USB_CORE_XECP_DCID_DCERST_Max_MASK       (0x1F0000U)
#define USB_CORE_XECP_DCID_DCERST_Max_SHIFT      (16U)
#define USB_CORE_XECP_DCID_DCERST_Max(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCID_DCERST_Max_SHIFT)) & USB_CORE_XECP_DCID_DCERST_Max_MASK)

/*! @name XECP_DCDB - Debug Capability Doorbell */
#define USB_CORE_XECP_DCDB_DB_target_MASK        (0xFF00U)
#define USB_CORE_XECP_DCDB_DB_target_SHIFT       (8U)
#define USB_CORE_XECP_DCDB_DB_target(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCDB_DB_target_SHIFT)) & USB_CORE_XECP_DCDB_DB_target_MASK)

/*! @name XECP_DCERSTSZ - Debug Capability Event Ring Segment Table Size */
#define USB_CORE_XECP_DCERSTSZ_ERSTSZ_MASK       (0xFFFFU)
#define USB_CORE_XECP_DCERSTSZ_ERSTSZ_SHIFT      (0U)
#define USB_CORE_XECP_DCERSTSZ_ERSTSZ(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCERSTSZ_ERSTSZ_SHIFT)) & USB_CORE_XECP_DCERSTSZ_ERSTSZ_MASK)

/*! @name XECP_DCERSTBA_LOW - Debug Capability Event Ring Segment Table Base Address */
#define USB_CORE_XECP_DCERSTBA_LOW_ERSTBA_L_MASK (0xFFFFFFF0U)
#define USB_CORE_XECP_DCERSTBA_LOW_ERSTBA_L_SHIFT (4U)
#define USB_CORE_XECP_DCERSTBA_LOW_ERSTBA_L(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCERSTBA_LOW_ERSTBA_L_SHIFT)) & USB_CORE_XECP_DCERSTBA_LOW_ERSTBA_L_MASK)

/*! @name XECP_DCERSTBA_HIGH - Debug Capability Event Ring Segment Table Base Address */
#define USB_CORE_XECP_DCERSTBA_HIGH_ERSTBA_H_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_DCERSTBA_HIGH_ERSTBA_H_SHIFT (0U)
#define USB_CORE_XECP_DCERSTBA_HIGH_ERSTBA_H(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCERSTBA_HIGH_ERSTBA_H_SHIFT)) & USB_CORE_XECP_DCERSTBA_HIGH_ERSTBA_H_MASK)

/*! @name XECP_DCERDP_LOW - Debug Capability Event Ring Dequeue Pointer */
#define USB_CORE_XECP_DCERDP_LOW_DESI_MASK       (0x7U)
#define USB_CORE_XECP_DCERDP_LOW_DESI_SHIFT      (0U)
#define USB_CORE_XECP_DCERDP_LOW_DESI(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCERDP_LOW_DESI_SHIFT)) & USB_CORE_XECP_DCERDP_LOW_DESI_MASK)
#define USB_CORE_XECP_DCERDP_LOW_Deq_Ptr_L_MASK  (0xFFFFFFF0U)
#define USB_CORE_XECP_DCERDP_LOW_Deq_Ptr_L_SHIFT (4U)
#define USB_CORE_XECP_DCERDP_LOW_Deq_Ptr_L(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCERDP_LOW_Deq_Ptr_L_SHIFT)) & USB_CORE_XECP_DCERDP_LOW_Deq_Ptr_L_MASK)

/*! @name XECP_DCERDP_HIGH - Debug Capability Event Ring Dequeue Pointer */
#define USB_CORE_XECP_DCERDP_HIGH_Deq_Ptr_H_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_DCERDP_HIGH_Deq_Ptr_H_SHIFT (0U)
#define USB_CORE_XECP_DCERDP_HIGH_Deq_Ptr_H(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCERDP_HIGH_Deq_Ptr_H_SHIFT)) & USB_CORE_XECP_DCERDP_HIGH_Deq_Ptr_H_MASK)

/*! @name XECP_DCCTRL - Debug Capability Control */
#define USB_CORE_XECP_DCCTRL_DCR_MASK            (0x1U)
#define USB_CORE_XECP_DCCTRL_DCR_SHIFT           (0U)
#define USB_CORE_XECP_DCCTRL_DCR(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCCTRL_DCR_SHIFT)) & USB_CORE_XECP_DCCTRL_DCR_MASK)
#define USB_CORE_XECP_DCCTRL_LSE_MASK            (0x2U)
#define USB_CORE_XECP_DCCTRL_LSE_SHIFT           (1U)
#define USB_CORE_XECP_DCCTRL_LSE(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCCTRL_LSE_SHIFT)) & USB_CORE_XECP_DCCTRL_LSE_MASK)
#define USB_CORE_XECP_DCCTRL_HOT_MASK            (0x4U)
#define USB_CORE_XECP_DCCTRL_HOT_SHIFT           (2U)
#define USB_CORE_XECP_DCCTRL_HOT(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCCTRL_HOT_SHIFT)) & USB_CORE_XECP_DCCTRL_HOT_MASK)
#define USB_CORE_XECP_DCCTRL_HIT_MASK            (0x8U)
#define USB_CORE_XECP_DCCTRL_HIT_SHIFT           (3U)
#define USB_CORE_XECP_DCCTRL_HIT(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCCTRL_HIT_SHIFT)) & USB_CORE_XECP_DCCTRL_HIT_MASK)
#define USB_CORE_XECP_DCCTRL_DRC_MASK            (0x10U)
#define USB_CORE_XECP_DCCTRL_DRC_SHIFT           (4U)
#define USB_CORE_XECP_DCCTRL_DRC(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCCTRL_DRC_SHIFT)) & USB_CORE_XECP_DCCTRL_DRC_MASK)
#define USB_CORE_XECP_DCCTRL_DMaxBSize_MASK      (0xFF0000U)
#define USB_CORE_XECP_DCCTRL_DMaxBSize_SHIFT     (16U)
#define USB_CORE_XECP_DCCTRL_DMaxBSize(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCCTRL_DMaxBSize_SHIFT)) & USB_CORE_XECP_DCCTRL_DMaxBSize_MASK)
#define USB_CORE_XECP_DCCTRL_Dev_addr_MASK       (0x7F000000U)
#define USB_CORE_XECP_DCCTRL_Dev_addr_SHIFT      (24U)
#define USB_CORE_XECP_DCCTRL_Dev_addr(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCCTRL_Dev_addr_SHIFT)) & USB_CORE_XECP_DCCTRL_Dev_addr_MASK)
#define USB_CORE_XECP_DCCTRL_DCE_MASK            (0x80000000U)
#define USB_CORE_XECP_DCCTRL_DCE_SHIFT           (31U)
#define USB_CORE_XECP_DCCTRL_DCE(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCCTRL_DCE_SHIFT)) & USB_CORE_XECP_DCCTRL_DCE_MASK)

/*! @name XECP_DCST - Debug Capability Status */
#define USB_CORE_XECP_DCST_ER_MASK               (0x1U)
#define USB_CORE_XECP_DCST_ER_SHIFT              (0U)
#define USB_CORE_XECP_DCST_ER(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCST_ER_SHIFT)) & USB_CORE_XECP_DCST_ER_MASK)
#define USB_CORE_XECP_DCST_Dbgp_num_MASK         (0xFF000000U)
#define USB_CORE_XECP_DCST_Dbgp_num_SHIFT        (24U)
#define USB_CORE_XECP_DCST_Dbgp_num(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCST_Dbgp_num_SHIFT)) & USB_CORE_XECP_DCST_Dbgp_num_MASK)

/*! @name XECP_DCPORTSC - Debug Capability Port Status and Control */
#define USB_CORE_XECP_DCPORTSC_CCS_MASK          (0x1U)
#define USB_CORE_XECP_DCPORTSC_CCS_SHIFT         (0U)
#define USB_CORE_XECP_DCPORTSC_CCS(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCPORTSC_CCS_SHIFT)) & USB_CORE_XECP_DCPORTSC_CCS_MASK)
#define USB_CORE_XECP_DCPORTSC_PED_MASK          (0x2U)
#define USB_CORE_XECP_DCPORTSC_PED_SHIFT         (1U)
#define USB_CORE_XECP_DCPORTSC_PED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCPORTSC_PED_SHIFT)) & USB_CORE_XECP_DCPORTSC_PED_MASK)
#define USB_CORE_XECP_DCPORTSC_PR_MASK           (0x10U)
#define USB_CORE_XECP_DCPORTSC_PR_SHIFT          (4U)
#define USB_CORE_XECP_DCPORTSC_PR(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCPORTSC_PR_SHIFT)) & USB_CORE_XECP_DCPORTSC_PR_MASK)
#define USB_CORE_XECP_DCPORTSC_PLS_MASK          (0x1E0U)
#define USB_CORE_XECP_DCPORTSC_PLS_SHIFT         (5U)
#define USB_CORE_XECP_DCPORTSC_PLS(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCPORTSC_PLS_SHIFT)) & USB_CORE_XECP_DCPORTSC_PLS_MASK)
#define USB_CORE_XECP_DCPORTSC_PortSpeed_MASK    (0x3C00U)
#define USB_CORE_XECP_DCPORTSC_PortSpeed_SHIFT   (10U)
#define USB_CORE_XECP_DCPORTSC_PortSpeed(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCPORTSC_PortSpeed_SHIFT)) & USB_CORE_XECP_DCPORTSC_PortSpeed_MASK)
#define USB_CORE_XECP_DCPORTSC_CSC_MASK          (0x20000U)
#define USB_CORE_XECP_DCPORTSC_CSC_SHIFT         (17U)
#define USB_CORE_XECP_DCPORTSC_CSC(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCPORTSC_CSC_SHIFT)) & USB_CORE_XECP_DCPORTSC_CSC_MASK)
#define USB_CORE_XECP_DCPORTSC_PRC_MASK          (0x200000U)
#define USB_CORE_XECP_DCPORTSC_PRC_SHIFT         (21U)
#define USB_CORE_XECP_DCPORTSC_PRC(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCPORTSC_PRC_SHIFT)) & USB_CORE_XECP_DCPORTSC_PRC_MASK)
#define USB_CORE_XECP_DCPORTSC_PLC_MASK          (0x400000U)
#define USB_CORE_XECP_DCPORTSC_PLC_SHIFT         (22U)
#define USB_CORE_XECP_DCPORTSC_PLC(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCPORTSC_PLC_SHIFT)) & USB_CORE_XECP_DCPORTSC_PLC_MASK)
#define USB_CORE_XECP_DCPORTSC_CEC_MASK          (0x800000U)
#define USB_CORE_XECP_DCPORTSC_CEC_SHIFT         (23U)
#define USB_CORE_XECP_DCPORTSC_CEC(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCPORTSC_CEC_SHIFT)) & USB_CORE_XECP_DCPORTSC_CEC_MASK)

/*! @name XECP_DCCP_LOW - Debug Capability Context Pointer */
#define USB_CORE_XECP_DCCP_LOW_DBGP_CNTX_PTR_L_MASK (0xFFFFFFF0U)
#define USB_CORE_XECP_DCCP_LOW_DBGP_CNTX_PTR_L_SHIFT (4U)
#define USB_CORE_XECP_DCCP_LOW_DBGP_CNTX_PTR_L(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCCP_LOW_DBGP_CNTX_PTR_L_SHIFT)) & USB_CORE_XECP_DCCP_LOW_DBGP_CNTX_PTR_L_MASK)

/*! @name XECP_DCCP_HIGH - Debug Capability Context Pointer */
#define USB_CORE_XECP_DCCP_HIGH_DBGP_CNTX_PTR_H_MASK (0xFFFFFFFFU)
#define USB_CORE_XECP_DCCP_HIGH_DBGP_CNTX_PTR_H_SHIFT (0U)
#define USB_CORE_XECP_DCCP_HIGH_DBGP_CNTX_PTR_H(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCCP_HIGH_DBGP_CNTX_PTR_H_SHIFT)) & USB_CORE_XECP_DCCP_HIGH_DBGP_CNTX_PTR_H_MASK)

/*! @name XECP_DCDDI1 - Debug Capability Device Descriptor Info */
#define USB_CORE_XECP_DCDDI1_DbC_PROT_MASK       (0xFFU)
#define USB_CORE_XECP_DCDDI1_DbC_PROT_SHIFT      (0U)
#define USB_CORE_XECP_DCDDI1_DbC_PROT(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCDDI1_DbC_PROT_SHIFT)) & USB_CORE_XECP_DCDDI1_DbC_PROT_MASK)
#define USB_CORE_XECP_DCDDI1_VID_MASK            (0xFFFF0000U)
#define USB_CORE_XECP_DCDDI1_VID_SHIFT           (16U)
#define USB_CORE_XECP_DCDDI1_VID(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCDDI1_VID_SHIFT)) & USB_CORE_XECP_DCDDI1_VID_MASK)

/*! @name XECP_DCDDI2 - The Debug Capability Device Descriptor */
#define USB_CORE_XECP_DCDDI2_PROD_ID_MASK        (0xFFFFU)
#define USB_CORE_XECP_DCDDI2_PROD_ID_SHIFT       (0U)
#define USB_CORE_XECP_DCDDI2_PROD_ID(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCDDI2_PROD_ID_SHIFT)) & USB_CORE_XECP_DCDDI2_PROD_ID_MASK)
#define USB_CORE_XECP_DCDDI2_DEV_REV_MASK        (0xFFFF0000U)
#define USB_CORE_XECP_DCDDI2_DEV_REV_SHIFT       (16U)
#define USB_CORE_XECP_DCDDI2_DEV_REV(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_XECP_DCDDI2_DEV_REV_SHIFT)) & USB_CORE_XECP_DCDDI2_DEV_REV_MASK)

/*! @name USB_CONF - Global Configuration */
#define USB_CORE_USB_CONF_CFGRST_MASK            (0x1U)
#define USB_CORE_USB_CONF_CFGRST_SHIFT           (0U)
#define USB_CORE_USB_CONF_CFGRST(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_CFGRST_SHIFT)) & USB_CORE_USB_CONF_CFGRST_MASK)
#define USB_CORE_USB_CONF_CFGSET_MASK            (0x2U)
#define USB_CORE_USB_CONF_CFGSET_SHIFT           (1U)
#define USB_CORE_USB_CONF_CFGSET(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_CFGSET_SHIFT)) & USB_CORE_USB_CONF_CFGSET_MASK)
#define USB_CORE_USB_CONF_RESERVED0_MASK         (0x4U)
#define USB_CORE_USB_CONF_RESERVED0_SHIFT        (2U)
#define USB_CORE_USB_CONF_RESERVED0(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_RESERVED0_SHIFT)) & USB_CORE_USB_CONF_RESERVED0_MASK)
#define USB_CORE_USB_CONF_USB3DIS_MASK           (0x8U)
#define USB_CORE_USB_CONF_USB3DIS_SHIFT          (3U)
#define USB_CORE_USB_CONF_USB3DIS(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_USB3DIS_SHIFT)) & USB_CORE_USB_CONF_USB3DIS_MASK)
#define USB_CORE_USB_CONF_USB2DIS_MASK           (0x10U)
#define USB_CORE_USB_CONF_USB2DIS_SHIFT          (4U)
#define USB_CORE_USB_CONF_USB2DIS(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_USB2DIS_SHIFT)) & USB_CORE_USB_CONF_USB2DIS_MASK)
#define USB_CORE_USB_CONF_LENDIAN_MASK           (0x20U)
#define USB_CORE_USB_CONF_LENDIAN_SHIFT          (5U)
#define USB_CORE_USB_CONF_LENDIAN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_LENDIAN_SHIFT)) & USB_CORE_USB_CONF_LENDIAN_MASK)
#define USB_CORE_USB_CONF_BENDIAN_MASK           (0x40U)
#define USB_CORE_USB_CONF_BENDIAN_SHIFT          (6U)
#define USB_CORE_USB_CONF_BENDIAN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_BENDIAN_SHIFT)) & USB_CORE_USB_CONF_BENDIAN_MASK)
#define USB_CORE_USB_CONF_SWRST_MASK             (0x80U)
#define USB_CORE_USB_CONF_SWRST_SHIFT            (7U)
#define USB_CORE_USB_CONF_SWRST(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_SWRST_SHIFT)) & USB_CORE_USB_CONF_SWRST_MASK)
#define USB_CORE_USB_CONF_DSING_MASK             (0x100U)
#define USB_CORE_USB_CONF_DSING_SHIFT            (8U)
#define USB_CORE_USB_CONF_DSING(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_DSING_SHIFT)) & USB_CORE_USB_CONF_DSING_MASK)
#define USB_CORE_USB_CONF_DMULT_MASK             (0x200U)
#define USB_CORE_USB_CONF_DMULT_SHIFT            (9U)
#define USB_CORE_USB_CONF_DMULT(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_DMULT_SHIFT)) & USB_CORE_USB_CONF_DMULT_MASK)
#define USB_CORE_USB_CONF_DMAOFFEN_MASK          (0x400U)
#define USB_CORE_USB_CONF_DMAOFFEN_SHIFT         (10U)
#define USB_CORE_USB_CONF_DMAOFFEN(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_DMAOFFEN_SHIFT)) & USB_CORE_USB_CONF_DMAOFFEN_MASK)
#define USB_CORE_USB_CONF_DMAOFFDS_MASK          (0x800U)
#define USB_CORE_USB_CONF_DMAOFFDS_SHIFT         (11U)
#define USB_CORE_USB_CONF_DMAOFFDS(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_DMAOFFDS_SHIFT)) & USB_CORE_USB_CONF_DMAOFFDS_MASK)
#define USB_CORE_USB_CONF_CFORCE_FS_MASK         (0x1000U)
#define USB_CORE_USB_CONF_CFORCE_FS_SHIFT        (12U)
#define USB_CORE_USB_CONF_CFORCE_FS(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_CFORCE_FS_SHIFT)) & USB_CORE_USB_CONF_CFORCE_FS_MASK)
#define USB_CORE_USB_CONF_SFORCE_FS_MASK         (0x2000U)
#define USB_CORE_USB_CONF_SFORCE_FS_SHIFT        (13U)
#define USB_CORE_USB_CONF_SFORCE_FS(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_SFORCE_FS_SHIFT)) & USB_CORE_USB_CONF_SFORCE_FS_MASK)
#define USB_CORE_USB_CONF_DEVEN_MASK             (0x4000U)
#define USB_CORE_USB_CONF_DEVEN_SHIFT            (14U)
#define USB_CORE_USB_CONF_DEVEN(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_DEVEN_SHIFT)) & USB_CORE_USB_CONF_DEVEN_MASK)
#define USB_CORE_USB_CONF_DEVDS_MASK             (0x8000U)
#define USB_CORE_USB_CONF_DEVDS_SHIFT            (15U)
#define USB_CORE_USB_CONF_DEVDS(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_DEVDS_SHIFT)) & USB_CORE_USB_CONF_DEVDS_MASK)
#define USB_CORE_USB_CONF_L1EN_MASK              (0x10000U)
#define USB_CORE_USB_CONF_L1EN_SHIFT             (16U)
#define USB_CORE_USB_CONF_L1EN(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_L1EN_SHIFT)) & USB_CORE_USB_CONF_L1EN_MASK)
#define USB_CORE_USB_CONF_L1DS_MASK              (0x20000U)
#define USB_CORE_USB_CONF_L1DS_SHIFT             (17U)
#define USB_CORE_USB_CONF_L1DS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_L1DS_SHIFT)) & USB_CORE_USB_CONF_L1DS_MASK)
#define USB_CORE_USB_CONF_CLK2OFFEN_MASK         (0x40000U)
#define USB_CORE_USB_CONF_CLK2OFFEN_SHIFT        (18U)
#define USB_CORE_USB_CONF_CLK2OFFEN(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_CLK2OFFEN_SHIFT)) & USB_CORE_USB_CONF_CLK2OFFEN_MASK)
#define USB_CORE_USB_CONF_CLK2OFFDS_MASK         (0x80000U)
#define USB_CORE_USB_CONF_CLK2OFFDS_SHIFT        (19U)
#define USB_CORE_USB_CONF_CLK2OFFDS(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_CLK2OFFDS_SHIFT)) & USB_CORE_USB_CONF_CLK2OFFDS_MASK)
#define USB_CORE_USB_CONF_LGO_L0_MASK            (0x100000U)
#define USB_CORE_USB_CONF_LGO_L0_SHIFT           (20U)
#define USB_CORE_USB_CONF_LGO_L0(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_LGO_L0_SHIFT)) & USB_CORE_USB_CONF_LGO_L0_MASK)
#define USB_CORE_USB_CONF_CLK3OFFEN_MASK         (0x200000U)
#define USB_CORE_USB_CONF_CLK3OFFEN_SHIFT        (21U)
#define USB_CORE_USB_CONF_CLK3OFFEN(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_CLK3OFFEN_SHIFT)) & USB_CORE_USB_CONF_CLK3OFFEN_MASK)
#define USB_CORE_USB_CONF_CLK3OFFDS_MASK         (0x400000U)
#define USB_CORE_USB_CONF_CLK3OFFDS_SHIFT        (22U)
#define USB_CORE_USB_CONF_CLK3OFFDS(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_CLK3OFFDS_SHIFT)) & USB_CORE_USB_CONF_CLK3OFFDS_MASK)
#define USB_CORE_USB_CONF_RESERVED1_MASK         (0x800000U)
#define USB_CORE_USB_CONF_RESERVED1_SHIFT        (23U)
#define USB_CORE_USB_CONF_RESERVED1(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_RESERVED1_SHIFT)) & USB_CORE_USB_CONF_RESERVED1_MASK)
#define USB_CORE_USB_CONF_U1EN_MASK              (0x1000000U)
#define USB_CORE_USB_CONF_U1EN_SHIFT             (24U)
#define USB_CORE_USB_CONF_U1EN(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_U1EN_SHIFT)) & USB_CORE_USB_CONF_U1EN_MASK)
#define USB_CORE_USB_CONF_U1DS_MASK              (0x2000000U)
#define USB_CORE_USB_CONF_U1DS_SHIFT             (25U)
#define USB_CORE_USB_CONF_U1DS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_U1DS_SHIFT)) & USB_CORE_USB_CONF_U1DS_MASK)
#define USB_CORE_USB_CONF_U2EN_MASK              (0x4000000U)
#define USB_CORE_USB_CONF_U2EN_SHIFT             (26U)
#define USB_CORE_USB_CONF_U2EN(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_U2EN_SHIFT)) & USB_CORE_USB_CONF_U2EN_MASK)
#define USB_CORE_USB_CONF_U2DS_MASK              (0x8000000U)
#define USB_CORE_USB_CONF_U2DS_SHIFT             (27U)
#define USB_CORE_USB_CONF_U2DS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_U2DS_SHIFT)) & USB_CORE_USB_CONF_U2DS_MASK)
#define USB_CORE_USB_CONF_LGO_U0_MASK            (0x10000000U)
#define USB_CORE_USB_CONF_LGO_U0_SHIFT           (28U)
#define USB_CORE_USB_CONF_LGO_U0(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_LGO_U0_SHIFT)) & USB_CORE_USB_CONF_LGO_U0_MASK)
#define USB_CORE_USB_CONF_LGO_U1_MASK            (0x20000000U)
#define USB_CORE_USB_CONF_LGO_U1_SHIFT           (29U)
#define USB_CORE_USB_CONF_LGO_U1(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_LGO_U1_SHIFT)) & USB_CORE_USB_CONF_LGO_U1_MASK)
#define USB_CORE_USB_CONF_LGO_U2_MASK            (0x40000000U)
#define USB_CORE_USB_CONF_LGO_U2_SHIFT           (30U)
#define USB_CORE_USB_CONF_LGO_U2(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_LGO_U2_SHIFT)) & USB_CORE_USB_CONF_LGO_U2_MASK)
#define USB_CORE_USB_CONF_LGO_SSINACT_MASK       (0x80000000U)
#define USB_CORE_USB_CONF_LGO_SSINACT_SHIFT      (31U)
#define USB_CORE_USB_CONF_LGO_SSINACT(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF_LGO_SSINACT_SHIFT)) & USB_CORE_USB_CONF_LGO_SSINACT_MASK)

/*! @name USB_STS - Global Status */
#define USB_CORE_USB_STS_CFGSTS_MASK             (0x1U)
#define USB_CORE_USB_STS_CFGSTS_SHIFT            (0U)
#define USB_CORE_USB_STS_CFGSTS(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_CFGSTS_SHIFT)) & USB_CORE_USB_STS_CFGSTS_MASK)
#define USB_CORE_USB_STS_MEM_OV_MASK             (0x2U)
#define USB_CORE_USB_STS_MEM_OV_SHIFT            (1U)
#define USB_CORE_USB_STS_MEM_OV(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_MEM_OV_SHIFT)) & USB_CORE_USB_STS_MEM_OV_MASK)
#define USB_CORE_USB_STS_USB3CONS_MASK           (0x4U)
#define USB_CORE_USB_STS_USB3CONS_SHIFT          (2U)
#define USB_CORE_USB_STS_USB3CONS(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_USB3CONS_SHIFT)) & USB_CORE_USB_STS_USB3CONS_MASK)
#define USB_CORE_USB_STS_DTRANS_MASK             (0x8U)
#define USB_CORE_USB_STS_DTRANS_SHIFT            (3U)
#define USB_CORE_USB_STS_DTRANS(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_DTRANS_SHIFT)) & USB_CORE_USB_STS_DTRANS_MASK)
#define USB_CORE_USB_STS_USBSPEED_MASK           (0x70U)
#define USB_CORE_USB_STS_USBSPEED_SHIFT          (4U)
#define USB_CORE_USB_STS_USBSPEED(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_USBSPEED_SHIFT)) & USB_CORE_USB_STS_USBSPEED_MASK)
#define USB_CORE_USB_STS_ENDIAN_MIRROR_MASK      (0x80U)
#define USB_CORE_USB_STS_ENDIAN_MIRROR_SHIFT     (7U)
#define USB_CORE_USB_STS_ENDIAN_MIRROR(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_ENDIAN_MIRROR_SHIFT)) & USB_CORE_USB_STS_ENDIAN_MIRROR_MASK)
#define USB_CORE_USB_STS_CLK2OFF_MASK            (0x100U)
#define USB_CORE_USB_STS_CLK2OFF_SHIFT           (8U)
#define USB_CORE_USB_STS_CLK2OFF(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_CLK2OFF_SHIFT)) & USB_CORE_USB_STS_CLK2OFF_MASK)
#define USB_CORE_USB_STS_CLK3OFF_MASK            (0x200U)
#define USB_CORE_USB_STS_CLK3OFF_SHIFT           (9U)
#define USB_CORE_USB_STS_CLK3OFF(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_CLK3OFF_SHIFT)) & USB_CORE_USB_STS_CLK3OFF_MASK)
#define USB_CORE_USB_STS_IN_RST_MASK             (0x400U)
#define USB_CORE_USB_STS_IN_RST_SHIFT            (10U)
#define USB_CORE_USB_STS_IN_RST(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_IN_RST_SHIFT)) & USB_CORE_USB_STS_IN_RST_MASK)
#define USB_CORE_USB_STS_RESERVED0_MASK          (0x3800U)
#define USB_CORE_USB_STS_RESERVED0_SHIFT         (11U)
#define USB_CORE_USB_STS_RESERVED0(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_RESERVED0_SHIFT)) & USB_CORE_USB_STS_RESERVED0_MASK)
#define USB_CORE_USB_STS_DEVS_MASK               (0x4000U)
#define USB_CORE_USB_STS_DEVS_SHIFT              (14U)
#define USB_CORE_USB_STS_DEVS(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_DEVS_SHIFT)) & USB_CORE_USB_STS_DEVS_MASK)
#define USB_CORE_USB_STS_ADDRESSED_MASK          (0x8000U)
#define USB_CORE_USB_STS_ADDRESSED_SHIFT         (15U)
#define USB_CORE_USB_STS_ADDRESSED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_ADDRESSED_SHIFT)) & USB_CORE_USB_STS_ADDRESSED_MASK)
#define USB_CORE_USB_STS_L1ENS_MASK              (0x10000U)
#define USB_CORE_USB_STS_L1ENS_SHIFT             (16U)
#define USB_CORE_USB_STS_L1ENS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_L1ENS_SHIFT)) & USB_CORE_USB_STS_L1ENS_MASK)
#define USB_CORE_USB_STS_VBUSS_MASK              (0x20000U)
#define USB_CORE_USB_STS_VBUSS_SHIFT             (17U)
#define USB_CORE_USB_STS_VBUSS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_VBUSS_SHIFT)) & USB_CORE_USB_STS_VBUSS_MASK)
#define USB_CORE_USB_STS_LPMST_MASK              (0xC0000U)
#define USB_CORE_USB_STS_LPMST_SHIFT             (18U)
#define USB_CORE_USB_STS_LPMST(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_LPMST_SHIFT)) & USB_CORE_USB_STS_LPMST_MASK)
#define USB_CORE_USB_STS_USB2CONS_MASK           (0x100000U)
#define USB_CORE_USB_STS_USB2CONS_SHIFT          (20U)
#define USB_CORE_USB_STS_USB2CONS(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_USB2CONS_SHIFT)) & USB_CORE_USB_STS_USB2CONS_MASK)
#define USB_CORE_USB_STS_DISABLE_HS_MASK         (0x200000U)
#define USB_CORE_USB_STS_DISABLE_HS_SHIFT        (21U)
#define USB_CORE_USB_STS_DISABLE_HS(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_DISABLE_HS_SHIFT)) & USB_CORE_USB_STS_DISABLE_HS_MASK)
#define USB_CORE_USB_STS_RESERVED1_MASK          (0xC00000U)
#define USB_CORE_USB_STS_RESERVED1_SHIFT         (22U)
#define USB_CORE_USB_STS_RESERVED1(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_RESERVED1_SHIFT)) & USB_CORE_USB_STS_RESERVED1_MASK)
#define USB_CORE_USB_STS_U1ENS_MASK              (0x1000000U)
#define USB_CORE_USB_STS_U1ENS_SHIFT             (24U)
#define USB_CORE_USB_STS_U1ENS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_U1ENS_SHIFT)) & USB_CORE_USB_STS_U1ENS_MASK)
#define USB_CORE_USB_STS_U2ENS_MASK              (0x2000000U)
#define USB_CORE_USB_STS_U2ENS_SHIFT             (25U)
#define USB_CORE_USB_STS_U2ENS(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_U2ENS_SHIFT)) & USB_CORE_USB_STS_U2ENS_MASK)
#define USB_CORE_USB_STS_LST_MASK                (0x3C000000U)
#define USB_CORE_USB_STS_LST_SHIFT               (26U)
#define USB_CORE_USB_STS_LST(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_LST_SHIFT)) & USB_CORE_USB_STS_LST_MASK)
#define USB_CORE_USB_STS_DMAOFF_MASK             (0x40000000U)
#define USB_CORE_USB_STS_DMAOFF_SHIFT            (30U)
#define USB_CORE_USB_STS_DMAOFF(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_DMAOFF_SHIFT)) & USB_CORE_USB_STS_DMAOFF_MASK)
#define USB_CORE_USB_STS_ENDIAN_MASK             (0x80000000U)
#define USB_CORE_USB_STS_ENDIAN_SHIFT            (31U)
#define USB_CORE_USB_STS_ENDIAN(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_STS_ENDIAN_SHIFT)) & USB_CORE_USB_STS_ENDIAN_MASK)

/*! @name USB_CMD - Global Command */
#define USB_CORE_USB_CMD_SET_ADDR_MASK           (0x1U)
#define USB_CORE_USB_CMD_SET_ADDR_SHIFT          (0U)
#define USB_CORE_USB_CMD_SET_ADDR(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_SET_ADDR_SHIFT)) & USB_CORE_USB_CMD_SET_ADDR_MASK)
#define USB_CORE_USB_CMD_FADDR_MASK              (0xFEU)
#define USB_CORE_USB_CMD_FADDR_SHIFT             (1U)
#define USB_CORE_USB_CMD_FADDR(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_FADDR_SHIFT)) & USB_CORE_USB_CMD_FADDR_MASK)
#define USB_CORE_USB_CMD_SDNFW_MASK              (0x100U)
#define USB_CORE_USB_CMD_SDNFW_SHIFT             (8U)
#define USB_CORE_USB_CMD_SDNFW(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_SDNFW_SHIFT)) & USB_CORE_USB_CMD_SDNFW_MASK)
#define USB_CORE_USB_CMD_STMODE_MASK             (0x200U)
#define USB_CORE_USB_CMD_STMODE_SHIFT            (9U)
#define USB_CORE_USB_CMD_STMODE(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_STMODE_SHIFT)) & USB_CORE_USB_CMD_STMODE_MASK)
#define USB_CORE_USB_CMD_TMODE_SEL_MASK          (0xC00U)
#define USB_CORE_USB_CMD_TMODE_SEL_SHIFT         (10U)
#define USB_CORE_USB_CMD_TMODE_SEL(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_TMODE_SEL_SHIFT)) & USB_CORE_USB_CMD_TMODE_SEL_MASK)
#define USB_CORE_USB_CMD_SDNLTM_MASK             (0x1000U)
#define USB_CORE_USB_CMD_SDNLTM_SHIFT            (12U)
#define USB_CORE_USB_CMD_SDNLTM(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_SDNLTM_SHIFT)) & USB_CORE_USB_CMD_SDNLTM_MASK)
#define USB_CORE_USB_CMD_SPKT_MASK               (0x2000U)
#define USB_CORE_USB_CMD_SPKT_SHIFT              (13U)
#define USB_CORE_USB_CMD_SPKT(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_SPKT_SHIFT)) & USB_CORE_USB_CMD_SPKT_MASK)
#define USB_CORE_USB_CMD_RESERVED0_MASK          (0xC000U)
#define USB_CORE_USB_CMD_RESERVED0_SHIFT         (14U)
#define USB_CORE_USB_CMD_RESERVED0(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_RESERVED0_SHIFT)) & USB_CORE_USB_CMD_RESERVED0_MASK)
#define USB_CORE_USB_CMD_DNLTM_BELT_7_0_MASK     (0xFF0000U)
#define USB_CORE_USB_CMD_DNLTM_BELT_7_0_SHIFT    (16U)
#define USB_CORE_USB_CMD_DNLTM_BELT_7_0(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_DNLTM_BELT_7_0_SHIFT)) & USB_CORE_USB_CMD_DNLTM_BELT_7_0_MASK)
#define USB_CORE_USB_CMD_DNLTM_BELT_11_8_MASK    (0xF000000U)
#define USB_CORE_USB_CMD_DNLTM_BELT_11_8_SHIFT   (24U)
#define USB_CORE_USB_CMD_DNLTM_BELT_11_8(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_DNLTM_BELT_11_8_SHIFT)) & USB_CORE_USB_CMD_DNLTM_BELT_11_8_MASK)
#define USB_CORE_USB_CMD_RESERVED1_MASK          (0xF0000000U)
#define USB_CORE_USB_CMD_RESERVED1_SHIFT         (28U)
#define USB_CORE_USB_CMD_RESERVED1(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CMD_RESERVED1_SHIFT)) & USB_CORE_USB_CMD_RESERVED1_MASK)

/*! @name USB_IPTN - ITP Number */
#define USB_CORE_USB_IPTN_ITPN_MASK              (0x3FFFU)
#define USB_CORE_USB_IPTN_ITPN_SHIFT             (0U)
#define USB_CORE_USB_IPTN_ITPN(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IPTN_ITPN_SHIFT)) & USB_CORE_USB_IPTN_ITPN_MASK)
#define USB_CORE_USB_IPTN_RESERVED_MASK          (0xFFFFC000U)
#define USB_CORE_USB_IPTN_RESERVED_SHIFT         (14U)
#define USB_CORE_USB_IPTN_RESERVED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IPTN_RESERVED_SHIFT)) & USB_CORE_USB_IPTN_RESERVED_MASK)

/*! @name USB_LPM - Link Power Management */
#define USB_CORE_USB_LPM_HIRD_MASK               (0xFU)
#define USB_CORE_USB_LPM_HIRD_SHIFT              (0U)
#define USB_CORE_USB_LPM_HIRD(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_LPM_HIRD_SHIFT)) & USB_CORE_USB_LPM_HIRD_MASK)
#define USB_CORE_USB_LPM_BRW_MASK                (0x10U)
#define USB_CORE_USB_LPM_BRW_SHIFT               (4U)
#define USB_CORE_USB_LPM_BRW(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_LPM_BRW_SHIFT)) & USB_CORE_USB_LPM_BRW_MASK)
#define USB_CORE_USB_LPM_RESERVED_MASK           (0xFFFFFFE0U)
#define USB_CORE_USB_LPM_RESERVED_SHIFT          (5U)
#define USB_CORE_USB_LPM_RESERVED(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_LPM_RESERVED_SHIFT)) & USB_CORE_USB_LPM_RESERVED_MASK)

/*! @name USB_IEN - Interrupt Enable */
#define USB_CORE_USB_IEN_CONIEN_MASK             (0x1U)
#define USB_CORE_USB_IEN_CONIEN_SHIFT            (0U)
#define USB_CORE_USB_IEN_CONIEN(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_CONIEN_SHIFT)) & USB_CORE_USB_IEN_CONIEN_MASK)
#define USB_CORE_USB_IEN_DISIEN_MASK             (0x2U)
#define USB_CORE_USB_IEN_DISIEN_SHIFT            (1U)
#define USB_CORE_USB_IEN_DISIEN(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_DISIEN_SHIFT)) & USB_CORE_USB_IEN_DISIEN_MASK)
#define USB_CORE_USB_IEN_UWRESIEN_MASK           (0x4U)
#define USB_CORE_USB_IEN_UWRESIEN_SHIFT          (2U)
#define USB_CORE_USB_IEN_UWRESIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_UWRESIEN_SHIFT)) & USB_CORE_USB_IEN_UWRESIEN_MASK)
#define USB_CORE_USB_IEN_UHRESIEN_MASK           (0x8U)
#define USB_CORE_USB_IEN_UHRESIEN_SHIFT          (3U)
#define USB_CORE_USB_IEN_UHRESIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_UHRESIEN_SHIFT)) & USB_CORE_USB_IEN_UHRESIEN_MASK)
#define USB_CORE_USB_IEN_U3ENTIEN_MASK           (0x10U)
#define USB_CORE_USB_IEN_U3ENTIEN_SHIFT          (4U)
#define USB_CORE_USB_IEN_U3ENTIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_U3ENTIEN_SHIFT)) & USB_CORE_USB_IEN_U3ENTIEN_MASK)
#define USB_CORE_USB_IEN_U3EXTIEN_MASK           (0x20U)
#define USB_CORE_USB_IEN_U3EXTIEN_SHIFT          (5U)
#define USB_CORE_USB_IEN_U3EXTIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_U3EXTIEN_SHIFT)) & USB_CORE_USB_IEN_U3EXTIEN_MASK)
#define USB_CORE_USB_IEN_U2ENTIEN_MASK           (0x40U)
#define USB_CORE_USB_IEN_U2ENTIEN_SHIFT          (6U)
#define USB_CORE_USB_IEN_U2ENTIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_U2ENTIEN_SHIFT)) & USB_CORE_USB_IEN_U2ENTIEN_MASK)
#define USB_CORE_USB_IEN_U2EXTIEN_MASK           (0x80U)
#define USB_CORE_USB_IEN_U2EXTIEN_SHIFT          (7U)
#define USB_CORE_USB_IEN_U2EXTIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_U2EXTIEN_SHIFT)) & USB_CORE_USB_IEN_U2EXTIEN_MASK)
#define USB_CORE_USB_IEN_U1ENTIEN_MASK           (0x100U)
#define USB_CORE_USB_IEN_U1ENTIEN_SHIFT          (8U)
#define USB_CORE_USB_IEN_U1ENTIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_U1ENTIEN_SHIFT)) & USB_CORE_USB_IEN_U1ENTIEN_MASK)
#define USB_CORE_USB_IEN_U1EXTIEN_MASK           (0x200U)
#define USB_CORE_USB_IEN_U1EXTIEN_SHIFT          (9U)
#define USB_CORE_USB_IEN_U1EXTIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_U1EXTIEN_SHIFT)) & USB_CORE_USB_IEN_U1EXTIEN_MASK)
#define USB_CORE_USB_IEN_ITPIEN_MASK             (0x400U)
#define USB_CORE_USB_IEN_ITPIEN_SHIFT            (10U)
#define USB_CORE_USB_IEN_ITPIEN(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_ITPIEN_SHIFT)) & USB_CORE_USB_IEN_ITPIEN_MASK)
#define USB_CORE_USB_IEN_WAKEIEN_MASK            (0x800U)
#define USB_CORE_USB_IEN_WAKEIEN_SHIFT           (11U)
#define USB_CORE_USB_IEN_WAKEIEN(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_WAKEIEN_SHIFT)) & USB_CORE_USB_IEN_WAKEIEN_MASK)
#define USB_CORE_USB_IEN_SPKTIEN_MASK            (0x1000U)
#define USB_CORE_USB_IEN_SPKTIEN_SHIFT           (12U)
#define USB_CORE_USB_IEN_SPKTIEN(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_SPKTIEN_SHIFT)) & USB_CORE_USB_IEN_SPKTIEN_MASK)
#define USB_CORE_USB_IEN_RESERVED0_MASK          (0xE000U)
#define USB_CORE_USB_IEN_RESERVED0_SHIFT         (13U)
#define USB_CORE_USB_IEN_RESERVED0(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_RESERVED0_SHIFT)) & USB_CORE_USB_IEN_RESERVED0_MASK)
#define USB_CORE_USB_IEN_CON2IEN_MASK            (0x10000U)
#define USB_CORE_USB_IEN_CON2IEN_SHIFT           (16U)
#define USB_CORE_USB_IEN_CON2IEN(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_CON2IEN_SHIFT)) & USB_CORE_USB_IEN_CON2IEN_MASK)
#define USB_CORE_USB_IEN_DIS2IEN_MASK            (0x20000U)
#define USB_CORE_USB_IEN_DIS2IEN_SHIFT           (17U)
#define USB_CORE_USB_IEN_DIS2IEN(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_DIS2IEN_SHIFT)) & USB_CORE_USB_IEN_DIS2IEN_MASK)
#define USB_CORE_USB_IEN_U2RESIEN_MASK           (0x40000U)
#define USB_CORE_USB_IEN_U2RESIEN_SHIFT          (18U)
#define USB_CORE_USB_IEN_U2RESIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_U2RESIEN_SHIFT)) & USB_CORE_USB_IEN_U2RESIEN_MASK)
#define USB_CORE_USB_IEN_RESERVED1_MASK          (0x80000U)
#define USB_CORE_USB_IEN_RESERVED1_SHIFT         (19U)
#define USB_CORE_USB_IEN_RESERVED1(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_RESERVED1_SHIFT)) & USB_CORE_USB_IEN_RESERVED1_MASK)
#define USB_CORE_USB_IEN_L2ENTIEN_MASK           (0x100000U)
#define USB_CORE_USB_IEN_L2ENTIEN_SHIFT          (20U)
#define USB_CORE_USB_IEN_L2ENTIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_L2ENTIEN_SHIFT)) & USB_CORE_USB_IEN_L2ENTIEN_MASK)
#define USB_CORE_USB_IEN_L2EXTIEN_MASK           (0x200000U)
#define USB_CORE_USB_IEN_L2EXTIEN_SHIFT          (21U)
#define USB_CORE_USB_IEN_L2EXTIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_L2EXTIEN_SHIFT)) & USB_CORE_USB_IEN_L2EXTIEN_MASK)
#define USB_CORE_USB_IEN_RESERVED2_MASK          (0xC00000U)
#define USB_CORE_USB_IEN_RESERVED2_SHIFT         (22U)
#define USB_CORE_USB_IEN_RESERVED2(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_RESERVED2_SHIFT)) & USB_CORE_USB_IEN_RESERVED2_MASK)
#define USB_CORE_USB_IEN_L1ENTIEN_MASK           (0x1000000U)
#define USB_CORE_USB_IEN_L1ENTIEN_SHIFT          (24U)
#define USB_CORE_USB_IEN_L1ENTIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_L1ENTIEN_SHIFT)) & USB_CORE_USB_IEN_L1ENTIEN_MASK)
#define USB_CORE_USB_IEN_L1EXTIEN_MASK           (0x2000000U)
#define USB_CORE_USB_IEN_L1EXTIEN_SHIFT          (25U)
#define USB_CORE_USB_IEN_L1EXTIEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_L1EXTIEN_SHIFT)) & USB_CORE_USB_IEN_L1EXTIEN_MASK)
#define USB_CORE_USB_IEN_CFGRESIEN_MASK          (0x4000000U)
#define USB_CORE_USB_IEN_CFGRESIEN_SHIFT         (26U)
#define USB_CORE_USB_IEN_CFGRESIEN(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_CFGRESIEN_SHIFT)) & USB_CORE_USB_IEN_CFGRESIEN_MASK)
#define USB_CORE_USB_IEN_RESERVED3_MASK          (0x8000000U)
#define USB_CORE_USB_IEN_RESERVED3_SHIFT         (27U)
#define USB_CORE_USB_IEN_RESERVED3(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_RESERVED3_SHIFT)) & USB_CORE_USB_IEN_RESERVED3_MASK)
#define USB_CORE_USB_IEN_UWRESSIEN_MASK          (0x10000000U)
#define USB_CORE_USB_IEN_UWRESSIEN_SHIFT         (28U)
#define USB_CORE_USB_IEN_UWRESSIEN(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_UWRESSIEN_SHIFT)) & USB_CORE_USB_IEN_UWRESSIEN_MASK)
#define USB_CORE_USB_IEN_UWRESEIEN_MASK          (0x20000000U)
#define USB_CORE_USB_IEN_UWRESEIEN_SHIFT         (29U)
#define USB_CORE_USB_IEN_UWRESEIEN(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_UWRESEIEN_SHIFT)) & USB_CORE_USB_IEN_UWRESEIEN_MASK)
#define USB_CORE_USB_IEN_RESERVED4_MASK          (0xC0000000U)
#define USB_CORE_USB_IEN_RESERVED4_SHIFT         (30U)
#define USB_CORE_USB_IEN_RESERVED4(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_IEN_RESERVED4_SHIFT)) & USB_CORE_USB_IEN_RESERVED4_MASK)

/*! @name USB_ISTS - Interrupt Status */
#define USB_CORE_USB_ISTS_CONI_MASK              (0x1U)
#define USB_CORE_USB_ISTS_CONI_SHIFT             (0U)
#define USB_CORE_USB_ISTS_CONI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_CONI_SHIFT)) & USB_CORE_USB_ISTS_CONI_MASK)
#define USB_CORE_USB_ISTS_DISI_MASK              (0x2U)
#define USB_CORE_USB_ISTS_DISI_SHIFT             (1U)
#define USB_CORE_USB_ISTS_DISI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_DISI_SHIFT)) & USB_CORE_USB_ISTS_DISI_MASK)
#define USB_CORE_USB_ISTS_UWRESI_MASK            (0x4U)
#define USB_CORE_USB_ISTS_UWRESI_SHIFT           (2U)
#define USB_CORE_USB_ISTS_UWRESI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_UWRESI_SHIFT)) & USB_CORE_USB_ISTS_UWRESI_MASK)
#define USB_CORE_USB_ISTS_UHRESI_MASK            (0x8U)
#define USB_CORE_USB_ISTS_UHRESI_SHIFT           (3U)
#define USB_CORE_USB_ISTS_UHRESI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_UHRESI_SHIFT)) & USB_CORE_USB_ISTS_UHRESI_MASK)
#define USB_CORE_USB_ISTS_U3ENTI_MASK            (0x10U)
#define USB_CORE_USB_ISTS_U3ENTI_SHIFT           (4U)
#define USB_CORE_USB_ISTS_U3ENTI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_U3ENTI_SHIFT)) & USB_CORE_USB_ISTS_U3ENTI_MASK)
#define USB_CORE_USB_ISTS_U3EXTI_MASK            (0x20U)
#define USB_CORE_USB_ISTS_U3EXTI_SHIFT           (5U)
#define USB_CORE_USB_ISTS_U3EXTI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_U3EXTI_SHIFT)) & USB_CORE_USB_ISTS_U3EXTI_MASK)
#define USB_CORE_USB_ISTS_U2ENTI_MASK            (0x40U)
#define USB_CORE_USB_ISTS_U2ENTI_SHIFT           (6U)
#define USB_CORE_USB_ISTS_U2ENTI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_U2ENTI_SHIFT)) & USB_CORE_USB_ISTS_U2ENTI_MASK)
#define USB_CORE_USB_ISTS_U2EXTI_MASK            (0x80U)
#define USB_CORE_USB_ISTS_U2EXTI_SHIFT           (7U)
#define USB_CORE_USB_ISTS_U2EXTI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_U2EXTI_SHIFT)) & USB_CORE_USB_ISTS_U2EXTI_MASK)
#define USB_CORE_USB_ISTS_U1ENTI_MASK            (0x100U)
#define USB_CORE_USB_ISTS_U1ENTI_SHIFT           (8U)
#define USB_CORE_USB_ISTS_U1ENTI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_U1ENTI_SHIFT)) & USB_CORE_USB_ISTS_U1ENTI_MASK)
#define USB_CORE_USB_ISTS_U1EXTI_MASK            (0x200U)
#define USB_CORE_USB_ISTS_U1EXTI_SHIFT           (9U)
#define USB_CORE_USB_ISTS_U1EXTI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_U1EXTI_SHIFT)) & USB_CORE_USB_ISTS_U1EXTI_MASK)
#define USB_CORE_USB_ISTS_ITPI_MASK              (0x400U)
#define USB_CORE_USB_ISTS_ITPI_SHIFT             (10U)
#define USB_CORE_USB_ISTS_ITPI(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_ITPI_SHIFT)) & USB_CORE_USB_ISTS_ITPI_MASK)
#define USB_CORE_USB_ISTS_WAKEI_MASK             (0x800U)
#define USB_CORE_USB_ISTS_WAKEI_SHIFT            (11U)
#define USB_CORE_USB_ISTS_WAKEI(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_WAKEI_SHIFT)) & USB_CORE_USB_ISTS_WAKEI_MASK)
#define USB_CORE_USB_ISTS_SPKTI_MASK             (0x1000U)
#define USB_CORE_USB_ISTS_SPKTI_SHIFT            (12U)
#define USB_CORE_USB_ISTS_SPKTI(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_SPKTI_SHIFT)) & USB_CORE_USB_ISTS_SPKTI_MASK)
#define USB_CORE_USB_ISTS_RESERVED0_MASK         (0xE000U)
#define USB_CORE_USB_ISTS_RESERVED0_SHIFT        (13U)
#define USB_CORE_USB_ISTS_RESERVED0(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_RESERVED0_SHIFT)) & USB_CORE_USB_ISTS_RESERVED0_MASK)
#define USB_CORE_USB_ISTS_CON2I_MASK             (0x10000U)
#define USB_CORE_USB_ISTS_CON2I_SHIFT            (16U)
#define USB_CORE_USB_ISTS_CON2I(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_CON2I_SHIFT)) & USB_CORE_USB_ISTS_CON2I_MASK)
#define USB_CORE_USB_ISTS_DIS2I_MASK             (0x20000U)
#define USB_CORE_USB_ISTS_DIS2I_SHIFT            (17U)
#define USB_CORE_USB_ISTS_DIS2I(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_DIS2I_SHIFT)) & USB_CORE_USB_ISTS_DIS2I_MASK)
#define USB_CORE_USB_ISTS_U2RESI_MASK            (0x40000U)
#define USB_CORE_USB_ISTS_U2RESI_SHIFT           (18U)
#define USB_CORE_USB_ISTS_U2RESI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_U2RESI_SHIFT)) & USB_CORE_USB_ISTS_U2RESI_MASK)
#define USB_CORE_USB_ISTS_RESERVED1_MASK         (0x80000U)
#define USB_CORE_USB_ISTS_RESERVED1_SHIFT        (19U)
#define USB_CORE_USB_ISTS_RESERVED1(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_RESERVED1_SHIFT)) & USB_CORE_USB_ISTS_RESERVED1_MASK)
#define USB_CORE_USB_ISTS_L2ENTI_MASK            (0x100000U)
#define USB_CORE_USB_ISTS_L2ENTI_SHIFT           (20U)
#define USB_CORE_USB_ISTS_L2ENTI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_L2ENTI_SHIFT)) & USB_CORE_USB_ISTS_L2ENTI_MASK)
#define USB_CORE_USB_ISTS_L2EXTI_MASK            (0x200000U)
#define USB_CORE_USB_ISTS_L2EXTI_SHIFT           (21U)
#define USB_CORE_USB_ISTS_L2EXTI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_L2EXTI_SHIFT)) & USB_CORE_USB_ISTS_L2EXTI_MASK)
#define USB_CORE_USB_ISTS_RESERVED2_MASK         (0xC00000U)
#define USB_CORE_USB_ISTS_RESERVED2_SHIFT        (22U)
#define USB_CORE_USB_ISTS_RESERVED2(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_RESERVED2_SHIFT)) & USB_CORE_USB_ISTS_RESERVED2_MASK)
#define USB_CORE_USB_ISTS_L1ENTI_MASK            (0x1000000U)
#define USB_CORE_USB_ISTS_L1ENTI_SHIFT           (24U)
#define USB_CORE_USB_ISTS_L1ENTI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_L1ENTI_SHIFT)) & USB_CORE_USB_ISTS_L1ENTI_MASK)
#define USB_CORE_USB_ISTS_L1EXTI_MASK            (0x2000000U)
#define USB_CORE_USB_ISTS_L1EXTI_SHIFT           (25U)
#define USB_CORE_USB_ISTS_L1EXTI(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_L1EXTI_SHIFT)) & USB_CORE_USB_ISTS_L1EXTI_MASK)
#define USB_CORE_USB_ISTS_CFGRESI_MASK           (0x4000000U)
#define USB_CORE_USB_ISTS_CFGRESI_SHIFT          (26U)
#define USB_CORE_USB_ISTS_CFGRESI(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_CFGRESI_SHIFT)) & USB_CORE_USB_ISTS_CFGRESI_MASK)
#define USB_CORE_USB_ISTS_RESERVED3_MASK         (0x8000000U)
#define USB_CORE_USB_ISTS_RESERVED3_SHIFT        (27U)
#define USB_CORE_USB_ISTS_RESERVED3(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_RESERVED3_SHIFT)) & USB_CORE_USB_ISTS_RESERVED3_MASK)
#define USB_CORE_USB_ISTS_UWRESSI_MASK           (0x10000000U)
#define USB_CORE_USB_ISTS_UWRESSI_SHIFT          (28U)
#define USB_CORE_USB_ISTS_UWRESSI(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_UWRESSI_SHIFT)) & USB_CORE_USB_ISTS_UWRESSI_MASK)
#define USB_CORE_USB_ISTS_UWRESEI_MASK           (0x20000000U)
#define USB_CORE_USB_ISTS_UWRESEI_SHIFT          (29U)
#define USB_CORE_USB_ISTS_UWRESEI(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_UWRESEI_SHIFT)) & USB_CORE_USB_ISTS_UWRESEI_MASK)
#define USB_CORE_USB_ISTS_RESERVED4_MASK         (0xC0000000U)
#define USB_CORE_USB_ISTS_RESERVED4_SHIFT        (30U)
#define USB_CORE_USB_ISTS_RESERVED4(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_ISTS_RESERVED4_SHIFT)) & USB_CORE_USB_ISTS_RESERVED4_MASK)

/*! @name EP_SEL - Endpoint Select */
#define USB_CORE_EP_SEL_EPNO_MASK                (0xFU)
#define USB_CORE_EP_SEL_EPNO_SHIFT               (0U)
#define USB_CORE_EP_SEL_EPNO(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_SEL_EPNO_SHIFT)) & USB_CORE_EP_SEL_EPNO_MASK)
#define USB_CORE_EP_SEL_RESERVED0_MASK           (0x70U)
#define USB_CORE_EP_SEL_RESERVED0_SHIFT          (4U)
#define USB_CORE_EP_SEL_RESERVED0(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_SEL_RESERVED0_SHIFT)) & USB_CORE_EP_SEL_RESERVED0_MASK)
#define USB_CORE_EP_SEL_DIR_MASK                 (0x80U)
#define USB_CORE_EP_SEL_DIR_SHIFT                (7U)
#define USB_CORE_EP_SEL_DIR(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_SEL_DIR_SHIFT)) & USB_CORE_EP_SEL_DIR_MASK)
#define USB_CORE_EP_SEL_RESERVED1_MASK           (0xFFFFFF00U)
#define USB_CORE_EP_SEL_RESERVED1_SHIFT          (8U)
#define USB_CORE_EP_SEL_RESERVED1(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_SEL_RESERVED1_SHIFT)) & USB_CORE_EP_SEL_RESERVED1_MASK)

/*! @name EP_TRADDR - Endpoint Transfer Ring Address */
#define USB_CORE_EP_TRADDR_TRADDR_MASK           (0xFFFFFFFFU)
#define USB_CORE_EP_TRADDR_TRADDR_SHIFT          (0U)
#define USB_CORE_EP_TRADDR_TRADDR(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_TRADDR_TRADDR_SHIFT)) & USB_CORE_EP_TRADDR_TRADDR_MASK)

/*! @name EP_CFG - Endpoint Configuration */
#define USB_CORE_EP_CFG_ENABLE_MASK              (0x1U)
#define USB_CORE_EP_CFG_ENABLE_SHIFT             (0U)
#define USB_CORE_EP_CFG_ENABLE(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_ENABLE_SHIFT)) & USB_CORE_EP_CFG_ENABLE_MASK)
#define USB_CORE_EP_CFG_EPTYPE_MASK              (0x6U)
#define USB_CORE_EP_CFG_EPTYPE_SHIFT             (1U)
#define USB_CORE_EP_CFG_EPTYPE(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_EPTYPE_SHIFT)) & USB_CORE_EP_CFG_EPTYPE_MASK)
#define USB_CORE_EP_CFG_STREAM_EN_MASK           (0x8U)
#define USB_CORE_EP_CFG_STREAM_EN_SHIFT          (3U)
#define USB_CORE_EP_CFG_STREAM_EN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_STREAM_EN_SHIFT)) & USB_CORE_EP_CFG_STREAM_EN_MASK)
#define USB_CORE_EP_CFG_TDL_CHK_MASK             (0x10U)
#define USB_CORE_EP_CFG_TDL_CHK_SHIFT            (4U)
#define USB_CORE_EP_CFG_TDL_CHK(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_TDL_CHK_SHIFT)) & USB_CORE_EP_CFG_TDL_CHK_MASK)
#define USB_CORE_EP_CFG_SID_CHK_MASK             (0x20U)
#define USB_CORE_EP_CFG_SID_CHK_SHIFT            (5U)
#define USB_CORE_EP_CFG_SID_CHK(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_SID_CHK_SHIFT)) & USB_CORE_EP_CFG_SID_CHK_MASK)
#define USB_CORE_EP_CFG_RESERVED0_MASK           (0x40U)
#define USB_CORE_EP_CFG_RESERVED0_SHIFT          (6U)
#define USB_CORE_EP_CFG_RESERVED0(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_RESERVED0_SHIFT)) & USB_CORE_EP_CFG_RESERVED0_MASK)
#define USB_CORE_EP_CFG_EPENDIAN_MASK            (0x80U)
#define USB_CORE_EP_CFG_EPENDIAN_SHIFT           (7U)
#define USB_CORE_EP_CFG_EPENDIAN(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_EPENDIAN_SHIFT)) & USB_CORE_EP_CFG_EPENDIAN_MASK)
#define USB_CORE_EP_CFG_MAXBURST_MASK            (0xF00U)
#define USB_CORE_EP_CFG_MAXBURST_SHIFT           (8U)
#define USB_CORE_EP_CFG_MAXBURST(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_MAXBURST_SHIFT)) & USB_CORE_EP_CFG_MAXBURST_MASK)
#define USB_CORE_EP_CFG_RESERVED1_MASK           (0x3000U)
#define USB_CORE_EP_CFG_RESERVED1_SHIFT          (12U)
#define USB_CORE_EP_CFG_RESERVED1(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_RESERVED1_SHIFT)) & USB_CORE_EP_CFG_RESERVED1_MASK)
#define USB_CORE_EP_CFG_MULT_MASK                (0xC000U)
#define USB_CORE_EP_CFG_MULT_SHIFT               (14U)
#define USB_CORE_EP_CFG_MULT(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_MULT_SHIFT)) & USB_CORE_EP_CFG_MULT_MASK)
#define USB_CORE_EP_CFG_MAXPKTSIZE_MASK          (0x7FF0000U)
#define USB_CORE_EP_CFG_MAXPKTSIZE_SHIFT         (16U)
#define USB_CORE_EP_CFG_MAXPKTSIZE(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_MAXPKTSIZE_SHIFT)) & USB_CORE_EP_CFG_MAXPKTSIZE_MASK)
#define USB_CORE_EP_CFG_BUFFERING_MASK           (0xF8000000U)
#define USB_CORE_EP_CFG_BUFFERING_SHIFT          (27U)
#define USB_CORE_EP_CFG_BUFFERING(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CFG_BUFFERING_SHIFT)) & USB_CORE_EP_CFG_BUFFERING_MASK)

/*! @name EP_CMD - Endpoint Command */
#define USB_CORE_EP_CMD_EPRST_MASK               (0x1U)
#define USB_CORE_EP_CMD_EPRST_SHIFT              (0U)
#define USB_CORE_EP_CMD_EPRST(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_EPRST_SHIFT)) & USB_CORE_EP_CMD_EPRST_MASK)
#define USB_CORE_EP_CMD_SSTALL_MASK              (0x2U)
#define USB_CORE_EP_CMD_SSTALL_SHIFT             (1U)
#define USB_CORE_EP_CMD_SSTALL(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_SSTALL_SHIFT)) & USB_CORE_EP_CMD_SSTALL_MASK)
#define USB_CORE_EP_CMD_CSTALL_MASK              (0x4U)
#define USB_CORE_EP_CMD_CSTALL_SHIFT             (2U)
#define USB_CORE_EP_CMD_CSTALL(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_CSTALL_SHIFT)) & USB_CORE_EP_CMD_CSTALL_MASK)
#define USB_CORE_EP_CMD_ERDY_MASK                (0x8U)
#define USB_CORE_EP_CMD_ERDY_SHIFT               (3U)
#define USB_CORE_EP_CMD_ERDY(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_ERDY_SHIFT)) & USB_CORE_EP_CMD_ERDY_MASK)
#define USB_CORE_EP_CMD_RESERVED_MASK            (0x10U)
#define USB_CORE_EP_CMD_RESERVED_SHIFT           (4U)
#define USB_CORE_EP_CMD_RESERVED(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_RESERVED_SHIFT)) & USB_CORE_EP_CMD_RESERVED_MASK)
#define USB_CORE_EP_CMD_REQ_CMPL_MASK            (0x20U)
#define USB_CORE_EP_CMD_REQ_CMPL_SHIFT           (5U)
#define USB_CORE_EP_CMD_REQ_CMPL(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_REQ_CMPL_SHIFT)) & USB_CORE_EP_CMD_REQ_CMPL_MASK)
#define USB_CORE_EP_CMD_DRDY_MASK                (0x40U)
#define USB_CORE_EP_CMD_DRDY_SHIFT               (6U)
#define USB_CORE_EP_CMD_DRDY(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_DRDY_SHIFT)) & USB_CORE_EP_CMD_DRDY_MASK)
#define USB_CORE_EP_CMD_DFLUSH_MASK              (0x80U)
#define USB_CORE_EP_CMD_DFLUSH_SHIFT             (7U)
#define USB_CORE_EP_CMD_DFLUSH(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_DFLUSH_SHIFT)) & USB_CORE_EP_CMD_DFLUSH_MASK)
#define USB_CORE_EP_CMD_STDL_MASK                (0x100U)
#define USB_CORE_EP_CMD_STDL_SHIFT               (8U)
#define USB_CORE_EP_CMD_STDL(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_STDL_SHIFT)) & USB_CORE_EP_CMD_STDL_MASK)
#define USB_CORE_EP_CMD_TDL_MASK                 (0xFE00U)
#define USB_CORE_EP_CMD_TDL_SHIFT                (9U)
#define USB_CORE_EP_CMD_TDL(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_TDL_SHIFT)) & USB_CORE_EP_CMD_TDL_MASK)
#define USB_CORE_EP_CMD_ERDY_SID_MASK            (0xFFFF0000U)
#define USB_CORE_EP_CMD_ERDY_SID_SHIFT           (16U)
#define USB_CORE_EP_CMD_ERDY_SID(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_CMD_ERDY_SID_SHIFT)) & USB_CORE_EP_CMD_ERDY_SID_MASK)

/*! @name EP_STS - Endpoint Status */
#define USB_CORE_EP_STS_SETUP_MASK               (0x1U)
#define USB_CORE_EP_STS_SETUP_SHIFT              (0U)
#define USB_CORE_EP_STS_SETUP(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_SETUP_SHIFT)) & USB_CORE_EP_STS_SETUP_MASK)
#define USB_CORE_EP_STS_STALL_MASK               (0x2U)
#define USB_CORE_EP_STS_STALL_SHIFT              (1U)
#define USB_CORE_EP_STS_STALL(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_STALL_SHIFT)) & USB_CORE_EP_STS_STALL_MASK)
#define USB_CORE_EP_STS_IOC_MASK                 (0x4U)
#define USB_CORE_EP_STS_IOC_SHIFT                (2U)
#define USB_CORE_EP_STS_IOC(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_IOC_SHIFT)) & USB_CORE_EP_STS_IOC_MASK)
#define USB_CORE_EP_STS_ISP_MASK                 (0x8U)
#define USB_CORE_EP_STS_ISP_SHIFT                (3U)
#define USB_CORE_EP_STS_ISP(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_ISP_SHIFT)) & USB_CORE_EP_STS_ISP_MASK)
#define USB_CORE_EP_STS_DESCMIS_MASK             (0x10U)
#define USB_CORE_EP_STS_DESCMIS_SHIFT            (4U)
#define USB_CORE_EP_STS_DESCMIS(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_DESCMIS_SHIFT)) & USB_CORE_EP_STS_DESCMIS_MASK)
#define USB_CORE_EP_STS_STREAMR_MASK             (0x20U)
#define USB_CORE_EP_STS_STREAMR_SHIFT            (5U)
#define USB_CORE_EP_STS_STREAMR(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_STREAMR_SHIFT)) & USB_CORE_EP_STS_STREAMR_MASK)
#define USB_CORE_EP_STS_MD_EXIT_MASK             (0x40U)
#define USB_CORE_EP_STS_MD_EXIT_SHIFT            (6U)
#define USB_CORE_EP_STS_MD_EXIT(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_MD_EXIT_SHIFT)) & USB_CORE_EP_STS_MD_EXIT_MASK)
#define USB_CORE_EP_STS_TRBERR_MASK              (0x80U)
#define USB_CORE_EP_STS_TRBERR_SHIFT             (7U)
#define USB_CORE_EP_STS_TRBERR(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_TRBERR_SHIFT)) & USB_CORE_EP_STS_TRBERR_MASK)
#define USB_CORE_EP_STS_NRDY_MASK                (0x100U)
#define USB_CORE_EP_STS_NRDY_SHIFT               (8U)
#define USB_CORE_EP_STS_NRDY(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_NRDY_SHIFT)) & USB_CORE_EP_STS_NRDY_MASK)
#define USB_CORE_EP_STS_DBUSY_MASK               (0x200U)
#define USB_CORE_EP_STS_DBUSY_SHIFT              (9U)
#define USB_CORE_EP_STS_DBUSY(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_DBUSY_SHIFT)) & USB_CORE_EP_STS_DBUSY_MASK)
#define USB_CORE_EP_STS_BUFFEMPTY_MASK           (0x400U)
#define USB_CORE_EP_STS_BUFFEMPTY_SHIFT          (10U)
#define USB_CORE_EP_STS_BUFFEMPTY(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_BUFFEMPTY_SHIFT)) & USB_CORE_EP_STS_BUFFEMPTY_MASK)
#define USB_CORE_EP_STS_CCS_MASK                 (0x800U)
#define USB_CORE_EP_STS_CCS_SHIFT                (11U)
#define USB_CORE_EP_STS_CCS(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_CCS_SHIFT)) & USB_CORE_EP_STS_CCS_MASK)
#define USB_CORE_EP_STS_PRIME_MASK               (0x1000U)
#define USB_CORE_EP_STS_PRIME_SHIFT              (12U)
#define USB_CORE_EP_STS_PRIME(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_PRIME_SHIFT)) & USB_CORE_EP_STS_PRIME_MASK)
#define USB_CORE_EP_STS_SIDERR_MASK              (0x2000U)
#define USB_CORE_EP_STS_SIDERR_SHIFT             (13U)
#define USB_CORE_EP_STS_SIDERR(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_SIDERR_SHIFT)) & USB_CORE_EP_STS_SIDERR_MASK)
#define USB_CORE_EP_STS_OUTSMM_MASK              (0x4000U)
#define USB_CORE_EP_STS_OUTSMM_SHIFT             (14U)
#define USB_CORE_EP_STS_OUTSMM(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_OUTSMM_SHIFT)) & USB_CORE_EP_STS_OUTSMM_MASK)
#define USB_CORE_EP_STS_ISOERR_MASK              (0x8000U)
#define USB_CORE_EP_STS_ISOERR_SHIFT             (15U)
#define USB_CORE_EP_STS_ISOERR(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_ISOERR_SHIFT)) & USB_CORE_EP_STS_ISOERR_MASK)
#define USB_CORE_EP_STS_HOSTPP_MASK              (0x10000U)
#define USB_CORE_EP_STS_HOSTPP_SHIFT             (16U)
#define USB_CORE_EP_STS_HOSTPP(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_HOSTPP_SHIFT)) & USB_CORE_EP_STS_HOSTPP_MASK)
#define USB_CORE_EP_STS_SPSMST_MASK              (0x60000U)
#define USB_CORE_EP_STS_SPSMST_SHIFT             (17U)
#define USB_CORE_EP_STS_SPSMST(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_SPSMST_SHIFT)) & USB_CORE_EP_STS_SPSMST_MASK)
#define USB_CORE_EP_STS_IOT_MASK                 (0x80000U)
#define USB_CORE_EP_STS_IOT_SHIFT                (19U)
#define USB_CORE_EP_STS_IOT(x)                   (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_IOT_SHIFT)) & USB_CORE_EP_STS_IOT_MASK)
#define USB_CORE_EP_STS_RESERVED0_MASK           (0xF00000U)
#define USB_CORE_EP_STS_RESERVED0_SHIFT          (20U)
#define USB_CORE_EP_STS_RESERVED0(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_RESERVED0_SHIFT)) & USB_CORE_EP_STS_RESERVED0_MASK)
#define USB_CORE_EP_STS_OUTQ_NO_MASK             (0xF000000U)
#define USB_CORE_EP_STS_OUTQ_NO_SHIFT            (24U)
#define USB_CORE_EP_STS_OUTQ_NO(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_OUTQ_NO_SHIFT)) & USB_CORE_EP_STS_OUTQ_NO_MASK)
#define USB_CORE_EP_STS_OUTQ_VAL_MASK            (0x10000000U)
#define USB_CORE_EP_STS_OUTQ_VAL_SHIFT           (28U)
#define USB_CORE_EP_STS_OUTQ_VAL(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_OUTQ_VAL_SHIFT)) & USB_CORE_EP_STS_OUTQ_VAL_MASK)
#define USB_CORE_EP_STS_RESERVED1_MASK           (0x60000000U)
#define USB_CORE_EP_STS_RESERVED1_SHIFT          (29U)
#define USB_CORE_EP_STS_RESERVED1(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_RESERVED1_SHIFT)) & USB_CORE_EP_STS_RESERVED1_MASK)
#define USB_CORE_EP_STS_STPWAIT_MASK             (0x80000000U)
#define USB_CORE_EP_STS_STPWAIT_SHIFT            (31U)
#define USB_CORE_EP_STS_STPWAIT(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_STPWAIT_SHIFT)) & USB_CORE_EP_STS_STPWAIT_MASK)

/*! @name EP_STS_SID - Endpoint Status */
#define USB_CORE_EP_STS_SID_SID_MASK             (0xFFFFU)
#define USB_CORE_EP_STS_SID_SID_SHIFT            (0U)
#define USB_CORE_EP_STS_SID_SID(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_SID_SID_SHIFT)) & USB_CORE_EP_STS_SID_SID_MASK)
#define USB_CORE_EP_STS_SID_RESERVED_MASK        (0xFFFF0000U)
#define USB_CORE_EP_STS_SID_RESERVED_SHIFT       (16U)
#define USB_CORE_EP_STS_SID_RESERVED(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_SID_RESERVED_SHIFT)) & USB_CORE_EP_STS_SID_RESERVED_MASK)

/*! @name EP_STS_EN - Endpoint Status Register Enable */
#define USB_CORE_EP_STS_EN_SETUPEN_MASK          (0x1U)
#define USB_CORE_EP_STS_EN_SETUPEN_SHIFT         (0U)
#define USB_CORE_EP_STS_EN_SETUPEN(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_SETUPEN_SHIFT)) & USB_CORE_EP_STS_EN_SETUPEN_MASK)
#define USB_CORE_EP_STS_EN_RESERVED0_MASK        (0xEU)
#define USB_CORE_EP_STS_EN_RESERVED0_SHIFT       (1U)
#define USB_CORE_EP_STS_EN_RESERVED0(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_RESERVED0_SHIFT)) & USB_CORE_EP_STS_EN_RESERVED0_MASK)
#define USB_CORE_EP_STS_EN_DESCMISEN_MASK        (0x10U)
#define USB_CORE_EP_STS_EN_DESCMISEN_SHIFT       (4U)
#define USB_CORE_EP_STS_EN_DESCMISEN(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_DESCMISEN_SHIFT)) & USB_CORE_EP_STS_EN_DESCMISEN_MASK)
#define USB_CORE_EP_STS_EN_STREAMREN_MASK        (0x20U)
#define USB_CORE_EP_STS_EN_STREAMREN_SHIFT       (5U)
#define USB_CORE_EP_STS_EN_STREAMREN(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_STREAMREN_SHIFT)) & USB_CORE_EP_STS_EN_STREAMREN_MASK)
#define USB_CORE_EP_STS_EN_MD_EXITEN_MASK        (0x40U)
#define USB_CORE_EP_STS_EN_MD_EXITEN_SHIFT       (6U)
#define USB_CORE_EP_STS_EN_MD_EXITEN(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_MD_EXITEN_SHIFT)) & USB_CORE_EP_STS_EN_MD_EXITEN_MASK)
#define USB_CORE_EP_STS_EN_TRBERREN_MASK         (0x80U)
#define USB_CORE_EP_STS_EN_TRBERREN_SHIFT        (7U)
#define USB_CORE_EP_STS_EN_TRBERREN(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_TRBERREN_SHIFT)) & USB_CORE_EP_STS_EN_TRBERREN_MASK)
#define USB_CORE_EP_STS_EN_NRDYEN_MASK           (0x100U)
#define USB_CORE_EP_STS_EN_NRDYEN_SHIFT          (8U)
#define USB_CORE_EP_STS_EN_NRDYEN(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_NRDYEN_SHIFT)) & USB_CORE_EP_STS_EN_NRDYEN_MASK)
#define USB_CORE_EP_STS_EN_RESERVED1_MASK        (0xE00U)
#define USB_CORE_EP_STS_EN_RESERVED1_SHIFT       (9U)
#define USB_CORE_EP_STS_EN_RESERVED1(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_RESERVED1_SHIFT)) & USB_CORE_EP_STS_EN_RESERVED1_MASK)
#define USB_CORE_EP_STS_EN_PRIMEEN_MASK          (0x1000U)
#define USB_CORE_EP_STS_EN_PRIMEEN_SHIFT         (12U)
#define USB_CORE_EP_STS_EN_PRIMEEN(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_PRIMEEN_SHIFT)) & USB_CORE_EP_STS_EN_PRIMEEN_MASK)
#define USB_CORE_EP_STS_EN_SIDERREN_MASK         (0x2000U)
#define USB_CORE_EP_STS_EN_SIDERREN_SHIFT        (13U)
#define USB_CORE_EP_STS_EN_SIDERREN(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_SIDERREN_SHIFT)) & USB_CORE_EP_STS_EN_SIDERREN_MASK)
#define USB_CORE_EP_STS_EN_OUTSMMEN_MASK         (0x4000U)
#define USB_CORE_EP_STS_EN_OUTSMMEN_SHIFT        (14U)
#define USB_CORE_EP_STS_EN_OUTSMMEN(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_OUTSMMEN_SHIFT)) & USB_CORE_EP_STS_EN_OUTSMMEN_MASK)
#define USB_CORE_EP_STS_EN_ISOERREN_MASK         (0x8000U)
#define USB_CORE_EP_STS_EN_ISOERREN_SHIFT        (15U)
#define USB_CORE_EP_STS_EN_ISOERREN(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_ISOERREN_SHIFT)) & USB_CORE_EP_STS_EN_ISOERREN_MASK)
#define USB_CORE_EP_STS_EN_RESERVED2_MASK        (0x70000U)
#define USB_CORE_EP_STS_EN_RESERVED2_SHIFT       (16U)
#define USB_CORE_EP_STS_EN_RESERVED2(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_RESERVED2_SHIFT)) & USB_CORE_EP_STS_EN_RESERVED2_MASK)
#define USB_CORE_EP_STS_EN_IOTEN_MASK            (0x80000U)
#define USB_CORE_EP_STS_EN_IOTEN_SHIFT           (19U)
#define USB_CORE_EP_STS_EN_IOTEN(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_IOTEN_SHIFT)) & USB_CORE_EP_STS_EN_IOTEN_MASK)
#define USB_CORE_EP_STS_EN_RESERVED3_MASK        (0x7FF00000U)
#define USB_CORE_EP_STS_EN_RESERVED3_SHIFT       (20U)
#define USB_CORE_EP_STS_EN_RESERVED3(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_RESERVED3_SHIFT)) & USB_CORE_EP_STS_EN_RESERVED3_MASK)
#define USB_CORE_EP_STS_EN_STPWAITEN_MASK        (0x80000000U)
#define USB_CORE_EP_STS_EN_STPWAITEN_SHIFT       (31U)
#define USB_CORE_EP_STS_EN_STPWAITEN(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_STS_EN_STPWAITEN_SHIFT)) & USB_CORE_EP_STS_EN_STPWAITEN_MASK)

/*! @name DRBL - Doorbell Register */
#define USB_CORE_DRBL_DRBL0O_MASK                (0x1U)
#define USB_CORE_DRBL_DRBL0O_SHIFT               (0U)
#define USB_CORE_DRBL_DRBL0O(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL0O_SHIFT)) & USB_CORE_DRBL_DRBL0O_MASK)
#define USB_CORE_DRBL_DRBL1O_MASK                (0x2U)
#define USB_CORE_DRBL_DRBL1O_SHIFT               (1U)
#define USB_CORE_DRBL_DRBL1O(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL1O_SHIFT)) & USB_CORE_DRBL_DRBL1O_MASK)
#define USB_CORE_DRBL_DRBL2O_MASK                (0x4U)
#define USB_CORE_DRBL_DRBL2O_SHIFT               (2U)
#define USB_CORE_DRBL_DRBL2O(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL2O_SHIFT)) & USB_CORE_DRBL_DRBL2O_MASK)
#define USB_CORE_DRBL_DRBL3O_MASK                (0x8U)
#define USB_CORE_DRBL_DRBL3O_SHIFT               (3U)
#define USB_CORE_DRBL_DRBL3O(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL3O_SHIFT)) & USB_CORE_DRBL_DRBL3O_MASK)
#define USB_CORE_DRBL_DRBL4O_MASK                (0x10U)
#define USB_CORE_DRBL_DRBL4O_SHIFT               (4U)
#define USB_CORE_DRBL_DRBL4O(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL4O_SHIFT)) & USB_CORE_DRBL_DRBL4O_MASK)
#define USB_CORE_DRBL_DRBL5O_MASK                (0x20U)
#define USB_CORE_DRBL_DRBL5O_SHIFT               (5U)
#define USB_CORE_DRBL_DRBL5O(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL5O_SHIFT)) & USB_CORE_DRBL_DRBL5O_MASK)
#define USB_CORE_DRBL_DRBL6O_MASK                (0x40U)
#define USB_CORE_DRBL_DRBL6O_SHIFT               (6U)
#define USB_CORE_DRBL_DRBL6O(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL6O_SHIFT)) & USB_CORE_DRBL_DRBL6O_MASK)
#define USB_CORE_DRBL_DRBL7O_MASK                (0x80U)
#define USB_CORE_DRBL_DRBL7O_SHIFT               (7U)
#define USB_CORE_DRBL_DRBL7O(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL7O_SHIFT)) & USB_CORE_DRBL_DRBL7O_MASK)
#define USB_CORE_DRBL_reserved8_MASK             (0x100U)
#define USB_CORE_DRBL_reserved8_SHIFT            (8U)
#define USB_CORE_DRBL_reserved8(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved8_SHIFT)) & USB_CORE_DRBL_reserved8_MASK)
#define USB_CORE_DRBL_reserved9_MASK             (0x200U)
#define USB_CORE_DRBL_reserved9_SHIFT            (9U)
#define USB_CORE_DRBL_reserved9(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved9_SHIFT)) & USB_CORE_DRBL_reserved9_MASK)
#define USB_CORE_DRBL_reserved10_MASK            (0x400U)
#define USB_CORE_DRBL_reserved10_SHIFT           (10U)
#define USB_CORE_DRBL_reserved10(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved10_SHIFT)) & USB_CORE_DRBL_reserved10_MASK)
#define USB_CORE_DRBL_reserved11_MASK            (0x800U)
#define USB_CORE_DRBL_reserved11_SHIFT           (11U)
#define USB_CORE_DRBL_reserved11(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved11_SHIFT)) & USB_CORE_DRBL_reserved11_MASK)
#define USB_CORE_DRBL_reserved12_MASK            (0x1000U)
#define USB_CORE_DRBL_reserved12_SHIFT           (12U)
#define USB_CORE_DRBL_reserved12(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved12_SHIFT)) & USB_CORE_DRBL_reserved12_MASK)
#define USB_CORE_DRBL_reserved13_MASK            (0x2000U)
#define USB_CORE_DRBL_reserved13_SHIFT           (13U)
#define USB_CORE_DRBL_reserved13(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved13_SHIFT)) & USB_CORE_DRBL_reserved13_MASK)
#define USB_CORE_DRBL_reserved14_MASK            (0x4000U)
#define USB_CORE_DRBL_reserved14_SHIFT           (14U)
#define USB_CORE_DRBL_reserved14(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved14_SHIFT)) & USB_CORE_DRBL_reserved14_MASK)
#define USB_CORE_DRBL_reserved15_MASK            (0x8000U)
#define USB_CORE_DRBL_reserved15_SHIFT           (15U)
#define USB_CORE_DRBL_reserved15(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved15_SHIFT)) & USB_CORE_DRBL_reserved15_MASK)
#define USB_CORE_DRBL_DRBL0I_MASK                (0x10000U)
#define USB_CORE_DRBL_DRBL0I_SHIFT               (16U)
#define USB_CORE_DRBL_DRBL0I(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL0I_SHIFT)) & USB_CORE_DRBL_DRBL0I_MASK)
#define USB_CORE_DRBL_DRBL1I_MASK                (0x20000U)
#define USB_CORE_DRBL_DRBL1I_SHIFT               (17U)
#define USB_CORE_DRBL_DRBL1I(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL1I_SHIFT)) & USB_CORE_DRBL_DRBL1I_MASK)
#define USB_CORE_DRBL_DRBL2I_MASK                (0x40000U)
#define USB_CORE_DRBL_DRBL2I_SHIFT               (18U)
#define USB_CORE_DRBL_DRBL2I(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL2I_SHIFT)) & USB_CORE_DRBL_DRBL2I_MASK)
#define USB_CORE_DRBL_DRBL3I_MASK                (0x80000U)
#define USB_CORE_DRBL_DRBL3I_SHIFT               (19U)
#define USB_CORE_DRBL_DRBL3I(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL3I_SHIFT)) & USB_CORE_DRBL_DRBL3I_MASK)
#define USB_CORE_DRBL_DRBL4I_MASK                (0x100000U)
#define USB_CORE_DRBL_DRBL4I_SHIFT               (20U)
#define USB_CORE_DRBL_DRBL4I(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL4I_SHIFT)) & USB_CORE_DRBL_DRBL4I_MASK)
#define USB_CORE_DRBL_DRBL5I_MASK                (0x200000U)
#define USB_CORE_DRBL_DRBL5I_SHIFT               (21U)
#define USB_CORE_DRBL_DRBL5I(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL5I_SHIFT)) & USB_CORE_DRBL_DRBL5I_MASK)
#define USB_CORE_DRBL_DRBL6I_MASK                (0x400000U)
#define USB_CORE_DRBL_DRBL6I_SHIFT               (22U)
#define USB_CORE_DRBL_DRBL6I(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL6I_SHIFT)) & USB_CORE_DRBL_DRBL6I_MASK)
#define USB_CORE_DRBL_DRBL7I_MASK                (0x800000U)
#define USB_CORE_DRBL_DRBL7I_SHIFT               (23U)
#define USB_CORE_DRBL_DRBL7I(x)                  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_DRBL7I_SHIFT)) & USB_CORE_DRBL_DRBL7I_MASK)
#define USB_CORE_DRBL_reserved24_MASK            (0x1000000U)
#define USB_CORE_DRBL_reserved24_SHIFT           (24U)
#define USB_CORE_DRBL_reserved24(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved24_SHIFT)) & USB_CORE_DRBL_reserved24_MASK)
#define USB_CORE_DRBL_reserved25_MASK            (0x2000000U)
#define USB_CORE_DRBL_reserved25_SHIFT           (25U)
#define USB_CORE_DRBL_reserved25(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved25_SHIFT)) & USB_CORE_DRBL_reserved25_MASK)
#define USB_CORE_DRBL_reserved26_MASK            (0x4000000U)
#define USB_CORE_DRBL_reserved26_SHIFT           (26U)
#define USB_CORE_DRBL_reserved26(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved26_SHIFT)) & USB_CORE_DRBL_reserved26_MASK)
#define USB_CORE_DRBL_reserved27_MASK            (0x8000000U)
#define USB_CORE_DRBL_reserved27_SHIFT           (27U)
#define USB_CORE_DRBL_reserved27(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved27_SHIFT)) & USB_CORE_DRBL_reserved27_MASK)
#define USB_CORE_DRBL_reserved28_MASK            (0x10000000U)
#define USB_CORE_DRBL_reserved28_SHIFT           (28U)
#define USB_CORE_DRBL_reserved28(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved28_SHIFT)) & USB_CORE_DRBL_reserved28_MASK)
#define USB_CORE_DRBL_reserved29_MASK            (0x20000000U)
#define USB_CORE_DRBL_reserved29_SHIFT           (29U)
#define USB_CORE_DRBL_reserved29(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved29_SHIFT)) & USB_CORE_DRBL_reserved29_MASK)
#define USB_CORE_DRBL_reserved30_MASK            (0x40000000U)
#define USB_CORE_DRBL_reserved30_SHIFT           (30U)
#define USB_CORE_DRBL_reserved30(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved30_SHIFT)) & USB_CORE_DRBL_reserved30_MASK)
#define USB_CORE_DRBL_reserved31_MASK            (0x80000000U)
#define USB_CORE_DRBL_reserved31_SHIFT           (31U)
#define USB_CORE_DRBL_reserved31(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_DRBL_reserved31_SHIFT)) & USB_CORE_DRBL_reserved31_MASK)

/*! @name EP_IEN - Endpoints Interrupt Enable) */
#define USB_CORE_EP_IEN_EOUTEN0_MASK             (0x1U)
#define USB_CORE_EP_IEN_EOUTEN0_SHIFT            (0U)
#define USB_CORE_EP_IEN_EOUTEN0(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EOUTEN0_SHIFT)) & USB_CORE_EP_IEN_EOUTEN0_MASK)
#define USB_CORE_EP_IEN_EOUTEN1_MASK             (0x2U)
#define USB_CORE_EP_IEN_EOUTEN1_SHIFT            (1U)
#define USB_CORE_EP_IEN_EOUTEN1(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EOUTEN1_SHIFT)) & USB_CORE_EP_IEN_EOUTEN1_MASK)
#define USB_CORE_EP_IEN_EOUTEN2_MASK             (0x4U)
#define USB_CORE_EP_IEN_EOUTEN2_SHIFT            (2U)
#define USB_CORE_EP_IEN_EOUTEN2(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EOUTEN2_SHIFT)) & USB_CORE_EP_IEN_EOUTEN2_MASK)
#define USB_CORE_EP_IEN_EOUTEN3_MASK             (0x8U)
#define USB_CORE_EP_IEN_EOUTEN3_SHIFT            (3U)
#define USB_CORE_EP_IEN_EOUTEN3(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EOUTEN3_SHIFT)) & USB_CORE_EP_IEN_EOUTEN3_MASK)
#define USB_CORE_EP_IEN_EOUTEN4_MASK             (0x10U)
#define USB_CORE_EP_IEN_EOUTEN4_SHIFT            (4U)
#define USB_CORE_EP_IEN_EOUTEN4(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EOUTEN4_SHIFT)) & USB_CORE_EP_IEN_EOUTEN4_MASK)
#define USB_CORE_EP_IEN_EOUTEN5_MASK             (0x20U)
#define USB_CORE_EP_IEN_EOUTEN5_SHIFT            (5U)
#define USB_CORE_EP_IEN_EOUTEN5(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EOUTEN5_SHIFT)) & USB_CORE_EP_IEN_EOUTEN5_MASK)
#define USB_CORE_EP_IEN_EOUTEN6_MASK             (0x40U)
#define USB_CORE_EP_IEN_EOUTEN6_SHIFT            (6U)
#define USB_CORE_EP_IEN_EOUTEN6(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EOUTEN6_SHIFT)) & USB_CORE_EP_IEN_EOUTEN6_MASK)
#define USB_CORE_EP_IEN_EOUTEN7_MASK             (0x80U)
#define USB_CORE_EP_IEN_EOUTEN7_SHIFT            (7U)
#define USB_CORE_EP_IEN_EOUTEN7(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EOUTEN7_SHIFT)) & USB_CORE_EP_IEN_EOUTEN7_MASK)
#define USB_CORE_EP_IEN_reserved8_MASK           (0x100U)
#define USB_CORE_EP_IEN_reserved8_SHIFT          (8U)
#define USB_CORE_EP_IEN_reserved8(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved8_SHIFT)) & USB_CORE_EP_IEN_reserved8_MASK)
#define USB_CORE_EP_IEN_reserved9_MASK           (0x200U)
#define USB_CORE_EP_IEN_reserved9_SHIFT          (9U)
#define USB_CORE_EP_IEN_reserved9(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved9_SHIFT)) & USB_CORE_EP_IEN_reserved9_MASK)
#define USB_CORE_EP_IEN_reserved10_MASK          (0x400U)
#define USB_CORE_EP_IEN_reserved10_SHIFT         (10U)
#define USB_CORE_EP_IEN_reserved10(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved10_SHIFT)) & USB_CORE_EP_IEN_reserved10_MASK)
#define USB_CORE_EP_IEN_reserved11_MASK          (0x800U)
#define USB_CORE_EP_IEN_reserved11_SHIFT         (11U)
#define USB_CORE_EP_IEN_reserved11(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved11_SHIFT)) & USB_CORE_EP_IEN_reserved11_MASK)
#define USB_CORE_EP_IEN_reserved12_MASK          (0x1000U)
#define USB_CORE_EP_IEN_reserved12_SHIFT         (12U)
#define USB_CORE_EP_IEN_reserved12(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved12_SHIFT)) & USB_CORE_EP_IEN_reserved12_MASK)
#define USB_CORE_EP_IEN_reserved13_MASK          (0x2000U)
#define USB_CORE_EP_IEN_reserved13_SHIFT         (13U)
#define USB_CORE_EP_IEN_reserved13(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved13_SHIFT)) & USB_CORE_EP_IEN_reserved13_MASK)
#define USB_CORE_EP_IEN_reserved14_MASK          (0x4000U)
#define USB_CORE_EP_IEN_reserved14_SHIFT         (14U)
#define USB_CORE_EP_IEN_reserved14(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved14_SHIFT)) & USB_CORE_EP_IEN_reserved14_MASK)
#define USB_CORE_EP_IEN_reserved15_MASK          (0x8000U)
#define USB_CORE_EP_IEN_reserved15_SHIFT         (15U)
#define USB_CORE_EP_IEN_reserved15(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved15_SHIFT)) & USB_CORE_EP_IEN_reserved15_MASK)
#define USB_CORE_EP_IEN_EINEN0_MASK              (0x10000U)
#define USB_CORE_EP_IEN_EINEN0_SHIFT             (16U)
#define USB_CORE_EP_IEN_EINEN0(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EINEN0_SHIFT)) & USB_CORE_EP_IEN_EINEN0_MASK)
#define USB_CORE_EP_IEN_EINEN1_MASK              (0x20000U)
#define USB_CORE_EP_IEN_EINEN1_SHIFT             (17U)
#define USB_CORE_EP_IEN_EINEN1(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EINEN1_SHIFT)) & USB_CORE_EP_IEN_EINEN1_MASK)
#define USB_CORE_EP_IEN_EINEN2_MASK              (0x40000U)
#define USB_CORE_EP_IEN_EINEN2_SHIFT             (18U)
#define USB_CORE_EP_IEN_EINEN2(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EINEN2_SHIFT)) & USB_CORE_EP_IEN_EINEN2_MASK)
#define USB_CORE_EP_IEN_EINEN3_MASK              (0x80000U)
#define USB_CORE_EP_IEN_EINEN3_SHIFT             (19U)
#define USB_CORE_EP_IEN_EINEN3(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EINEN3_SHIFT)) & USB_CORE_EP_IEN_EINEN3_MASK)
#define USB_CORE_EP_IEN_EINEN4_MASK              (0x100000U)
#define USB_CORE_EP_IEN_EINEN4_SHIFT             (20U)
#define USB_CORE_EP_IEN_EINEN4(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EINEN4_SHIFT)) & USB_CORE_EP_IEN_EINEN4_MASK)
#define USB_CORE_EP_IEN_EINEN5_MASK              (0x200000U)
#define USB_CORE_EP_IEN_EINEN5_SHIFT             (21U)
#define USB_CORE_EP_IEN_EINEN5(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EINEN5_SHIFT)) & USB_CORE_EP_IEN_EINEN5_MASK)
#define USB_CORE_EP_IEN_EINEN6_MASK              (0x400000U)
#define USB_CORE_EP_IEN_EINEN6_SHIFT             (22U)
#define USB_CORE_EP_IEN_EINEN6(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EINEN6_SHIFT)) & USB_CORE_EP_IEN_EINEN6_MASK)
#define USB_CORE_EP_IEN_EINEN7_MASK              (0x800000U)
#define USB_CORE_EP_IEN_EINEN7_SHIFT             (23U)
#define USB_CORE_EP_IEN_EINEN7(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_EINEN7_SHIFT)) & USB_CORE_EP_IEN_EINEN7_MASK)
#define USB_CORE_EP_IEN_reserved24_MASK          (0x1000000U)
#define USB_CORE_EP_IEN_reserved24_SHIFT         (24U)
#define USB_CORE_EP_IEN_reserved24(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved24_SHIFT)) & USB_CORE_EP_IEN_reserved24_MASK)
#define USB_CORE_EP_IEN_reserved25_MASK          (0x2000000U)
#define USB_CORE_EP_IEN_reserved25_SHIFT         (25U)
#define USB_CORE_EP_IEN_reserved25(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved25_SHIFT)) & USB_CORE_EP_IEN_reserved25_MASK)
#define USB_CORE_EP_IEN_reserved26_MASK          (0x4000000U)
#define USB_CORE_EP_IEN_reserved26_SHIFT         (26U)
#define USB_CORE_EP_IEN_reserved26(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved26_SHIFT)) & USB_CORE_EP_IEN_reserved26_MASK)
#define USB_CORE_EP_IEN_reserved27_MASK          (0x8000000U)
#define USB_CORE_EP_IEN_reserved27_SHIFT         (27U)
#define USB_CORE_EP_IEN_reserved27(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved27_SHIFT)) & USB_CORE_EP_IEN_reserved27_MASK)
#define USB_CORE_EP_IEN_reserved28_MASK          (0x10000000U)
#define USB_CORE_EP_IEN_reserved28_SHIFT         (28U)
#define USB_CORE_EP_IEN_reserved28(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved28_SHIFT)) & USB_CORE_EP_IEN_reserved28_MASK)
#define USB_CORE_EP_IEN_reserved29_MASK          (0x20000000U)
#define USB_CORE_EP_IEN_reserved29_SHIFT         (29U)
#define USB_CORE_EP_IEN_reserved29(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved29_SHIFT)) & USB_CORE_EP_IEN_reserved29_MASK)
#define USB_CORE_EP_IEN_reserved30_MASK          (0x40000000U)
#define USB_CORE_EP_IEN_reserved30_SHIFT         (30U)
#define USB_CORE_EP_IEN_reserved30(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved30_SHIFT)) & USB_CORE_EP_IEN_reserved30_MASK)
#define USB_CORE_EP_IEN_reserved31_MASK          (0x80000000U)
#define USB_CORE_EP_IEN_reserved31_SHIFT         (31U)
#define USB_CORE_EP_IEN_reserved31(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_IEN_reserved31_SHIFT)) & USB_CORE_EP_IEN_reserved31_MASK)

/*! @name EP_ISTS - Endpoints Interrupt Status */
#define USB_CORE_EP_ISTS_EOUT0_MASK              (0x1U)
#define USB_CORE_EP_ISTS_EOUT0_SHIFT             (0U)
#define USB_CORE_EP_ISTS_EOUT0(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EOUT0_SHIFT)) & USB_CORE_EP_ISTS_EOUT0_MASK)
#define USB_CORE_EP_ISTS_EOUT1_MASK              (0x2U)
#define USB_CORE_EP_ISTS_EOUT1_SHIFT             (1U)
#define USB_CORE_EP_ISTS_EOUT1(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EOUT1_SHIFT)) & USB_CORE_EP_ISTS_EOUT1_MASK)
#define USB_CORE_EP_ISTS_EOUT2_MASK              (0x4U)
#define USB_CORE_EP_ISTS_EOUT2_SHIFT             (2U)
#define USB_CORE_EP_ISTS_EOUT2(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EOUT2_SHIFT)) & USB_CORE_EP_ISTS_EOUT2_MASK)
#define USB_CORE_EP_ISTS_EOUT3_MASK              (0x8U)
#define USB_CORE_EP_ISTS_EOUT3_SHIFT             (3U)
#define USB_CORE_EP_ISTS_EOUT3(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EOUT3_SHIFT)) & USB_CORE_EP_ISTS_EOUT3_MASK)
#define USB_CORE_EP_ISTS_EOUT4_MASK              (0x10U)
#define USB_CORE_EP_ISTS_EOUT4_SHIFT             (4U)
#define USB_CORE_EP_ISTS_EOUT4(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EOUT4_SHIFT)) & USB_CORE_EP_ISTS_EOUT4_MASK)
#define USB_CORE_EP_ISTS_EOUT5_MASK              (0x20U)
#define USB_CORE_EP_ISTS_EOUT5_SHIFT             (5U)
#define USB_CORE_EP_ISTS_EOUT5(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EOUT5_SHIFT)) & USB_CORE_EP_ISTS_EOUT5_MASK)
#define USB_CORE_EP_ISTS_EOUT6_MASK              (0x40U)
#define USB_CORE_EP_ISTS_EOUT6_SHIFT             (6U)
#define USB_CORE_EP_ISTS_EOUT6(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EOUT6_SHIFT)) & USB_CORE_EP_ISTS_EOUT6_MASK)
#define USB_CORE_EP_ISTS_EOUT7_MASK              (0x80U)
#define USB_CORE_EP_ISTS_EOUT7_SHIFT             (7U)
#define USB_CORE_EP_ISTS_EOUT7(x)                (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EOUT7_SHIFT)) & USB_CORE_EP_ISTS_EOUT7_MASK)
#define USB_CORE_EP_ISTS_reserved8_MASK          (0x100U)
#define USB_CORE_EP_ISTS_reserved8_SHIFT         (8U)
#define USB_CORE_EP_ISTS_reserved8(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved8_SHIFT)) & USB_CORE_EP_ISTS_reserved8_MASK)
#define USB_CORE_EP_ISTS_reserved9_MASK          (0x200U)
#define USB_CORE_EP_ISTS_reserved9_SHIFT         (9U)
#define USB_CORE_EP_ISTS_reserved9(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved9_SHIFT)) & USB_CORE_EP_ISTS_reserved9_MASK)
#define USB_CORE_EP_ISTS_reserved10_MASK         (0x400U)
#define USB_CORE_EP_ISTS_reserved10_SHIFT        (10U)
#define USB_CORE_EP_ISTS_reserved10(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved10_SHIFT)) & USB_CORE_EP_ISTS_reserved10_MASK)
#define USB_CORE_EP_ISTS_reserved11_MASK         (0x800U)
#define USB_CORE_EP_ISTS_reserved11_SHIFT        (11U)
#define USB_CORE_EP_ISTS_reserved11(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved11_SHIFT)) & USB_CORE_EP_ISTS_reserved11_MASK)
#define USB_CORE_EP_ISTS_reserved12_MASK         (0x1000U)
#define USB_CORE_EP_ISTS_reserved12_SHIFT        (12U)
#define USB_CORE_EP_ISTS_reserved12(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved12_SHIFT)) & USB_CORE_EP_ISTS_reserved12_MASK)
#define USB_CORE_EP_ISTS_reserved13_MASK         (0x2000U)
#define USB_CORE_EP_ISTS_reserved13_SHIFT        (13U)
#define USB_CORE_EP_ISTS_reserved13(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved13_SHIFT)) & USB_CORE_EP_ISTS_reserved13_MASK)
#define USB_CORE_EP_ISTS_reserved14_MASK         (0x4000U)
#define USB_CORE_EP_ISTS_reserved14_SHIFT        (14U)
#define USB_CORE_EP_ISTS_reserved14(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved14_SHIFT)) & USB_CORE_EP_ISTS_reserved14_MASK)
#define USB_CORE_EP_ISTS_reserved15_MASK         (0x8000U)
#define USB_CORE_EP_ISTS_reserved15_SHIFT        (15U)
#define USB_CORE_EP_ISTS_reserved15(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved15_SHIFT)) & USB_CORE_EP_ISTS_reserved15_MASK)
#define USB_CORE_EP_ISTS_EIN0_MASK               (0x10000U)
#define USB_CORE_EP_ISTS_EIN0_SHIFT              (16U)
#define USB_CORE_EP_ISTS_EIN0(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EIN0_SHIFT)) & USB_CORE_EP_ISTS_EIN0_MASK)
#define USB_CORE_EP_ISTS_EIN1_MASK               (0x20000U)
#define USB_CORE_EP_ISTS_EIN1_SHIFT              (17U)
#define USB_CORE_EP_ISTS_EIN1(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EIN1_SHIFT)) & USB_CORE_EP_ISTS_EIN1_MASK)
#define USB_CORE_EP_ISTS_EIN2_MASK               (0x40000U)
#define USB_CORE_EP_ISTS_EIN2_SHIFT              (18U)
#define USB_CORE_EP_ISTS_EIN2(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EIN2_SHIFT)) & USB_CORE_EP_ISTS_EIN2_MASK)
#define USB_CORE_EP_ISTS_EIN3_MASK               (0x80000U)
#define USB_CORE_EP_ISTS_EIN3_SHIFT              (19U)
#define USB_CORE_EP_ISTS_EIN3(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EIN3_SHIFT)) & USB_CORE_EP_ISTS_EIN3_MASK)
#define USB_CORE_EP_ISTS_EIN4_MASK               (0x100000U)
#define USB_CORE_EP_ISTS_EIN4_SHIFT              (20U)
#define USB_CORE_EP_ISTS_EIN4(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EIN4_SHIFT)) & USB_CORE_EP_ISTS_EIN4_MASK)
#define USB_CORE_EP_ISTS_EIN5_MASK               (0x200000U)
#define USB_CORE_EP_ISTS_EIN5_SHIFT              (21U)
#define USB_CORE_EP_ISTS_EIN5(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EIN5_SHIFT)) & USB_CORE_EP_ISTS_EIN5_MASK)
#define USB_CORE_EP_ISTS_EIN6_MASK               (0x400000U)
#define USB_CORE_EP_ISTS_EIN6_SHIFT              (22U)
#define USB_CORE_EP_ISTS_EIN6(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EIN6_SHIFT)) & USB_CORE_EP_ISTS_EIN6_MASK)
#define USB_CORE_EP_ISTS_EIN7_MASK               (0x800000U)
#define USB_CORE_EP_ISTS_EIN7_SHIFT              (23U)
#define USB_CORE_EP_ISTS_EIN7(x)                 (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_EIN7_SHIFT)) & USB_CORE_EP_ISTS_EIN7_MASK)
#define USB_CORE_EP_ISTS_reserved24_MASK         (0x1000000U)
#define USB_CORE_EP_ISTS_reserved24_SHIFT        (24U)
#define USB_CORE_EP_ISTS_reserved24(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved24_SHIFT)) & USB_CORE_EP_ISTS_reserved24_MASK)
#define USB_CORE_EP_ISTS_reserved25_MASK         (0x2000000U)
#define USB_CORE_EP_ISTS_reserved25_SHIFT        (25U)
#define USB_CORE_EP_ISTS_reserved25(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved25_SHIFT)) & USB_CORE_EP_ISTS_reserved25_MASK)
#define USB_CORE_EP_ISTS_reserved26_MASK         (0x4000000U)
#define USB_CORE_EP_ISTS_reserved26_SHIFT        (26U)
#define USB_CORE_EP_ISTS_reserved26(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved26_SHIFT)) & USB_CORE_EP_ISTS_reserved26_MASK)
#define USB_CORE_EP_ISTS_reserved27_MASK         (0x8000000U)
#define USB_CORE_EP_ISTS_reserved27_SHIFT        (27U)
#define USB_CORE_EP_ISTS_reserved27(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved27_SHIFT)) & USB_CORE_EP_ISTS_reserved27_MASK)
#define USB_CORE_EP_ISTS_reserved28_MASK         (0x10000000U)
#define USB_CORE_EP_ISTS_reserved28_SHIFT        (28U)
#define USB_CORE_EP_ISTS_reserved28(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved28_SHIFT)) & USB_CORE_EP_ISTS_reserved28_MASK)
#define USB_CORE_EP_ISTS_reserved29_MASK         (0x20000000U)
#define USB_CORE_EP_ISTS_reserved29_SHIFT        (29U)
#define USB_CORE_EP_ISTS_reserved29(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved29_SHIFT)) & USB_CORE_EP_ISTS_reserved29_MASK)
#define USB_CORE_EP_ISTS_reserved30_MASK         (0x40000000U)
#define USB_CORE_EP_ISTS_reserved30_SHIFT        (30U)
#define USB_CORE_EP_ISTS_reserved30(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved30_SHIFT)) & USB_CORE_EP_ISTS_reserved30_MASK)
#define USB_CORE_EP_ISTS_reserved31_MASK         (0x80000000U)
#define USB_CORE_EP_ISTS_reserved31_SHIFT        (31U)
#define USB_CORE_EP_ISTS_reserved31(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_EP_ISTS_reserved31_SHIFT)) & USB_CORE_EP_ISTS_reserved31_MASK)

/*! @name USB_PWR - Global power configuration */
#define USB_CORE_USB_PWR_PSO_EN_MASK             (0x1U)
#define USB_CORE_USB_PWR_PSO_EN_SHIFT            (0U)
#define USB_CORE_USB_PWR_PSO_EN(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_PWR_PSO_EN_SHIFT)) & USB_CORE_USB_PWR_PSO_EN_MASK)
#define USB_CORE_USB_PWR_PSO_DS_MASK             (0x2U)
#define USB_CORE_USB_PWR_PSO_DS_SHIFT            (1U)
#define USB_CORE_USB_PWR_PSO_DS(x)               (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_PWR_PSO_DS_SHIFT)) & USB_CORE_USB_PWR_PSO_DS_MASK)
#define USB_CORE_USB_PWR_RESERVED0_MASK          (0xFCU)
#define USB_CORE_USB_PWR_RESERVED0_SHIFT         (2U)
#define USB_CORE_USB_PWR_RESERVED0(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_PWR_RESERVED0_SHIFT)) & USB_CORE_USB_PWR_RESERVED0_MASK)
#define USB_CORE_USB_PWR_STB_CLK_SWITCH_EN_MASK  (0x100U)
#define USB_CORE_USB_PWR_STB_CLK_SWITCH_EN_SHIFT (8U)
#define USB_CORE_USB_PWR_STB_CLK_SWITCH_EN(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_PWR_STB_CLK_SWITCH_EN_SHIFT)) & USB_CORE_USB_PWR_STB_CLK_SWITCH_EN_MASK)
#define USB_CORE_USB_PWR_STB_CLK_SWITCH_DONE_MASK (0x200U)
#define USB_CORE_USB_PWR_STB_CLK_SWITCH_DONE_SHIFT (9U)
#define USB_CORE_USB_PWR_STB_CLK_SWITCH_DONE(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_PWR_STB_CLK_SWITCH_DONE_SHIFT)) & USB_CORE_USB_PWR_STB_CLK_SWITCH_DONE_MASK)
#define USB_CORE_USB_PWR_RESERVED1_MASK          (0x3FFFFC00U)
#define USB_CORE_USB_PWR_RESERVED1_SHIFT         (10U)
#define USB_CORE_USB_PWR_RESERVED1(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_PWR_RESERVED1_SHIFT)) & USB_CORE_USB_PWR_RESERVED1_MASK)
#define USB_CORE_USB_PWR_FAST_REG_ACCESS_STAT_MASK (0x40000000U)
#define USB_CORE_USB_PWR_FAST_REG_ACCESS_STAT_SHIFT (30U)
#define USB_CORE_USB_PWR_FAST_REG_ACCESS_STAT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_PWR_FAST_REG_ACCESS_STAT_SHIFT)) & USB_CORE_USB_PWR_FAST_REG_ACCESS_STAT_MASK)
#define USB_CORE_USB_PWR_FAST_REG_ACCESS_MASK    (0x80000000U)
#define USB_CORE_USB_PWR_FAST_REG_ACCESS_SHIFT   (31U)
#define USB_CORE_USB_PWR_FAST_REG_ACCESS(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_PWR_FAST_REG_ACCESS_SHIFT)) & USB_CORE_USB_PWR_FAST_REG_ACCESS_MASK)

/*! @name USB_CONF2 - USB configuration */
#define USB_CORE_USB_CONF2_AHB_RETRY_EN_MASK     (0x1U)
#define USB_CORE_USB_CONF2_AHB_RETRY_EN_SHIFT    (0U)
#define USB_CORE_USB_CONF2_AHB_RETRY_EN(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF2_AHB_RETRY_EN_SHIFT)) & USB_CORE_USB_CONF2_AHB_RETRY_EN_MASK)
#define USB_CORE_USB_CONF2_RESERVED_MASK         (0xFFFFFFFEU)
#define USB_CORE_USB_CONF2_RESERVED_SHIFT        (1U)
#define USB_CORE_USB_CONF2_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CONF2_RESERVED_SHIFT)) & USB_CORE_USB_CONF2_RESERVED_MASK)

/*! @name USB_CAP1 - USB Capability */
#define USB_CORE_USB_CAP1_SFR_TYPE_MASK          (0xFU)
#define USB_CORE_USB_CAP1_SFR_TYPE_SHIFT         (0U)
#define USB_CORE_USB_CAP1_SFR_TYPE(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_SFR_TYPE_SHIFT)) & USB_CORE_USB_CAP1_SFR_TYPE_MASK)
#define USB_CORE_USB_CAP1_SFR_WIDTH_MASK         (0xF0U)
#define USB_CORE_USB_CAP1_SFR_WIDTH_SHIFT        (4U)
#define USB_CORE_USB_CAP1_SFR_WIDTH(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_SFR_WIDTH_SHIFT)) & USB_CORE_USB_CAP1_SFR_WIDTH_MASK)
#define USB_CORE_USB_CAP1_DMA_TYPE_MASK          (0xF00U)
#define USB_CORE_USB_CAP1_DMA_TYPE_SHIFT         (8U)
#define USB_CORE_USB_CAP1_DMA_TYPE(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_DMA_TYPE_SHIFT)) & USB_CORE_USB_CAP1_DMA_TYPE_MASK)
#define USB_CORE_USB_CAP1_DMA_WIDTH_MASK         (0xF000U)
#define USB_CORE_USB_CAP1_DMA_WIDTH_SHIFT        (12U)
#define USB_CORE_USB_CAP1_DMA_WIDTH(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_DMA_WIDTH_SHIFT)) & USB_CORE_USB_CAP1_DMA_WIDTH_MASK)
#define USB_CORE_USB_CAP1_U3PHY_TYPE_MASK        (0xF0000U)
#define USB_CORE_USB_CAP1_U3PHY_TYPE_SHIFT       (16U)
#define USB_CORE_USB_CAP1_U3PHY_TYPE(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_U3PHY_TYPE_SHIFT)) & USB_CORE_USB_CAP1_U3PHY_TYPE_MASK)
#define USB_CORE_USB_CAP1_U3PHY_WIDTH_MASK       (0xF00000U)
#define USB_CORE_USB_CAP1_U3PHY_WIDTH_SHIFT      (20U)
#define USB_CORE_USB_CAP1_U3PHY_WIDTH(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_U3PHY_WIDTH_SHIFT)) & USB_CORE_USB_CAP1_U3PHY_WIDTH_MASK)
#define USB_CORE_USB_CAP1_U2PHY_EN_MASK          (0x1000000U)
#define USB_CORE_USB_CAP1_U2PHY_EN_SHIFT         (24U)
#define USB_CORE_USB_CAP1_U2PHY_EN(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_U2PHY_EN_SHIFT)) & USB_CORE_USB_CAP1_U2PHY_EN_MASK)
#define USB_CORE_USB_CAP1_U2PHY_TYPE_MASK        (0x2000000U)
#define USB_CORE_USB_CAP1_U2PHY_TYPE_SHIFT       (25U)
#define USB_CORE_USB_CAP1_U2PHY_TYPE(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_U2PHY_TYPE_SHIFT)) & USB_CORE_USB_CAP1_U2PHY_TYPE_MASK)
#define USB_CORE_USB_CAP1_U2PHY_WIDTH_MASK       (0x4000000U)
#define USB_CORE_USB_CAP1_U2PHY_WIDTH_SHIFT      (26U)
#define USB_CORE_USB_CAP1_U2PHY_WIDTH(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_U2PHY_WIDTH_SHIFT)) & USB_CORE_USB_CAP1_U2PHY_WIDTH_MASK)
#define USB_CORE_USB_CAP1_OTG_READY_MASK         (0x8000000U)
#define USB_CORE_USB_CAP1_OTG_READY_SHIFT        (27U)
#define USB_CORE_USB_CAP1_OTG_READY(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_OTG_READY_SHIFT)) & USB_CORE_USB_CAP1_OTG_READY_MASK)
#define USB_CORE_USB_CAP1_RESERVED_MASK          (0xF0000000U)
#define USB_CORE_USB_CAP1_RESERVED_SHIFT         (28U)
#define USB_CORE_USB_CAP1_RESERVED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP1_RESERVED_SHIFT)) & USB_CORE_USB_CAP1_RESERVED_MASK)

/*! @name USB_CAP2 - USB Capability */
#define USB_CORE_USB_CAP2_ACTUAL_MEM_SIZE_MASK   (0xFFU)
#define USB_CORE_USB_CAP2_ACTUAL_MEM_SIZE_SHIFT  (0U)
#define USB_CORE_USB_CAP2_ACTUAL_MEM_SIZE(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP2_ACTUAL_MEM_SIZE_SHIFT)) & USB_CORE_USB_CAP2_ACTUAL_MEM_SIZE_MASK)
#define USB_CORE_USB_CAP2_MAX_MEM_SIZE_MASK      (0x1F00U)
#define USB_CORE_USB_CAP2_MAX_MEM_SIZE_SHIFT     (8U)
#define USB_CORE_USB_CAP2_MAX_MEM_SIZE(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP2_MAX_MEM_SIZE_SHIFT)) & USB_CORE_USB_CAP2_MAX_MEM_SIZE_MASK)
#define USB_CORE_USB_CAP2_RESERVED_MASK          (0xFFFFE000U)
#define USB_CORE_USB_CAP2_RESERVED_SHIFT         (13U)
#define USB_CORE_USB_CAP2_RESERVED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP2_RESERVED_SHIFT)) & USB_CORE_USB_CAP2_RESERVED_MASK)

/*! @name USB_CAP3 - USB Capability */
#define USB_CORE_USB_CAP3_EPOUT_N_MASK           (0xFFFFU)
#define USB_CORE_USB_CAP3_EPOUT_N_SHIFT          (0U)
#define USB_CORE_USB_CAP3_EPOUT_N(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP3_EPOUT_N_SHIFT)) & USB_CORE_USB_CAP3_EPOUT_N_MASK)
#define USB_CORE_USB_CAP3_EPIN_N_MASK            (0xFFFF0000U)
#define USB_CORE_USB_CAP3_EPIN_N_SHIFT           (16U)
#define USB_CORE_USB_CAP3_EPIN_N(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP3_EPIN_N_SHIFT)) & USB_CORE_USB_CAP3_EPIN_N_MASK)

/*! @name USB_CAP4 - ISO HW support */
#define USB_CORE_USB_CAP4_EPOUTI_N_MASK          (0xFFFFU)
#define USB_CORE_USB_CAP4_EPOUTI_N_SHIFT         (0U)
#define USB_CORE_USB_CAP4_EPOUTI_N(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP4_EPOUTI_N_SHIFT)) & USB_CORE_USB_CAP4_EPOUTI_N_MASK)
#define USB_CORE_USB_CAP4_EPINI_N_MASK           (0xFFFF0000U)
#define USB_CORE_USB_CAP4_EPINI_N_SHIFT          (16U)
#define USB_CORE_USB_CAP4_EPINI_N(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP4_EPINI_N_SHIFT)) & USB_CORE_USB_CAP4_EPINI_N_MASK)

/*! @name USB_CAP5 - Bulk Stream HW */
#define USB_CORE_USB_CAP5_EPOUTI_N_MASK          (0xFFFFU)
#define USB_CORE_USB_CAP5_EPOUTI_N_SHIFT         (0U)
#define USB_CORE_USB_CAP5_EPOUTI_N(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP5_EPOUTI_N_SHIFT)) & USB_CORE_USB_CAP5_EPOUTI_N_MASK)
#define USB_CORE_USB_CAP5_EPINI_N_MASK           (0xFFFF0000U)
#define USB_CORE_USB_CAP5_EPINI_N_SHIFT          (16U)
#define USB_CORE_USB_CAP5_EPINI_N(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP5_EPINI_N_SHIFT)) & USB_CORE_USB_CAP5_EPINI_N_MASK)

/*! @name USB_CAP6 - Device controller version */
#define USB_CORE_USB_CAP6_VERSION_MASK           (0xFFFFFFFFU)
#define USB_CORE_USB_CAP6_VERSION_SHIFT          (0U)
#define USB_CORE_USB_CAP6_VERSION(x)             (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CAP6_VERSION_SHIFT)) & USB_CORE_USB_CAP6_VERSION_MASK)

/*! @name USB_CPKT1 - Custom Packet value */
#define USB_CORE_USB_CPKT1_CPKT1_MASK            (0xFFFFFFFFU)
#define USB_CORE_USB_CPKT1_CPKT1_SHIFT           (0U)
#define USB_CORE_USB_CPKT1_CPKT1(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CPKT1_CPKT1_SHIFT)) & USB_CORE_USB_CPKT1_CPKT1_MASK)

/*! @name USB_CPKT2 - Custom Packet value */
#define USB_CORE_USB_CPKT2_CPKT2_MASK            (0xFFFFFFFFU)
#define USB_CORE_USB_CPKT2_CPKT2_SHIFT           (0U)
#define USB_CORE_USB_CPKT2_CPKT2(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CPKT2_CPKT2_SHIFT)) & USB_CORE_USB_CPKT2_CPKT2_MASK)

/*! @name USB_CPKT3 - Custom Packet value */
#define USB_CORE_USB_CPKT3_CPKT3_MASK            (0xFFFFFFFFU)
#define USB_CORE_USB_CPKT3_CPKT3_SHIFT           (0U)
#define USB_CORE_USB_CPKT3_CPKT3(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_USB_CPKT3_CPKT3_SHIFT)) & USB_CORE_USB_CPKT3_CPKT3_MASK)

/*! @name CFG_REG1 - VBUS debouncer Configuration */
#define USB_CORE_CFG_REG1_DEBOUNCER_CNT_MASK     (0x3FFFFU)
#define USB_CORE_CFG_REG1_DEBOUNCER_CNT_SHIFT    (0U)
#define USB_CORE_CFG_REG1_DEBOUNCER_CNT(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG1_DEBOUNCER_CNT_SHIFT)) & USB_CORE_CFG_REG1_DEBOUNCER_CNT_MASK)
#define USB_CORE_CFG_REG1_RESERVED_MASK          (0xFFFC0000U)
#define USB_CORE_CFG_REG1_RESERVED_SHIFT         (18U)
#define USB_CORE_CFG_REG1_RESERVED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG1_RESERVED_SHIFT)) & USB_CORE_CFG_REG1_RESERVED_MASK)

/*! @name DBG_LINK1 - Link */
#define USB_CORE_DBG_LINK1_LFPS_MIN_DET_U1_EXIT_MASK (0xFFU)
#define USB_CORE_DBG_LINK1_LFPS_MIN_DET_U1_EXIT_SHIFT (0U)
#define USB_CORE_DBG_LINK1_LFPS_MIN_DET_U1_EXIT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK1_LFPS_MIN_DET_U1_EXIT_SHIFT)) & USB_CORE_DBG_LINK1_LFPS_MIN_DET_U1_EXIT_MASK)
#define USB_CORE_DBG_LINK1_LFPS_MIN_GEN_U1_EXIT_MASK (0xFF00U)
#define USB_CORE_DBG_LINK1_LFPS_MIN_GEN_U1_EXIT_SHIFT (8U)
#define USB_CORE_DBG_LINK1_LFPS_MIN_GEN_U1_EXIT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK1_LFPS_MIN_GEN_U1_EXIT_SHIFT)) & USB_CORE_DBG_LINK1_LFPS_MIN_GEN_U1_EXIT_MASK)
#define USB_CORE_DBG_LINK1_RXDET_BREAK_DIS_MASK  (0x10000U)
#define USB_CORE_DBG_LINK1_RXDET_BREAK_DIS_SHIFT (16U)
#define USB_CORE_DBG_LINK1_RXDET_BREAK_DIS(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK1_RXDET_BREAK_DIS_SHIFT)) & USB_CORE_DBG_LINK1_RXDET_BREAK_DIS_MASK)
#define USB_CORE_DBG_LINK1_LFPS_GEN_PING_MASK    (0x3E0000U)
#define USB_CORE_DBG_LINK1_LFPS_GEN_PING_SHIFT   (17U)
#define USB_CORE_DBG_LINK1_LFPS_GEN_PING(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK1_LFPS_GEN_PING_SHIFT)) & USB_CORE_DBG_LINK1_LFPS_GEN_PING_MASK)
#define USB_CORE_DBG_LINK1_RESERVED0_MASK        (0xC00000U)
#define USB_CORE_DBG_LINK1_RESERVED0_SHIFT       (22U)
#define USB_CORE_DBG_LINK1_RESERVED0(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK1_RESERVED0_SHIFT)) & USB_CORE_DBG_LINK1_RESERVED0_MASK)
#define USB_CORE_DBG_LINK1_LFPS_MIN_DET_U1_EXIT_SET_MASK (0x1000000U)
#define USB_CORE_DBG_LINK1_LFPS_MIN_DET_U1_EXIT_SET_SHIFT (24U)
#define USB_CORE_DBG_LINK1_LFPS_MIN_DET_U1_EXIT_SET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK1_LFPS_MIN_DET_U1_EXIT_SET_SHIFT)) & USB_CORE_DBG_LINK1_LFPS_MIN_DET_U1_EXIT_SET_MASK)
#define USB_CORE_DBG_LINK1_LFPS_MIN_GEN_U1_EXIT_SET_MASK (0x2000000U)
#define USB_CORE_DBG_LINK1_LFPS_MIN_GEN_U1_EXIT_SET_SHIFT (25U)
#define USB_CORE_DBG_LINK1_LFPS_MIN_GEN_U1_EXIT_SET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK1_LFPS_MIN_GEN_U1_EXIT_SET_SHIFT)) & USB_CORE_DBG_LINK1_LFPS_MIN_GEN_U1_EXIT_SET_MASK)
#define USB_CORE_DBG_LINK1_RXDET_BREAK_DIS_SET_MASK (0x4000000U)
#define USB_CORE_DBG_LINK1_RXDET_BREAK_DIS_SET_SHIFT (26U)
#define USB_CORE_DBG_LINK1_RXDET_BREAK_DIS_SET(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK1_RXDET_BREAK_DIS_SET_SHIFT)) & USB_CORE_DBG_LINK1_RXDET_BREAK_DIS_SET_MASK)
#define USB_CORE_DBG_LINK1_LFPS_GEN_PING_SET_MASK (0x8000000U)
#define USB_CORE_DBG_LINK1_LFPS_GEN_PING_SET_SHIFT (27U)
#define USB_CORE_DBG_LINK1_LFPS_GEN_PING_SET(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK1_LFPS_GEN_PING_SET_SHIFT)) & USB_CORE_DBG_LINK1_LFPS_GEN_PING_SET_MASK)
#define USB_CORE_DBG_LINK1_RESERVED1_MASK        (0xF0000000U)
#define USB_CORE_DBG_LINK1_RESERVED1_SHIFT       (28U)
#define USB_CORE_DBG_LINK1_RESERVED1(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK1_RESERVED1_SHIFT)) & USB_CORE_DBG_LINK1_RESERVED1_MASK)

/*! @name DBG_LINK2 - Link */
#define USB_CORE_DBG_LINK2_RXEQTR_AVAL_MASK      (0xFFU)
#define USB_CORE_DBG_LINK2_RXEQTR_AVAL_SHIFT     (0U)
#define USB_CORE_DBG_LINK2_RXEQTR_AVAL(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK2_RXEQTR_AVAL_SHIFT)) & USB_CORE_DBG_LINK2_RXEQTR_AVAL_MASK)
#define USB_CORE_DBG_LINK2_RXEQTR_DVAL_MASK      (0xFF00U)
#define USB_CORE_DBG_LINK2_RXEQTR_DVAL_SHIFT     (8U)
#define USB_CORE_DBG_LINK2_RXEQTR_DVAL(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK2_RXEQTR_DVAL_SHIFT)) & USB_CORE_DBG_LINK2_RXEQTR_DVAL_MASK)
#define USB_CORE_DBG_LINK2_PHYRXVAL_DVAL_MASK    (0xFF0000U)
#define USB_CORE_DBG_LINK2_PHYRXVAL_DVAL_SHIFT   (16U)
#define USB_CORE_DBG_LINK2_PHYRXVAL_DVAL(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK2_PHYRXVAL_DVAL_SHIFT)) & USB_CORE_DBG_LINK2_PHYRXVAL_DVAL_MASK)
#define USB_CORE_DBG_LINK2_TXDET_DVAL_MASK       (0x7000000U)
#define USB_CORE_DBG_LINK2_TXDET_DVAL_SHIFT      (24U)
#define USB_CORE_DBG_LINK2_TXDET_DVAL(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK2_TXDET_DVAL_SHIFT)) & USB_CORE_DBG_LINK2_TXDET_DVAL_MASK)
#define USB_CORE_DBG_LINK2_RESERVED_MASK         (0x8000000U)
#define USB_CORE_DBG_LINK2_RESERVED_SHIFT        (27U)
#define USB_CORE_DBG_LINK2_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK2_RESERVED_SHIFT)) & USB_CORE_DBG_LINK2_RESERVED_MASK)
#define USB_CORE_DBG_LINK2_RXEQTR_AVAL_SET_MASK  (0x10000000U)
#define USB_CORE_DBG_LINK2_RXEQTR_AVAL_SET_SHIFT (28U)
#define USB_CORE_DBG_LINK2_RXEQTR_AVAL_SET(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK2_RXEQTR_AVAL_SET_SHIFT)) & USB_CORE_DBG_LINK2_RXEQTR_AVAL_SET_MASK)
#define USB_CORE_DBG_LINK2_RXEQTR_DVAL_SET_MASK  (0x20000000U)
#define USB_CORE_DBG_LINK2_RXEQTR_DVAL_SET_SHIFT (29U)
#define USB_CORE_DBG_LINK2_RXEQTR_DVAL_SET(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK2_RXEQTR_DVAL_SET_SHIFT)) & USB_CORE_DBG_LINK2_RXEQTR_DVAL_SET_MASK)
#define USB_CORE_DBG_LINK2_PHYRXVAL_DVAL_SET_MASK (0x40000000U)
#define USB_CORE_DBG_LINK2_PHYRXVAL_DVAL_SET_SHIFT (30U)
#define USB_CORE_DBG_LINK2_PHYRXVAL_DVAL_SET(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK2_PHYRXVAL_DVAL_SET_SHIFT)) & USB_CORE_DBG_LINK2_PHYRXVAL_DVAL_SET_MASK)
#define USB_CORE_DBG_LINK2_TXDET_DVAL_SET_MASK   (0x80000000U)
#define USB_CORE_DBG_LINK2_TXDET_DVAL_SET_SHIFT  (31U)
#define USB_CORE_DBG_LINK2_TXDET_DVAL_SET(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_DBG_LINK2_TXDET_DVAL_SET_SHIFT)) & USB_CORE_DBG_LINK2_TXDET_DVAL_SET_MASK)

/*! @name CFG_REG4 - USB3 Configuration */
#define USB_CORE_CFG_REG4_RXDETECT_QUIET_TIMEOUT_MASK (0xFFU)
#define USB_CORE_CFG_REG4_RXDETECT_QUIET_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG4_RXDETECT_QUIET_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG4_RXDETECT_QUIET_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG4_RXDETECT_QUIET_TIMEOUT_MASK)
#define USB_CORE_CFG_REG4_RESERVED_MASK          (0x3FFFFF00U)
#define USB_CORE_CFG_REG4_RESERVED_SHIFT         (8U)
#define USB_CORE_CFG_REG4_RESERVED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG4_RESERVED_SHIFT)) & USB_CORE_CFG_REG4_RESERVED_MASK)
#define USB_CORE_CFG_REG4_RXDETECT_QUIET_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG4_RXDETECT_QUIET_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG4_RXDETECT_QUIET_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG4_RXDETECT_QUIET_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG4_RXDETECT_QUIET_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG5 - USB3 Configuration */
#define USB_CORE_CFG_REG5_U3_HDSK_FAIL_TIMEOUT_MASK (0x7FFU)
#define USB_CORE_CFG_REG5_U3_HDSK_FAIL_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG5_U3_HDSK_FAIL_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG5_U3_HDSK_FAIL_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG5_U3_HDSK_FAIL_TIMEOUT_MASK)
#define USB_CORE_CFG_REG5_RESERVED_MASK          (0x3FFFF800U)
#define USB_CORE_CFG_REG5_RESERVED_SHIFT         (11U)
#define USB_CORE_CFG_REG5_RESERVED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG5_RESERVED_SHIFT)) & USB_CORE_CFG_REG5_RESERVED_MASK)
#define USB_CORE_CFG_REG5_U3_HDSK_FAIL_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG5_U3_HDSK_FAIL_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG5_U3_HDSK_FAIL_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG5_U3_HDSK_FAIL_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG5_U3_HDSK_FAIL_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG6 - Configuration Register 6 */
#define USB_CORE_CFG_REG6_SSINACTIVE_QUIET_TIMEOUT_MASK (0xFFU)
#define USB_CORE_CFG_REG6_SSINACTIVE_QUIET_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG6_SSINACTIVE_QUIET_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG6_SSINACTIVE_QUIET_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG6_SSINACTIVE_QUIET_TIMEOUT_MASK)
#define USB_CORE_CFG_REG6_RESERVED_MASK          (0x3FFFFF00U)
#define USB_CORE_CFG_REG6_RESERVED_SHIFT         (8U)
#define USB_CORE_CFG_REG6_RESERVED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG6_RESERVED_SHIFT)) & USB_CORE_CFG_REG6_RESERVED_MASK)
#define USB_CORE_CFG_REG6_SSINACTIVE_QUIET_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG6_SSINACTIVE_QUIET_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG6_SSINACTIVE_QUIET_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG6_SSINACTIVE_QUIET_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG6_SSINACTIVE_QUIET_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG7 - USB3 Configuration */
#define USB_CORE_CFG_REG7_POLLING_LFPS_TIMEOUT_MASK (0x1FFFU)
#define USB_CORE_CFG_REG7_POLLING_LFPS_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG7_POLLING_LFPS_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG7_POLLING_LFPS_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG7_POLLING_LFPS_TIMEOUT_MASK)
#define USB_CORE_CFG_REG7_RESERVED_MASK          (0x3FFFE000U)
#define USB_CORE_CFG_REG7_RESERVED_SHIFT         (13U)
#define USB_CORE_CFG_REG7_RESERVED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG7_RESERVED_SHIFT)) & USB_CORE_CFG_REG7_RESERVED_MASK)
#define USB_CORE_CFG_REG7_POLLING_LFPS_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG7_POLLING_LFPS_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG7_POLLING_LFPS_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG7_POLLING_LFPS_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG7_POLLING_LFPS_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG8 - USB3 Configuration */
#define USB_CORE_CFG_REG8_POLLING_ACTIVE_TIMEOUT_MASK (0x3FFU)
#define USB_CORE_CFG_REG8_POLLING_ACTIVE_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG8_POLLING_ACTIVE_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG8_POLLING_ACTIVE_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG8_POLLING_ACTIVE_TIMEOUT_MASK)
#define USB_CORE_CFG_REG8_RESERVED_MASK          (0x3FFFFC00U)
#define USB_CORE_CFG_REG8_RESERVED_SHIFT         (10U)
#define USB_CORE_CFG_REG8_RESERVED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG8_RESERVED_SHIFT)) & USB_CORE_CFG_REG8_RESERVED_MASK)
#define USB_CORE_CFG_REG8_POLLING_ACTIVE_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG8_POLLING_ACTIVE_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG8_POLLING_ACTIVE_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG8_POLLING_ACTIVE_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG8_POLLING_ACTIVE_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG9 - USB3 Configuration */
#define USB_CORE_CFG_REG9_POLLING_IDLE_TIMEOUT_MASK (0x1FU)
#define USB_CORE_CFG_REG9_POLLING_IDLE_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG9_POLLING_IDLE_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG9_POLLING_IDLE_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG9_POLLING_IDLE_TIMEOUT_MASK)
#define USB_CORE_CFG_REG9_RESERVED_MASK          (0x3FFFFFE0U)
#define USB_CORE_CFG_REG9_RESERVED_SHIFT         (5U)
#define USB_CORE_CFG_REG9_RESERVED(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG9_RESERVED_SHIFT)) & USB_CORE_CFG_REG9_RESERVED_MASK)
#define USB_CORE_CFG_REG9_POLLING_IDLE_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG9_POLLING_IDLE_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG9_POLLING_IDLE_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG9_POLLING_IDLE_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG9_POLLING_IDLE_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG10 - USB3 Configuration */
#define USB_CORE_CFG_REG10_POLLING_CONF_TIMEOUT_MASK (0xFFU)
#define USB_CORE_CFG_REG10_POLLING_CONF_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG10_POLLING_CONF_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG10_POLLING_CONF_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG10_POLLING_CONF_TIMEOUT_MASK)
#define USB_CORE_CFG_REG10_RESERVED_MASK         (0x3FFFFF00U)
#define USB_CORE_CFG_REG10_RESERVED_SHIFT        (8U)
#define USB_CORE_CFG_REG10_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG10_RESERVED_SHIFT)) & USB_CORE_CFG_REG10_RESERVED_MASK)
#define USB_CORE_CFG_REG10_POLLING_CONF_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG10_POLLING_CONF_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG10_POLLING_CONF_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG10_POLLING_CONF_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG10_POLLING_CONF_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG11 - USB3 Configuration */
#define USB_CORE_CFG_REG11_RECOVERY_ACTIVE_TIMEOUT_MASK (0xFFU)
#define USB_CORE_CFG_REG11_RECOVERY_ACTIVE_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG11_RECOVERY_ACTIVE_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG11_RECOVERY_ACTIVE_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG11_RECOVERY_ACTIVE_TIMEOUT_MASK)
#define USB_CORE_CFG_REG11_RESERVED_MASK         (0x3FFFFF00U)
#define USB_CORE_CFG_REG11_RESERVED_SHIFT        (8U)
#define USB_CORE_CFG_REG11_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG11_RESERVED_SHIFT)) & USB_CORE_CFG_REG11_RESERVED_MASK)
#define USB_CORE_CFG_REG11_RECOVERY_ACTIVE_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG11_RECOVERY_ACTIVE_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG11_RECOVERY_ACTIVE_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG11_RECOVERY_ACTIVE_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG11_RECOVERY_ACTIVE_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG12 - USB3 Configuration */
#define USB_CORE_CFG_REG12_RECOVERY_CONF_TIMEOUT_MASK (0xFFU)
#define USB_CORE_CFG_REG12_RECOVERY_CONF_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG12_RECOVERY_CONF_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG12_RECOVERY_CONF_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG12_RECOVERY_CONF_TIMEOUT_MASK)
#define USB_CORE_CFG_REG12_RESERVED_MASK         (0x3FFFFF00U)
#define USB_CORE_CFG_REG12_RESERVED_SHIFT        (8U)
#define USB_CORE_CFG_REG12_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG12_RESERVED_SHIFT)) & USB_CORE_CFG_REG12_RESERVED_MASK)
#define USB_CORE_CFG_REG12_RECOVERY_CONF_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG12_RECOVERY_CONF_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG12_RECOVERY_CONF_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG12_RECOVERY_CONF_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG12_RECOVERY_CONF_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG13 - USB3 Configuration */
#define USB_CORE_CFG_REG13_RECOVERY_IDLE_TIMEOUT_MASK (0x1FU)
#define USB_CORE_CFG_REG13_RECOVERY_IDLE_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG13_RECOVERY_IDLE_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG13_RECOVERY_IDLE_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG13_RECOVERY_IDLE_TIMEOUT_MASK)
#define USB_CORE_CFG_REG13_RESERVED_MASK         (0xFFFFFE0U)
#define USB_CORE_CFG_REG13_RESERVED_SHIFT        (5U)
#define USB_CORE_CFG_REG13_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG13_RESERVED_SHIFT)) & USB_CORE_CFG_REG13_RESERVED_MASK)
#define USB_CORE_CFG_REG13_RECOVERY_IDLE_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG13_RECOVERY_IDLE_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG13_RECOVERY_IDLE_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG13_RECOVERY_IDLE_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG13_RECOVERY_IDLE_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG14 - USB3 Configuration */
#define USB_CORE_CFG_REG14_HOTRESET_ACTIVE_TIMEOUT_MASK (0xFFU)
#define USB_CORE_CFG_REG14_HOTRESET_ACTIVE_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG14_HOTRESET_ACTIVE_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG14_HOTRESET_ACTIVE_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG14_HOTRESET_ACTIVE_TIMEOUT_MASK)
#define USB_CORE_CFG_REG14_RESERVED_MASK         (0x3FFFFF00U)
#define USB_CORE_CFG_REG14_RESERVED_SHIFT        (8U)
#define USB_CORE_CFG_REG14_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG14_RESERVED_SHIFT)) & USB_CORE_CFG_REG14_RESERVED_MASK)
#define USB_CORE_CFG_REG14_HOTRESET_ACTIVE_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG14_HOTRESET_ACTIVE_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG14_HOTRESET_ACTIVE_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG14_HOTRESET_ACTIVE_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG14_HOTRESET_ACTIVE_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG15 - USB3 Configuration */
#define USB_CORE_CFG_REG15_HOTRESET_EXIT_TIMEOUT_MASK (0x1FU)
#define USB_CORE_CFG_REG15_HOTRESET_EXIT_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG15_HOTRESET_EXIT_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG15_HOTRESET_EXIT_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG15_HOTRESET_EXIT_TIMEOUT_MASK)
#define USB_CORE_CFG_REG15_RESERVED_MASK         (0x3FFFFFE0U)
#define USB_CORE_CFG_REG15_RESERVED_SHIFT        (5U)
#define USB_CORE_CFG_REG15_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG15_RESERVED_SHIFT)) & USB_CORE_CFG_REG15_RESERVED_MASK)
#define USB_CORE_CFG_REG15_HOTRESET_EXIT_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG15_HOTRESET_EXIT_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG15_HOTRESET_EXIT_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG15_HOTRESET_EXIT_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG15_HOTRESET_EXIT_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG16 - USB3 Configuration */
#define USB_CORE_CFG_REG16_LFPS_PING_REPEAT_MASK (0xFFFU)
#define USB_CORE_CFG_REG16_LFPS_PING_REPEAT_SHIFT (0U)
#define USB_CORE_CFG_REG16_LFPS_PING_REPEAT(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG16_LFPS_PING_REPEAT_SHIFT)) & USB_CORE_CFG_REG16_LFPS_PING_REPEAT_MASK)
#define USB_CORE_CFG_REG16_RESERVED_MASK         (0x3FFFF000U)
#define USB_CORE_CFG_REG16_RESERVED_SHIFT        (12U)
#define USB_CORE_CFG_REG16_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG16_RESERVED_SHIFT)) & USB_CORE_CFG_REG16_RESERVED_MASK)
#define USB_CORE_CFG_REG16_LFPS_PING_REPEAT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG16_LFPS_PING_REPEAT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG16_LFPS_PING_REPEAT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG16_LFPS_PING_REPEAT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG16_LFPS_PING_REPEAT_PRESCALE_MASK)

/*! @name CFG_REG17 - USB3 Configuration */
#define USB_CORE_CFG_REG17_PENDING_HP_TIMEOUT_MASK (0x3FFU)
#define USB_CORE_CFG_REG17_PENDING_HP_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG17_PENDING_HP_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG17_PENDING_HP_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG17_PENDING_HP_TIMEOUT_MASK)
#define USB_CORE_CFG_REG17_RESERVED_MASK         (0x3FFFFC00U)
#define USB_CORE_CFG_REG17_RESERVED_SHIFT        (10U)
#define USB_CORE_CFG_REG17_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG17_RESERVED_SHIFT)) & USB_CORE_CFG_REG17_RESERVED_MASK)
#define USB_CORE_CFG_REG17_PENDING_HP_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG17_PENDING_HP_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG17_PENDING_HP_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG17_PENDING_HP_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG17_PENDING_HP_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG18 - USB3 Configuration */
#define USB_CORE_CFG_REG18_CREDIT_HP_TIMEOUT_MASK (0x7FU)
#define USB_CORE_CFG_REG18_CREDIT_HP_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG18_CREDIT_HP_TIMEOUT(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG18_CREDIT_HP_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG18_CREDIT_HP_TIMEOUT_MASK)
#define USB_CORE_CFG_REG18_RESERVED_MASK         (0x3FFFFF80U)
#define USB_CORE_CFG_REG18_RESERVED_SHIFT        (7U)
#define USB_CORE_CFG_REG18_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG18_RESERVED_SHIFT)) & USB_CORE_CFG_REG18_RESERVED_MASK)
#define USB_CORE_CFG_REG18_CREDIT_HP_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG18_CREDIT_HP_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG18_CREDIT_HP_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG18_CREDIT_HP_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG18_CREDIT_HP_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG19 - USB3 Configuration */
#define USB_CORE_CFG_REG19_LUP_TIMEOUT_MASK      (0x3FFU)
#define USB_CORE_CFG_REG19_LUP_TIMEOUT_SHIFT     (0U)
#define USB_CORE_CFG_REG19_LUP_TIMEOUT(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG19_LUP_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG19_LUP_TIMEOUT_MASK)
#define USB_CORE_CFG_REG19_RESERVED_MASK         (0x3FFFFC00U)
#define USB_CORE_CFG_REG19_RESERVED_SHIFT        (10U)
#define USB_CORE_CFG_REG19_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG19_RESERVED_SHIFT)) & USB_CORE_CFG_REG19_RESERVED_MASK)
#define USB_CORE_CFG_REG19_LUP_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG19_LUP_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG19_LUP_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG19_LUP_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG19_LUP_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG20 - USB3 Configuration */
#define USB_CORE_CFG_REG20_LDN_TIMEOUT_MASK      (0xFFU)
#define USB_CORE_CFG_REG20_LDN_TIMEOUT_SHIFT     (0U)
#define USB_CORE_CFG_REG20_LDN_TIMEOUT(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG20_LDN_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG20_LDN_TIMEOUT_MASK)
#define USB_CORE_CFG_REG20_RESERVED_MASK         (0x3FFFFF00U)
#define USB_CORE_CFG_REG20_RESERVED_SHIFT        (8U)
#define USB_CORE_CFG_REG20_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG20_RESERVED_SHIFT)) & USB_CORE_CFG_REG20_RESERVED_MASK)
#define USB_CORE_CFG_REG20_LDN_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG20_LDN_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG20_LDN_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG20_LDN_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG20_LDN_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG21 - USB3 Configuration */
#define USB_CORE_CFG_REG21_PM_LC_TIMEOUT_MASK    (0x3FFU)
#define USB_CORE_CFG_REG21_PM_LC_TIMEOUT_SHIFT   (0U)
#define USB_CORE_CFG_REG21_PM_LC_TIMEOUT(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG21_PM_LC_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG21_PM_LC_TIMEOUT_MASK)
#define USB_CORE_CFG_REG21_RESERVED_MASK         (0x3FFFFC00U)
#define USB_CORE_CFG_REG21_RESERVED_SHIFT        (10U)
#define USB_CORE_CFG_REG21_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG21_RESERVED_SHIFT)) & USB_CORE_CFG_REG21_RESERVED_MASK)
#define USB_CORE_CFG_REG21_PM_LC_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG21_PM_LC_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG21_PM_LC_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG21_PM_LC_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG21_PM_LC_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG22 - USB3 Configuration */
#define USB_CORE_CFG_REG22_PM_ENTRY_TIMEOUT_MASK (0x7FFU)
#define USB_CORE_CFG_REG22_PM_ENTRY_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG22_PM_ENTRY_TIMEOUT(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG22_PM_ENTRY_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG22_PM_ENTRY_TIMEOUT_MASK)
#define USB_CORE_CFG_REG22_RESERVED_MASK         (0x3FFFF800U)
#define USB_CORE_CFG_REG22_RESERVED_SHIFT        (11U)
#define USB_CORE_CFG_REG22_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG22_RESERVED_SHIFT)) & USB_CORE_CFG_REG22_RESERVED_MASK)
#define USB_CORE_CFG_REG22_PM_ENTRY_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG22_PM_ENTRY_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG22_PM_ENTRY_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG22_PM_ENTRY_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG22_PM_ENTRY_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG23 - USB3 Configuration */
#define USB_CORE_CFG_REG23_UX_EXIT_TIMEOUT_MASK  (0x7FU)
#define USB_CORE_CFG_REG23_UX_EXIT_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG23_UX_EXIT_TIMEOUT(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG23_UX_EXIT_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG23_UX_EXIT_TIMEOUT_MASK)
#define USB_CORE_CFG_REG23_RESERVED_MASK         (0x3FFFFF80U)
#define USB_CORE_CFG_REG23_RESERVED_SHIFT        (7U)
#define USB_CORE_CFG_REG23_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG23_RESERVED_SHIFT)) & USB_CORE_CFG_REG23_RESERVED_MASK)
#define USB_CORE_CFG_REG23_UX_EXIT_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG23_UX_EXIT_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG23_UX_EXIT_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG23_UX_EXIT_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG23_UX_EXIT_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG24 - USB3 Configuration */
#define USB_CORE_CFG_REG24_LFPS_DET_RESET_MIN_MASK (0x7FFFFFU)
#define USB_CORE_CFG_REG24_LFPS_DET_RESET_MIN_SHIFT (0U)
#define USB_CORE_CFG_REG24_LFPS_DET_RESET_MIN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG24_LFPS_DET_RESET_MIN_SHIFT)) & USB_CORE_CFG_REG24_LFPS_DET_RESET_MIN_MASK)
#define USB_CORE_CFG_REG24_RESERVED_MASK         (0xFF800000U)
#define USB_CORE_CFG_REG24_RESERVED_SHIFT        (23U)
#define USB_CORE_CFG_REG24_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG24_RESERVED_SHIFT)) & USB_CORE_CFG_REG24_RESERVED_MASK)

/*! @name CFG_REG25 - USB3 Configuration */
#define USB_CORE_CFG_REG25_LFPS_DET_RESET_MAX_MASK (0xFFFFFFU)
#define USB_CORE_CFG_REG25_LFPS_DET_RESET_MAX_SHIFT (0U)
#define USB_CORE_CFG_REG25_LFPS_DET_RESET_MAX(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG25_LFPS_DET_RESET_MAX_SHIFT)) & USB_CORE_CFG_REG25_LFPS_DET_RESET_MAX_MASK)
#define USB_CORE_CFG_REG25_RESERVED_MASK         (0xFF000000U)
#define USB_CORE_CFG_REG25_RESERVED_SHIFT        (24U)
#define USB_CORE_CFG_REG25_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG25_RESERVED_SHIFT)) & USB_CORE_CFG_REG25_RESERVED_MASK)

/*! @name CFG_REG26 - USB3 Configuration */
#define USB_CORE_CFG_REG26_LFPS_DET_POLLING_MIN_MASK (0x7FU)
#define USB_CORE_CFG_REG26_LFPS_DET_POLLING_MIN_SHIFT (0U)
#define USB_CORE_CFG_REG26_LFPS_DET_POLLING_MIN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG26_LFPS_DET_POLLING_MIN_SHIFT)) & USB_CORE_CFG_REG26_LFPS_DET_POLLING_MIN_MASK)
#define USB_CORE_CFG_REG26_RESERVED_MASK         (0xFFFFFF80U)
#define USB_CORE_CFG_REG26_RESERVED_SHIFT        (7U)
#define USB_CORE_CFG_REG26_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG26_RESERVED_SHIFT)) & USB_CORE_CFG_REG26_RESERVED_MASK)

/*! @name CFG_REG27 - USB3 Configuration */
#define USB_CORE_CFG_REG27_LFPS_DET_POLLING_MAX_MASK (0xFFU)
#define USB_CORE_CFG_REG27_LFPS_DET_POLLING_MAX_SHIFT (0U)
#define USB_CORE_CFG_REG27_LFPS_DET_POLLING_MAX(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG27_LFPS_DET_POLLING_MAX_SHIFT)) & USB_CORE_CFG_REG27_LFPS_DET_POLLING_MAX_MASK)
#define USB_CORE_CFG_REG27_RESERVED_MASK         (0xFFFFFF00U)
#define USB_CORE_CFG_REG27_RESERVED_SHIFT        (8U)
#define USB_CORE_CFG_REG27_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG27_RESERVED_SHIFT)) & USB_CORE_CFG_REG27_RESERVED_MASK)

/*! @name CFG_REG28 - USB3 Configuration */
#define USB_CORE_CFG_REG28_LFPS_DET_PING_MIN_MASK (0x7U)
#define USB_CORE_CFG_REG28_LFPS_DET_PING_MIN_SHIFT (0U)
#define USB_CORE_CFG_REG28_LFPS_DET_PING_MIN(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG28_LFPS_DET_PING_MIN_SHIFT)) & USB_CORE_CFG_REG28_LFPS_DET_PING_MIN_MASK)
#define USB_CORE_CFG_REG28_RESERVED_MASK         (0xFFFFFFF8U)
#define USB_CORE_CFG_REG28_RESERVED_SHIFT        (3U)
#define USB_CORE_CFG_REG28_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG28_RESERVED_SHIFT)) & USB_CORE_CFG_REG28_RESERVED_MASK)

/*! @name CFG_REG29 - USB3 Configuration */
#define USB_CORE_CFG_REG29_LFPS_DET_PING_MAX_MASK (0x1FU)
#define USB_CORE_CFG_REG29_LFPS_DET_PING_MAX_SHIFT (0U)
#define USB_CORE_CFG_REG29_LFPS_DET_PING_MAX(x)  (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG29_LFPS_DET_PING_MAX_SHIFT)) & USB_CORE_CFG_REG29_LFPS_DET_PING_MAX_MASK)
#define USB_CORE_CFG_REG29_RESERVED_MASK         (0xFFFFFFE0U)
#define USB_CORE_CFG_REG29_RESERVED_SHIFT        (5U)
#define USB_CORE_CFG_REG29_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG29_RESERVED_SHIFT)) & USB_CORE_CFG_REG29_RESERVED_MASK)

/*! @name CFG_REG30 - USB3 Configuration */
#define USB_CORE_CFG_REG30_LFPS_DET_U1EXIT_MIN_MASK (0x3FU)
#define USB_CORE_CFG_REG30_LFPS_DET_U1EXIT_MIN_SHIFT (0U)
#define USB_CORE_CFG_REG30_LFPS_DET_U1EXIT_MIN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG30_LFPS_DET_U1EXIT_MIN_SHIFT)) & USB_CORE_CFG_REG30_LFPS_DET_U1EXIT_MIN_MASK)
#define USB_CORE_CFG_REG30_RESERVED_MASK         (0xFFFFFFC0U)
#define USB_CORE_CFG_REG30_RESERVED_SHIFT        (6U)
#define USB_CORE_CFG_REG30_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG30_RESERVED_SHIFT)) & USB_CORE_CFG_REG30_RESERVED_MASK)

/*! @name CFG_REG31 - USB3 Configuration */
#define USB_CORE_CFG_REG31_LFPS_DET_U1EXIT_MAX_MASK (0x7FU)
#define USB_CORE_CFG_REG31_LFPS_DET_U1EXIT_MAX_SHIFT (0U)
#define USB_CORE_CFG_REG31_LFPS_DET_U1EXIT_MAX(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG31_LFPS_DET_U1EXIT_MAX_SHIFT)) & USB_CORE_CFG_REG31_LFPS_DET_U1EXIT_MAX_MASK)
#define USB_CORE_CFG_REG31_RESERVED_MASK         (0xFFFFFF80U)
#define USB_CORE_CFG_REG31_RESERVED_SHIFT        (7U)
#define USB_CORE_CFG_REG31_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG31_RESERVED_SHIFT)) & USB_CORE_CFG_REG31_RESERVED_MASK)

/*! @name CFG_REG32 - USB3 Configuration */
#define USB_CORE_CFG_REG32_LFPS_DET_U2EXIT_MIN_MASK (0x3FU)
#define USB_CORE_CFG_REG32_LFPS_DET_U2EXIT_MIN_SHIFT (0U)
#define USB_CORE_CFG_REG32_LFPS_DET_U2EXIT_MIN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG32_LFPS_DET_U2EXIT_MIN_SHIFT)) & USB_CORE_CFG_REG32_LFPS_DET_U2EXIT_MIN_MASK)
#define USB_CORE_CFG_REG32_RESERVED_MASK         (0xFFFFFFC0U)
#define USB_CORE_CFG_REG32_RESERVED_SHIFT        (6U)
#define USB_CORE_CFG_REG32_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG32_RESERVED_SHIFT)) & USB_CORE_CFG_REG32_RESERVED_MASK)

/*! @name CFG_REG33 - USB3 Configuration */
#define USB_CORE_CFG_REG33_LFPS_DET_U2EXIT_MAX_MASK (0x3FFFFU)
#define USB_CORE_CFG_REG33_LFPS_DET_U2EXIT_MAX_SHIFT (0U)
#define USB_CORE_CFG_REG33_LFPS_DET_U2EXIT_MAX(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG33_LFPS_DET_U2EXIT_MAX_SHIFT)) & USB_CORE_CFG_REG33_LFPS_DET_U2EXIT_MAX_MASK)
#define USB_CORE_CFG_REG33_RESERVED_MASK         (0xFFFC0000U)
#define USB_CORE_CFG_REG33_RESERVED_SHIFT        (18U)
#define USB_CORE_CFG_REG33_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG33_RESERVED_SHIFT)) & USB_CORE_CFG_REG33_RESERVED_MASK)

/*! @name CFG_REG34 - USB3 Configuration */
#define USB_CORE_CFG_REG34_LFPS_DET_U3EXIT_MIN_MASK (0x3FU)
#define USB_CORE_CFG_REG34_LFPS_DET_U3EXIT_MIN_SHIFT (0U)
#define USB_CORE_CFG_REG34_LFPS_DET_U3EXIT_MIN(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG34_LFPS_DET_U3EXIT_MIN_SHIFT)) & USB_CORE_CFG_REG34_LFPS_DET_U3EXIT_MIN_MASK)
#define USB_CORE_CFG_REG34_RESERVED_MASK         (0xFFFFFFC0U)
#define USB_CORE_CFG_REG34_RESERVED_SHIFT        (6U)
#define USB_CORE_CFG_REG34_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG34_RESERVED_SHIFT)) & USB_CORE_CFG_REG34_RESERVED_MASK)

/*! @name CFG_REG35 - USB3 Configuration */
#define USB_CORE_CFG_REG35_LFPS_DET_U3EXIT_MAX_MASK (0x1FFFFFU)
#define USB_CORE_CFG_REG35_LFPS_DET_U3EXIT_MAX_SHIFT (0U)
#define USB_CORE_CFG_REG35_LFPS_DET_U3EXIT_MAX(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG35_LFPS_DET_U3EXIT_MAX_SHIFT)) & USB_CORE_CFG_REG35_LFPS_DET_U3EXIT_MAX_MASK)
#define USB_CORE_CFG_REG35_RESERVED_MASK         (0xFFE00000U)
#define USB_CORE_CFG_REG35_RESERVED_SHIFT        (21U)
#define USB_CORE_CFG_REG35_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG35_RESERVED_SHIFT)) & USB_CORE_CFG_REG35_RESERVED_MASK)

/*! @name CFG_REG36 - USB3 Configuration */
#define USB_CORE_CFG_REG36_LFPS_GEN_PING_MASK    (0x1FU)
#define USB_CORE_CFG_REG36_LFPS_GEN_PING_SHIFT   (0U)
#define USB_CORE_CFG_REG36_LFPS_GEN_PING(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG36_LFPS_GEN_PING_SHIFT)) & USB_CORE_CFG_REG36_LFPS_GEN_PING_MASK)
#define USB_CORE_CFG_REG36_RESERVED_MASK         (0xFFFFFFE0U)
#define USB_CORE_CFG_REG36_RESERVED_SHIFT        (5U)
#define USB_CORE_CFG_REG36_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG36_RESERVED_SHIFT)) & USB_CORE_CFG_REG36_RESERVED_MASK)

/*! @name CFG_REG37 - USB3 Configuration */
#define USB_CORE_CFG_REG37_LFPS_GEN_POLLING_MASK (0xFFU)
#define USB_CORE_CFG_REG37_LFPS_GEN_POLLING_SHIFT (0U)
#define USB_CORE_CFG_REG37_LFPS_GEN_POLLING(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG37_LFPS_GEN_POLLING_SHIFT)) & USB_CORE_CFG_REG37_LFPS_GEN_POLLING_MASK)
#define USB_CORE_CFG_REG37_RESERVED_MASK         (0xFFFFFF00U)
#define USB_CORE_CFG_REG37_RESERVED_SHIFT        (8U)
#define USB_CORE_CFG_REG37_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG37_RESERVED_SHIFT)) & USB_CORE_CFG_REG37_RESERVED_MASK)

/*! @name CFG_REG38 - USB3 Configuration */
#define USB_CORE_CFG_REG38_LFPS_GEN_U1EXIT_MASK  (0x3FFFFU)
#define USB_CORE_CFG_REG38_LFPS_GEN_U1EXIT_SHIFT (0U)
#define USB_CORE_CFG_REG38_LFPS_GEN_U1EXIT(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG38_LFPS_GEN_U1EXIT_SHIFT)) & USB_CORE_CFG_REG38_LFPS_GEN_U1EXIT_MASK)
#define USB_CORE_CFG_REG38_RESERVED_MASK         (0xFFFC0000U)
#define USB_CORE_CFG_REG38_RESERVED_SHIFT        (18U)
#define USB_CORE_CFG_REG38_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG38_RESERVED_SHIFT)) & USB_CORE_CFG_REG38_RESERVED_MASK)

/*! @name CFG_REG39 - USB3 Configuration */
#define USB_CORE_CFG_REG39_LFPS_GEN_U3EXIT_MASK  (0x1FFFFFU)
#define USB_CORE_CFG_REG39_LFPS_GEN_U3EXIT_SHIFT (0U)
#define USB_CORE_CFG_REG39_LFPS_GEN_U3EXIT(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG39_LFPS_GEN_U3EXIT_SHIFT)) & USB_CORE_CFG_REG39_LFPS_GEN_U3EXIT_MASK)
#define USB_CORE_CFG_REG39_RESERVED_MASK         (0xFFE00000U)
#define USB_CORE_CFG_REG39_RESERVED_SHIFT        (21U)
#define USB_CORE_CFG_REG39_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG39_RESERVED_SHIFT)) & USB_CORE_CFG_REG39_RESERVED_MASK)

/*! @name CFG_REG40 - USB3 Configuration */
#define USB_CORE_CFG_REG40_LFPS_MIN_GEN_U1EXIT_MASK (0x7FU)
#define USB_CORE_CFG_REG40_LFPS_MIN_GEN_U1EXIT_SHIFT (0U)
#define USB_CORE_CFG_REG40_LFPS_MIN_GEN_U1EXIT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG40_LFPS_MIN_GEN_U1EXIT_SHIFT)) & USB_CORE_CFG_REG40_LFPS_MIN_GEN_U1EXIT_MASK)
#define USB_CORE_CFG_REG40_RESERVED_MASK         (0xFFFFFF80U)
#define USB_CORE_CFG_REG40_RESERVED_SHIFT        (7U)
#define USB_CORE_CFG_REG40_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG40_RESERVED_SHIFT)) & USB_CORE_CFG_REG40_RESERVED_MASK)

/*! @name CFG_REG41 - USB3 Configuration */
#define USB_CORE_CFG_REG41_LFPS_MIN_GEN_U2EXIT_MASK (0x7FFFU)
#define USB_CORE_CFG_REG41_LFPS_MIN_GEN_U2EXIT_SHIFT (0U)
#define USB_CORE_CFG_REG41_LFPS_MIN_GEN_U2EXIT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG41_LFPS_MIN_GEN_U2EXIT_SHIFT)) & USB_CORE_CFG_REG41_LFPS_MIN_GEN_U2EXIT_MASK)
#define USB_CORE_CFG_REG41_RESERVED_MASK         (0xFFFF8000U)
#define USB_CORE_CFG_REG41_RESERVED_SHIFT        (15U)
#define USB_CORE_CFG_REG41_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG41_RESERVED_SHIFT)) & USB_CORE_CFG_REG41_RESERVED_MASK)

/*! @name CFG_REG42 - USB3 Configuration */
#define USB_CORE_CFG_REG42_LFPS_POLLING_REPEAT_MASK (0x7FFU)
#define USB_CORE_CFG_REG42_LFPS_POLLING_REPEAT_SHIFT (0U)
#define USB_CORE_CFG_REG42_LFPS_POLLING_REPEAT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG42_LFPS_POLLING_REPEAT_SHIFT)) & USB_CORE_CFG_REG42_LFPS_POLLING_REPEAT_MASK)
#define USB_CORE_CFG_REG42_RESERVED_MASK         (0xFFFFF800U)
#define USB_CORE_CFG_REG42_RESERVED_SHIFT        (11U)
#define USB_CORE_CFG_REG42_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG42_RESERVED_SHIFT)) & USB_CORE_CFG_REG42_RESERVED_MASK)

/*! @name CFG_REG43 - USB3 Configuration */
#define USB_CORE_CFG_REG43_LFPS_POLLING_MAX_TREPEAT_MASK (0x7FFU)
#define USB_CORE_CFG_REG43_LFPS_POLLING_MAX_TREPEAT_SHIFT (0U)
#define USB_CORE_CFG_REG43_LFPS_POLLING_MAX_TREPEAT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG43_LFPS_POLLING_MAX_TREPEAT_SHIFT)) & USB_CORE_CFG_REG43_LFPS_POLLING_MAX_TREPEAT_MASK)
#define USB_CORE_CFG_REG43_RESERVED_MASK         (0xFFFFF800U)
#define USB_CORE_CFG_REG43_RESERVED_SHIFT        (11U)
#define USB_CORE_CFG_REG43_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG43_RESERVED_SHIFT)) & USB_CORE_CFG_REG43_RESERVED_MASK)

/*! @name CFG_REG44 - USB3 Configuration */
#define USB_CORE_CFG_REG44_LFPS_POLLING_MIN_TREPEAT_MASK (0x7FFU)
#define USB_CORE_CFG_REG44_LFPS_POLLING_MIN_TREPEAT_SHIFT (0U)
#define USB_CORE_CFG_REG44_LFPS_POLLING_MIN_TREPEAT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG44_LFPS_POLLING_MIN_TREPEAT_SHIFT)) & USB_CORE_CFG_REG44_LFPS_POLLING_MIN_TREPEAT_MASK)
#define USB_CORE_CFG_REG44_RESERVED_MASK         (0xFFFFF800U)
#define USB_CORE_CFG_REG44_RESERVED_SHIFT        (11U)
#define USB_CORE_CFG_REG44_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG44_RESERVED_SHIFT)) & USB_CORE_CFG_REG44_RESERVED_MASK)

/*! @name CFG_REG45 - USB3 Configuration */
#define USB_CORE_CFG_REG45_ITP_WAKEUP_TIMEOUT_MASK (0x7FU)
#define USB_CORE_CFG_REG45_ITP_WAKEUP_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG45_ITP_WAKEUP_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG45_ITP_WAKEUP_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG45_ITP_WAKEUP_TIMEOUT_MASK)
#define USB_CORE_CFG_REG45_RESERVED_MASK         (0x3FFFFF80U)
#define USB_CORE_CFG_REG45_RESERVED_SHIFT        (7U)
#define USB_CORE_CFG_REG45_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG45_RESERVED_SHIFT)) & USB_CORE_CFG_REG45_RESERVED_MASK)
#define USB_CORE_CFG_REG45_ITP_WAKEUP_TIMEOUT_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG45_ITP_WAKEUP_TIMEOUT_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG45_ITP_WAKEUP_TIMEOUT_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG45_ITP_WAKEUP_TIMEOUT_PRESCALE_SHIFT)) & USB_CORE_CFG_REG45_ITP_WAKEUP_TIMEOUT_PRESCALE_MASK)

/*! @name CFG_REG46 - USB3 Configuration */
#define USB_CORE_CFG_REG46_TSEQ_QUANTITY_MASK    (0xFFFFU)
#define USB_CORE_CFG_REG46_TSEQ_QUANTITY_SHIFT   (0U)
#define USB_CORE_CFG_REG46_TSEQ_QUANTITY(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG46_TSEQ_QUANTITY_SHIFT)) & USB_CORE_CFG_REG46_TSEQ_QUANTITY_MASK)
#define USB_CORE_CFG_REG46_RESERVED_MASK         (0xFFFF0000U)
#define USB_CORE_CFG_REG46_RESERVED_SHIFT        (16U)
#define USB_CORE_CFG_REG46_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG46_RESERVED_SHIFT)) & USB_CORE_CFG_REG46_RESERVED_MASK)

/*! @name CFG_REG47 - USB3 Configuration */
#define USB_CORE_CFG_REG47_ERDY_TIMEOUT_CNT_MASK (0xFFFFFU)
#define USB_CORE_CFG_REG47_ERDY_TIMEOUT_CNT_SHIFT (0U)
#define USB_CORE_CFG_REG47_ERDY_TIMEOUT_CNT(x)   (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG47_ERDY_TIMEOUT_CNT_SHIFT)) & USB_CORE_CFG_REG47_ERDY_TIMEOUT_CNT_MASK)
#define USB_CORE_CFG_REG47_RESERVED_MASK         (0xFFF00000U)
#define USB_CORE_CFG_REG47_RESERVED_SHIFT        (20U)
#define USB_CORE_CFG_REG47_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG47_RESERVED_SHIFT)) & USB_CORE_CFG_REG47_RESERVED_MASK)

/*! @name CFG_REG48 - USB2 Configuration */
#define USB_CORE_CFG_REG48_TWTRSTFS_J_CNT_MASK   (0x3FFFFU)
#define USB_CORE_CFG_REG48_TWTRSTFS_J_CNT_SHIFT  (0U)
#define USB_CORE_CFG_REG48_TWTRSTFS_J_CNT(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG48_TWTRSTFS_J_CNT_SHIFT)) & USB_CORE_CFG_REG48_TWTRSTFS_J_CNT_MASK)
#define USB_CORE_CFG_REG48_RESERVED_MASK         (0xFFFC0000U)
#define USB_CORE_CFG_REG48_RESERVED_SHIFT        (18U)
#define USB_CORE_CFG_REG48_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG48_RESERVED_SHIFT)) & USB_CORE_CFG_REG48_RESERVED_MASK)

/*! @name CFG_REG49 - USB2 Configuration */
#define USB_CORE_CFG_REG49_TUCH_CNT_MASK         (0xFFFFU)
#define USB_CORE_CFG_REG49_TUCH_CNT_SHIFT        (0U)
#define USB_CORE_CFG_REG49_TUCH_CNT(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG49_TUCH_CNT_SHIFT)) & USB_CORE_CFG_REG49_TUCH_CNT_MASK)
#define USB_CORE_CFG_REG49_RESERVED_MASK         (0xFFFF0000U)
#define USB_CORE_CFG_REG49_RESERVED_SHIFT        (16U)
#define USB_CORE_CFG_REG49_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG49_RESERVED_SHIFT)) & USB_CORE_CFG_REG49_RESERVED_MASK)

/*! @name CFG_REG50 - USB2 Configuration */
#define USB_CORE_CFG_REG50_TWAITCHK_CNT_MASK     (0xFFFU)
#define USB_CORE_CFG_REG50_TWAITCHK_CNT_SHIFT    (0U)
#define USB_CORE_CFG_REG50_TWAITCHK_CNT(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG50_TWAITCHK_CNT_SHIFT)) & USB_CORE_CFG_REG50_TWAITCHK_CNT_MASK)
#define USB_CORE_CFG_REG50_RESERVED_MASK         (0xFFFFF000U)
#define USB_CORE_CFG_REG50_RESERVED_SHIFT        (12U)
#define USB_CORE_CFG_REG50_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG50_RESERVED_SHIFT)) & USB_CORE_CFG_REG50_RESERVED_MASK)

/*! @name CFG_REG51 - USB2 Configuration */
#define USB_CORE_CFG_REG51_TWTFS_CNT_MASK        (0x1FFFFU)
#define USB_CORE_CFG_REG51_TWTFS_CNT_SHIFT       (0U)
#define USB_CORE_CFG_REG51_TWTFS_CNT(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG51_TWTFS_CNT_SHIFT)) & USB_CORE_CFG_REG51_TWTFS_CNT_MASK)
#define USB_CORE_CFG_REG51_RESERVED_MASK         (0xFFFE0000U)
#define USB_CORE_CFG_REG51_RESERVED_SHIFT        (17U)
#define USB_CORE_CFG_REG51_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG51_RESERVED_SHIFT)) & USB_CORE_CFG_REG51_RESERVED_MASK)

/*! @name CFG_REG52 - USB2 Configuration */
#define USB_CORE_CFG_REG52_TWTREV_CNT_MASK       (0x1FFFFU)
#define USB_CORE_CFG_REG52_TWTREV_CNT_SHIFT      (0U)
#define USB_CORE_CFG_REG52_TWTREV_CNT(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG52_TWTREV_CNT_SHIFT)) & USB_CORE_CFG_REG52_TWTREV_CNT_MASK)
#define USB_CORE_CFG_REG52_RESERVED_MASK         (0xFFFE0000U)
#define USB_CORE_CFG_REG52_RESERVED_SHIFT        (17U)
#define USB_CORE_CFG_REG52_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG52_RESERVED_SHIFT)) & USB_CORE_CFG_REG52_RESERVED_MASK)

/*! @name CFG_REG53 - USB2 Configuration */
#define USB_CORE_CFG_REG53_TWTRSTHS_CNT_MASK     (0x7FFFU)
#define USB_CORE_CFG_REG53_TWTRSTHS_CNT_SHIFT    (0U)
#define USB_CORE_CFG_REG53_TWTRSTHS_CNT(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG53_TWTRSTHS_CNT_SHIFT)) & USB_CORE_CFG_REG53_TWTRSTHS_CNT_MASK)
#define USB_CORE_CFG_REG53_RESERVED_MASK         (0xFFFF8000U)
#define USB_CORE_CFG_REG53_RESERVED_SHIFT        (15U)
#define USB_CORE_CFG_REG53_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG53_RESERVED_SHIFT)) & USB_CORE_CFG_REG53_RESERVED_MASK)

/*! @name CFG_REG54 - USB2 Configuration */
#define USB_CORE_CFG_REG54_TWTRSM_CNT_MASK       (0x3FFFFU)
#define USB_CORE_CFG_REG54_TWTRSM_CNT_SHIFT      (0U)
#define USB_CORE_CFG_REG54_TWTRSM_CNT(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG54_TWTRSM_CNT_SHIFT)) & USB_CORE_CFG_REG54_TWTRSM_CNT_MASK)
#define USB_CORE_CFG_REG54_RESERVED_MASK         (0xFFFC0000U)
#define USB_CORE_CFG_REG54_RESERVED_SHIFT        (18U)
#define USB_CORE_CFG_REG54_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG54_RESERVED_SHIFT)) & USB_CORE_CFG_REG54_RESERVED_MASK)

/*! @name CFG_REG55 - USB2 Configuration */
#define USB_CORE_CFG_REG55_TDRSMUP_CNT_MASK      (0xFFFFU)
#define USB_CORE_CFG_REG55_TDRSMUP_CNT_SHIFT     (0U)
#define USB_CORE_CFG_REG55_TDRSMUP_CNT(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG55_TDRSMUP_CNT_SHIFT)) & USB_CORE_CFG_REG55_TDRSMUP_CNT_MASK)
#define USB_CORE_CFG_REG55_RESERVED_MASK         (0xFFFF0000U)
#define USB_CORE_CFG_REG55_RESERVED_SHIFT        (16U)
#define USB_CORE_CFG_REG55_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG55_RESERVED_SHIFT)) & USB_CORE_CFG_REG55_RESERVED_MASK)

/*! @name CFG_REG56 - USB2 Configuration */
#define USB_CORE_CFG_REG56_TOUTHS_CNT_MASK       (0x3FU)
#define USB_CORE_CFG_REG56_TOUTHS_CNT_SHIFT      (0U)
#define USB_CORE_CFG_REG56_TOUTHS_CNT(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG56_TOUTHS_CNT_SHIFT)) & USB_CORE_CFG_REG56_TOUTHS_CNT_MASK)
#define USB_CORE_CFG_REG56_RESERVED_MASK         (0xFFFFFFC0U)
#define USB_CORE_CFG_REG56_RESERVED_SHIFT        (6U)
#define USB_CORE_CFG_REG56_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG56_RESERVED_SHIFT)) & USB_CORE_CFG_REG56_RESERVED_MASK)

/*! @name CFG_REG57 - USB3 Configuration */
#define USB_CORE_CFG_REG57_LFPS_DEB_WIDTH_MASK   (0x3U)
#define USB_CORE_CFG_REG57_LFPS_DEB_WIDTH_SHIFT  (0U)
#define USB_CORE_CFG_REG57_LFPS_DEB_WIDTH(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG57_LFPS_DEB_WIDTH_SHIFT)) & USB_CORE_CFG_REG57_LFPS_DEB_WIDTH_MASK)
#define USB_CORE_CFG_REG57_RESERVED_MASK         (0xFFFFFFFCU)
#define USB_CORE_CFG_REG57_RESERVED_SHIFT        (2U)
#define USB_CORE_CFG_REG57_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG57_RESERVED_SHIFT)) & USB_CORE_CFG_REG57_RESERVED_MASK)

/*! @name CFG_REG58 - USB3 Configuration */
#define USB_CORE_CFG_REG58_LFPS_GEN_U2EXIT_MASK  (0x3FFFFU)
#define USB_CORE_CFG_REG58_LFPS_GEN_U2EXIT_SHIFT (0U)
#define USB_CORE_CFG_REG58_LFPS_GEN_U2EXIT(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG58_LFPS_GEN_U2EXIT_SHIFT)) & USB_CORE_CFG_REG58_LFPS_GEN_U2EXIT_MASK)
#define USB_CORE_CFG_REG58_RESERVED_MASK         (0xFFFC0000U)
#define USB_CORE_CFG_REG58_RESERVED_SHIFT        (18U)
#define USB_CORE_CFG_REG58_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG58_RESERVED_SHIFT)) & USB_CORE_CFG_REG58_RESERVED_MASK)

/*! @name CFG_REG59 - USB3 Configuration */
#define USB_CORE_CFG_REG59_LFPS_MIN_GEN_U3EXIT_MASK (0xFFFFU)
#define USB_CORE_CFG_REG59_LFPS_MIN_GEN_U3EXIT_SHIFT (0U)
#define USB_CORE_CFG_REG59_LFPS_MIN_GEN_U3EXIT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG59_LFPS_MIN_GEN_U3EXIT_SHIFT)) & USB_CORE_CFG_REG59_LFPS_MIN_GEN_U3EXIT_MASK)
#define USB_CORE_CFG_REG59_RESERVED_MASK         (0xFFFF0000U)
#define USB_CORE_CFG_REG59_RESERVED_SHIFT        (16U)
#define USB_CORE_CFG_REG59_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG59_RESERVED_SHIFT)) & USB_CORE_CFG_REG59_RESERVED_MASK)

/*! @name CFG_REG60 - USB3 Configuration */
#define USB_CORE_CFG_REG60_PORT_CONFIG_TIMEOUT_MASK (0x7FU)
#define USB_CORE_CFG_REG60_PORT_CONFIG_TIMEOUT_SHIFT (0U)
#define USB_CORE_CFG_REG60_PORT_CONFIG_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG60_PORT_CONFIG_TIMEOUT_SHIFT)) & USB_CORE_CFG_REG60_PORT_CONFIG_TIMEOUT_MASK)
#define USB_CORE_CFG_REG60_RESERVED_MASK         (0xFFFFFF80U)
#define USB_CORE_CFG_REG60_RESERVED_SHIFT        (7U)
#define USB_CORE_CFG_REG60_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG60_RESERVED_SHIFT)) & USB_CORE_CFG_REG60_RESERVED_MASK)

/*! @name CFG_REG61 - USB3 Configuration */
#define USB_CORE_CFG_REG61_LFPS_POL_LFPS_TO_RXEQ_MASK (0x7FFU)
#define USB_CORE_CFG_REG61_LFPS_POL_LFPS_TO_RXEQ_SHIFT (0U)
#define USB_CORE_CFG_REG61_LFPS_POL_LFPS_TO_RXEQ(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG61_LFPS_POL_LFPS_TO_RXEQ_SHIFT)) & USB_CORE_CFG_REG61_LFPS_POL_LFPS_TO_RXEQ_MASK)
#define USB_CORE_CFG_REG61_RESERVED_MASK         (0xFFFFF800U)
#define USB_CORE_CFG_REG61_RESERVED_SHIFT        (11U)
#define USB_CORE_CFG_REG61_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG61_RESERVED_SHIFT)) & USB_CORE_CFG_REG61_RESERVED_MASK)

/*! @name CFG_REG62 - USB3 Configuration */
#define USB_CORE_CFG_REG62_PHY_TX_LATENCY_MASK   (0x3FU)
#define USB_CORE_CFG_REG62_PHY_TX_LATENCY_SHIFT  (0U)
#define USB_CORE_CFG_REG62_PHY_TX_LATENCY(x)     (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG62_PHY_TX_LATENCY_SHIFT)) & USB_CORE_CFG_REG62_PHY_TX_LATENCY_MASK)
#define USB_CORE_CFG_REG62_RESERVED_MASK         (0x3FFFFFC0U)
#define USB_CORE_CFG_REG62_RESERVED_SHIFT        (6U)
#define USB_CORE_CFG_REG62_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG62_RESERVED_SHIFT)) & USB_CORE_CFG_REG62_RESERVED_MASK)
#define USB_CORE_CFG_REG62_PHY_TX_LATENCY_PRESCALE_MASK (0xC0000000U)
#define USB_CORE_CFG_REG62_PHY_TX_LATENCY_PRESCALE_SHIFT (30U)
#define USB_CORE_CFG_REG62_PHY_TX_LATENCY_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG62_PHY_TX_LATENCY_PRESCALE_SHIFT)) & USB_CORE_CFG_REG62_PHY_TX_LATENCY_PRESCALE_MASK)

/*! @name CFG_REG63 - USB3 Configuration */
#define USB_CORE_CFG_REG63_U2_INACTIVITY_TMOUT_MASK (0x7FFFU)
#define USB_CORE_CFG_REG63_U2_INACTIVITY_TMOUT_SHIFT (0U)
#define USB_CORE_CFG_REG63_U2_INACTIVITY_TMOUT(x) (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG63_U2_INACTIVITY_TMOUT_SHIFT)) & USB_CORE_CFG_REG63_U2_INACTIVITY_TMOUT_MASK)
#define USB_CORE_CFG_REG63_RESERVED_MASK         (0xFFFF8000U)
#define USB_CORE_CFG_REG63_RESERVED_SHIFT        (15U)
#define USB_CORE_CFG_REG63_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG63_RESERVED_SHIFT)) & USB_CORE_CFG_REG63_RESERVED_MASK)

/*! @name CFG_REG64 - USB2 Configuration */
#define USB_CORE_CFG_REG64_TFILTSE0_MASK         (0x7FU)
#define USB_CORE_CFG_REG64_TFILTSE0_SHIFT        (0U)
#define USB_CORE_CFG_REG64_TFILTSE0(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG64_TFILTSE0_SHIFT)) & USB_CORE_CFG_REG64_TFILTSE0_MASK)
#define USB_CORE_CFG_REG64_RESERVED_MASK         (0xFFFFFF80U)
#define USB_CORE_CFG_REG64_RESERVED_SHIFT        (7U)
#define USB_CORE_CFG_REG64_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG64_RESERVED_SHIFT)) & USB_CORE_CFG_REG64_RESERVED_MASK)

/*! @name CFG_REG65 - USB2 Configuration */
#define USB_CORE_CFG_REG65_TFILT_MASK            (0x7FU)
#define USB_CORE_CFG_REG65_TFILT_SHIFT           (0U)
#define USB_CORE_CFG_REG65_TFILT(x)              (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG65_TFILT_SHIFT)) & USB_CORE_CFG_REG65_TFILT_MASK)
#define USB_CORE_CFG_REG65_RESERVED_MASK         (0xFFFF8000U)
#define USB_CORE_CFG_REG65_RESERVED_SHIFT        (15U)
#define USB_CORE_CFG_REG65_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG65_RESERVED_SHIFT)) & USB_CORE_CFG_REG65_RESERVED_MASK)

/*! @name CFG_REG66 - USB2 Configuration */
#define USB_CORE_CFG_REG66_TWTRSTFS_SE0_MASK     (0x7FU)
#define USB_CORE_CFG_REG66_TWTRSTFS_SE0_SHIFT    (0U)
#define USB_CORE_CFG_REG66_TWTRSTFS_SE0(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG66_TWTRSTFS_SE0_SHIFT)) & USB_CORE_CFG_REG66_TWTRSTFS_SE0_MASK)
#define USB_CORE_CFG_REG66_RESERVED_MASK         (0xFFFF8000U)
#define USB_CORE_CFG_REG66_RESERVED_SHIFT        (15U)
#define USB_CORE_CFG_REG66_RESERVED(x)           (((uint32_t)(((uint32_t)(x)) << USB_CORE_CFG_REG66_RESERVED_SHIFT)) & USB_CORE_CFG_REG66_RESERVED_MASK)

/*! @name DMA_AXI_CTRL - DMA AXI Master Control */
#define USB_CORE_DMA_AXI_CTRL_MARPROT_MASK       (0x7U)
#define USB_CORE_DMA_AXI_CTRL_MARPROT_SHIFT      (0U)
#define USB_CORE_DMA_AXI_CTRL_MARPROT(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL_MARPROT_SHIFT)) & USB_CORE_DMA_AXI_CTRL_MARPROT_MASK)
#define USB_CORE_DMA_AXI_CTRL_RESERVED0_MASK     (0x8U)
#define USB_CORE_DMA_AXI_CTRL_RESERVED0_SHIFT    (3U)
#define USB_CORE_DMA_AXI_CTRL_RESERVED0(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL_RESERVED0_SHIFT)) & USB_CORE_DMA_AXI_CTRL_RESERVED0_MASK)
#define USB_CORE_DMA_AXI_CTRL_MARCACHE_MASK      (0xF0U)
#define USB_CORE_DMA_AXI_CTRL_MARCACHE_SHIFT     (4U)
#define USB_CORE_DMA_AXI_CTRL_MARCACHE(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL_MARCACHE_SHIFT)) & USB_CORE_DMA_AXI_CTRL_MARCACHE_MASK)
#define USB_CORE_DMA_AXI_CTRL_MARLOCK_MASK       (0x300U)
#define USB_CORE_DMA_AXI_CTRL_MARLOCK_SHIFT      (8U)
#define USB_CORE_DMA_AXI_CTRL_MARLOCK(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL_MARLOCK_SHIFT)) & USB_CORE_DMA_AXI_CTRL_MARLOCK_MASK)
#define USB_CORE_DMA_AXI_CTRL_RESERVED1_MASK     (0xFC00U)
#define USB_CORE_DMA_AXI_CTRL_RESERVED1_SHIFT    (10U)
#define USB_CORE_DMA_AXI_CTRL_RESERVED1(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL_RESERVED1_SHIFT)) & USB_CORE_DMA_AXI_CTRL_RESERVED1_MASK)
#define USB_CORE_DMA_AXI_CTRL_MAWPROT_MASK       (0x70000U)
#define USB_CORE_DMA_AXI_CTRL_MAWPROT_SHIFT      (16U)
#define USB_CORE_DMA_AXI_CTRL_MAWPROT(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL_MAWPROT_SHIFT)) & USB_CORE_DMA_AXI_CTRL_MAWPROT_MASK)
#define USB_CORE_DMA_AXI_CTRL_RESERVED2_MASK     (0x80000U)
#define USB_CORE_DMA_AXI_CTRL_RESERVED2_SHIFT    (19U)
#define USB_CORE_DMA_AXI_CTRL_RESERVED2(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL_RESERVED2_SHIFT)) & USB_CORE_DMA_AXI_CTRL_RESERVED2_MASK)
#define USB_CORE_DMA_AXI_CTRL_MAWCACHE_MASK      (0xF00000U)
#define USB_CORE_DMA_AXI_CTRL_MAWCACHE_SHIFT     (20U)
#define USB_CORE_DMA_AXI_CTRL_MAWCACHE(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL_MAWCACHE_SHIFT)) & USB_CORE_DMA_AXI_CTRL_MAWCACHE_MASK)
#define USB_CORE_DMA_AXI_CTRL_MAWLOCK_MASK       (0x3000000U)
#define USB_CORE_DMA_AXI_CTRL_MAWLOCK_SHIFT      (24U)
#define USB_CORE_DMA_AXI_CTRL_MAWLOCK(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL_MAWLOCK_SHIFT)) & USB_CORE_DMA_AXI_CTRL_MAWLOCK_MASK)
#define USB_CORE_DMA_AXI_CTRL_RESERVED3_MASK     (0xFC000000U)
#define USB_CORE_DMA_AXI_CTRL_RESERVED3_SHIFT    (26U)
#define USB_CORE_DMA_AXI_CTRL_RESERVED3(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL_RESERVED3_SHIFT)) & USB_CORE_DMA_AXI_CTRL_RESERVED3_MASK)

/*! @name DMA_AXI_ID - DMA AXI Master ID */
#define USB_CORE_DMA_AXI_ID_MAW_ID_MASK          (0x1FU)
#define USB_CORE_DMA_AXI_ID_MAW_ID_SHIFT         (0U)
#define USB_CORE_DMA_AXI_ID_MAW_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_ID_MAW_ID_SHIFT)) & USB_CORE_DMA_AXI_ID_MAW_ID_MASK)
#define USB_CORE_DMA_AXI_ID_RESERVED0_MASK       (0xFFE0U)
#define USB_CORE_DMA_AXI_ID_RESERVED0_SHIFT      (5U)
#define USB_CORE_DMA_AXI_ID_RESERVED0(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_ID_RESERVED0_SHIFT)) & USB_CORE_DMA_AXI_ID_RESERVED0_MASK)
#define USB_CORE_DMA_AXI_ID_MAR_ID_MASK          (0x1F0000U)
#define USB_CORE_DMA_AXI_ID_MAR_ID_SHIFT         (16U)
#define USB_CORE_DMA_AXI_ID_MAR_ID(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_ID_MAR_ID_SHIFT)) & USB_CORE_DMA_AXI_ID_MAR_ID_MASK)
#define USB_CORE_DMA_AXI_ID_RESERVED1_MASK       (0xFFE00000U)
#define USB_CORE_DMA_AXI_ID_RESERVED1_SHIFT      (21U)
#define USB_CORE_DMA_AXI_ID_RESERVED1(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_ID_RESERVED1_SHIFT)) & USB_CORE_DMA_AXI_ID_RESERVED1_MASK)

/*! @name DMA_AXI_CAP - DMA AXI Master Extended Capability */
#define USB_CORE_DMA_AXI_CAP_RESERVED0_MASK      (0xFFFFFU)
#define USB_CORE_DMA_AXI_CAP_RESERVED0_SHIFT     (0U)
#define USB_CORE_DMA_AXI_CAP_RESERVED0(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CAP_RESERVED0_SHIFT)) & USB_CORE_DMA_AXI_CAP_RESERVED0_MASK)
#define USB_CORE_DMA_AXI_CAP_AXI_DECERR_EN_MASK  (0x100000U)
#define USB_CORE_DMA_AXI_CAP_AXI_DECERR_EN_SHIFT (20U)
#define USB_CORE_DMA_AXI_CAP_AXI_DECERR_EN(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CAP_AXI_DECERR_EN_SHIFT)) & USB_CORE_DMA_AXI_CAP_AXI_DECERR_EN_MASK)
#define USB_CORE_DMA_AXI_CAP_AXI_SLVERR_EN_MASK  (0x200000U)
#define USB_CORE_DMA_AXI_CAP_AXI_SLVERR_EN_SHIFT (21U)
#define USB_CORE_DMA_AXI_CAP_AXI_SLVERR_EN(x)    (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CAP_AXI_SLVERR_EN_SHIFT)) & USB_CORE_DMA_AXI_CAP_AXI_SLVERR_EN_MASK)
#define USB_CORE_DMA_AXI_CAP_RESERVED1_MASK      (0xFC00000U)
#define USB_CORE_DMA_AXI_CAP_RESERVED1_SHIFT     (22U)
#define USB_CORE_DMA_AXI_CAP_RESERVED1(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CAP_RESERVED1_SHIFT)) & USB_CORE_DMA_AXI_CAP_RESERVED1_MASK)
#define USB_CORE_DMA_AXI_CAP_AXI_DECERR_MASK     (0x10000000U)
#define USB_CORE_DMA_AXI_CAP_AXI_DECERR_SHIFT    (28U)
#define USB_CORE_DMA_AXI_CAP_AXI_DECERR(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CAP_AXI_DECERR_SHIFT)) & USB_CORE_DMA_AXI_CAP_AXI_DECERR_MASK)
#define USB_CORE_DMA_AXI_CAP_AXI_SLVERR_MASK     (0x20000000U)
#define USB_CORE_DMA_AXI_CAP_AXI_SLVERR_SHIFT    (29U)
#define USB_CORE_DMA_AXI_CAP_AXI_SLVERR(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CAP_AXI_SLVERR_SHIFT)) & USB_CORE_DMA_AXI_CAP_AXI_SLVERR_MASK)
#define USB_CORE_DMA_AXI_CAP_AXI_IDLE_MASK       (0x40000000U)
#define USB_CORE_DMA_AXI_CAP_AXI_IDLE_SHIFT      (30U)
#define USB_CORE_DMA_AXI_CAP_AXI_IDLE(x)         (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CAP_AXI_IDLE_SHIFT)) & USB_CORE_DMA_AXI_CAP_AXI_IDLE_MASK)
#define USB_CORE_DMA_AXI_CAP_RESERVED2_MASK      (0x80000000U)
#define USB_CORE_DMA_AXI_CAP_RESERVED2_SHIFT     (31U)
#define USB_CORE_DMA_AXI_CAP_RESERVED2(x)        (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CAP_RESERVED2_SHIFT)) & USB_CORE_DMA_AXI_CAP_RESERVED2_MASK)

/*! @name DMA_AXI_CTRL0 - DMA AXI Master Control */
#define USB_CORE_DMA_AXI_CTRL0_B_MAX_MASK        (0xFU)
#define USB_CORE_DMA_AXI_CTRL0_B_MAX_SHIFT       (0U)
#define USB_CORE_DMA_AXI_CTRL0_B_MAX(x)          (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL0_B_MAX_SHIFT)) & USB_CORE_DMA_AXI_CTRL0_B_MAX_MASK)
#define USB_CORE_DMA_AXI_CTRL0_RESERVED_MASK     (0xFFFFFFF0U)
#define USB_CORE_DMA_AXI_CTRL0_RESERVED_SHIFT    (4U)
#define USB_CORE_DMA_AXI_CTRL0_RESERVED(x)       (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL0_RESERVED_SHIFT)) & USB_CORE_DMA_AXI_CTRL0_RESERVED_MASK)

/*! @name DMA_AXI_CTRL1 - DMA AXI Master Control */
#define USB_CORE_DMA_AXI_CTRL1_ROT_MASK          (0x1FU)
#define USB_CORE_DMA_AXI_CTRL1_ROT_SHIFT         (0U)
#define USB_CORE_DMA_AXI_CTRL1_ROT(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL1_ROT_SHIFT)) & USB_CORE_DMA_AXI_CTRL1_ROT_MASK)
#define USB_CORE_DMA_AXI_CTRL1_RESERVED0_MASK    (0xFFE0U)
#define USB_CORE_DMA_AXI_CTRL1_RESERVED0_SHIFT   (5U)
#define USB_CORE_DMA_AXI_CTRL1_RESERVED0(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL1_RESERVED0_SHIFT)) & USB_CORE_DMA_AXI_CTRL1_RESERVED0_MASK)
#define USB_CORE_DMA_AXI_CTRL1_WOT_MASK          (0x1F0000U)
#define USB_CORE_DMA_AXI_CTRL1_WOT_SHIFT         (16U)
#define USB_CORE_DMA_AXI_CTRL1_WOT(x)            (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL1_WOT_SHIFT)) & USB_CORE_DMA_AXI_CTRL1_WOT_MASK)
#define USB_CORE_DMA_AXI_CTRL1_RESERVED1_MASK    (0xFFE00000U)
#define USB_CORE_DMA_AXI_CTRL1_RESERVED1_SHIFT   (21U)
#define USB_CORE_DMA_AXI_CTRL1_RESERVED1(x)      (((uint32_t)(((uint32_t)(x)) << USB_CORE_DMA_AXI_CTRL1_RESERVED1_SHIFT)) & USB_CORE_DMA_AXI_CTRL1_RESERVED1_MASK)


/*!
 * @}
 */ /* end of group USB_CORE_Register_Masks */


/* USB_CORE - Peripheral instance base addresses */
/** Peripheral USB_CORE base address */
#define USB_CORE_BASE                            (0x51B2000u)
/** Peripheral USB_CORE base pointer */
#define USB_CORE                                 ((USB_CORE_Type *)USB_CORE_BASE)
/** Array initializer of USB_CORE peripheral base addresses */
#define USB_CORE_BASE_ADDRS                      { USB_CORE_BASE }
/** Array initializer of USB_CORE peripheral base pointers */
#define USB_CORE_BASE_PTRS                       { USB_CORE }

/*!
 * @}
 */ /* end of group USB_CORE_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- USB_NON_CORE Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_NON_CORE_Peripheral_Access_Layer USB_NON_CORE Peripheral Access Layer
 * @{
 */

/** USB_NON_CORE - Register Layout Typedef */
typedef struct {
  __IO uint32_t CORE_CTRL11;                       /**< Core Control, offset: 0x0 */
       uint32_t CORE_CTRL12;                       /**< Core Control, offset: 0x4 */
  __IO uint32_t INT;                               /**< Interrupt, offset: 0x8 */
  __I  uint32_t CORE_STATUS;                       /**< Core Status, offset: 0xC */
       uint32_t RESERVED;                          /**< RESERVED, offset: 0x10 */
} USB_NON_CORE_Type;

/* ----------------------------------------------------------------------------
   -- USB_NON_CORE Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_NON_CORE_Register_Masks USB_NON_CORE Register Masks
 * @{
 */

/*! @name CORE_CTRL11 - Core Control */
#define USB_NON_CORE_CORE_CTRL11_MODE_STRAP_MASK (0x7U)
#define USB_NON_CORE_CORE_CTRL11_MODE_STRAP_SHIFT (0U)
#define USB_NON_CORE_CORE_CTRL11_MODE_STRAP(x)   (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_MODE_STRAP_SHIFT)) & USB_NON_CORE_CORE_CTRL11_MODE_STRAP_MASK)
#define USB_NON_CORE_CORE_CTRL11_WAKEUP_INT_CLR_MASK (0x8U)
#define USB_NON_CORE_CORE_CTRL11_WAKEUP_INT_CLR_SHIFT (3U)
#define USB_NON_CORE_CORE_CTRL11_WAKEUP_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_WAKEUP_INT_CLR_SHIFT)) & USB_NON_CORE_CORE_CTRL11_WAKEUP_INT_CLR_MASK)
#define USB_NON_CORE_CORE_CTRL11_APP_CLK_125_ALWAYSON_MASK (0x10U)
#define USB_NON_CORE_CORE_CTRL11_APP_CLK_125_ALWAYSON_SHIFT (4U)
#define USB_NON_CORE_CORE_CTRL11_APP_CLK_125_ALWAYSON(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_APP_CLK_125_ALWAYSON_SHIFT)) & USB_NON_CORE_CORE_CTRL11_APP_CLK_125_ALWAYSON_MASK)
#define USB_NON_CORE_CORE_CTRL11_LPM_CLK_ALWAYSON_MASK (0x20U)
#define USB_NON_CORE_CORE_CTRL11_LPM_CLK_ALWAYSON_SHIFT (5U)
#define USB_NON_CORE_CORE_CTRL11_LPM_CLK_ALWAYSON(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_LPM_CLK_ALWAYSON_SHIFT)) & USB_NON_CORE_CORE_CTRL11_LPM_CLK_ALWAYSON_MASK)
#define USB_NON_CORE_CORE_CTRL11_XHC_D0_REQ_MASK (0x40U)
#define USB_NON_CORE_CORE_CTRL11_XHC_D0_REQ_SHIFT (6U)
#define USB_NON_CORE_CORE_CTRL11_XHC_D0_REQ(x)   (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_XHC_D0_REQ_SHIFT)) & USB_NON_CORE_CORE_CTRL11_XHC_D0_REQ_MASK)
#define USB_NON_CORE_CORE_CTRL11_MDCTRL_CLK_SEL_MASK (0x80U)
#define USB_NON_CORE_CORE_CTRL11_MDCTRL_CLK_SEL_SHIFT (7U)
#define USB_NON_CORE_CORE_CTRL11_MDCTRL_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_MDCTRL_CLK_SEL_SHIFT)) & USB_NON_CORE_CORE_CTRL11_MDCTRL_CLK_SEL_MASK)
#define USB_NON_CORE_CORE_CTRL11_OVERCURRENT_POLARITY_MASK (0x100U)
#define USB_NON_CORE_CORE_CTRL11_OVERCURRENT_POLARITY_SHIFT (8U)
#define USB_NON_CORE_CORE_CTRL11_OVERCURRENT_POLARITY(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_OVERCURRENT_POLARITY_SHIFT)) & USB_NON_CORE_CORE_CTRL11_OVERCURRENT_POLARITY_MASK)
#define USB_NON_CORE_CORE_CTRL11_OVERCURRENT_DISABLE_MASK (0x200U)
#define USB_NON_CORE_CORE_CTRL11_OVERCURRENT_DISABLE_SHIFT (9U)
#define USB_NON_CORE_CORE_CTRL11_OVERCURRENT_DISABLE(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_OVERCURRENT_DISABLE_SHIFT)) & USB_NON_CORE_CORE_CTRL11_OVERCURRENT_DISABLE_MASK)
#define USB_NON_CORE_CORE_CTRL11_OTG_ID_WAKEUP_EN_MASK (0x2000U)
#define USB_NON_CORE_CORE_CTRL11_OTG_ID_WAKEUP_EN_SHIFT (13U)
#define USB_NON_CORE_CORE_CTRL11_OTG_ID_WAKEUP_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_OTG_ID_WAKEUP_EN_SHIFT)) & USB_NON_CORE_CORE_CTRL11_OTG_ID_WAKEUP_EN_MASK)
#define USB_NON_CORE_CORE_CTRL11_OTG_VBUS_WAKEUP_EN_MASK (0x4000U)
#define USB_NON_CORE_CORE_CTRL11_OTG_VBUS_WAKEUP_EN_SHIFT (14U)
#define USB_NON_CORE_CORE_CTRL11_OTG_VBUS_WAKEUP_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_OTG_VBUS_WAKEUP_EN_SHIFT)) & USB_NON_CORE_CORE_CTRL11_OTG_VBUS_WAKEUP_EN_MASK)
#define USB_NON_CORE_CORE_CTRL11_OTG_WKDPDMCHG_EN_MASK (0x8000U)
#define USB_NON_CORE_CORE_CTRL11_OTG_WKDPDMCHG_EN_SHIFT (15U)
#define USB_NON_CORE_CORE_CTRL11_OTG_WKDPDMCHG_EN(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_OTG_WKDPDMCHG_EN_SHIFT)) & USB_NON_CORE_CORE_CTRL11_OTG_WKDPDMCHG_EN_MASK)
#define USB_NON_CORE_CORE_CTRL11_WAKEUP_INT_STATUS_MASK (0x10000U)
#define USB_NON_CORE_CORE_CTRL11_WAKEUP_INT_STATUS_SHIFT (16U)
#define USB_NON_CORE_CORE_CTRL11_WAKEUP_INT_STATUS(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_WAKEUP_INT_STATUS_SHIFT)) & USB_NON_CORE_CORE_CTRL11_WAKEUP_INT_STATUS_MASK)
#define USB_NON_CORE_CORE_CTRL11_PHYAPB_SW_RESET_MASK (0x4000000U)
#define USB_NON_CORE_CORE_CTRL11_PHYAPB_SW_RESET_SHIFT (26U)
#define USB_NON_CORE_CORE_CTRL11_PHYAPB_SW_RESET(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_PHYAPB_SW_RESET_SHIFT)) & USB_NON_CORE_CORE_CTRL11_PHYAPB_SW_RESET_MASK)
#define USB_NON_CORE_CORE_CTRL11_PHY_SW_RESET_MASK (0x8000000U)
#define USB_NON_CORE_CORE_CTRL11_PHY_SW_RESET_SHIFT (27U)
#define USB_NON_CORE_CORE_CTRL11_PHY_SW_RESET(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_PHY_SW_RESET_SHIFT)) & USB_NON_CORE_CORE_CTRL11_PHY_SW_RESET_MASK)
#define USB_NON_CORE_CORE_CTRL11_AXI_SW_RESET_MASK (0x20000000U)
#define USB_NON_CORE_CORE_CTRL11_AXI_SW_RESET_SHIFT (29U)
#define USB_NON_CORE_CORE_CTRL11_AXI_SW_RESET(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_AXI_SW_RESET_SHIFT)) & USB_NON_CORE_CORE_CTRL11_AXI_SW_RESET_MASK)
#define USB_NON_CORE_CORE_CTRL11_APB_SW_RESET_MASK (0x40000000U)
#define USB_NON_CORE_CORE_CTRL11_APB_SW_RESET_SHIFT (30U)
#define USB_NON_CORE_CORE_CTRL11_APB_SW_RESET(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_APB_SW_RESET_SHIFT)) & USB_NON_CORE_CORE_CTRL11_APB_SW_RESET_MASK)
#define USB_NON_CORE_CORE_CTRL11_PWR_SW_RESET_MASK (0x80000000U)
#define USB_NON_CORE_CORE_CTRL11_PWR_SW_RESET_SHIFT (31U)
#define USB_NON_CORE_CORE_CTRL11_PWR_SW_RESET(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_CTRL11_PWR_SW_RESET_SHIFT)) & USB_NON_CORE_CORE_CTRL11_PWR_SW_RESET_MASK)

/*! @name INT - Interrupt */
#define USB_NON_CORE_INT_XHCI_INT_EN_MASK        (0xFFU)
#define USB_NON_CORE_INT_XHCI_INT_EN_SHIFT       (0U)
#define USB_NON_CORE_INT_XHCI_INT_EN(x)          (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_XHCI_INT_EN_SHIFT)) & USB_NON_CORE_INT_XHCI_INT_EN_MASK)
#define USB_NON_CORE_INT_DEV_INT_EN_MASK         (0x300U)
#define USB_NON_CORE_INT_DEV_INT_EN_SHIFT        (8U)
#define USB_NON_CORE_INT_DEV_INT_EN(x)           (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_DEV_INT_EN_SHIFT)) & USB_NON_CORE_INT_DEV_INT_EN_MASK)
#define USB_NON_CORE_INT_OTG_INT_EN_MASK         (0x400U)
#define USB_NON_CORE_INT_OTG_INT_EN_SHIFT        (10U)
#define USB_NON_CORE_INT_OTG_INT_EN(x)           (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_OTG_INT_EN_SHIFT)) & USB_NON_CORE_INT_OTG_INT_EN_MASK)
#define USB_NON_CORE_INT_LTM_HOST_EN_MASK        (0x800U)
#define USB_NON_CORE_INT_LTM_HOST_EN_SHIFT       (11U)
#define USB_NON_CORE_INT_LTM_HOST_EN(x)          (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_LTM_HOST_EN_SHIFT)) & USB_NON_CORE_INT_LTM_HOST_EN_MASK)
#define USB_NON_CORE_INT_OTG_WAKEUP_EN_MASK      (0x1000U)
#define USB_NON_CORE_INT_OTG_WAKEUP_EN_SHIFT     (12U)
#define USB_NON_CORE_INT_OTG_WAKEUP_EN(x)        (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_OTG_WAKEUP_EN_SHIFT)) & USB_NON_CORE_INT_OTG_WAKEUP_EN_MASK)
#define USB_NON_CORE_INT_DEVU3_WAKEUP_EN_MASK    (0x4000U)
#define USB_NON_CORE_INT_DEVU3_WAKEUP_EN_SHIFT   (14U)
#define USB_NON_CORE_INT_DEVU3_WAKEUP_EN(x)      (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_DEVU3_WAKEUP_EN_SHIFT)) & USB_NON_CORE_INT_DEVU3_WAKEUP_EN_MASK)
#define USB_NON_CORE_INT_DEV_WAKEUP_MASK         (0x8000U)
#define USB_NON_CORE_INT_DEV_WAKEUP_SHIFT        (15U)
#define USB_NON_CORE_INT_DEV_WAKEUP(x)           (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_DEV_WAKEUP_SHIFT)) & USB_NON_CORE_INT_DEV_WAKEUP_MASK)
#define USB_NON_CORE_INT_INTERRUPT_REQ_MASK      (0xFF0000U)
#define USB_NON_CORE_INT_INTERRUPT_REQ_SHIFT     (16U)
#define USB_NON_CORE_INT_INTERRUPT_REQ(x)        (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_INTERRUPT_REQ_SHIFT)) & USB_NON_CORE_INT_INTERRUPT_REQ_MASK)
#define USB_NON_CORE_INT_DEV_IRQS_MASK           (0x3000000U)
#define USB_NON_CORE_INT_DEV_IRQS_SHIFT          (24U)
#define USB_NON_CORE_INT_DEV_IRQS(x)             (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_DEV_IRQS_SHIFT)) & USB_NON_CORE_INT_DEV_IRQS_MASK)
#define USB_NON_CORE_INT_OTGIRQ_MASK             (0x4000000U)
#define USB_NON_CORE_INT_OTGIRQ_SHIFT            (26U)
#define USB_NON_CORE_INT_OTGIRQ(x)               (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_OTGIRQ_SHIFT)) & USB_NON_CORE_INT_OTGIRQ_MASK)
#define USB_NON_CORE_INT_LTM_HOST_REQ_MASK       (0x8000000U)
#define USB_NON_CORE_INT_LTM_HOST_REQ_SHIFT      (27U)
#define USB_NON_CORE_INT_LTM_HOST_REQ(x)         (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_LTM_HOST_REQ_SHIFT)) & USB_NON_CORE_INT_LTM_HOST_REQ_MASK)
#define USB_NON_CORE_INT_LPM_HOST_REQ_MASK       (0x10000000U)
#define USB_NON_CORE_INT_LPM_HOST_REQ_SHIFT      (28U)
#define USB_NON_CORE_INT_LPM_HOST_REQ(x)         (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_LPM_HOST_REQ_SHIFT)) & USB_NON_CORE_INT_LPM_HOST_REQ_MASK)
#define USB_NON_CORE_INT_CLK_125_REQ_MASK        (0x20000000U)
#define USB_NON_CORE_INT_CLK_125_REQ_SHIFT       (29U)
#define USB_NON_CORE_INT_CLK_125_REQ(x)          (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_CLK_125_REQ_SHIFT)) & USB_NON_CORE_INT_CLK_125_REQ_MASK)
#define USB_NON_CORE_INT_PHY_REFCLK_REQ_MASK     (0x40000000U)
#define USB_NON_CORE_INT_PHY_REFCLK_REQ_SHIFT    (30U)
#define USB_NON_CORE_INT_PHY_REFCLK_REQ(x)       (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_INT_PHY_REFCLK_REQ_SHIFT)) & USB_NON_CORE_INT_PHY_REFCLK_REQ_MASK)

/*! @name CORE_STATUS - Core Status */
#define USB_NON_CORE_CORE_STATUS_LOWEST_BELT_MASK (0xFFFU)
#define USB_NON_CORE_CORE_STATUS_LOWEST_BELT_SHIFT (0U)
#define USB_NON_CORE_CORE_STATUS_LOWEST_BELT(x)  (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_STATUS_LOWEST_BELT_SHIFT)) & USB_NON_CORE_CORE_STATUS_LOWEST_BELT_MASK)
#define USB_NON_CORE_CORE_STATUS_XHCI_POWER_ON_READY_MASK (0x1000U)
#define USB_NON_CORE_CORE_STATUS_XHCI_POWER_ON_READY_SHIFT (12U)
#define USB_NON_CORE_CORE_STATUS_XHCI_POWER_ON_READY(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_STATUS_XHCI_POWER_ON_READY_SHIFT)) & USB_NON_CORE_CORE_STATUS_XHCI_POWER_ON_READY_MASK)
#define USB_NON_CORE_CORE_STATUS_USBDEV_POWER_ON_READY_MASK (0x2000U)
#define USB_NON_CORE_CORE_STATUS_USBDEV_POWER_ON_READY_SHIFT (13U)
#define USB_NON_CORE_CORE_STATUS_USBDEV_POWER_ON_READY(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_STATUS_USBDEV_POWER_ON_READY_SHIFT)) & USB_NON_CORE_CORE_STATUS_USBDEV_POWER_ON_READY_MASK)
#define USB_NON_CORE_CORE_STATUS_XHC_D0_ACK_MASK (0x4000U)
#define USB_NON_CORE_CORE_STATUS_XHC_D0_ACK_SHIFT (14U)
#define USB_NON_CORE_CORE_STATUS_XHC_D0_ACK(x)   (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_STATUS_XHC_D0_ACK_SHIFT)) & USB_NON_CORE_CORE_STATUS_XHC_D0_ACK_MASK)
#define USB_NON_CORE_CORE_STATUS_MDCTRL_CLK_STATUS_MASK (0x8000U)
#define USB_NON_CORE_CORE_STATUS_MDCTRL_CLK_STATUS_SHIFT (15U)
#define USB_NON_CORE_CORE_STATUS_MDCTRL_CLK_STATUS(x) (((uint32_t)(((uint32_t)(x)) << USB_NON_CORE_CORE_STATUS_MDCTRL_CLK_STATUS_SHIFT)) & USB_NON_CORE_CORE_STATUS_MDCTRL_CLK_STATUS_MASK)


/*!
 * @}
 */ /* end of group USB_NON_CORE_Register_Masks */


/* USB_NON_CORE - Peripheral instance base addresses */
/** Peripheral USB_NON_CORE base address */
#define USB_NON_CORE_BASE                        (0x51B1000u)
/** Peripheral USB_NON_CORE base pointer */
#define USB_NON_CORE                             ((USB_NON_CORE_Type *)USB_NON_CORE_BASE)
/** Array initializer of USB_NON_CORE peripheral base addresses */
#define USB_NON_CORE_BASE_ADDRS                  { USB_NON_CORE_BASE }
/** Array initializer of USB_NON_CORE peripheral base pointers */
#define USB_NON_CORE_BASE_PTRS                   { USB_NON_CORE }

/*!
 * @}
 */ /* end of group USB_NON_CORE_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- USDHC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Peripheral_Access_Layer USDHC Peripheral Access Layer
 * @{
 */

/** USDHC - Register Layout Typedef */
typedef struct {
  __IO uint32_t DS_ADDR;                           /**< DMA System Address, offset: 0x0 */
  __IO uint32_t BLK_ATT;                           /**< Block Attributes, offset: 0x4 */
  __IO uint32_t CMD_ARG;                           /**< Command Argument, offset: 0x8 */
  __IO uint32_t CMD_XFR_TYP;                       /**< Command Transfer Type, offset: 0xC */
  __I  uint32_t CMD_RSP0;                          /**< Command Response0, offset: 0x10 */
  __I  uint32_t CMD_RSP1;                          /**< Command Response1, offset: 0x14 */
  __I  uint32_t CMD_RSP2;                          /**< Command Response2, offset: 0x18 */
  __I  uint32_t CMD_RSP3;                          /**< Command Response3, offset: 0x1C */
  __IO uint32_t DATA_BUFF_ACC_PORT;                /**< Data Buffer Access Port, offset: 0x20 */
  __I  uint32_t PRES_STATE;                        /**< Present State, offset: 0x24 */
  __IO uint32_t PROT_CTRL;                         /**< Protocol Control, offset: 0x28 */
  __IO uint32_t SYS_CTRL;                          /**< System Control, offset: 0x2C */
  __IO uint32_t INT_STATUS;                        /**< Interrupt Status, offset: 0x30 */
  __IO uint32_t INT_STATUS_EN;                     /**< Interrupt Status Enable, offset: 0x34 */
  __IO uint32_t INT_SIGNAL_EN;                     /**< Interrupt Signal Enable, offset: 0x38 */
  __IO uint32_t AUTOCMD12_ERR_STATUS;              /**< Auto CMD12 Error Status, offset: 0x3C */
  __IO uint32_t HOST_CTRL_CAP;                     /**< Host Controller Capabilities, offset: 0x40 */
  __IO uint32_t WTMK_LVL;                          /**< Watermark Level, offset: 0x44 */
  __IO uint32_t MIX_CTRL;                          /**< Mixer Control, offset: 0x48 */
       uint8_t RESERVED_0[4];
  __O  uint32_t FORCE_EVENT;                       /**< Force Event, offset: 0x50 */
  __I  uint32_t ADMA_ERR_STATUS;                   /**< ADMA Error Status Register, offset: 0x54 */
  __IO uint32_t ADMA_SYS_ADDR;                     /**< ADMA System Address, offset: 0x58 */
       uint8_t RESERVED_1[4];
  __IO uint32_t DLL_CTRL;                          /**< DLL (Delay Line) Control, offset: 0x60 */
  __I  uint32_t DLL_STATUS;                        /**< DLL Status, offset: 0x64 */
  __IO uint32_t CLK_TUNE_CTRL_STATUS;              /**< CLK Tuning Control and Status, offset: 0x68 */
       uint8_t RESERVED_2[4];
  __IO uint32_t STROBE_DLL_CTRL;                   /**< Strobe DLL Control, offset: 0x70 */
  __I  uint32_t STROBE_DLL_STATUS;                 /**< Strobe DLL Status, offset: 0x74 */
       uint8_t RESERVED_3[72];
  __IO uint32_t VEND_SPEC;                         /**< Vendor Specific Register, offset: 0xC0 */
  __IO uint32_t MMC_BOOT;                          /**< MMC Boot Register, offset: 0xC4 */
  __IO uint32_t VEND_SPEC2;                        /**< Vendor Specific 2 Register, offset: 0xC8 */
  __IO uint32_t TUNING_CTRL;                       /**< Tuning Control Register, offset: 0xCC */
} USDHC_Type;

/* ----------------------------------------------------------------------------
   -- USDHC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Masks USDHC Register Masks
 * @{
 */

/*! @name DS_ADDR - DMA System Address */
#define USDHC_DS_ADDR_DS_ADDR_MASK               (0xFFFFFFFCU)
#define USDHC_DS_ADDR_DS_ADDR_SHIFT              (2U)
#define USDHC_DS_ADDR_DS_ADDR(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_DS_ADDR_DS_ADDR_SHIFT)) & USDHC_DS_ADDR_DS_ADDR_MASK)

/*! @name BLK_ATT - Block Attributes */
#define USDHC_BLK_ATT_BLKSIZE_MASK               (0x1FFFU)
#define USDHC_BLK_ATT_BLKSIZE_SHIFT              (0U)
#define USDHC_BLK_ATT_BLKSIZE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_BLK_ATT_BLKSIZE_SHIFT)) & USDHC_BLK_ATT_BLKSIZE_MASK)
#define USDHC_BLK_ATT_BLKCNT_MASK                (0xFFFF0000U)
#define USDHC_BLK_ATT_BLKCNT_SHIFT               (16U)
#define USDHC_BLK_ATT_BLKCNT(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_BLK_ATT_BLKCNT_SHIFT)) & USDHC_BLK_ATT_BLKCNT_MASK)

/*! @name CMD_ARG - Command Argument */
#define USDHC_CMD_ARG_CMDARG_MASK                (0xFFFFFFFFU)
#define USDHC_CMD_ARG_CMDARG_SHIFT               (0U)
#define USDHC_CMD_ARG_CMDARG(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_ARG_CMDARG_SHIFT)) & USDHC_CMD_ARG_CMDARG_MASK)

/*! @name CMD_XFR_TYP - Command Transfer Type */
#define USDHC_CMD_XFR_TYP_RSPTYP_MASK            (0x30000U)
#define USDHC_CMD_XFR_TYP_RSPTYP_SHIFT           (16U)
#define USDHC_CMD_XFR_TYP_RSPTYP(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_RSPTYP_SHIFT)) & USDHC_CMD_XFR_TYP_RSPTYP_MASK)
#define USDHC_CMD_XFR_TYP_CCCEN_MASK             (0x80000U)
#define USDHC_CMD_XFR_TYP_CCCEN_SHIFT            (19U)
#define USDHC_CMD_XFR_TYP_CCCEN(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CCCEN_SHIFT)) & USDHC_CMD_XFR_TYP_CCCEN_MASK)
#define USDHC_CMD_XFR_TYP_CICEN_MASK             (0x100000U)
#define USDHC_CMD_XFR_TYP_CICEN_SHIFT            (20U)
#define USDHC_CMD_XFR_TYP_CICEN(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CICEN_SHIFT)) & USDHC_CMD_XFR_TYP_CICEN_MASK)
#define USDHC_CMD_XFR_TYP_DPSEL_MASK             (0x200000U)
#define USDHC_CMD_XFR_TYP_DPSEL_SHIFT            (21U)
#define USDHC_CMD_XFR_TYP_DPSEL(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_DPSEL_SHIFT)) & USDHC_CMD_XFR_TYP_DPSEL_MASK)
#define USDHC_CMD_XFR_TYP_CMDTYP_MASK            (0xC00000U)
#define USDHC_CMD_XFR_TYP_CMDTYP_SHIFT           (22U)
#define USDHC_CMD_XFR_TYP_CMDTYP(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CMDTYP_SHIFT)) & USDHC_CMD_XFR_TYP_CMDTYP_MASK)
#define USDHC_CMD_XFR_TYP_CMDINX_MASK            (0x3F000000U)
#define USDHC_CMD_XFR_TYP_CMDINX_SHIFT           (24U)
#define USDHC_CMD_XFR_TYP_CMDINX(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CMDINX_SHIFT)) & USDHC_CMD_XFR_TYP_CMDINX_MASK)

/*! @name CMD_RSP0 - Command Response0 */
#define USDHC_CMD_RSP0_CMDRSP0_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP0_CMDRSP0_SHIFT             (0U)
#define USDHC_CMD_RSP0_CMDRSP0(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP0_CMDRSP0_SHIFT)) & USDHC_CMD_RSP0_CMDRSP0_MASK)

/*! @name CMD_RSP1 - Command Response1 */
#define USDHC_CMD_RSP1_CMDRSP1_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP1_CMDRSP1_SHIFT             (0U)
#define USDHC_CMD_RSP1_CMDRSP1(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP1_CMDRSP1_SHIFT)) & USDHC_CMD_RSP1_CMDRSP1_MASK)

/*! @name CMD_RSP2 - Command Response2 */
#define USDHC_CMD_RSP2_CMDRSP2_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP2_CMDRSP2_SHIFT             (0U)
#define USDHC_CMD_RSP2_CMDRSP2(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP2_CMDRSP2_SHIFT)) & USDHC_CMD_RSP2_CMDRSP2_MASK)

/*! @name CMD_RSP3 - Command Response3 */
#define USDHC_CMD_RSP3_CMDRSP3_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP3_CMDRSP3_SHIFT             (0U)
#define USDHC_CMD_RSP3_CMDRSP3(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP3_CMDRSP3_SHIFT)) & USDHC_CMD_RSP3_CMDRSP3_MASK)

/*! @name DATA_BUFF_ACC_PORT - Data Buffer Access Port */
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK    (0xFFFFFFFFU)
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT   (0U)
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT)) & USDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK)

/*! @name PRES_STATE - Present State */
#define USDHC_PRES_STATE_CIHB_MASK               (0x1U)
#define USDHC_PRES_STATE_CIHB_SHIFT              (0U)
#define USDHC_PRES_STATE_CIHB(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_CIHB_SHIFT)) & USDHC_PRES_STATE_CIHB_MASK)
#define USDHC_PRES_STATE_CDIHB_MASK              (0x2U)
#define USDHC_PRES_STATE_CDIHB_SHIFT             (1U)
#define USDHC_PRES_STATE_CDIHB(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_CDIHB_SHIFT)) & USDHC_PRES_STATE_CDIHB_MASK)
#define USDHC_PRES_STATE_DLA_MASK                (0x4U)
#define USDHC_PRES_STATE_DLA_SHIFT               (2U)
#define USDHC_PRES_STATE_DLA(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_DLA_SHIFT)) & USDHC_PRES_STATE_DLA_MASK)
#define USDHC_PRES_STATE_SDSTB_MASK              (0x8U)
#define USDHC_PRES_STATE_SDSTB_SHIFT             (3U)
#define USDHC_PRES_STATE_SDSTB(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_SDSTB_SHIFT)) & USDHC_PRES_STATE_SDSTB_MASK)
#define USDHC_PRES_STATE_IPGOFF_MASK             (0x10U)
#define USDHC_PRES_STATE_IPGOFF_SHIFT            (4U)
#define USDHC_PRES_STATE_IPGOFF(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_IPGOFF_SHIFT)) & USDHC_PRES_STATE_IPGOFF_MASK)
#define USDHC_PRES_STATE_HCKOFF_MASK             (0x20U)
#define USDHC_PRES_STATE_HCKOFF_SHIFT            (5U)
#define USDHC_PRES_STATE_HCKOFF(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_HCKOFF_SHIFT)) & USDHC_PRES_STATE_HCKOFF_MASK)
#define USDHC_PRES_STATE_PEROFF_MASK             (0x40U)
#define USDHC_PRES_STATE_PEROFF_SHIFT            (6U)
#define USDHC_PRES_STATE_PEROFF(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_PEROFF_SHIFT)) & USDHC_PRES_STATE_PEROFF_MASK)
#define USDHC_PRES_STATE_SDOFF_MASK              (0x80U)
#define USDHC_PRES_STATE_SDOFF_SHIFT             (7U)
#define USDHC_PRES_STATE_SDOFF(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_SDOFF_SHIFT)) & USDHC_PRES_STATE_SDOFF_MASK)
#define USDHC_PRES_STATE_WTA_MASK                (0x100U)
#define USDHC_PRES_STATE_WTA_SHIFT               (8U)
#define USDHC_PRES_STATE_WTA(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_WTA_SHIFT)) & USDHC_PRES_STATE_WTA_MASK)
#define USDHC_PRES_STATE_RTA_MASK                (0x200U)
#define USDHC_PRES_STATE_RTA_SHIFT               (9U)
#define USDHC_PRES_STATE_RTA(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_RTA_SHIFT)) & USDHC_PRES_STATE_RTA_MASK)
#define USDHC_PRES_STATE_BWEN_MASK               (0x400U)
#define USDHC_PRES_STATE_BWEN_SHIFT              (10U)
#define USDHC_PRES_STATE_BWEN(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_BWEN_SHIFT)) & USDHC_PRES_STATE_BWEN_MASK)
#define USDHC_PRES_STATE_BREN_MASK               (0x800U)
#define USDHC_PRES_STATE_BREN_SHIFT              (11U)
#define USDHC_PRES_STATE_BREN(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_BREN_SHIFT)) & USDHC_PRES_STATE_BREN_MASK)
#define USDHC_PRES_STATE_RTR_MASK                (0x1000U)
#define USDHC_PRES_STATE_RTR_SHIFT               (12U)
#define USDHC_PRES_STATE_RTR(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_RTR_SHIFT)) & USDHC_PRES_STATE_RTR_MASK)
#define USDHC_PRES_STATE_TSCD_MASK               (0x8000U)
#define USDHC_PRES_STATE_TSCD_SHIFT              (15U)
#define USDHC_PRES_STATE_TSCD(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_TSCD_SHIFT)) & USDHC_PRES_STATE_TSCD_MASK)
#define USDHC_PRES_STATE_CINST_MASK              (0x10000U)
#define USDHC_PRES_STATE_CINST_SHIFT             (16U)
#define USDHC_PRES_STATE_CINST(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_CINST_SHIFT)) & USDHC_PRES_STATE_CINST_MASK)
#define USDHC_PRES_STATE_CDPL_MASK               (0x40000U)
#define USDHC_PRES_STATE_CDPL_SHIFT              (18U)
#define USDHC_PRES_STATE_CDPL(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_CDPL_SHIFT)) & USDHC_PRES_STATE_CDPL_MASK)
#define USDHC_PRES_STATE_WPSPL_MASK              (0x80000U)
#define USDHC_PRES_STATE_WPSPL_SHIFT             (19U)
#define USDHC_PRES_STATE_WPSPL(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_WPSPL_SHIFT)) & USDHC_PRES_STATE_WPSPL_MASK)
#define USDHC_PRES_STATE_CLSL_MASK               (0x800000U)
#define USDHC_PRES_STATE_CLSL_SHIFT              (23U)
#define USDHC_PRES_STATE_CLSL(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_CLSL_SHIFT)) & USDHC_PRES_STATE_CLSL_MASK)
#define USDHC_PRES_STATE_DLSL_MASK               (0xFF000000U)
#define USDHC_PRES_STATE_DLSL_SHIFT              (24U)
#define USDHC_PRES_STATE_DLSL(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_DLSL_SHIFT)) & USDHC_PRES_STATE_DLSL_MASK)

/*! @name PROT_CTRL - Protocol Control */
#define USDHC_PROT_CTRL_LCTL_MASK                (0x1U)
#define USDHC_PROT_CTRL_LCTL_SHIFT               (0U)
#define USDHC_PROT_CTRL_LCTL(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_LCTL_SHIFT)) & USDHC_PROT_CTRL_LCTL_MASK)
#define USDHC_PROT_CTRL_DTW_MASK                 (0x6U)
#define USDHC_PROT_CTRL_DTW_SHIFT                (1U)
#define USDHC_PROT_CTRL_DTW(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_DTW_SHIFT)) & USDHC_PROT_CTRL_DTW_MASK)
#define USDHC_PROT_CTRL_D3CD_MASK                (0x8U)
#define USDHC_PROT_CTRL_D3CD_SHIFT               (3U)
#define USDHC_PROT_CTRL_D3CD(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_D3CD_SHIFT)) & USDHC_PROT_CTRL_D3CD_MASK)
#define USDHC_PROT_CTRL_EMODE_MASK               (0x30U)
#define USDHC_PROT_CTRL_EMODE_SHIFT              (4U)
#define USDHC_PROT_CTRL_EMODE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_EMODE_SHIFT)) & USDHC_PROT_CTRL_EMODE_MASK)
#define USDHC_PROT_CTRL_CDTL_MASK                (0x40U)
#define USDHC_PROT_CTRL_CDTL_SHIFT               (6U)
#define USDHC_PROT_CTRL_CDTL(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_CDTL_SHIFT)) & USDHC_PROT_CTRL_CDTL_MASK)
#define USDHC_PROT_CTRL_CDSS_MASK                (0x80U)
#define USDHC_PROT_CTRL_CDSS_SHIFT               (7U)
#define USDHC_PROT_CTRL_CDSS(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_CDSS_SHIFT)) & USDHC_PROT_CTRL_CDSS_MASK)
#define USDHC_PROT_CTRL_DMASEL_MASK              (0x300U)
#define USDHC_PROT_CTRL_DMASEL_SHIFT             (8U)
#define USDHC_PROT_CTRL_DMASEL(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_DMASEL_SHIFT)) & USDHC_PROT_CTRL_DMASEL_MASK)
#define USDHC_PROT_CTRL_SABGREQ_MASK             (0x10000U)
#define USDHC_PROT_CTRL_SABGREQ_SHIFT            (16U)
#define USDHC_PROT_CTRL_SABGREQ(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_SABGREQ_SHIFT)) & USDHC_PROT_CTRL_SABGREQ_MASK)
#define USDHC_PROT_CTRL_CREQ_MASK                (0x20000U)
#define USDHC_PROT_CTRL_CREQ_SHIFT               (17U)
#define USDHC_PROT_CTRL_CREQ(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_CREQ_SHIFT)) & USDHC_PROT_CTRL_CREQ_MASK)
#define USDHC_PROT_CTRL_RWCTL_MASK               (0x40000U)
#define USDHC_PROT_CTRL_RWCTL_SHIFT              (18U)
#define USDHC_PROT_CTRL_RWCTL(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_RWCTL_SHIFT)) & USDHC_PROT_CTRL_RWCTL_MASK)
#define USDHC_PROT_CTRL_IABG_MASK                (0x80000U)
#define USDHC_PROT_CTRL_IABG_SHIFT               (19U)
#define USDHC_PROT_CTRL_IABG(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_IABG_SHIFT)) & USDHC_PROT_CTRL_IABG_MASK)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK_MASK     (0x100000U)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK_SHIFT    (20U)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_RD_DONE_NO_8CLK_SHIFT)) & USDHC_PROT_CTRL_RD_DONE_NO_8CLK_MASK)
#define USDHC_PROT_CTRL_WECINT_MASK              (0x1000000U)
#define USDHC_PROT_CTRL_WECINT_SHIFT             (24U)
#define USDHC_PROT_CTRL_WECINT(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_WECINT_SHIFT)) & USDHC_PROT_CTRL_WECINT_MASK)
#define USDHC_PROT_CTRL_WECINS_MASK              (0x2000000U)
#define USDHC_PROT_CTRL_WECINS_SHIFT             (25U)
#define USDHC_PROT_CTRL_WECINS(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_WECINS_SHIFT)) & USDHC_PROT_CTRL_WECINS_MASK)
#define USDHC_PROT_CTRL_WECRM_MASK               (0x4000000U)
#define USDHC_PROT_CTRL_WECRM_SHIFT              (26U)
#define USDHC_PROT_CTRL_WECRM(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_WECRM_SHIFT)) & USDHC_PROT_CTRL_WECRM_MASK)
#define USDHC_PROT_CTRL_BURST_LEN_EN_MASK        (0x38000000U)
#define USDHC_PROT_CTRL_BURST_LEN_EN_SHIFT       (27U)
#define USDHC_PROT_CTRL_BURST_LEN_EN(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_BURST_LEN_EN_SHIFT)) & USDHC_PROT_CTRL_BURST_LEN_EN_MASK)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD_MASK    (0x40000000U)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD_SHIFT   (30U)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_NON_EXACT_BLK_RD_SHIFT)) & USDHC_PROT_CTRL_NON_EXACT_BLK_RD_MASK)

/*! @name SYS_CTRL - System Control */
#define USDHC_SYS_CTRL_DVS_MASK                  (0xF0U)
#define USDHC_SYS_CTRL_DVS_SHIFT                 (4U)
#define USDHC_SYS_CTRL_DVS(x)                    (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_DVS_SHIFT)) & USDHC_SYS_CTRL_DVS_MASK)
#define USDHC_SYS_CTRL_SDCLKFS_MASK              (0xFF00U)
#define USDHC_SYS_CTRL_SDCLKFS_SHIFT             (8U)
#define USDHC_SYS_CTRL_SDCLKFS(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_SDCLKFS_SHIFT)) & USDHC_SYS_CTRL_SDCLKFS_MASK)
#define USDHC_SYS_CTRL_DTOCV_MASK                (0xF0000U)
#define USDHC_SYS_CTRL_DTOCV_SHIFT               (16U)
#define USDHC_SYS_CTRL_DTOCV(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_DTOCV_SHIFT)) & USDHC_SYS_CTRL_DTOCV_MASK)
#define USDHC_SYS_CTRL_IPP_RST_N_MASK            (0x800000U)
#define USDHC_SYS_CTRL_IPP_RST_N_SHIFT           (23U)
#define USDHC_SYS_CTRL_IPP_RST_N(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_IPP_RST_N_SHIFT)) & USDHC_SYS_CTRL_IPP_RST_N_MASK)
#define USDHC_SYS_CTRL_RSTA_MASK                 (0x1000000U)
#define USDHC_SYS_CTRL_RSTA_SHIFT                (24U)
#define USDHC_SYS_CTRL_RSTA(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_RSTA_SHIFT)) & USDHC_SYS_CTRL_RSTA_MASK)
#define USDHC_SYS_CTRL_RSTC_MASK                 (0x2000000U)
#define USDHC_SYS_CTRL_RSTC_SHIFT                (25U)
#define USDHC_SYS_CTRL_RSTC(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_RSTC_SHIFT)) & USDHC_SYS_CTRL_RSTC_MASK)
#define USDHC_SYS_CTRL_RSTD_MASK                 (0x4000000U)
#define USDHC_SYS_CTRL_RSTD_SHIFT                (26U)
#define USDHC_SYS_CTRL_RSTD(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_RSTD_SHIFT)) & USDHC_SYS_CTRL_RSTD_MASK)
#define USDHC_SYS_CTRL_INITA_MASK                (0x8000000U)
#define USDHC_SYS_CTRL_INITA_SHIFT               (27U)
#define USDHC_SYS_CTRL_INITA(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_INITA_SHIFT)) & USDHC_SYS_CTRL_INITA_MASK)
#define USDHC_SYS_CTRL_RSTT_MASK                 (0x10000000U)
#define USDHC_SYS_CTRL_RSTT_SHIFT                (28U)
#define USDHC_SYS_CTRL_RSTT(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_RSTT_SHIFT)) & USDHC_SYS_CTRL_RSTT_MASK)

/*! @name INT_STATUS - Interrupt Status */
#define USDHC_INT_STATUS_CC_MASK                 (0x1U)
#define USDHC_INT_STATUS_CC_SHIFT                (0U)
#define USDHC_INT_STATUS_CC(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_CC_SHIFT)) & USDHC_INT_STATUS_CC_MASK)
#define USDHC_INT_STATUS_TC_MASK                 (0x2U)
#define USDHC_INT_STATUS_TC_SHIFT                (1U)
#define USDHC_INT_STATUS_TC(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_TC_SHIFT)) & USDHC_INT_STATUS_TC_MASK)
#define USDHC_INT_STATUS_BGE_MASK                (0x4U)
#define USDHC_INT_STATUS_BGE_SHIFT               (2U)
#define USDHC_INT_STATUS_BGE(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_BGE_SHIFT)) & USDHC_INT_STATUS_BGE_MASK)
#define USDHC_INT_STATUS_DINT_MASK               (0x8U)
#define USDHC_INT_STATUS_DINT_SHIFT              (3U)
#define USDHC_INT_STATUS_DINT(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_DINT_SHIFT)) & USDHC_INT_STATUS_DINT_MASK)
#define USDHC_INT_STATUS_BWR_MASK                (0x10U)
#define USDHC_INT_STATUS_BWR_SHIFT               (4U)
#define USDHC_INT_STATUS_BWR(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_BWR_SHIFT)) & USDHC_INT_STATUS_BWR_MASK)
#define USDHC_INT_STATUS_BRR_MASK                (0x20U)
#define USDHC_INT_STATUS_BRR_SHIFT               (5U)
#define USDHC_INT_STATUS_BRR(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_BRR_SHIFT)) & USDHC_INT_STATUS_BRR_MASK)
#define USDHC_INT_STATUS_CINS_MASK               (0x40U)
#define USDHC_INT_STATUS_CINS_SHIFT              (6U)
#define USDHC_INT_STATUS_CINS(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_CINS_SHIFT)) & USDHC_INT_STATUS_CINS_MASK)
#define USDHC_INT_STATUS_CRM_MASK                (0x80U)
#define USDHC_INT_STATUS_CRM_SHIFT               (7U)
#define USDHC_INT_STATUS_CRM(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_CRM_SHIFT)) & USDHC_INT_STATUS_CRM_MASK)
#define USDHC_INT_STATUS_CINT_MASK               (0x100U)
#define USDHC_INT_STATUS_CINT_SHIFT              (8U)
#define USDHC_INT_STATUS_CINT(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_CINT_SHIFT)) & USDHC_INT_STATUS_CINT_MASK)
#define USDHC_INT_STATUS_RTE_MASK                (0x1000U)
#define USDHC_INT_STATUS_RTE_SHIFT               (12U)
#define USDHC_INT_STATUS_RTE(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_RTE_SHIFT)) & USDHC_INT_STATUS_RTE_MASK)
#define USDHC_INT_STATUS_TP_MASK                 (0x4000U)
#define USDHC_INT_STATUS_TP_SHIFT                (14U)
#define USDHC_INT_STATUS_TP(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_TP_SHIFT)) & USDHC_INT_STATUS_TP_MASK)
#define USDHC_INT_STATUS_CTOE_MASK               (0x10000U)
#define USDHC_INT_STATUS_CTOE_SHIFT              (16U)
#define USDHC_INT_STATUS_CTOE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_CTOE_SHIFT)) & USDHC_INT_STATUS_CTOE_MASK)
#define USDHC_INT_STATUS_CCE_MASK                (0x20000U)
#define USDHC_INT_STATUS_CCE_SHIFT               (17U)
#define USDHC_INT_STATUS_CCE(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_CCE_SHIFT)) & USDHC_INT_STATUS_CCE_MASK)
#define USDHC_INT_STATUS_CEBE_MASK               (0x40000U)
#define USDHC_INT_STATUS_CEBE_SHIFT              (18U)
#define USDHC_INT_STATUS_CEBE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_CEBE_SHIFT)) & USDHC_INT_STATUS_CEBE_MASK)
#define USDHC_INT_STATUS_CIE_MASK                (0x80000U)
#define USDHC_INT_STATUS_CIE_SHIFT               (19U)
#define USDHC_INT_STATUS_CIE(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_CIE_SHIFT)) & USDHC_INT_STATUS_CIE_MASK)
#define USDHC_INT_STATUS_DTOE_MASK               (0x100000U)
#define USDHC_INT_STATUS_DTOE_SHIFT              (20U)
#define USDHC_INT_STATUS_DTOE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_DTOE_SHIFT)) & USDHC_INT_STATUS_DTOE_MASK)
#define USDHC_INT_STATUS_DCE_MASK                (0x200000U)
#define USDHC_INT_STATUS_DCE_SHIFT               (21U)
#define USDHC_INT_STATUS_DCE(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_DCE_SHIFT)) & USDHC_INT_STATUS_DCE_MASK)
#define USDHC_INT_STATUS_DEBE_MASK               (0x400000U)
#define USDHC_INT_STATUS_DEBE_SHIFT              (22U)
#define USDHC_INT_STATUS_DEBE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_DEBE_SHIFT)) & USDHC_INT_STATUS_DEBE_MASK)
#define USDHC_INT_STATUS_AC12E_MASK              (0x1000000U)
#define USDHC_INT_STATUS_AC12E_SHIFT             (24U)
#define USDHC_INT_STATUS_AC12E(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_AC12E_SHIFT)) & USDHC_INT_STATUS_AC12E_MASK)
#define USDHC_INT_STATUS_TNE_MASK                (0x4000000U)
#define USDHC_INT_STATUS_TNE_SHIFT               (26U)
#define USDHC_INT_STATUS_TNE(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_TNE_SHIFT)) & USDHC_INT_STATUS_TNE_MASK)
#define USDHC_INT_STATUS_DMAE_MASK               (0x10000000U)
#define USDHC_INT_STATUS_DMAE_SHIFT              (28U)
#define USDHC_INT_STATUS_DMAE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_DMAE_SHIFT)) & USDHC_INT_STATUS_DMAE_MASK)

/*! @name INT_STATUS_EN - Interrupt Status Enable */
#define USDHC_INT_STATUS_EN_CCSEN_MASK           (0x1U)
#define USDHC_INT_STATUS_EN_CCSEN_SHIFT          (0U)
#define USDHC_INT_STATUS_EN_CCSEN(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_CCSEN_SHIFT)) & USDHC_INT_STATUS_EN_CCSEN_MASK)
#define USDHC_INT_STATUS_EN_TCSEN_MASK           (0x2U)
#define USDHC_INT_STATUS_EN_TCSEN_SHIFT          (1U)
#define USDHC_INT_STATUS_EN_TCSEN(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_TCSEN_SHIFT)) & USDHC_INT_STATUS_EN_TCSEN_MASK)
#define USDHC_INT_STATUS_EN_BGESEN_MASK          (0x4U)
#define USDHC_INT_STATUS_EN_BGESEN_SHIFT         (2U)
#define USDHC_INT_STATUS_EN_BGESEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_BGESEN_SHIFT)) & USDHC_INT_STATUS_EN_BGESEN_MASK)
#define USDHC_INT_STATUS_EN_DINTSEN_MASK         (0x8U)
#define USDHC_INT_STATUS_EN_DINTSEN_SHIFT        (3U)
#define USDHC_INT_STATUS_EN_DINTSEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_DINTSEN_SHIFT)) & USDHC_INT_STATUS_EN_DINTSEN_MASK)
#define USDHC_INT_STATUS_EN_BWRSEN_MASK          (0x10U)
#define USDHC_INT_STATUS_EN_BWRSEN_SHIFT         (4U)
#define USDHC_INT_STATUS_EN_BWRSEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_BWRSEN_SHIFT)) & USDHC_INT_STATUS_EN_BWRSEN_MASK)
#define USDHC_INT_STATUS_EN_BRRSEN_MASK          (0x20U)
#define USDHC_INT_STATUS_EN_BRRSEN_SHIFT         (5U)
#define USDHC_INT_STATUS_EN_BRRSEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_BRRSEN_SHIFT)) & USDHC_INT_STATUS_EN_BRRSEN_MASK)
#define USDHC_INT_STATUS_EN_CINSSEN_MASK         (0x40U)
#define USDHC_INT_STATUS_EN_CINSSEN_SHIFT        (6U)
#define USDHC_INT_STATUS_EN_CINSSEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_CINSSEN_SHIFT)) & USDHC_INT_STATUS_EN_CINSSEN_MASK)
#define USDHC_INT_STATUS_EN_CRMSEN_MASK          (0x80U)
#define USDHC_INT_STATUS_EN_CRMSEN_SHIFT         (7U)
#define USDHC_INT_STATUS_EN_CRMSEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_CRMSEN_SHIFT)) & USDHC_INT_STATUS_EN_CRMSEN_MASK)
#define USDHC_INT_STATUS_EN_CINTSEN_MASK         (0x100U)
#define USDHC_INT_STATUS_EN_CINTSEN_SHIFT        (8U)
#define USDHC_INT_STATUS_EN_CINTSEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_CINTSEN_SHIFT)) & USDHC_INT_STATUS_EN_CINTSEN_MASK)
#define USDHC_INT_STATUS_EN_RTESEN_MASK          (0x1000U)
#define USDHC_INT_STATUS_EN_RTESEN_SHIFT         (12U)
#define USDHC_INT_STATUS_EN_RTESEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_RTESEN_SHIFT)) & USDHC_INT_STATUS_EN_RTESEN_MASK)
#define USDHC_INT_STATUS_EN_TPSEN_MASK           (0x4000U)
#define USDHC_INT_STATUS_EN_TPSEN_SHIFT          (14U)
#define USDHC_INT_STATUS_EN_TPSEN(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_TPSEN_SHIFT)) & USDHC_INT_STATUS_EN_TPSEN_MASK)
#define USDHC_INT_STATUS_EN_CTOESEN_MASK         (0x10000U)
#define USDHC_INT_STATUS_EN_CTOESEN_SHIFT        (16U)
#define USDHC_INT_STATUS_EN_CTOESEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_CTOESEN_SHIFT)) & USDHC_INT_STATUS_EN_CTOESEN_MASK)
#define USDHC_INT_STATUS_EN_CCESEN_MASK          (0x20000U)
#define USDHC_INT_STATUS_EN_CCESEN_SHIFT         (17U)
#define USDHC_INT_STATUS_EN_CCESEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_CCESEN_SHIFT)) & USDHC_INT_STATUS_EN_CCESEN_MASK)
#define USDHC_INT_STATUS_EN_CEBESEN_MASK         (0x40000U)
#define USDHC_INT_STATUS_EN_CEBESEN_SHIFT        (18U)
#define USDHC_INT_STATUS_EN_CEBESEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_CEBESEN_SHIFT)) & USDHC_INT_STATUS_EN_CEBESEN_MASK)
#define USDHC_INT_STATUS_EN_CIESEN_MASK          (0x80000U)
#define USDHC_INT_STATUS_EN_CIESEN_SHIFT         (19U)
#define USDHC_INT_STATUS_EN_CIESEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_CIESEN_SHIFT)) & USDHC_INT_STATUS_EN_CIESEN_MASK)
#define USDHC_INT_STATUS_EN_DTOESEN_MASK         (0x100000U)
#define USDHC_INT_STATUS_EN_DTOESEN_SHIFT        (20U)
#define USDHC_INT_STATUS_EN_DTOESEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_DTOESEN_SHIFT)) & USDHC_INT_STATUS_EN_DTOESEN_MASK)
#define USDHC_INT_STATUS_EN_DCESEN_MASK          (0x200000U)
#define USDHC_INT_STATUS_EN_DCESEN_SHIFT         (21U)
#define USDHC_INT_STATUS_EN_DCESEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_DCESEN_SHIFT)) & USDHC_INT_STATUS_EN_DCESEN_MASK)
#define USDHC_INT_STATUS_EN_DEBESEN_MASK         (0x400000U)
#define USDHC_INT_STATUS_EN_DEBESEN_SHIFT        (22U)
#define USDHC_INT_STATUS_EN_DEBESEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_DEBESEN_SHIFT)) & USDHC_INT_STATUS_EN_DEBESEN_MASK)
#define USDHC_INT_STATUS_EN_AC12ESEN_MASK        (0x1000000U)
#define USDHC_INT_STATUS_EN_AC12ESEN_SHIFT       (24U)
#define USDHC_INT_STATUS_EN_AC12ESEN(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_AC12ESEN_SHIFT)) & USDHC_INT_STATUS_EN_AC12ESEN_MASK)
#define USDHC_INT_STATUS_EN_TNESEN_MASK          (0x4000000U)
#define USDHC_INT_STATUS_EN_TNESEN_SHIFT         (26U)
#define USDHC_INT_STATUS_EN_TNESEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_TNESEN_SHIFT)) & USDHC_INT_STATUS_EN_TNESEN_MASK)
#define USDHC_INT_STATUS_EN_DMAESEN_MASK         (0x10000000U)
#define USDHC_INT_STATUS_EN_DMAESEN_SHIFT        (28U)
#define USDHC_INT_STATUS_EN_DMAESEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_STATUS_EN_DMAESEN_SHIFT)) & USDHC_INT_STATUS_EN_DMAESEN_MASK)

/*! @name INT_SIGNAL_EN - Interrupt Signal Enable */
#define USDHC_INT_SIGNAL_EN_CCIEN_MASK           (0x1U)
#define USDHC_INT_SIGNAL_EN_CCIEN_SHIFT          (0U)
#define USDHC_INT_SIGNAL_EN_CCIEN(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_CCIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_CCIEN_MASK)
#define USDHC_INT_SIGNAL_EN_TCIEN_MASK           (0x2U)
#define USDHC_INT_SIGNAL_EN_TCIEN_SHIFT          (1U)
#define USDHC_INT_SIGNAL_EN_TCIEN(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_TCIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_TCIEN_MASK)
#define USDHC_INT_SIGNAL_EN_BGEIEN_MASK          (0x4U)
#define USDHC_INT_SIGNAL_EN_BGEIEN_SHIFT         (2U)
#define USDHC_INT_SIGNAL_EN_BGEIEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_BGEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_BGEIEN_MASK)
#define USDHC_INT_SIGNAL_EN_DINTIEN_MASK         (0x8U)
#define USDHC_INT_SIGNAL_EN_DINTIEN_SHIFT        (3U)
#define USDHC_INT_SIGNAL_EN_DINTIEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_DINTIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_DINTIEN_MASK)
#define USDHC_INT_SIGNAL_EN_BWRIEN_MASK          (0x10U)
#define USDHC_INT_SIGNAL_EN_BWRIEN_SHIFT         (4U)
#define USDHC_INT_SIGNAL_EN_BWRIEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_BWRIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_BWRIEN_MASK)
#define USDHC_INT_SIGNAL_EN_BRRIEN_MASK          (0x20U)
#define USDHC_INT_SIGNAL_EN_BRRIEN_SHIFT         (5U)
#define USDHC_INT_SIGNAL_EN_BRRIEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_BRRIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_BRRIEN_MASK)
#define USDHC_INT_SIGNAL_EN_CINSIEN_MASK         (0x40U)
#define USDHC_INT_SIGNAL_EN_CINSIEN_SHIFT        (6U)
#define USDHC_INT_SIGNAL_EN_CINSIEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_CINSIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_CINSIEN_MASK)
#define USDHC_INT_SIGNAL_EN_CRMIEN_MASK          (0x80U)
#define USDHC_INT_SIGNAL_EN_CRMIEN_SHIFT         (7U)
#define USDHC_INT_SIGNAL_EN_CRMIEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_CRMIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_CRMIEN_MASK)
#define USDHC_INT_SIGNAL_EN_CINTIEN_MASK         (0x100U)
#define USDHC_INT_SIGNAL_EN_CINTIEN_SHIFT        (8U)
#define USDHC_INT_SIGNAL_EN_CINTIEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_CINTIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_CINTIEN_MASK)
#define USDHC_INT_SIGNAL_EN_RTEIEN_MASK          (0x1000U)
#define USDHC_INT_SIGNAL_EN_RTEIEN_SHIFT         (12U)
#define USDHC_INT_SIGNAL_EN_RTEIEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_RTEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_RTEIEN_MASK)
#define USDHC_INT_SIGNAL_EN_TPIEN_MASK           (0x4000U)
#define USDHC_INT_SIGNAL_EN_TPIEN_SHIFT          (14U)
#define USDHC_INT_SIGNAL_EN_TPIEN(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_TPIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_TPIEN_MASK)
#define USDHC_INT_SIGNAL_EN_CTOEIEN_MASK         (0x10000U)
#define USDHC_INT_SIGNAL_EN_CTOEIEN_SHIFT        (16U)
#define USDHC_INT_SIGNAL_EN_CTOEIEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_CTOEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_CTOEIEN_MASK)
#define USDHC_INT_SIGNAL_EN_CCEIEN_MASK          (0x20000U)
#define USDHC_INT_SIGNAL_EN_CCEIEN_SHIFT         (17U)
#define USDHC_INT_SIGNAL_EN_CCEIEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_CCEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_CCEIEN_MASK)
#define USDHC_INT_SIGNAL_EN_CEBEIEN_MASK         (0x40000U)
#define USDHC_INT_SIGNAL_EN_CEBEIEN_SHIFT        (18U)
#define USDHC_INT_SIGNAL_EN_CEBEIEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_CEBEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_CEBEIEN_MASK)
#define USDHC_INT_SIGNAL_EN_CIEIEN_MASK          (0x80000U)
#define USDHC_INT_SIGNAL_EN_CIEIEN_SHIFT         (19U)
#define USDHC_INT_SIGNAL_EN_CIEIEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_CIEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_CIEIEN_MASK)
#define USDHC_INT_SIGNAL_EN_DTOEIEN_MASK         (0x100000U)
#define USDHC_INT_SIGNAL_EN_DTOEIEN_SHIFT        (20U)
#define USDHC_INT_SIGNAL_EN_DTOEIEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_DTOEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_DTOEIEN_MASK)
#define USDHC_INT_SIGNAL_EN_DCEIEN_MASK          (0x200000U)
#define USDHC_INT_SIGNAL_EN_DCEIEN_SHIFT         (21U)
#define USDHC_INT_SIGNAL_EN_DCEIEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_DCEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_DCEIEN_MASK)
#define USDHC_INT_SIGNAL_EN_DEBEIEN_MASK         (0x400000U)
#define USDHC_INT_SIGNAL_EN_DEBEIEN_SHIFT        (22U)
#define USDHC_INT_SIGNAL_EN_DEBEIEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_DEBEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_DEBEIEN_MASK)
#define USDHC_INT_SIGNAL_EN_AC12EIEN_MASK        (0x1000000U)
#define USDHC_INT_SIGNAL_EN_AC12EIEN_SHIFT       (24U)
#define USDHC_INT_SIGNAL_EN_AC12EIEN(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_AC12EIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_AC12EIEN_MASK)
#define USDHC_INT_SIGNAL_EN_TNEIEN_MASK          (0x4000000U)
#define USDHC_INT_SIGNAL_EN_TNEIEN_SHIFT         (26U)
#define USDHC_INT_SIGNAL_EN_TNEIEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_TNEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_TNEIEN_MASK)
#define USDHC_INT_SIGNAL_EN_DMAEIEN_MASK         (0x10000000U)
#define USDHC_INT_SIGNAL_EN_DMAEIEN_SHIFT        (28U)
#define USDHC_INT_SIGNAL_EN_DMAEIEN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_INT_SIGNAL_EN_DMAEIEN_SHIFT)) & USDHC_INT_SIGNAL_EN_DMAEIEN_MASK)

/*! @name AUTOCMD12_ERR_STATUS - Auto CMD12 Error Status */
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE_MASK   (0x1U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE_SHIFT  (0U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_AUTOCMD12_ERR_STATUS_AC12NE_SHIFT)) & USDHC_AUTOCMD12_ERR_STATUS_AC12NE_MASK)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_MASK  (0x2U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_SHIFT (1U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_SHIFT)) & USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_MASK)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_MASK  (0x4U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_SHIFT (2U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_SHIFT)) & USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_MASK)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE_MASK   (0x8U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE_SHIFT  (3U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_AUTOCMD12_ERR_STATUS_AC12CE_SHIFT)) & USDHC_AUTOCMD12_ERR_STATUS_AC12CE_MASK)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE_MASK   (0x10U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE_SHIFT  (4U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_AUTOCMD12_ERR_STATUS_AC12IE_SHIFT)) & USDHC_AUTOCMD12_ERR_STATUS_AC12IE_MASK)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_MASK (0x80U)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_SHIFT (7U)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E(x)  (((uint32_t)(((uint32_t)(x)) << USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_SHIFT)) & USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_MASK)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_MASK (0x400000U)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_SHIFT (22U)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING(x) (((uint32_t)(((uint32_t)(x)) << USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_SHIFT)) & USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_MASK)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_MASK (0x800000U)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_SHIFT (23U)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_SHIFT)) & USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_MASK)

/*! @name HOST_CTRL_CAP - Host Controller Capabilities */
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_MASK   (0x1U)
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_SHIFT  (0U)
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_SHIFT)) & USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_MASK)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_MASK  (0x2U)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_SHIFT (1U)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_SHIFT)) & USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_MASK)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_MASK   (0x4U)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_SHIFT  (2U)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_SHIFT)) & USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_MASK)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK (0xF00U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT (8U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING(x) (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT)) & USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_MASK (0x2000U)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_SHIFT (13U)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50(x)  (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_SHIFT)) & USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_MASK)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK   (0xC000U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT  (14U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT)) & USDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK)
#define USDHC_HOST_CTRL_CAP_MBL_MASK             (0x70000U)
#define USDHC_HOST_CTRL_CAP_MBL_SHIFT            (16U)
#define USDHC_HOST_CTRL_CAP_MBL(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_MBL_SHIFT)) & USDHC_HOST_CTRL_CAP_MBL_MASK)
#define USDHC_HOST_CTRL_CAP_ADMAS_MASK           (0x100000U)
#define USDHC_HOST_CTRL_CAP_ADMAS_SHIFT          (20U)
#define USDHC_HOST_CTRL_CAP_ADMAS(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_ADMAS_SHIFT)) & USDHC_HOST_CTRL_CAP_ADMAS_MASK)
#define USDHC_HOST_CTRL_CAP_HSS_MASK             (0x200000U)
#define USDHC_HOST_CTRL_CAP_HSS_SHIFT            (21U)
#define USDHC_HOST_CTRL_CAP_HSS(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_HSS_SHIFT)) & USDHC_HOST_CTRL_CAP_HSS_MASK)
#define USDHC_HOST_CTRL_CAP_DMAS_MASK            (0x400000U)
#define USDHC_HOST_CTRL_CAP_DMAS_SHIFT           (22U)
#define USDHC_HOST_CTRL_CAP_DMAS(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_DMAS_SHIFT)) & USDHC_HOST_CTRL_CAP_DMAS_MASK)
#define USDHC_HOST_CTRL_CAP_SRS_MASK             (0x800000U)
#define USDHC_HOST_CTRL_CAP_SRS_SHIFT            (23U)
#define USDHC_HOST_CTRL_CAP_SRS(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_SRS_SHIFT)) & USDHC_HOST_CTRL_CAP_SRS_MASK)
#define USDHC_HOST_CTRL_CAP_VS33_MASK            (0x1000000U)
#define USDHC_HOST_CTRL_CAP_VS33_SHIFT           (24U)
#define USDHC_HOST_CTRL_CAP_VS33(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_VS33_SHIFT)) & USDHC_HOST_CTRL_CAP_VS33_MASK)
#define USDHC_HOST_CTRL_CAP_VS30_MASK            (0x2000000U)
#define USDHC_HOST_CTRL_CAP_VS30_SHIFT           (25U)
#define USDHC_HOST_CTRL_CAP_VS30(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_VS30_SHIFT)) & USDHC_HOST_CTRL_CAP_VS30_MASK)
#define USDHC_HOST_CTRL_CAP_VS18_MASK            (0x4000000U)
#define USDHC_HOST_CTRL_CAP_VS18_SHIFT           (26U)
#define USDHC_HOST_CTRL_CAP_VS18(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_VS18_SHIFT)) & USDHC_HOST_CTRL_CAP_VS18_MASK)

/*! @name WTMK_LVL - Watermark Level */
#define USDHC_WTMK_LVL_RD_WML_MASK               (0xFFU)
#define USDHC_WTMK_LVL_RD_WML_SHIFT              (0U)
#define USDHC_WTMK_LVL_RD_WML(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_RD_WML_SHIFT)) & USDHC_WTMK_LVL_RD_WML_MASK)
#define USDHC_WTMK_LVL_RD_BRST_LEN_MASK          (0x1F00U)
#define USDHC_WTMK_LVL_RD_BRST_LEN_SHIFT         (8U)
#define USDHC_WTMK_LVL_RD_BRST_LEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_RD_BRST_LEN_SHIFT)) & USDHC_WTMK_LVL_RD_BRST_LEN_MASK)
#define USDHC_WTMK_LVL_WR_WML_MASK               (0xFF0000U)
#define USDHC_WTMK_LVL_WR_WML_SHIFT              (16U)
#define USDHC_WTMK_LVL_WR_WML(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_WR_WML_SHIFT)) & USDHC_WTMK_LVL_WR_WML_MASK)
#define USDHC_WTMK_LVL_WR_BRST_LEN_MASK          (0x1F000000U)
#define USDHC_WTMK_LVL_WR_BRST_LEN_SHIFT         (24U)
#define USDHC_WTMK_LVL_WR_BRST_LEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_WR_BRST_LEN_SHIFT)) & USDHC_WTMK_LVL_WR_BRST_LEN_MASK)

/*! @name MIX_CTRL - Mixer Control */
#define USDHC_MIX_CTRL_DMAEN_MASK                (0x1U)
#define USDHC_MIX_CTRL_DMAEN_SHIFT               (0U)
#define USDHC_MIX_CTRL_DMAEN(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_DMAEN_SHIFT)) & USDHC_MIX_CTRL_DMAEN_MASK)
#define USDHC_MIX_CTRL_BCEN_MASK                 (0x2U)
#define USDHC_MIX_CTRL_BCEN_SHIFT                (1U)
#define USDHC_MIX_CTRL_BCEN(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_BCEN_SHIFT)) & USDHC_MIX_CTRL_BCEN_MASK)
#define USDHC_MIX_CTRL_AC12EN_MASK               (0x4U)
#define USDHC_MIX_CTRL_AC12EN_SHIFT              (2U)
#define USDHC_MIX_CTRL_AC12EN(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_AC12EN_SHIFT)) & USDHC_MIX_CTRL_AC12EN_MASK)
#define USDHC_MIX_CTRL_DDR_EN_MASK               (0x8U)
#define USDHC_MIX_CTRL_DDR_EN_SHIFT              (3U)
#define USDHC_MIX_CTRL_DDR_EN(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_DDR_EN_SHIFT)) & USDHC_MIX_CTRL_DDR_EN_MASK)
#define USDHC_MIX_CTRL_DTDSEL_MASK               (0x10U)
#define USDHC_MIX_CTRL_DTDSEL_SHIFT              (4U)
#define USDHC_MIX_CTRL_DTDSEL(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_DTDSEL_SHIFT)) & USDHC_MIX_CTRL_DTDSEL_MASK)
#define USDHC_MIX_CTRL_MSBSEL_MASK               (0x20U)
#define USDHC_MIX_CTRL_MSBSEL_SHIFT              (5U)
#define USDHC_MIX_CTRL_MSBSEL(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_MSBSEL_SHIFT)) & USDHC_MIX_CTRL_MSBSEL_MASK)
#define USDHC_MIX_CTRL_NIBBLE_POS_MASK           (0x40U)
#define USDHC_MIX_CTRL_NIBBLE_POS_SHIFT          (6U)
#define USDHC_MIX_CTRL_NIBBLE_POS(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_NIBBLE_POS_SHIFT)) & USDHC_MIX_CTRL_NIBBLE_POS_MASK)
#define USDHC_MIX_CTRL_AC23EN_MASK               (0x80U)
#define USDHC_MIX_CTRL_AC23EN_SHIFT              (7U)
#define USDHC_MIX_CTRL_AC23EN(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_AC23EN_SHIFT)) & USDHC_MIX_CTRL_AC23EN_MASK)
#define USDHC_MIX_CTRL_EXE_TUNE_MASK             (0x400000U)
#define USDHC_MIX_CTRL_EXE_TUNE_SHIFT            (22U)
#define USDHC_MIX_CTRL_EXE_TUNE(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_EXE_TUNE_SHIFT)) & USDHC_MIX_CTRL_EXE_TUNE_MASK)
#define USDHC_MIX_CTRL_SMP_CLK_SEL_MASK          (0x800000U)
#define USDHC_MIX_CTRL_SMP_CLK_SEL_SHIFT         (23U)
#define USDHC_MIX_CTRL_SMP_CLK_SEL(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_SMP_CLK_SEL_SHIFT)) & USDHC_MIX_CTRL_SMP_CLK_SEL_MASK)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN_MASK         (0x1000000U)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN_SHIFT        (24U)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_AUTO_TUNE_EN_SHIFT)) & USDHC_MIX_CTRL_AUTO_TUNE_EN_MASK)
#define USDHC_MIX_CTRL_FBCLK_SEL_MASK            (0x2000000U)
#define USDHC_MIX_CTRL_FBCLK_SEL_SHIFT           (25U)
#define USDHC_MIX_CTRL_FBCLK_SEL(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_FBCLK_SEL_SHIFT)) & USDHC_MIX_CTRL_FBCLK_SEL_MASK)
#define USDHC_MIX_CTRL_HS400_MODE_MASK           (0x4000000U)
#define USDHC_MIX_CTRL_HS400_MODE_SHIFT          (26U)
#define USDHC_MIX_CTRL_HS400_MODE(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_MIX_CTRL_HS400_MODE_SHIFT)) & USDHC_MIX_CTRL_HS400_MODE_MASK)

/*! @name FORCE_EVENT - Force Event */
#define USDHC_FORCE_EVENT_FEVTAC12NE_MASK        (0x1U)
#define USDHC_FORCE_EVENT_FEVTAC12NE_SHIFT       (0U)
#define USDHC_FORCE_EVENT_FEVTAC12NE(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTAC12NE_SHIFT)) & USDHC_FORCE_EVENT_FEVTAC12NE_MASK)
#define USDHC_FORCE_EVENT_FEVTAC12TOE_MASK       (0x2U)
#define USDHC_FORCE_EVENT_FEVTAC12TOE_SHIFT      (1U)
#define USDHC_FORCE_EVENT_FEVTAC12TOE(x)         (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTAC12TOE_SHIFT)) & USDHC_FORCE_EVENT_FEVTAC12TOE_MASK)
#define USDHC_FORCE_EVENT_FEVTAC12CE_MASK        (0x4U)
#define USDHC_FORCE_EVENT_FEVTAC12CE_SHIFT       (2U)
#define USDHC_FORCE_EVENT_FEVTAC12CE(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTAC12CE_SHIFT)) & USDHC_FORCE_EVENT_FEVTAC12CE_MASK)
#define USDHC_FORCE_EVENT_FEVTAC12EBE_MASK       (0x8U)
#define USDHC_FORCE_EVENT_FEVTAC12EBE_SHIFT      (3U)
#define USDHC_FORCE_EVENT_FEVTAC12EBE(x)         (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTAC12EBE_SHIFT)) & USDHC_FORCE_EVENT_FEVTAC12EBE_MASK)
#define USDHC_FORCE_EVENT_FEVTAC12IE_MASK        (0x10U)
#define USDHC_FORCE_EVENT_FEVTAC12IE_SHIFT       (4U)
#define USDHC_FORCE_EVENT_FEVTAC12IE(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTAC12IE_SHIFT)) & USDHC_FORCE_EVENT_FEVTAC12IE_MASK)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E_MASK     (0x80U)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E_SHIFT    (7U)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTCNIBAC12E_SHIFT)) & USDHC_FORCE_EVENT_FEVTCNIBAC12E_MASK)
#define USDHC_FORCE_EVENT_FEVTCTOE_MASK          (0x10000U)
#define USDHC_FORCE_EVENT_FEVTCTOE_SHIFT         (16U)
#define USDHC_FORCE_EVENT_FEVTCTOE(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTCTOE_SHIFT)) & USDHC_FORCE_EVENT_FEVTCTOE_MASK)
#define USDHC_FORCE_EVENT_FEVTCCE_MASK           (0x20000U)
#define USDHC_FORCE_EVENT_FEVTCCE_SHIFT          (17U)
#define USDHC_FORCE_EVENT_FEVTCCE(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTCCE_SHIFT)) & USDHC_FORCE_EVENT_FEVTCCE_MASK)
#define USDHC_FORCE_EVENT_FEVTCEBE_MASK          (0x40000U)
#define USDHC_FORCE_EVENT_FEVTCEBE_SHIFT         (18U)
#define USDHC_FORCE_EVENT_FEVTCEBE(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTCEBE_SHIFT)) & USDHC_FORCE_EVENT_FEVTCEBE_MASK)
#define USDHC_FORCE_EVENT_FEVTCIE_MASK           (0x80000U)
#define USDHC_FORCE_EVENT_FEVTCIE_SHIFT          (19U)
#define USDHC_FORCE_EVENT_FEVTCIE(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTCIE_SHIFT)) & USDHC_FORCE_EVENT_FEVTCIE_MASK)
#define USDHC_FORCE_EVENT_FEVTDTOE_MASK          (0x100000U)
#define USDHC_FORCE_EVENT_FEVTDTOE_SHIFT         (20U)
#define USDHC_FORCE_EVENT_FEVTDTOE(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTDTOE_SHIFT)) & USDHC_FORCE_EVENT_FEVTDTOE_MASK)
#define USDHC_FORCE_EVENT_FEVTDCE_MASK           (0x200000U)
#define USDHC_FORCE_EVENT_FEVTDCE_SHIFT          (21U)
#define USDHC_FORCE_EVENT_FEVTDCE(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTDCE_SHIFT)) & USDHC_FORCE_EVENT_FEVTDCE_MASK)
#define USDHC_FORCE_EVENT_FEVTDEBE_MASK          (0x400000U)
#define USDHC_FORCE_EVENT_FEVTDEBE_SHIFT         (22U)
#define USDHC_FORCE_EVENT_FEVTDEBE(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTDEBE_SHIFT)) & USDHC_FORCE_EVENT_FEVTDEBE_MASK)
#define USDHC_FORCE_EVENT_FEVTAC12E_MASK         (0x1000000U)
#define USDHC_FORCE_EVENT_FEVTAC12E_SHIFT        (24U)
#define USDHC_FORCE_EVENT_FEVTAC12E(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTAC12E_SHIFT)) & USDHC_FORCE_EVENT_FEVTAC12E_MASK)
#define USDHC_FORCE_EVENT_FEVTTNE_MASK           (0x4000000U)
#define USDHC_FORCE_EVENT_FEVTTNE_SHIFT          (26U)
#define USDHC_FORCE_EVENT_FEVTTNE(x)             (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTTNE_SHIFT)) & USDHC_FORCE_EVENT_FEVTTNE_MASK)
#define USDHC_FORCE_EVENT_FEVTDMAE_MASK          (0x10000000U)
#define USDHC_FORCE_EVENT_FEVTDMAE_SHIFT         (28U)
#define USDHC_FORCE_EVENT_FEVTDMAE(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTDMAE_SHIFT)) & USDHC_FORCE_EVENT_FEVTDMAE_MASK)
#define USDHC_FORCE_EVENT_FEVTCINT_MASK          (0x80000000U)
#define USDHC_FORCE_EVENT_FEVTCINT_SHIFT         (31U)
#define USDHC_FORCE_EVENT_FEVTCINT(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_FORCE_EVENT_FEVTCINT_SHIFT)) & USDHC_FORCE_EVENT_FEVTCINT_MASK)

/*! @name ADMA_ERR_STATUS - ADMA Error Status Register */
#define USDHC_ADMA_ERR_STATUS_ADMAES_MASK        (0x3U)
#define USDHC_ADMA_ERR_STATUS_ADMAES_SHIFT       (0U)
#define USDHC_ADMA_ERR_STATUS_ADMAES(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_ERR_STATUS_ADMAES_SHIFT)) & USDHC_ADMA_ERR_STATUS_ADMAES_MASK)
#define USDHC_ADMA_ERR_STATUS_ADMALME_MASK       (0x4U)
#define USDHC_ADMA_ERR_STATUS_ADMALME_SHIFT      (2U)
#define USDHC_ADMA_ERR_STATUS_ADMALME(x)         (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_ERR_STATUS_ADMALME_SHIFT)) & USDHC_ADMA_ERR_STATUS_ADMALME_MASK)
#define USDHC_ADMA_ERR_STATUS_ADMADCE_MASK       (0x8U)
#define USDHC_ADMA_ERR_STATUS_ADMADCE_SHIFT      (3U)
#define USDHC_ADMA_ERR_STATUS_ADMADCE(x)         (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_ERR_STATUS_ADMADCE_SHIFT)) & USDHC_ADMA_ERR_STATUS_ADMADCE_MASK)

/*! @name ADMA_SYS_ADDR - ADMA System Address */
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK        (0xFFFFFFFCU)
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT       (2U)
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT)) & USDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK)

/*! @name DLL_CTRL - DLL (Delay Line) Control */
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE_MASK      (0x1U)
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE_SHIFT     (0U)
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE(x)        (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_ENABLE_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_ENABLE_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET_MASK       (0x2U)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET_SHIFT      (1U)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET(x)         (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_RESET_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_RESET_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK (0x78U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT (3U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_MASK (0x80U)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE(x)   (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_MASK (0x100U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_SHIFT (8U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE(x)  (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0xFE00U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (9U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK (0x70000U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT (16U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK)

/*! @name DLL_STATUS - DLL Status */
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_MASK   (0x1U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_SHIFT  (0U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_MASK)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK_MASK   (0x2U)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK_SHIFT  (1U)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_REF_LOCK_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_REF_LOCK_MASK)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK    (0x1FCU)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT   (2U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK    (0xFE00U)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT   (9U)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK)

/*! @name CLK_TUNE_CTRL_STATUS - CLK Tuning Control and Status */
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK (0xFU)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT (0U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK (0xF0U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT (4U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK (0x7F00U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT (8U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_MASK  (0x8000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_SHIFT (15U)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK (0xF0000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT (16U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK (0xF00000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT (20U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK (0x7F000000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT (24U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_MASK  (0x80000000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_SHIFT (31U)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_MASK)

/*! @name STROBE_DLL_CTRL - Strobe DLL Control */
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE_MASK (0x1U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE_SHIFT (0U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET_MASK (0x2U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET_SHIFT (1U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_MASK (0x38U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_SHIFT (3U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0_MASK (0x40U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0_SHIFT (6U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1_MASK (0x80U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1_SHIFT (7U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_MASK (0x100U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_SHIFT (8U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0xFE00U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (9U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_MASK)

/*! @name STROBE_DLL_STATUS - Strobe DLL Status */
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK_MASK (0x1U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK_SHIFT (0U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK_SHIFT)) & USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK_MASK)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK_MASK (0x2U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK_SHIFT (1U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK_SHIFT)) & USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK_MASK)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_MASK (0x1FCU)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_SHIFT (2U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_SHIFT)) & USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_MASK)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_MASK (0xFE00U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_SHIFT (9U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_SHIFT)) & USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_MASK)

/*! @name VEND_SPEC - Vendor Specific Register */
#define USDHC_VEND_SPEC_EXT_DMA_EN_MASK          (0x1U)
#define USDHC_VEND_SPEC_EXT_DMA_EN_SHIFT         (0U)
#define USDHC_VEND_SPEC_EXT_DMA_EN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_EXT_DMA_EN_SHIFT)) & USDHC_VEND_SPEC_EXT_DMA_EN_MASK)
#define USDHC_VEND_SPEC_VSELECT_MASK             (0x2U)
#define USDHC_VEND_SPEC_VSELECT_SHIFT            (1U)
#define USDHC_VEND_SPEC_VSELECT(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_VSELECT_SHIFT)) & USDHC_VEND_SPEC_VSELECT_MASK)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN_MASK     (0x4U)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN_SHIFT    (2U)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_CONFLICT_CHK_EN_SHIFT)) & USDHC_VEND_SPEC_CONFLICT_CHK_EN_MASK)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_MASK  (0x8U)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_SHIFT (3U)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_SHIFT)) & USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_MASK)
#define USDHC_VEND_SPEC_DAT3_CD_POL_MASK         (0x10U)
#define USDHC_VEND_SPEC_DAT3_CD_POL_SHIFT        (4U)
#define USDHC_VEND_SPEC_DAT3_CD_POL(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_DAT3_CD_POL_SHIFT)) & USDHC_VEND_SPEC_DAT3_CD_POL_MASK)
#define USDHC_VEND_SPEC_CD_POL_MASK              (0x20U)
#define USDHC_VEND_SPEC_CD_POL_SHIFT             (5U)
#define USDHC_VEND_SPEC_CD_POL(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_CD_POL_SHIFT)) & USDHC_VEND_SPEC_CD_POL_MASK)
#define USDHC_VEND_SPEC_WP_POL_MASK              (0x40U)
#define USDHC_VEND_SPEC_WP_POL_SHIFT             (6U)
#define USDHC_VEND_SPEC_WP_POL(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_WP_POL_SHIFT)) & USDHC_VEND_SPEC_WP_POL_MASK)
#define USDHC_VEND_SPEC_CLKONJ_IN_ABORT_MASK     (0x80U)
#define USDHC_VEND_SPEC_CLKONJ_IN_ABORT_SHIFT    (7U)
#define USDHC_VEND_SPEC_CLKONJ_IN_ABORT(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_CLKONJ_IN_ABORT_SHIFT)) & USDHC_VEND_SPEC_CLKONJ_IN_ABORT_MASK)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON_MASK        (0x100U)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON_SHIFT       (8U)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_FRC_SDCLK_ON_SHIFT)) & USDHC_VEND_SPEC_FRC_SDCLK_ON_MASK)
#define USDHC_VEND_SPEC_IPG_CLK_SOFT_EN_MASK     (0x800U)
#define USDHC_VEND_SPEC_IPG_CLK_SOFT_EN_SHIFT    (11U)
#define USDHC_VEND_SPEC_IPG_CLK_SOFT_EN(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_IPG_CLK_SOFT_EN_SHIFT)) & USDHC_VEND_SPEC_IPG_CLK_SOFT_EN_MASK)
#define USDHC_VEND_SPEC_HCLK_SOFT_EN_MASK        (0x1000U)
#define USDHC_VEND_SPEC_HCLK_SOFT_EN_SHIFT       (12U)
#define USDHC_VEND_SPEC_HCLK_SOFT_EN(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_HCLK_SOFT_EN_SHIFT)) & USDHC_VEND_SPEC_HCLK_SOFT_EN_MASK)
#define USDHC_VEND_SPEC_IPG_PERCLK_SOFT_EN_MASK  (0x2000U)
#define USDHC_VEND_SPEC_IPG_PERCLK_SOFT_EN_SHIFT (13U)
#define USDHC_VEND_SPEC_IPG_PERCLK_SOFT_EN(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_IPG_PERCLK_SOFT_EN_SHIFT)) & USDHC_VEND_SPEC_IPG_PERCLK_SOFT_EN_MASK)
#define USDHC_VEND_SPEC_CARD_CLK_SOFT_EN_MASK    (0x4000U)
#define USDHC_VEND_SPEC_CARD_CLK_SOFT_EN_SHIFT   (14U)
#define USDHC_VEND_SPEC_CARD_CLK_SOFT_EN(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_CARD_CLK_SOFT_EN_SHIFT)) & USDHC_VEND_SPEC_CARD_CLK_SOFT_EN_MASK)
#define USDHC_VEND_SPEC_CRC_CHK_DIS_MASK         (0x8000U)
#define USDHC_VEND_SPEC_CRC_CHK_DIS_SHIFT        (15U)
#define USDHC_VEND_SPEC_CRC_CHK_DIS(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_CRC_CHK_DIS_SHIFT)) & USDHC_VEND_SPEC_CRC_CHK_DIS_MASK)
#define USDHC_VEND_SPEC_INT_ST_VAL_MASK          (0xFF0000U)
#define USDHC_VEND_SPEC_INT_ST_VAL_SHIFT         (16U)
#define USDHC_VEND_SPEC_INT_ST_VAL(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_INT_ST_VAL_SHIFT)) & USDHC_VEND_SPEC_INT_ST_VAL_MASK)
#define USDHC_VEND_SPEC_CMD_BYTE_EN_MASK         (0x80000000U)
#define USDHC_VEND_SPEC_CMD_BYTE_EN_SHIFT        (31U)
#define USDHC_VEND_SPEC_CMD_BYTE_EN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_CMD_BYTE_EN_SHIFT)) & USDHC_VEND_SPEC_CMD_BYTE_EN_MASK)

/*! @name MMC_BOOT - MMC Boot Register */
#define USDHC_MMC_BOOT_DTOCV_ACK_MASK            (0xFU)
#define USDHC_MMC_BOOT_DTOCV_ACK_SHIFT           (0U)
#define USDHC_MMC_BOOT_DTOCV_ACK(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_DTOCV_ACK_SHIFT)) & USDHC_MMC_BOOT_DTOCV_ACK_MASK)
#define USDHC_MMC_BOOT_BOOT_ACK_MASK             (0x10U)
#define USDHC_MMC_BOOT_BOOT_ACK_SHIFT            (4U)
#define USDHC_MMC_BOOT_BOOT_ACK(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_BOOT_ACK_SHIFT)) & USDHC_MMC_BOOT_BOOT_ACK_MASK)
#define USDHC_MMC_BOOT_BOOT_MODE_MASK            (0x20U)
#define USDHC_MMC_BOOT_BOOT_MODE_SHIFT           (5U)
#define USDHC_MMC_BOOT_BOOT_MODE(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_BOOT_MODE_SHIFT)) & USDHC_MMC_BOOT_BOOT_MODE_MASK)
#define USDHC_MMC_BOOT_BOOT_EN_MASK              (0x40U)
#define USDHC_MMC_BOOT_BOOT_EN_SHIFT             (6U)
#define USDHC_MMC_BOOT_BOOT_EN(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_BOOT_EN_SHIFT)) & USDHC_MMC_BOOT_BOOT_EN_MASK)
#define USDHC_MMC_BOOT_AUTO_SABG_EN_MASK         (0x80U)
#define USDHC_MMC_BOOT_AUTO_SABG_EN_SHIFT        (7U)
#define USDHC_MMC_BOOT_AUTO_SABG_EN(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_AUTO_SABG_EN_SHIFT)) & USDHC_MMC_BOOT_AUTO_SABG_EN_MASK)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT_MASK     (0x100U)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT_SHIFT    (8U)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_DISABLE_TIME_OUT_SHIFT)) & USDHC_MMC_BOOT_DISABLE_TIME_OUT_MASK)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT_MASK         (0xFFFF0000U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT        (16U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT)) & USDHC_MMC_BOOT_BOOT_BLK_CNT_MASK)

/*! @name VEND_SPEC2 - Vendor Specific 2 Register */
#define USDHC_VEND_SPEC2_SDR104_TIMING_DIS_MASK  (0x1U)
#define USDHC_VEND_SPEC2_SDR104_TIMING_DIS_SHIFT (0U)
#define USDHC_VEND_SPEC2_SDR104_TIMING_DIS(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_SDR104_TIMING_DIS_SHIFT)) & USDHC_VEND_SPEC2_SDR104_TIMING_DIS_MASK)
#define USDHC_VEND_SPEC2_SDR104_OE_DIS_MASK      (0x2U)
#define USDHC_VEND_SPEC2_SDR104_OE_DIS_SHIFT     (1U)
#define USDHC_VEND_SPEC2_SDR104_OE_DIS(x)        (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_SDR104_OE_DIS_SHIFT)) & USDHC_VEND_SPEC2_SDR104_OE_DIS_MASK)
#define USDHC_VEND_SPEC2_SDR104_NSD_DIS_MASK     (0x4U)
#define USDHC_VEND_SPEC2_SDR104_NSD_DIS_SHIFT    (2U)
#define USDHC_VEND_SPEC2_SDR104_NSD_DIS(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_SDR104_NSD_DIS_SHIFT)) & USDHC_VEND_SPEC2_SDR104_NSD_DIS_MASK)
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST_MASK   (0x8U)
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST_SHIFT  (3U)
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_CARD_INT_D3_TEST_SHIFT)) & USDHC_VEND_SPEC2_CARD_INT_D3_TEST_MASK)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN_MASK     (0x10U)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN_SHIFT    (4U)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_TUNING_8bit_EN_SHIFT)) & USDHC_VEND_SPEC2_TUNING_8bit_EN_MASK)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN_MASK     (0x20U)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN_SHIFT    (5U)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_TUNING_1bit_EN_SHIFT)) & USDHC_VEND_SPEC2_TUNING_1bit_EN_MASK)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN_MASK      (0x40U)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN_SHIFT     (6U)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN(x)        (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_TUNING_CMD_EN_SHIFT)) & USDHC_VEND_SPEC2_TUNING_CMD_EN_MASK)
#define USDHC_VEND_SPEC2_CARD_INT_AUTO_CLR_DIS_MASK (0x80U)
#define USDHC_VEND_SPEC2_CARD_INT_AUTO_CLR_DIS_SHIFT (7U)
#define USDHC_VEND_SPEC2_CARD_INT_AUTO_CLR_DIS(x) (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_CARD_INT_AUTO_CLR_DIS_SHIFT)) & USDHC_VEND_SPEC2_CARD_INT_AUTO_CLR_DIS_MASK)
#define USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN_MASK (0x400U)
#define USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN_SHIFT (10U)
#define USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN(x) (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN_SHIFT)) & USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN_MASK)
#define USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN_MASK (0x800U)
#define USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN_SHIFT (11U)
#define USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN(x) (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN_SHIFT)) & USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN_MASK)

/*! @name TUNING_CTRL - Tuning Control Register */
#define USDHC_TUNING_CTRL_TUNING_START_TAP_MASK  (0xFFU)
#define USDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT (0U)
#define USDHC_TUNING_CTRL_TUNING_START_TAP(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT)) & USDHC_TUNING_CTRL_TUNING_START_TAP_MASK)
#define USDHC_TUNING_CTRL_TUNING_COUNTER_MASK    (0xFF00U)
#define USDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT   (8U)
#define USDHC_TUNING_CTRL_TUNING_COUNTER(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT)) & USDHC_TUNING_CTRL_TUNING_COUNTER_MASK)
#define USDHC_TUNING_CTRL_TUNING_STEP_MASK       (0x70000U)
#define USDHC_TUNING_CTRL_TUNING_STEP_SHIFT      (16U)
#define USDHC_TUNING_CTRL_TUNING_STEP(x)         (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_STEP_SHIFT)) & USDHC_TUNING_CTRL_TUNING_STEP_MASK)
#define USDHC_TUNING_CTRL_TUNING_WINDOW_MASK     (0x700000U)
#define USDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT    (20U)
#define USDHC_TUNING_CTRL_TUNING_WINDOW(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT)) & USDHC_TUNING_CTRL_TUNING_WINDOW_MASK)
#define USDHC_TUNING_CTRL_STD_TUNING_EN_MASK     (0x1000000U)
#define USDHC_TUNING_CTRL_STD_TUNING_EN_SHIFT    (24U)
#define USDHC_TUNING_CTRL_STD_TUNING_EN(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_STD_TUNING_EN_SHIFT)) & USDHC_TUNING_CTRL_STD_TUNING_EN_MASK)


/*!
 * @}
 */ /* end of group USDHC_Register_Masks */


/* USDHC - Peripheral instance base addresses */
/** Peripheral uSDHC1 base address */
#define uSDHC1_BASE                              (0x30B40000u)
/** Peripheral uSDHC1 base pointer */
#define uSDHC1                                   ((USDHC_Type *)uSDHC1_BASE)
/** Peripheral uSDHC2 base address */
#define uSDHC2_BASE                              (0x30B50000u)
/** Peripheral uSDHC2 base pointer */
#define uSDHC2                                   ((USDHC_Type *)uSDHC2_BASE)
/** Array initializer of USDHC peripheral base addresses */
#define USDHC_BASE_ADDRS                         { 0u, uSDHC1_BASE, uSDHC2_BASE }
/** Array initializer of USDHC peripheral base pointers */
#define USDHC_BASE_PTRS                          { (USDHC_Type *)0u, uSDHC1, uSDHC2 }
/** Interrupt vectors for the USDHC peripheral type */
#define USDHC_IRQS                               { NotAvail_IRQn, USDHC1_IRQn, USDHC2_IRQn }

/*!
 * @}
 */ /* end of group USDHC_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- WDOG Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Peripheral_Access_Layer WDOG Peripheral Access Layer
 * @{
 */

/** WDOG - Register Layout Typedef */
typedef struct {
  __IO uint16_t WCR;                               /**< Watchdog Control Register, offset: 0x0 */
  __IO uint16_t WSR;                               /**< Watchdog Service Register, offset: 0x2 */
  __I  uint16_t WRSR;                              /**< Watchdog Reset Status Register, offset: 0x4 */
  __IO uint16_t WICR;                              /**< Watchdog Interrupt Control Register, offset: 0x6 */
  __IO uint16_t WMCR;                              /**< Watchdog Miscellaneous Control Register, offset: 0x8 */
} WDOG_Type;

/* ----------------------------------------------------------------------------
   -- WDOG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Register_Masks WDOG Register Masks
 * @{
 */

/*! @name WCR - Watchdog Control Register */
#define WDOG_WCR_WDZST_MASK                      (0x1U)
#define WDOG_WCR_WDZST_SHIFT                     (0U)
#define WDOG_WCR_WDZST(x)                        (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_WDZST_SHIFT)) & WDOG_WCR_WDZST_MASK)
#define WDOG_WCR_WDBG_MASK                       (0x2U)
#define WDOG_WCR_WDBG_SHIFT                      (1U)
#define WDOG_WCR_WDBG(x)                         (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_WDBG_SHIFT)) & WDOG_WCR_WDBG_MASK)
#define WDOG_WCR_WDE_MASK                        (0x4U)
#define WDOG_WCR_WDE_SHIFT                       (2U)
#define WDOG_WCR_WDE(x)                          (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_WDE_SHIFT)) & WDOG_WCR_WDE_MASK)
#define WDOG_WCR_WDT_MASK                        (0x8U)
#define WDOG_WCR_WDT_SHIFT                       (3U)
#define WDOG_WCR_WDT(x)                          (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_WDT_SHIFT)) & WDOG_WCR_WDT_MASK)
#define WDOG_WCR_SRS_MASK                        (0x10U)
#define WDOG_WCR_SRS_SHIFT                       (4U)
#define WDOG_WCR_SRS(x)                          (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_SRS_SHIFT)) & WDOG_WCR_SRS_MASK)
#define WDOG_WCR_WDA_MASK                        (0x20U)
#define WDOG_WCR_WDA_SHIFT                       (5U)
#define WDOG_WCR_WDA(x)                          (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_WDA_SHIFT)) & WDOG_WCR_WDA_MASK)
#define WDOG_WCR_SRE_MASK                        (0x40U)
#define WDOG_WCR_SRE_SHIFT                       (6U)
#define WDOG_WCR_SRE(x)                          (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_SRE_SHIFT)) & WDOG_WCR_SRE_MASK)
#define WDOG_WCR_WDW_MASK                        (0x80U)
#define WDOG_WCR_WDW_SHIFT                       (7U)
#define WDOG_WCR_WDW(x)                          (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_WDW_SHIFT)) & WDOG_WCR_WDW_MASK)
#define WDOG_WCR_WT_MASK                         (0xFF00U)
#define WDOG_WCR_WT_SHIFT                        (8U)
#define WDOG_WCR_WT(x)                           (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_WT_SHIFT)) & WDOG_WCR_WT_MASK)

/*! @name WSR - Watchdog Service Register */
#define WDOG_WSR_WSR_MASK                        (0xFFFFU)
#define WDOG_WSR_WSR_SHIFT                       (0U)
#define WDOG_WSR_WSR(x)                          (((uint16_t)(((uint16_t)(x)) << WDOG_WSR_WSR_SHIFT)) & WDOG_WSR_WSR_MASK)

/*! @name WRSR - Watchdog Reset Status Register */
#define WDOG_WRSR_SFTW_MASK                      (0x1U)
#define WDOG_WRSR_SFTW_SHIFT                     (0U)
#define WDOG_WRSR_SFTW(x)                        (((uint16_t)(((uint16_t)(x)) << WDOG_WRSR_SFTW_SHIFT)) & WDOG_WRSR_SFTW_MASK)
#define WDOG_WRSR_TOUT_MASK                      (0x2U)
#define WDOG_WRSR_TOUT_SHIFT                     (1U)
#define WDOG_WRSR_TOUT(x)                        (((uint16_t)(((uint16_t)(x)) << WDOG_WRSR_TOUT_SHIFT)) & WDOG_WRSR_TOUT_MASK)
#define WDOG_WRSR_POR_MASK                       (0x10U)
#define WDOG_WRSR_POR_SHIFT                      (4U)
#define WDOG_WRSR_POR(x)                         (((uint16_t)(((uint16_t)(x)) << WDOG_WRSR_POR_SHIFT)) & WDOG_WRSR_POR_MASK)

/*! @name WICR - Watchdog Interrupt Control Register */
#define WDOG_WICR_WICT_MASK                      (0xFFU)
#define WDOG_WICR_WICT_SHIFT                     (0U)
#define WDOG_WICR_WICT(x)                        (((uint16_t)(((uint16_t)(x)) << WDOG_WICR_WICT_SHIFT)) & WDOG_WICR_WICT_MASK)
#define WDOG_WICR_WTIS_MASK                      (0x4000U)
#define WDOG_WICR_WTIS_SHIFT                     (14U)
#define WDOG_WICR_WTIS(x)                        (((uint16_t)(((uint16_t)(x)) << WDOG_WICR_WTIS_SHIFT)) & WDOG_WICR_WTIS_MASK)
#define WDOG_WICR_WIE_MASK                       (0x8000U)
#define WDOG_WICR_WIE_SHIFT                      (15U)
#define WDOG_WICR_WIE(x)                         (((uint16_t)(((uint16_t)(x)) << WDOG_WICR_WIE_SHIFT)) & WDOG_WICR_WIE_MASK)

/*! @name WMCR - Watchdog Miscellaneous Control Register */
#define WDOG_WMCR_PDE_MASK                       (0x1U)
#define WDOG_WMCR_PDE_SHIFT                      (0U)
#define WDOG_WMCR_PDE(x)                         (((uint16_t)(((uint16_t)(x)) << WDOG_WMCR_PDE_SHIFT)) & WDOG_WMCR_PDE_MASK)


/*!
 * @}
 */ /* end of group WDOG_Register_Masks */


/* WDOG - Peripheral instance base addresses */
/** Peripheral WDOG1 base address */
#define WDOG1_BASE                               (0x30280000u)
/** Peripheral WDOG1 base pointer */
#define WDOG1                                    ((WDOG_Type *)WDOG1_BASE)
/** Peripheral WDOG2 base address */
#define WDOG2_BASE                               (0x30290000u)
/** Peripheral WDOG2 base pointer */
#define WDOG2                                    ((WDOG_Type *)WDOG2_BASE)
/** Peripheral WDOG3 base address */
#define WDOG3_BASE                               (0x302A0000u)
/** Peripheral WDOG3 base pointer */
#define WDOG3                                    ((WDOG_Type *)WDOG3_BASE)
/** Array initializer of WDOG peripheral base addresses */
#define WDOG_BASE_ADDRS                          { 0u, WDOG1_BASE, WDOG2_BASE, WDOG3_BASE }
/** Array initializer of WDOG peripheral base pointers */
#define WDOG_BASE_PTRS                           { (WDOG_Type *)0u, WDOG1, WDOG2, WDOG3 }
/** Interrupt vectors for the WDOG peripheral type */
#define WDOG_IRQS                                { NotAvail_IRQn, WDOG1_IRQn, WDOG2_IRQn, WDOG3_IRQn }

/*!
 * @}
 */ /* end of group WDOG_Peripheral_Access_Layer */


/* ----------------------------------------------------------------------------
   -- XTALOSC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC_Peripheral_Access_Layer XTALOSC Peripheral Access Layer
 * @{
 */

/** XTALOSC - Register Layout Typedef */
typedef struct {
  __IO uint32_t OSC_CTL_CFG_25M;                   /**< 25M Oscillator Control Configuration Register, offset: 0x0 */
  __IO uint32_t OSC_TEST_CFG_25M;                  /**< 25M Oscillator Test Configuration Register, offset: 0x4 */
       uint8_t RESERVED_0[32760];
  __IO uint32_t OSC_CTL_CFG_27M;                   /**< 27M Oscillator Control Configuration Register, offset: 0x8000 */
  __IO uint32_t OSC_TEST_CFG_27M;                  /**< 27M Oscillator Test Configuration Register, offset: 0x8004 */
} XTALOSC_Type;

/* ----------------------------------------------------------------------------
   -- XTALOSC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC_Register_Masks XTALOSC Register Masks
 * @{
 */

/*! @name OSC_CTL_CFG_25M - 25M Oscillator Control Configuration Register */
#define XTALOSC_OSC_CTL_CFG_25M_OSC_ALC_CTL_MASK (0x4U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_ALC_CTL_SHIFT (2U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_ALC_CTL(x)   (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_25M_OSC_ALC_CTL_SHIFT)) & XTALOSC_OSC_CTL_CFG_25M_OSC_ALC_CTL_MASK)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_HYST_CTL_MASK (0x8U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_HYST_CTL_SHIFT (3U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_HYST_CTL(x)  (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_25M_OSC_HYST_CTL_SHIFT)) & XTALOSC_OSC_CTL_CFG_25M_OSC_HYST_CTL_MASK)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_GM_SEL_MASK  (0x70U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_GM_SEL_SHIFT (4U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_GM_SEL(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_25M_OSC_GM_SEL_SHIFT)) & XTALOSC_OSC_CTL_CFG_25M_OSC_GM_SEL_MASK)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_INT_STU_MASK (0x80U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_INT_STU_SHIFT (7U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_INT_STU(x)   (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_25M_OSC_INT_STU_SHIFT)) & XTALOSC_OSC_CTL_CFG_25M_OSC_INT_STU_MASK)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_DIV_MASK     (0x1F00U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_DIV_SHIFT    (8U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_DIV(x)       (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_25M_OSC_DIV_SHIFT)) & XTALOSC_OSC_CTL_CFG_25M_OSC_DIV_MASK)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_OK_BYPASS_MASK (0x2000U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_OK_BYPASS_SHIFT (13U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_OK_BYPASS(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_25M_OSC_OK_BYPASS_SHIFT)) & XTALOSC_OSC_CTL_CFG_25M_OSC_OK_BYPASS_MASK)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_INT_MASK_MASK (0x8000U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_INT_MASK_SHIFT (15U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_INT_MASK(x)  (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_25M_OSC_INT_MASK_SHIFT)) & XTALOSC_OSC_CTL_CFG_25M_OSC_INT_MASK_MASK)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_EOCV_MASK    (0xFF0000U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_EOCV_SHIFT   (16U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_EOCV(x)      (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_25M_OSC_EOCV_SHIFT)) & XTALOSC_OSC_CTL_CFG_25M_OSC_EOCV_MASK)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_GM_TST_SEL_MASK (0x40000000U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_GM_TST_SEL_SHIFT (30U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_GM_TST_SEL(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_25M_OSC_GM_TST_SEL_SHIFT)) & XTALOSC_OSC_CTL_CFG_25M_OSC_GM_TST_SEL_MASK)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_BYPSS_MASK   (0x80000000U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_BYPSS_SHIFT  (31U)
#define XTALOSC_OSC_CTL_CFG_25M_OSC_BYPSS(x)     (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_25M_OSC_BYPSS_SHIFT)) & XTALOSC_OSC_CTL_CFG_25M_OSC_BYPSS_MASK)

/*! @name OSC_TEST_CFG_25M - 25M Oscillator Test Configuration Register */
#define XTALOSC_OSC_TEST_CFG_25M_XOSC_TESTEN_MASK (0x80000000U)
#define XTALOSC_OSC_TEST_CFG_25M_XOSC_TESTEN_SHIFT (31U)
#define XTALOSC_OSC_TEST_CFG_25M_XOSC_TESTEN(x)  (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_TEST_CFG_25M_XOSC_TESTEN_SHIFT)) & XTALOSC_OSC_TEST_CFG_25M_XOSC_TESTEN_MASK)

/*! @name OSC_CTL_CFG_27M - 27M Oscillator Control Configuration Register */
#define XTALOSC_OSC_CTL_CFG_27M_OSC_ALC_CTL_MASK (0x4U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_ALC_CTL_SHIFT (2U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_ALC_CTL(x)   (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_27M_OSC_ALC_CTL_SHIFT)) & XTALOSC_OSC_CTL_CFG_27M_OSC_ALC_CTL_MASK)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_HYST_CTL_MASK (0x8U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_HYST_CTL_SHIFT (3U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_HYST_CTL(x)  (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_27M_OSC_HYST_CTL_SHIFT)) & XTALOSC_OSC_CTL_CFG_27M_OSC_HYST_CTL_MASK)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_GM_SEL_MASK  (0x70U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_GM_SEL_SHIFT (4U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_GM_SEL(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_27M_OSC_GM_SEL_SHIFT)) & XTALOSC_OSC_CTL_CFG_27M_OSC_GM_SEL_MASK)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_INT_STU_MASK (0x80U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_INT_STU_SHIFT (7U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_INT_STU(x)   (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_27M_OSC_INT_STU_SHIFT)) & XTALOSC_OSC_CTL_CFG_27M_OSC_INT_STU_MASK)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_DIV_MASK     (0x1F00U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_DIV_SHIFT    (8U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_DIV(x)       (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_27M_OSC_DIV_SHIFT)) & XTALOSC_OSC_CTL_CFG_27M_OSC_DIV_MASK)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_OK_BYPASS_MASK (0x2000U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_OK_BYPASS_SHIFT (13U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_OK_BYPASS(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_27M_OSC_OK_BYPASS_SHIFT)) & XTALOSC_OSC_CTL_CFG_27M_OSC_OK_BYPASS_MASK)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_INT_MASK_MASK (0x8000U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_INT_MASK_SHIFT (15U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_INT_MASK(x)  (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_27M_OSC_INT_MASK_SHIFT)) & XTALOSC_OSC_CTL_CFG_27M_OSC_INT_MASK_MASK)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_EOCV_MASK    (0xFF0000U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_EOCV_SHIFT   (16U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_EOCV(x)      (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_27M_OSC_EOCV_SHIFT)) & XTALOSC_OSC_CTL_CFG_27M_OSC_EOCV_MASK)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_GM_TST_SEL_MASK (0x40000000U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_GM_TST_SEL_SHIFT (30U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_GM_TST_SEL(x) (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_27M_OSC_GM_TST_SEL_SHIFT)) & XTALOSC_OSC_CTL_CFG_27M_OSC_GM_TST_SEL_MASK)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_BYPSS_MASK   (0x80000000U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_BYPSS_SHIFT  (31U)
#define XTALOSC_OSC_CTL_CFG_27M_OSC_BYPSS(x)     (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_CTL_CFG_27M_OSC_BYPSS_SHIFT)) & XTALOSC_OSC_CTL_CFG_27M_OSC_BYPSS_MASK)

/*! @name OSC_TEST_CFG_27M - 27M Oscillator Test Configuration Register */
#define XTALOSC_OSC_TEST_CFG_27M_XOSC_TESTEN_MASK (0x80000000U)
#define XTALOSC_OSC_TEST_CFG_27M_XOSC_TESTEN_SHIFT (31U)
#define XTALOSC_OSC_TEST_CFG_27M_XOSC_TESTEN(x)  (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC_TEST_CFG_27M_XOSC_TESTEN_SHIFT)) & XTALOSC_OSC_TEST_CFG_27M_XOSC_TESTEN_MASK)


/*!
 * @}
 */ /* end of group XTALOSC_Register_Masks */


/* XTALOSC - Peripheral instance base addresses */
/** Peripheral XTALOSC base address */
#define XTALOSC_BASE                             (0x30270000u)
/** Peripheral XTALOSC base pointer */
#define XTALOSC                                  ((XTALOSC_Type *)XTALOSC_BASE)
/** Array initializer of XTALOSC peripheral base addresses */
#define XTALOSC_BASE_ADDRS                       { XTALOSC_BASE }
/** Array initializer of XTALOSC peripheral base pointers */
#define XTALOSC_BASE_PTRS                        { XTALOSC }

/*!
 * @}
 */ /* end of group XTALOSC_Peripheral_Access_Layer */


/*
** End of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #pragma pop
#elif defined(__GNUC__)
  /* leave anonymous unions enabled */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=default
#else
  #error Not supported compiler type
#endif

/*!
 * @}
 */ /* end of group Peripheral_access_layer */


/* ----------------------------------------------------------------------------
   -- Macros for use with bit field definitions (xxx_SHIFT, xxx_MASK).
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Bit_Field_Generic_Macros Macros for use with bit field definitions (xxx_SHIFT, xxx_MASK).
 * @{
 */

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang system_header
  #endif
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma system_include
#endif

/**
 * @brief Mask and left-shift a bit field value for use in a register bit range.
 * @param field Name of the register bit field.
 * @param value Value of the bit field.
 * @return Masked and shifted value.
 */
#define NXP_VAL2FLD(field, value)    (((value) << (field ## _SHIFT)) & (field ## _MASK))
/**
 * @brief Mask and right-shift a register value to extract a bit field value.
 * @param field Name of the register bit field.
 * @param value Value of the register.
 * @return Masked and shifted bit field value.
 */
#define NXP_FLD2VAL(field, value)    (((value) & (field ## _MASK)) >> (field ## _SHIFT))

/*!
 * @}
 */ /* end of group Bit_Field_Generic_Macros */


/* ----------------------------------------------------------------------------
   -- SDK Compatibility
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDK_Compatibility_Symbols SDK Compatibility
 * @{
 */

/* No SDK compatibility issues. */

/*!
 * @}
 */ /* end of group SDK_Compatibility_Symbols */


#endif  /* _MIMX8MQ6_CM4_H_ */

